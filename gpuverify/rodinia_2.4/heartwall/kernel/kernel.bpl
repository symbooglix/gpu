type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x: [bv32]bv32, y: bv32) returns (z$1: bv32, A$1: [bv32]bv32, z$2: bv32, A$2: [bv32]bv32);



procedure _ATOMIC_OP8(x: [bv32]bv8, y: bv32) returns (z$1: bv8, A$1: [bv32]bv8, z$2: bv8, A$2: [bv32]bv8);



axiom {:array_info "$$d_frame"} {:global} {:elem_width 32} {:source_name "d_frame"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_frame: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_frame: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_frame: bool;

const $arrayId$$d_frame: arrayId;

axiom $arrayId$$d_frame == 1bv6;

var {:source_name "d_endoRow"} {:global} $$d_endoRow: [bv32]bv32;

axiom {:array_info "$$d_endoRow"} {:global} {:elem_width 32} {:source_name "d_endoRow"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_endoRow: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_endoRow: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_endoRow: bool;

const $arrayId$$d_endoRow: arrayId;

axiom $arrayId$$d_endoRow == 2bv6;

var {:source_name "d_endoCol"} {:global} $$d_endoCol: [bv32]bv32;

axiom {:array_info "$$d_endoCol"} {:global} {:elem_width 32} {:source_name "d_endoCol"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_endoCol: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_endoCol: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_endoCol: bool;

const $arrayId$$d_endoCol: arrayId;

axiom $arrayId$$d_endoCol == 3bv6;

var {:source_name "d_tEndoRowLoc"} {:global} $$d_tEndoRowLoc: [bv32]bv32;

axiom {:array_info "$$d_tEndoRowLoc"} {:global} {:elem_width 32} {:source_name "d_tEndoRowLoc"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_tEndoRowLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc: bool;

const $arrayId$$d_tEndoRowLoc: arrayId;

axiom $arrayId$$d_tEndoRowLoc == 4bv6;

var {:source_name "d_tEndoColLoc"} {:global} $$d_tEndoColLoc: [bv32]bv32;

axiom {:array_info "$$d_tEndoColLoc"} {:global} {:elem_width 32} {:source_name "d_tEndoColLoc"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_tEndoColLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_tEndoColLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc: bool;

const $arrayId$$d_tEndoColLoc: arrayId;

axiom $arrayId$$d_tEndoColLoc == 5bv6;

var {:source_name "d_epiRow"} {:global} $$d_epiRow: [bv32]bv32;

axiom {:array_info "$$d_epiRow"} {:global} {:elem_width 32} {:source_name "d_epiRow"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_epiRow: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_epiRow: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_epiRow: bool;

const $arrayId$$d_epiRow: arrayId;

axiom $arrayId$$d_epiRow == 6bv6;

var {:source_name "d_epiCol"} {:global} $$d_epiCol: [bv32]bv32;

axiom {:array_info "$$d_epiCol"} {:global} {:elem_width 32} {:source_name "d_epiCol"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_epiCol: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_epiCol: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_epiCol: bool;

const $arrayId$$d_epiCol: arrayId;

axiom $arrayId$$d_epiCol == 7bv6;

var {:source_name "d_tEpiRowLoc"} {:global} $$d_tEpiRowLoc: [bv32]bv32;

axiom {:array_info "$$d_tEpiRowLoc"} {:global} {:elem_width 32} {:source_name "d_tEpiRowLoc"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_tEpiRowLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc: bool;

const $arrayId$$d_tEpiRowLoc: arrayId;

axiom $arrayId$$d_tEpiRowLoc == 8bv6;

var {:source_name "d_tEpiColLoc"} {:global} $$d_tEpiColLoc: [bv32]bv32;

axiom {:array_info "$$d_tEpiColLoc"} {:global} {:elem_width 32} {:source_name "d_tEpiColLoc"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_tEpiColLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_tEpiColLoc: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc: bool;

const $arrayId$$d_tEpiColLoc: arrayId;

axiom $arrayId$$d_tEpiColLoc == 9bv6;

var {:source_name "d_endoT"} {:global} $$d_endoT: [bv32]bv32;

axiom {:array_info "$$d_endoT"} {:global} {:elem_width 32} {:source_name "d_endoT"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_endoT: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_endoT: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_endoT: bool;

const $arrayId$$d_endoT: arrayId;

axiom $arrayId$$d_endoT == 10bv6;

var {:source_name "d_epiT"} {:global} $$d_epiT: [bv32]bv32;

axiom {:array_info "$$d_epiT"} {:global} {:elem_width 32} {:source_name "d_epiT"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_epiT: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_epiT: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_epiT: bool;

const $arrayId$$d_epiT: arrayId;

axiom $arrayId$$d_epiT == 11bv6;

var {:source_name "d_in2_all"} {:global} $$d_in2_all: [bv32]bv32;

axiom {:array_info "$$d_in2_all"} {:global} {:elem_width 32} {:source_name "d_in2_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_all: bool;

const $arrayId$$d_in2_all: arrayId;

axiom $arrayId$$d_in2_all == 12bv6;

var {:source_name "d_conv_all"} {:global} $$d_conv_all: [bv32]bv32;

axiom {:array_info "$$d_conv_all"} {:global} {:elem_width 32} {:source_name "d_conv_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_conv_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_conv_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_conv_all: bool;

const $arrayId$$d_conv_all: arrayId;

axiom $arrayId$$d_conv_all == 13bv6;

var {:source_name "d_in2_pad_cumv_all"} {:global} $$d_in2_pad_cumv_all: [bv32]bv32;

axiom {:array_info "$$d_in2_pad_cumv_all"} {:global} {:elem_width 32} {:source_name "d_in2_pad_cumv_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_pad_cumv_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all: bool;

const $arrayId$$d_in2_pad_cumv_all: arrayId;

axiom $arrayId$$d_in2_pad_cumv_all == 14bv6;

var {:source_name "d_in2_pad_cumv_sel_all"} {:global} $$d_in2_pad_cumv_sel_all: [bv32]bv32;

axiom {:array_info "$$d_in2_pad_cumv_sel_all"} {:global} {:elem_width 32} {:source_name "d_in2_pad_cumv_sel_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all: bool;

const $arrayId$$d_in2_pad_cumv_sel_all: arrayId;

axiom $arrayId$$d_in2_pad_cumv_sel_all == 15bv6;

var {:source_name "d_in2_sub_cumh_all"} {:global} $$d_in2_sub_cumh_all: [bv32]bv32;

axiom {:array_info "$$d_in2_sub_cumh_all"} {:global} {:elem_width 32} {:source_name "d_in2_sub_cumh_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all: bool;

const $arrayId$$d_in2_sub_cumh_all: arrayId;

axiom $arrayId$$d_in2_sub_cumh_all == 16bv6;

var {:source_name "d_in2_sub_cumh_sel_all"} {:global} $$d_in2_sub_cumh_sel_all: [bv32]bv32;

axiom {:array_info "$$d_in2_sub_cumh_sel_all"} {:global} {:elem_width 32} {:source_name "d_in2_sub_cumh_sel_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all: bool;

const $arrayId$$d_in2_sub_cumh_sel_all: arrayId;

axiom $arrayId$$d_in2_sub_cumh_sel_all == 17bv6;

var {:source_name "d_in2_sub2_all"} {:global} $$d_in2_sub2_all: [bv32]bv32;

axiom {:array_info "$$d_in2_sub2_all"} {:global} {:elem_width 32} {:source_name "d_in2_sub2_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_sub2_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_sub2_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all: bool;

const $arrayId$$d_in2_sub2_all: arrayId;

axiom $arrayId$$d_in2_sub2_all == 18bv6;

var {:source_name "d_in2_sqr_all"} {:global} $$d_in2_sqr_all: [bv32]bv32;

axiom {:array_info "$$d_in2_sqr_all"} {:global} {:elem_width 32} {:source_name "d_in2_sqr_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_sqr_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_sqr_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all: bool;

const $arrayId$$d_in2_sqr_all: arrayId;

axiom $arrayId$$d_in2_sqr_all == 19bv6;

var {:source_name "d_in2_sqr_sub2_all"} {:global} $$d_in2_sqr_sub2_all: [bv32]bv32;

axiom {:array_info "$$d_in2_sqr_sub2_all"} {:global} {:elem_width 32} {:source_name "d_in2_sqr_sub2_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all: bool;

const $arrayId$$d_in2_sqr_sub2_all: arrayId;

axiom $arrayId$$d_in2_sqr_sub2_all == 20bv6;

var {:source_name "d_in_sqr_all"} {:global} $$d_in_sqr_all: [bv32]bv32;

axiom {:array_info "$$d_in_sqr_all"} {:global} {:elem_width 32} {:source_name "d_in_sqr_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in_sqr_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in_sqr_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in_sqr_all: bool;

const $arrayId$$d_in_sqr_all: arrayId;

axiom $arrayId$$d_in_sqr_all == 21bv6;

var {:source_name "d_tMask_all"} {:global} $$d_tMask_all: [bv32]bv32;

axiom {:array_info "$$d_tMask_all"} {:global} {:elem_width 32} {:source_name "d_tMask_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_tMask_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_tMask_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_tMask_all: bool;

const $arrayId$$d_tMask_all: arrayId;

axiom $arrayId$$d_tMask_all == 22bv6;

var {:source_name "d_mask_conv_all"} {:global} $$d_mask_conv_all: [bv32]bv32;

axiom {:array_info "$$d_mask_conv_all"} {:global} {:elem_width 32} {:source_name "d_mask_conv_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_mask_conv_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_mask_conv_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_mask_conv_all: bool;

const $arrayId$$d_mask_conv_all: arrayId;

axiom $arrayId$$d_mask_conv_all == 23bv6;

var {:source_name "d_in_mod_temp_all"} {:global} $$d_in_mod_temp_all: [bv32]bv32;

axiom {:array_info "$$d_in_mod_temp_all"} {:global} {:elem_width 32} {:source_name "d_in_mod_temp_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_in_mod_temp_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all: bool;

const $arrayId$$d_in_mod_temp_all: arrayId;

axiom $arrayId$$d_in_mod_temp_all == 24bv6;

var {:source_name "in_partial_sum_all"} {:global} $$in_partial_sum_all: [bv32]bv32;

axiom {:array_info "$$in_partial_sum_all"} {:global} {:elem_width 32} {:source_name "in_partial_sum_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in_partial_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in_partial_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in_partial_sum_all: bool;

const $arrayId$$in_partial_sum_all: arrayId;

axiom $arrayId$$in_partial_sum_all == 25bv6;

var {:source_name "in_sqr_partial_sum_all"} {:global} $$in_sqr_partial_sum_all: [bv32]bv32;

axiom {:array_info "$$in_sqr_partial_sum_all"} {:global} {:elem_width 32} {:source_name "in_sqr_partial_sum_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all: bool;

const $arrayId$$in_sqr_partial_sum_all: arrayId;

axiom $arrayId$$in_sqr_partial_sum_all == 26bv6;

var {:source_name "par_max_val_all"} {:global} $$par_max_val_all: [bv32]bv32;

axiom {:array_info "$$par_max_val_all"} {:global} {:elem_width 32} {:source_name "par_max_val_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$par_max_val_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$par_max_val_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$par_max_val_all: bool;

const $arrayId$$par_max_val_all: arrayId;

axiom $arrayId$$par_max_val_all == 27bv6;

var {:source_name "par_max_coo_all"} {:global} $$par_max_coo_all: [bv32]bv32;

axiom {:array_info "$$par_max_coo_all"} {:global} {:elem_width 32} {:source_name "par_max_coo_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$par_max_coo_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$par_max_coo_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$par_max_coo_all: bool;

const $arrayId$$par_max_coo_all: arrayId;

axiom $arrayId$$par_max_coo_all == 28bv6;

var {:source_name "in_final_sum_all"} {:global} $$in_final_sum_all: [bv32]bv32;

axiom {:array_info "$$in_final_sum_all"} {:global} {:elem_width 32} {:source_name "in_final_sum_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in_final_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in_final_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in_final_sum_all: bool;

const $arrayId$$in_final_sum_all: arrayId;

axiom $arrayId$$in_final_sum_all == 29bv6;

var {:source_name "in_sqr_final_sum_all"} {:global} $$in_sqr_final_sum_all: [bv32]bv32;

axiom {:array_info "$$in_sqr_final_sum_all"} {:global} {:elem_width 32} {:source_name "in_sqr_final_sum_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in_sqr_final_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all: bool;

const $arrayId$$in_sqr_final_sum_all: arrayId;

axiom $arrayId$$in_sqr_final_sum_all == 30bv6;

var {:source_name "denomT_all"} {:global} $$denomT_all: [bv32]bv32;

axiom {:array_info "$$denomT_all"} {:global} {:elem_width 32} {:source_name "denomT_all"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$denomT_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$denomT_all: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$denomT_all: bool;

const $arrayId$$denomT_all: arrayId;

axiom $arrayId$$denomT_all == 31bv6;

axiom {:array_info "$$checksum"} {:global} {:elem_width 32} {:source_name "checksum"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$checksum: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$checksum: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$checksum: bool;

const $arrayId$$checksum: arrayId;

axiom $arrayId$$checksum == 32bv6;

axiom {:array_info "$$d_common"} {:elem_width 8} {:source_name "d_common"} {:source_elem_width 3104} {:source_dimensions "1"} true;

const $arrayId$$d_common: arrayId;

axiom $arrayId$$d_common == 33bv6;

type ptr = bv32;

type arrayId = bv6;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr
{
  base ++ offset[26:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId
{
  p[32:26]
}

function {:inline true} offset#MKPTR(p: ptr) : bv32
{
  0bv6 ++ p[26:0]
}

const $arrayId$$null$: arrayId;

axiom $arrayId$$null$ == 0bv6;

const _WATCHED_OFFSET: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

function FABS32(bv32) : bv32;

function FADD32(bv32, bv32) : bv32;

function FDIV32(bv32, bv32) : bv32;

function FLT32(bv32, bv32) : bool;

function FMUL32(bv32, bv32) : bv32;

function FSQRT32(bv32) : bv32;

function FSUB32(bv32, bv32) : bv32;

function SI32_TO_FP32(bv32) : bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;

function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;

function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;

function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;

function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;

function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;

function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;

procedure {:source_name "kernel_gpu_opencl"} {:kernel} $kernel_gpu_opencl($d_common.coerce0: bv32, $d_common.coerce1: bv32, $d_common.coerce2: bv32, $d_common.coerce3: bv32, $d_common.coerce4: bv32, $d_common.coerce5: bv32, $d_common.coerce6: bv32, $d_common.coerce7: bv32, $d_common.coerce8: bv32, $d_common.coerce9: bv32, $d_common.coerce10: bv32, $d_common.coerce11: bv32, $d_common.coerce12: bv32, $d_common.coerce13: bv32, $d_common.coerce14: bv32, $d_common.coerce15: bv32, $d_common.coerce16: bv32, $d_common.coerce17: bv32, $d_common.coerce18: bv32, $d_common.coerce19: bv32, $d_common.coerce20: bv32, $d_common.coerce21: bv32, $d_common.coerce22: bv32, $d_common.coerce23: bv32, $d_common.coerce24: bv32, $d_common.coerce25: bv32, $d_common.coerce26: bv32, $d_common.coerce27: bv32, $d_common.coerce28: bv32, $d_common.coerce29: bv32, $d_common.coerce30: bv32, $d_common.coerce31: bv32, $d_common.coerce32: bv32, $d_common.coerce33: bv32, $d_common.coerce34: bv32, $d_common.coerce35: bv32, $d_common.coerce36: bv32, $d_common.coerce37: bv32, $d_common.coerce38: bv32, $d_common.coerce39: bv32, $d_common.coerce40: bv32, $d_common.coerce41: bv32, $d_common.coerce42: bv32, $d_common.coerce43: bv32, $d_common.coerce44: bv32, $d_common.coerce45: bv32, $d_common.coerce46: bv32, $d_common.coerce47: bv32, $d_common.coerce48: bv32, $d_common.coerce49: bv32, $d_common.coerce50: bv32, $d_common.coerce51: bv32, $d_common.coerce52: bv32, $d_common.coerce53: bv32, $d_common.coerce54: bv32, $d_common.coerce55: bv32, $d_common.coerce56: bv32, $d_common.coerce57: bv32, $d_common.coerce58: bv32, $d_common.coerce59: bv32, $d_common.coerce60: bv32, $d_common.coerce61: bv32, $d_common.coerce62: bv32, $d_common.coerce63: bv32, $d_common.coerce64: bv32, $d_common.coerce65: bv32, $d_common.coerce66: bv32, $d_common.coerce67: bv32, $d_common.coerce68: bv32, $d_common.coerce69: bv32, $d_common.coerce70: bv32, $d_common.coerce71: bv32, $d_common.coerce72: bv32, $d_common.coerce73: bv32, $d_common.coerce74: bv32, $d_common.coerce75: bv32, $d_common.coerce76: bv32, $d_common.coerce77: bv32, $d_common.coerce78: bv32, $d_common.coerce79: bv32, $d_common.coerce80: bv32, $d_common.coerce81: bv32, $d_common.coerce82: bv32, $d_common.coerce83: bv32, $d_common.coerce84: bv32, $d_common.coerce85: bv32, $d_common.coerce86: bv32, $d_common.coerce87: bv32, $d_common.coerce88: bv32, $d_common.coerce89: bv32, $d_common.coerce90: bv32, $d_common.coerce91: bv32, $d_common.coerce92: bv32, $d_common.coerce93: bv32, $d_common.coerce94: bv32, $d_common.coerce95: bv32, $d_common.coerce96: bv32, $d_frame_no: bv32);
  requires {:sourceloc_num 0} {:thread 1} (if $d_frame_no == 1bv32 then 1bv1 else 0bv1) != 0bv1;
  requires !_READ_HAS_OCCURRED_$$d_frame && !_WRITE_HAS_OCCURRED_$$d_frame && !_ATOMIC_HAS_OCCURRED_$$d_frame;
  requires !_READ_HAS_OCCURRED_$$d_endoRow && !_WRITE_HAS_OCCURRED_$$d_endoRow && !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
  requires !_READ_HAS_OCCURRED_$$d_endoCol && !_WRITE_HAS_OCCURRED_$$d_endoCol && !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
  requires !_READ_HAS_OCCURRED_$$d_tEndoRowLoc && !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc && !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
  requires !_READ_HAS_OCCURRED_$$d_tEndoColLoc && !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc && !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
  requires !_READ_HAS_OCCURRED_$$d_epiRow && !_WRITE_HAS_OCCURRED_$$d_epiRow && !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
  requires !_READ_HAS_OCCURRED_$$d_epiCol && !_WRITE_HAS_OCCURRED_$$d_epiCol && !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
  requires !_READ_HAS_OCCURRED_$$d_tEpiRowLoc && !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc && !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
  requires !_READ_HAS_OCCURRED_$$d_tEpiColLoc && !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc && !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
  requires !_READ_HAS_OCCURRED_$$d_endoT && !_WRITE_HAS_OCCURRED_$$d_endoT && !_ATOMIC_HAS_OCCURRED_$$d_endoT;
  requires !_READ_HAS_OCCURRED_$$d_epiT && !_WRITE_HAS_OCCURRED_$$d_epiT && !_ATOMIC_HAS_OCCURRED_$$d_epiT;
  requires !_READ_HAS_OCCURRED_$$d_in2_all && !_WRITE_HAS_OCCURRED_$$d_in2_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
  requires !_READ_HAS_OCCURRED_$$d_conv_all && !_WRITE_HAS_OCCURRED_$$d_conv_all && !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
  requires !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all && !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
  requires !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
  requires !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all && !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
  requires !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
  requires !_READ_HAS_OCCURRED_$$d_in2_sub2_all && !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
  requires !_READ_HAS_OCCURRED_$$d_in2_sqr_all && !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
  requires !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all && !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all && !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
  requires !_READ_HAS_OCCURRED_$$d_in_sqr_all && !_WRITE_HAS_OCCURRED_$$d_in_sqr_all && !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
  requires !_READ_HAS_OCCURRED_$$d_tMask_all && !_WRITE_HAS_OCCURRED_$$d_tMask_all && !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
  requires !_READ_HAS_OCCURRED_$$d_mask_conv_all && !_WRITE_HAS_OCCURRED_$$d_mask_conv_all && !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
  requires !_READ_HAS_OCCURRED_$$d_in_mod_temp_all && !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all && !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
  requires !_READ_HAS_OCCURRED_$$in_partial_sum_all && !_WRITE_HAS_OCCURRED_$$in_partial_sum_all && !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
  requires !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all && !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all && !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
  requires !_READ_HAS_OCCURRED_$$par_max_val_all && !_WRITE_HAS_OCCURRED_$$par_max_val_all && !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
  requires !_READ_HAS_OCCURRED_$$par_max_coo_all && !_WRITE_HAS_OCCURRED_$$par_max_coo_all && !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
  requires !_READ_HAS_OCCURRED_$$in_final_sum_all && !_WRITE_HAS_OCCURRED_$$in_final_sum_all && !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
  requires !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all && !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all && !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
  requires !_READ_HAS_OCCURRED_$$denomT_all && !_WRITE_HAS_OCCURRED_$$denomT_all && !_ATOMIC_HAS_OCCURRED_$$denomT_all;
  requires !_READ_HAS_OCCURRED_$$checksum && !_WRITE_HAS_OCCURRED_$$checksum && !_ATOMIC_HAS_OCCURRED_$$checksum;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> local_id_x$1 != local_id_x$2 || local_id_y$1 != local_id_y$2 || local_id_z$1 != local_id_z$2;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING, _READ_HAS_OCCURRED_$$d_tEpiRowLoc, _READ_HAS_OCCURRED_$$d_tEndoRowLoc, _WRITE_HAS_OCCURRED_$$d_epiRow, _WRITE_READ_BENIGN_FLAG_$$d_epiRow, _WRITE_READ_BENIGN_FLAG_$$d_epiRow, _WRITE_HAS_OCCURRED_$$d_endoRow, _WRITE_READ_BENIGN_FLAG_$$d_endoRow, _WRITE_READ_BENIGN_FLAG_$$d_endoRow, _READ_HAS_OCCURRED_$$d_tEndoColLoc, _READ_HAS_OCCURRED_$$d_tEpiColLoc, _WRITE_HAS_OCCURRED_$$d_endoCol, _WRITE_READ_BENIGN_FLAG_$$d_endoCol, _WRITE_READ_BENIGN_FLAG_$$d_endoCol, _WRITE_HAS_OCCURRED_$$d_epiCol, _WRITE_READ_BENIGN_FLAG_$$d_epiCol, _WRITE_READ_BENIGN_FLAG_$$d_epiCol, _READ_HAS_OCCURRED_$$d_epiRow, _READ_HAS_OCCURRED_$$d_endoRow, _READ_HAS_OCCURRED_$$d_endoCol, _READ_HAS_OCCURRED_$$d_epiCol, _READ_HAS_OCCURRED_$$d_endoT, _READ_HAS_OCCURRED_$$d_epiT, _WRITE_HAS_OCCURRED_$$d_endoT, _WRITE_READ_BENIGN_FLAG_$$d_endoT, _WRITE_READ_BENIGN_FLAG_$$d_endoT, _WRITE_HAS_OCCURRED_$$d_epiT, _WRITE_READ_BENIGN_FLAG_$$d_epiT, _WRITE_READ_BENIGN_FLAG_$$d_epiT, _TRACKING, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_all, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all, _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all, _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all, _TRACKING, _READ_HAS_OCCURRED_$$d_in_mod_temp_all, _READ_HAS_OCCURRED_$$d_in2_all, _WRITE_HAS_OCCURRED_$$d_conv_all, _WRITE_READ_BENIGN_FLAG_$$d_conv_all, _WRITE_READ_BENIGN_FLAG_$$d_conv_all, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all, _TRACKING, _READ_HAS_OCCURRED_$$d_in2_pad_cumv_all, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all, _TRACKING, _TRACKING, _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all, _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all, _TRACKING, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_sub2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all, _TRACKING, _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all, _READ_HAS_OCCURRED_$$d_in2_sub2_all, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_sqr_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all, _TRACKING, _READ_HAS_OCCURRED_$$d_in2_sqr_all, _TRACKING, _TRACKING, _TRACKING, _TRACKING, _TRACKING, _TRACKING, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all, _TRACKING, _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all, _TRACKING, _TRACKING, _WRITE_HAS_OCCURRED_$$d_in_sqr_all, _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all, _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all, _TRACKING, _WRITE_HAS_OCCURRED_$$in_partial_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all, _TRACKING, _READ_HAS_OCCURRED_$$d_in_sqr_all, _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all, _TRACKING, _WRITE_HAS_OCCURRED_$$in_final_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all, _READ_HAS_OCCURRED_$$in_final_sum_all, _READ_HAS_OCCURRED_$$in_partial_sum_all, _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all, _READ_HAS_OCCURRED_$$in_sqr_final_sum_all, _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all, _TRACKING, _WRITE_HAS_OCCURRED_$$denomT_all, _WRITE_READ_BENIGN_FLAG_$$denomT_all, _WRITE_READ_BENIGN_FLAG_$$denomT_all, _TRACKING, _READ_HAS_OCCURRED_$$denomT_all, _TRACKING, _READ_HAS_OCCURRED_$$d_conv_all, _TRACKING, _TRACKING, _WRITE_HAS_OCCURRED_$$d_tMask_all, _WRITE_READ_BENIGN_FLAG_$$d_tMask_all, _WRITE_READ_BENIGN_FLAG_$$d_tMask_all, _TRACKING, _READ_HAS_OCCURRED_$$d_tMask_all, _WRITE_HAS_OCCURRED_$$d_mask_conv_all, _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all, _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all, _TRACKING, _READ_HAS_OCCURRED_$$d_mask_conv_all, _WRITE_HAS_OCCURRED_$$par_max_coo_all, _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all, _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all, _WRITE_HAS_OCCURRED_$$par_max_val_all, _WRITE_READ_BENIGN_FLAG_$$par_max_val_all, _WRITE_READ_BENIGN_FLAG_$$par_max_val_all, _TRACKING, _READ_HAS_OCCURRED_$$par_max_val_all, _READ_HAS_OCCURRED_$$par_max_coo_all, _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc, _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc, _WRITE_HAS_OCCURRED_$$d_tEndoColLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc, _WRITE_HAS_OCCURRED_$$d_tEpiColLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc, _TRACKING, _TRACKING, _TRACKING;



implementation {:source_name "kernel_gpu_opencl"} {:kernel} $kernel_gpu_opencl($d_common.coerce0: bv32, $d_common.coerce1: bv32, $d_common.coerce2: bv32, $d_common.coerce3: bv32, $d_common.coerce4: bv32, $d_common.coerce5: bv32, $d_common.coerce6: bv32, $d_common.coerce7: bv32, $d_common.coerce8: bv32, $d_common.coerce9: bv32, $d_common.coerce10: bv32, $d_common.coerce11: bv32, $d_common.coerce12: bv32, $d_common.coerce13: bv32, $d_common.coerce14: bv32, $d_common.coerce15: bv32, $d_common.coerce16: bv32, $d_common.coerce17: bv32, $d_common.coerce18: bv32, $d_common.coerce19: bv32, $d_common.coerce20: bv32, $d_common.coerce21: bv32, $d_common.coerce22: bv32, $d_common.coerce23: bv32, $d_common.coerce24: bv32, $d_common.coerce25: bv32, $d_common.coerce26: bv32, $d_common.coerce27: bv32, $d_common.coerce28: bv32, $d_common.coerce29: bv32, $d_common.coerce30: bv32, $d_common.coerce31: bv32, $d_common.coerce32: bv32, $d_common.coerce33: bv32, $d_common.coerce34: bv32, $d_common.coerce35: bv32, $d_common.coerce36: bv32, $d_common.coerce37: bv32, $d_common.coerce38: bv32, $d_common.coerce39: bv32, $d_common.coerce40: bv32, $d_common.coerce41: bv32, $d_common.coerce42: bv32, $d_common.coerce43: bv32, $d_common.coerce44: bv32, $d_common.coerce45: bv32, $d_common.coerce46: bv32, $d_common.coerce47: bv32, $d_common.coerce48: bv32, $d_common.coerce49: bv32, $d_common.coerce50: bv32, $d_common.coerce51: bv32, $d_common.coerce52: bv32, $d_common.coerce53: bv32, $d_common.coerce54: bv32, $d_common.coerce55: bv32, $d_common.coerce56: bv32, $d_common.coerce57: bv32, $d_common.coerce58: bv32, $d_common.coerce59: bv32, $d_common.coerce60: bv32, $d_common.coerce61: bv32, $d_common.coerce62: bv32, $d_common.coerce63: bv32, $d_common.coerce64: bv32, $d_common.coerce65: bv32, $d_common.coerce66: bv32, $d_common.coerce67: bv32, $d_common.coerce68: bv32, $d_common.coerce69: bv32, $d_common.coerce70: bv32, $d_common.coerce71: bv32, $d_common.coerce72: bv32, $d_common.coerce73: bv32, $d_common.coerce74: bv32, $d_common.coerce75: bv32, $d_common.coerce76: bv32, $d_common.coerce77: bv32, $d_common.coerce78: bv32, $d_common.coerce79: bv32, $d_common.coerce80: bv32, $d_common.coerce81: bv32, $d_common.coerce82: bv32, $d_common.coerce83: bv32, $d_common.coerce84: bv32, $d_common.coerce85: bv32, $d_common.coerce86: bv32, $d_common.coerce87: bv32, $d_common.coerce88: bv32, $d_common.coerce89: bv32, $d_common.coerce90: bv32, $d_common.coerce91: bv32, $d_common.coerce92: bv32, $d_common.coerce93: bv32, $d_common.coerce94: bv32, $d_common.coerce95: bv32, $d_common.coerce96: bv32, $d_frame_no: bv32)
{
  var $d_unique_point_no.0$1: bv32;
  var $d_unique_point_no.0$2: bv32;
  var $d_unique_d_Row.0$1: ptr;
  var $d_unique_d_Row.0$2: ptr;
  var $d_unique_d_Col.0$1: ptr;
  var $d_unique_d_Col.0$2: ptr;
  var $d_unique_d_tRowLoc.0$1: ptr;
  var $d_unique_d_tRowLoc.0$2: ptr;
  var $d_unique_d_tColLoc.0$1: ptr;
  var $d_unique_d_tColLoc.0$2: ptr;
  var $d_in.0$1: ptr;
  var $d_in.0$2: ptr;
  var $ei_new.0$1: bv32;
  var $ei_new.0$2: bv32;
  var $row.0$1: bv32;
  var $row.0$2: bv32;
  var $col.0$1: bv32;
  var $col.0$2: bv32;
  var $ei_new.1$1: bv32;
  var $ei_new.1$2: bv32;
  var $row.1$1: bv32;
  var $row.1$2: bv32;
  var $col.1$1: bv32;
  var $col.1$2: bv32;
  var $ei_new.2$1: bv32;
  var $ei_new.2$2: bv32;
  var $row.2$1: bv32;
  var $row.2$2: bv32;
  var $col.2$1: bv32;
  var $col.2$2: bv32;
  var $ei_new.3$1: bv32;
  var $ei_new.3$2: bv32;
  var $jc.0$1: bv32;
  var $jc.0$2: bv32;
  var $ic.0$1: bv32;
  var $ic.0$2: bv32;
  var $ja1.0$1: bv32;
  var $ja1.0$2: bv32;
  var $ja2.0$1: bv32;
  var $ja2.0$2: bv32;
  var $ia1.0$1: bv32;
  var $ia1.0$2: bv32;
  var $ia2.0$1: bv32;
  var $ia2.0$2: bv32;
  var $ja.0$1: bv32;
  var $ja.0$2: bv32;
  var $s.0$1: bv32;
  var $s.0$2: bv32;
  var $ia.0$1: bv32;
  var $ia.0$2: bv32;
  var $s.1$1: bv32;
  var $s.1$2: bv32;
  var $ei_new.4$1: bv32;
  var $ei_new.4$2: bv32;
  var $row.3$1: bv32;
  var $row.3$2: bv32;
  var $col.3$1: bv32;
  var $col.3$2: bv32;
  var $ei_new.5$1: bv32;
  var $ei_new.5$2: bv32;
  var $position.0$1: bv32;
  var $position.0$2: bv32;
  var $sum.0$1: bv32;
  var $sum.0$2: bv32;
  var $ei_new.6$1: bv32;
  var $ei_new.6$2: bv32;
  var $row.4$1: bv32;
  var $row.4$2: bv32;
  var $col.4$1: bv32;
  var $col.4$2: bv32;
  var $ei_new.7$1: bv32;
  var $ei_new.7$2: bv32;
  var $row.5$1: bv32;
  var $row.5$2: bv32;
  var $col.5$1: bv32;
  var $col.5$2: bv32;
  var $ei_new.8$1: bv32;
  var $ei_new.8$2: bv32;
  var $ei_new.9$1: bv32;
  var $ei_new.9$2: bv32;
  var $position.1$1: bv32;
  var $position.1$2: bv32;
  var $sum.1$1: bv32;
  var $sum.1$2: bv32;
  var $ei_new.10$1: bv32;
  var $ei_new.10$2: bv32;
  var $row.6$1: bv32;
  var $row.6$2: bv32;
  var $col.6$1: bv32;
  var $col.6$2: bv32;
  var $ei_new.11$1: bv32;
  var $ei_new.11$2: bv32;
  var $row.7$1: bv32;
  var $row.7$2: bv32;
  var $col.7$1: bv32;
  var $col.7$2: bv32;
  var $ei_new.12$1: bv32;
  var $ei_new.12$2: bv32;
  var $ei_new.13$1: bv32;
  var $ei_new.13$2: bv32;
  var $ei_new.14$1: bv32;
  var $ei_new.14$2: bv32;
  var $row.8$1: bv32;
  var $row.8$2: bv32;
  var $col.8$1: bv32;
  var $col.8$2: bv32;
  var $ei_new.15$1: bv32;
  var $ei_new.15$2: bv32;
  var $position.2$1: bv32;
  var $position.2$2: bv32;
  var $sum.2$1: bv32;
  var $sum.2$2: bv32;
  var $ei_new.16$1: bv32;
  var $ei_new.16$2: bv32;
  var $row.9$1: bv32;
  var $row.9$2: bv32;
  var $col.9$1: bv32;
  var $col.9$2: bv32;
  var $ei_new.17$1: bv32;
  var $ei_new.17$2: bv32;
  var $row.10$1: bv32;
  var $row.10$2: bv32;
  var $col.10$1: bv32;
  var $col.10$2: bv32;
  var $ei_new.18$1: bv32;
  var $ei_new.18$2: bv32;
  var $ei_new.19$1: bv32;
  var $ei_new.19$2: bv32;
  var $position.3$1: bv32;
  var $position.3$2: bv32;
  var $sum.3$1: bv32;
  var $sum.3$2: bv32;
  var $ei_new.20$1: bv32;
  var $ei_new.20$2: bv32;
  var $row.11$1: bv32;
  var $row.11$2: bv32;
  var $col.11$1: bv32;
  var $col.11$2: bv32;
  var $ei_new.21$1: bv32;
  var $ei_new.21$2: bv32;
  var $row.12$1: bv32;
  var $row.12$2: bv32;
  var $col.12$1: bv32;
  var $col.12$2: bv32;
  var $ei_new.22$1: bv32;
  var $ei_new.22$2: bv32;
  var $ei_new.23$1: bv32;
  var $ei_new.23$2: bv32;
  var $temp2.0$1: bv32;
  var $temp2.0$2: bv32;
  var $ei_new.24$1: bv32;
  var $ei_new.24$2: bv32;
  var $ei_new.25$1: bv32;
  var $ei_new.25$2: bv32;
  var $i.0$1: bv32;
  var $i.0$2: bv32;
  var $sum.4$1: bv32;
  var $sum.4$2: bv32;
  var $ei_new.26$1: bv32;
  var $ei_new.26$2: bv32;
  var $i.1$1: bv32;
  var $i.1$2: bv32;
  var $sum.5$1: bv32;
  var $sum.5$2: bv32;
  var $i.2$1: bv32;
  var $i.2$2: bv32;
  var $i.3$1: bv32;
  var $i.3$2: bv32;
  var $ei_new.27$1: bv32;
  var $ei_new.27$2: bv32;
  var $ei_new.28$1: bv32;
  var $ei_new.28$2: bv32;
  var $ei_new.29$1: bv32;
  var $ei_new.29$2: bv32;
  var $tMask_row.0$1: bv32;
  var $tMask_row.0$2: bv32;
  var $tMask_col.0$1: bv32;
  var $tMask_col.0$2: bv32;
  var $ei_new.30$1: bv32;
  var $ei_new.30$2: bv32;
  var $ei_new.31$1: bv32;
  var $ei_new.31$2: bv32;
  var $jc.1$1: bv32;
  var $jc.1$2: bv32;
  var $ic.1$1: bv32;
  var $ic.1$2: bv32;
  var $ja1.1$1: bv32;
  var $ja1.1$2: bv32;
  var $ja2.1$1: bv32;
  var $ja2.1$2: bv32;
  var $ia1.1$1: bv32;
  var $ia1.1$2: bv32;
  var $ia2.1$1: bv32;
  var $ia2.1$2: bv32;
  var $ja.1$1: bv32;
  var $ja.1$2: bv32;
  var $s.2$1: bv32;
  var $s.2$2: bv32;
  var $ia.1$1: bv32;
  var $ia.1$2: bv32;
  var $s.3$1: bv32;
  var $s.3$2: bv32;
  var $largest_value.0$1: bv32;
  var $largest_value.0$2: bv32;
  var $largest_coordinate.0$1: bv32;
  var $largest_coordinate.0$2: bv32;
  var $ei_new.32$1: bv32;
  var $ei_new.32$2: bv32;
  var $i.4$1: bv32;
  var $i.4$2: bv32;
  var $largest_value.1$1: bv32;
  var $largest_value.1$2: bv32;
  var $largest_coordinate.1$1: bv32;
  var $largest_coordinate.1$2: bv32;
  var $largest_value.2$1: bv32;
  var $largest_value.2$2: bv32;
  var $largest_coordinate.2$1: bv32;
  var $largest_coordinate.2$2: bv32;
  var $i.5$1: bv32;
  var $i.5$2: bv32;
  var $fin_max_val.0$1: bv32;
  var $fin_max_val.0$2: bv32;
  var $fin_max_coo.0$1: bv32;
  var $fin_max_coo.0$2: bv32;
  var $fin_max_val.1$1: bv32;
  var $fin_max_val.1$2: bv32;
  var $fin_max_coo.1$1: bv32;
  var $fin_max_coo.1$2: bv32;
  var $largest_row.0$1: bv32;
  var $largest_row.0$2: bv32;
  var $largest_col.0$1: bv32;
  var $largest_col.0$2: bv32;
  var $ei_new.33$1: bv32;
  var $ei_new.33$2: bv32;
  var $row.13$1: bv32;
  var $row.13$2: bv32;
  var $col.13$1: bv32;
  var $col.13$2: bv32;
  var v920$1: bv32;
  var v920$2: bv32;
  var v921$1: bv32;
  var v921$2: bv32;
  var v1100$1: bv8;
  var v1100$2: bv8;
  var v1101$1: bv8;
  var v1101$2: bv8;
  var v1102$1: bv8;
  var v1102$2: bv8;
  var v1103$1: bv8;
  var v1103$2: bv8;
  var v1104$1: bool;
  var v1104$2: bool;
  var v16$1: bv8;
  var v16$2: bv8;
  var v17$1: bv8;
  var v17$2: bv8;
  var v18$1: bv8;
  var v18$2: bv8;
  var v1066$1: bool;
  var v1066$2: bool;
  var v1067$1: bv8;
  var v1067$2: bv8;
  var v1068$1: bv8;
  var v1068$2: bv8;
  var v1069$1: bv8;
  var v1069$2: bv8;
  var v1070$1: bv8;
  var v1070$2: bv8;
  var v1071$1: bv8;
  var v1071$2: bv8;
  var v827$1: bv8;
  var v827$2: bv8;
  var v828$1: bv8;
  var v828$2: bv8;
  var v829$1: bv8;
  var v829$2: bv8;
  var v830$1: bv8;
  var v830$2: bv8;
  var v831$1: bool;
  var v831$2: bool;
  var v649$1: bv8;
  var v649$2: bv8;
  var v650$1: bv8;
  var v650$2: bv8;
  var v651$1: bv8;
  var v651$2: bv8;
  var v652$1: bv8;
  var v652$2: bv8;
  var v219$1: bv8;
  var v219$2: bv8;
  var v220$1: bv8;
  var v220$2: bv8;
  var v221$1: bv8;
  var v221$2: bv8;
  var v222$1: bv8;
  var v222$2: bv8;
  var v866$1: bv8;
  var v866$2: bv8;
  var v867$1: bv8;
  var v867$2: bv8;
  var v868$1: bv8;
  var v868$2: bv8;
  var v869$1: bv8;
  var v869$2: bv8;
  var v870$1: bv8;
  var v870$2: bv8;
  var v871$1: bv8;
  var v871$2: bv8;
  var v872$1: bv8;
  var v872$2: bv8;
  var v873$1: bv8;
  var v873$2: bv8;
  var v248: bool;
  var v32$1: bv8;
  var v32$2: bv8;
  var v1149$1: bv8;
  var v1149$2: bv8;
  var v1150$1: bool;
  var v1150$2: bool;
  var v1151$1: bv8;
  var v1151$2: bv8;
  var v1152$1: bv8;
  var v1152$2: bv8;
  var v1153$1: bv8;
  var v1153$2: bv8;
  var v1154$1: bv8;
  var v1154$2: bv8;
  var v1155$1: bv32;
  var v1155$2: bv32;
  var v1156$1: bv32;
  var v1156$2: bv32;
  var v1157$1: bv32;
  var v1157$2: bv32;
  var v1158$1: bool;
  var v1158$2: bool;
  var v1159$1: bool;
  var v1159$2: bool;
  var v1160$1: bv8;
  var v1160$2: bv8;
  var v1161$1: bv8;
  var v1161$2: bv8;
  var v1162$1: bv8;
  var v1162$2: bv8;
  var v1163$1: bv8;
  var v1163$2: bv8;
  var v1164$1: bool;
  var v1164$2: bool;
  var v1165$1: bv32;
  var v1165$2: bv32;
  var v1166$1: bool;
  var v1166$2: bool;
  var v1134$1: bool;
  var v1134$2: bool;
  var v1135$1: bv8;
  var v1135$2: bv8;
  var v1136$1: bv8;
  var v1136$2: bv8;
  var v1137$1: bv8;
  var v1137$2: bv8;
  var v1138$1: bv8;
  var v1138$2: bv8;
  var v1139$1: bv32;
  var v1139$2: bv32;
  var v1140$1: bv32;
  var v1140$2: bv32;
  var v1141$1: bv8;
  var v1141$2: bv8;
  var v1142$1: bv8;
  var v1142$2: bv8;
  var v1143$1: bv8;
  var v1143$2: bv8;
  var v1144$1: bv8;
  var v1144$2: bv8;
  var v1145$1: bool;
  var v1145$2: bool;
  var v1146$1: bv8;
  var v1146$2: bv8;
  var v1147$1: bv8;
  var v1147$2: bv8;
  var v1148$1: bv8;
  var v1148$2: bv8;
  var v438$1: bv8;
  var v438$2: bv8;
  var v439$1: bv8;
  var v439$2: bv8;
  var v440$1: bv8;
  var v440$2: bv8;
  var v441$1: bv8;
  var v441$2: bv8;
  var v442$1: bool;
  var v442$2: bool;
  var v180$1: bv8;
  var v180$2: bv8;
  var v181$1: bv8;
  var v181$2: bv8;
  var v182$1: bv8;
  var v182$2: bv8;
  var v183$1: bv8;
  var v183$2: bv8;
  var v184$1: bv32;
  var v184$2: bv32;
  var v1046$1: bv8;
  var v1046$2: bv8;
  var v1047$1: bv32;
  var v1047$2: bv32;
  var v1048$1: bv32;
  var v1048$2: bv32;
  var v1049$1: bv32;
  var v1049$2: bv32;
  var v1050$1: bv32;
  var v1050$2: bv32;
  var v1051$1: bv32;
  var v1051$2: bv32;
  var v623$1: bv8;
  var v623$2: bv8;
  var v624$1: bv8;
  var v624$2: bv8;
  var v625$1: bv8;
  var v625$2: bv8;
  var v626$1: bv8;
  var v626$2: bv8;
  var v47$1: bv8;
  var v47$2: bv8;
  var v214$1: bv8;
  var v214$2: bv8;
  var v898$1: bv8;
  var v898$2: bv8;
  var v899$1: bv8;
  var v899$2: bv8;
  var v900$1: bv8;
  var v900$2: bv8;
  var v901$1: bv8;
  var v901$2: bv8;
  var v130$1: bv8;
  var v130$2: bv8;
  var v328$1: bv8;
  var v328$2: bv8;
  var v329$1: bv8;
  var v329$2: bv8;
  var v330$1: bv8;
  var v330$2: bv8;
  var v331$1: bv8;
  var v331$2: bv8;
  var v1211$1: bv8;
  var v1211$2: bv8;
  var v1212$1: bv8;
  var v1212$2: bv8;
  var v1213$1: bv8;
  var v1213$2: bv8;
  var v1214$1: bv8;
  var v1214$2: bv8;
  var v1215$1: bv32;
  var v1215$2: bv32;
  var v1216$1: bv32;
  var v1216$2: bv32;
  var v1217$1: bv32;
  var v1217$2: bv32;
  var v1218: bool;
  var v1219: bool;
  var v1220$1: bv8;
  var v1220$2: bv8;
  var v1221$1: bv8;
  var v1221$2: bv8;
  var v1222$1: bv8;
  var v1222$2: bv8;
  var v1223$1: bv8;
  var v1223$2: bv8;
  var v1224$1: bv32;
  var v1224$2: bv32;
  var v1225$1: bv32;
  var v1225$2: bv32;
  var v1226$1: bv32;
  var v1226$2: bv32;
  var v1227$1: bv8;
  var v1227$2: bv8;
  var v1228$1: bv8;
  var v1228$2: bv8;
  var v1229$1: bv8;
  var v1229$2: bv8;
  var v1230$1: bv8;
  var v1230$2: bv8;
  var v1231$1: bool;
  var v1231$2: bool;
  var v1232$1: bv8;
  var v1232$2: bv8;
  var v1233$1: bv8;
  var v1233$2: bv8;
  var v1234$1: bv8;
  var v1234$2: bv8;
  var v1235$1: bv8;
  var v1235$2: bv8;
  var v1236$1: bv8;
  var v1236$2: bv8;
  var v1237$1: bv8;
  var v1237$2: bv8;
  var v1238$1: bv8;
  var v1238$2: bv8;
  var v1239$1: bv8;
  var v1239$2: bv8;
  var v1240$1: bv32;
  var v1240$2: bv32;
  var v1241$1: bv8;
  var v1241$2: bv8;
  var v1242$1: bv8;
  var v1242$2: bv8;
  var v1243$1: bv8;
  var v1243$2: bv8;
  var v1244$1: bv8;
  var v1244$2: bv8;
  var v1245$1: bool;
  var v1245$2: bool;
  var v1250$1: bv32;
  var v1250$2: bv32;
  var v1251$1: bv32;
  var v1251$2: bv32;
  var v1252$1: bv8;
  var v1252$2: bv8;
  var v1253$1: bv8;
  var v1253$2: bv8;
  var v1254$1: bv8;
  var v1254$2: bv8;
  var v1246$1: bv8;
  var v1246$2: bv8;
  var v1247$1: bv8;
  var v1247$2: bv8;
  var v1248$1: bv8;
  var v1248$2: bv8;
  var v1249$1: bv8;
  var v1249$2: bv8;
  var v1167$1: bv32;
  var v1167$2: bv32;
  var v1168$1: bv32;
  var v1168$2: bv32;
  var v1169$1: bv8;
  var v1169$2: bv8;
  var v1170$1: bv8;
  var v1170$2: bv8;
  var v1171$1: bv8;
  var v1171$2: bv8;
  var v1172$1: bv8;
  var v1172$2: bv8;
  var v1173$1: bv8;
  var v1173$2: bv8;
  var v1174$1: bv8;
  var v1174$2: bv8;
  var v1175$1: bv8;
  var v1175$2: bv8;
  var v1176$1: bv8;
  var v1176$2: bv8;
  var v1177$1: bv32;
  var v1177$2: bv32;
  var v1178$1: bv8;
  var v1178$2: bv8;
  var v1179$1: bv8;
  var v1179$2: bv8;
  var v1180$1: bv8;
  var v1180$2: bv8;
  var v1181$1: bv8;
  var v1181$2: bv8;
  var v1182$1: bool;
  var v1182$2: bool;
  var v1183$1: bv8;
  var v1183$2: bv8;
  var v1184$1: bv8;
  var v1184$2: bv8;
  var v1185$1: bv8;
  var v1185$2: bv8;
  var v1186$1: bv8;
  var v1186$2: bv8;
  var v1187$1: bv8;
  var v1187$2: bv8;
  var v1188$1: bv8;
  var v1188$2: bv8;
  var v1189$1: bv8;
  var v1189$2: bv8;
  var v1190$1: bv8;
  var v1190$2: bv8;
  var v1191$1: bv8;
  var v1191$2: bv8;
  var v1192$1: bv8;
  var v1192$2: bv8;
  var v1193$1: bv8;
  var v1193$2: bv8;
  var v1194$1: bv8;
  var v1194$2: bv8;
  var v1204$1: bv8;
  var v1204$2: bv8;
  var v1195$1: bv8;
  var v1195$2: bv8;
  var v1196$1: bv8;
  var v1196$2: bv8;
  var v1197$1: bv8;
  var v1197$2: bv8;
  var v1198$1: bv8;
  var v1198$2: bv8;
  var v1199$1: bv8;
  var v1199$2: bv8;
  var v1200$1: bv8;
  var v1200$2: bv8;
  var v1201$1: bv8;
  var v1201$2: bv8;
  var v1202$1: bv8;
  var v1202$2: bv8;
  var v1203$1: bv8;
  var v1203$2: bv8;
  var v1205$1: bv8;
  var v1205$2: bv8;
  var v1206$1: bv8;
  var v1206$2: bv8;
  var v1207$1: bv8;
  var v1207$2: bv8;
  var v1208$1: bv8;
  var v1208$2: bv8;
  var v1209$1: bv8;
  var v1209$2: bv8;
  var v1210$1: bv8;
  var v1210$2: bv8;
  var v587$1: bv8;
  var v587$2: bv8;
  var v566$1: bv8;
  var v566$2: bv8;
  var v567$1: bv8;
  var v567$2: bv8;
  var v568$1: bv8;
  var v568$2: bv8;
  var v569$1: bv8;
  var v569$2: bv8;
  var v1129$1: bv8;
  var v1129$2: bv8;
  var v1130$1: bv8;
  var v1130$2: bv8;
  var v1131$1: bv8;
  var v1131$2: bv8;
  var v1132$1: bv8;
  var v1132$2: bv8;
  var v1133$1: bool;
  var v1133$2: bool;
  var v1120$1: bv8;
  var v1120$2: bv8;
  var v1121$1: bv8;
  var v1121$2: bv8;
  var v1122$1: bv8;
  var v1122$2: bv8;
  var v1123$1: bv8;
  var v1123$2: bv8;
  var v570$1: bool;
  var v570$2: bool;
  var v571$1: bv8;
  var v571$2: bv8;
  var v572$1: bv8;
  var v572$2: bv8;
  var v573$1: bv8;
  var v573$2: bv8;
  var v574$1: bv8;
  var v574$2: bv8;
  var v575$1: bool;
  var v575$2: bool;
  var v576$1: bv32;
  var v576$2: bv32;
  var v577$1: bv32;
  var v577$2: bv32;
  var v523$1: bv8;
  var v523$2: bv8;
  var v524$1: bv8;
  var v524$2: bv8;
  var v525$1: bv8;
  var v525$2: bv8;
  var v526$1: bv8;
  var v526$2: bv8;
  var v527$1: bool;
  var v527$2: bool;
  var v528$1: bv8;
  var v528$2: bv8;
  var v529$1: bv8;
  var v529$2: bv8;
  var v530$1: bv8;
  var v530$2: bv8;
  var v578$1: bv8;
  var v578$2: bv8;
  var v579$1: bv8;
  var v579$2: bv8;
  var v580$1: bv8;
  var v580$2: bv8;
  var v581$1: bv8;
  var v581$2: bv8;
  var v531$1: bv8;
  var v531$2: bv8;
  var v532$1: bv8;
  var v532$2: bv8;
  var v533$1: bv8;
  var v533$2: bv8;
  var v534$1: bv8;
  var v534$2: bv8;
  var v535$1: bv8;
  var v535$2: bv8;
  var v536$1: bv32;
  var v536$2: bv32;
  var v537$1: bv8;
  var v537$2: bv8;
  var v538$1: bv8;
  var v538$2: bv8;
  var v539$1: bv8;
  var v539$2: bv8;
  var v540$1: bv8;
  var v540$2: bv8;
  var v541$1: bool;
  var v541$2: bool;
  var v582$1: bv8;
  var v582$2: bv8;
  var v583$1: bv8;
  var v583$2: bv8;
  var v584$1: bv8;
  var v584$2: bv8;
  var v585$1: bv8;
  var v585$2: bv8;
  var v586$1: bool;
  var v586$2: bool;
  var v213$1: bv32;
  var v213$2: bv32;
  var v60$1: bv8;
  var v60$2: bv8;
  var v61$1: bv8;
  var v61$2: bv8;
  var v62$1: bv8;
  var v62$2: bv8;
  var v542$1: bv8;
  var v542$2: bv8;
  var v543$1: bv8;
  var v543$2: bv8;
  var v544$1: bv8;
  var v544$2: bv8;
  var v545$1: bv8;
  var v545$2: bv8;
  var v546$1: bv8;
  var v546$2: bv8;
  var v547$1: bv8;
  var v547$2: bv8;
  var v548$1: bv8;
  var v548$2: bv8;
  var v549$1: bv8;
  var v549$2: bv8;
  var v550$1: bv8;
  var v550$2: bv8;
  var v551$1: bv8;
  var v551$2: bv8;
  var v552$1: bv8;
  var v552$2: bv8;
  var v553$1: bv8;
  var v553$2: bv8;
  var v554$1: bv8;
  var v554$2: bv8;
  var v555$1: bv8;
  var v555$2: bv8;
  var v556$1: bv8;
  var v556$2: bv8;
  var v557$1: bv8;
  var v557$2: bv8;
  var v558$1: bv32;
  var v558$2: bv32;
  var v603$1: bv8;
  var v603$2: bv8;
  var v604$1: bv8;
  var v604$2: bv8;
  var v111$1: bv8;
  var v111$2: bv8;
  var v448$1: bv8;
  var v448$2: bv8;
  var v449$1: bv8;
  var v449$2: bv8;
  var v450$1: bv8;
  var v450$2: bv8;
  var v666$1: bv32;
  var v666$2: bv32;
  var v658$1: bool;
  var v658$2: bool;
  var v659$1: bv32;
  var v659$2: bv32;
  var v427$1: bv8;
  var v427$2: bv8;
  var v428$1: bv8;
  var v428$2: bv8;
  var v400$1: bv32;
  var v400$2: bv32;
  var v406$1: bv8;
  var v406$2: bv8;
  var v407$1: bv8;
  var v407$2: bv8;
  var v408$1: bv8;
  var v408$2: bv8;
  var v409$1: bv8;
  var v409$2: bv8;
  var v410$1: bool;
  var v410$2: bool;
  var v395$1: bool;
  var v395$2: bool;
  var v411$1: bv8;
  var v411$2: bv8;
  var v412$1: bv8;
  var v412$2: bv8;
  var v413$1: bv8;
  var v413$2: bv8;
  var v414$1: bv8;
  var v414$2: bv8;
  var v415$1: bv8;
  var v415$2: bv8;
  var v416$1: bv8;
  var v416$2: bv8;
  var v417$1: bv8;
  var v417$2: bv8;
  var v418$1: bv8;
  var v418$2: bv8;
  var v419$1: bv32;
  var v419$2: bv32;
  var v420$1: bv8;
  var v420$2: bv8;
  var v421$1: bv8;
  var v421$2: bv8;
  var v422$1: bv8;
  var v422$2: bv8;
  var v423$1: bv8;
  var v423$2: bv8;
  var v424$1: bool;
  var v424$2: bool;
  var v425$1: bv8;
  var v425$2: bv8;
  var v426$1: bv8;
  var v426$2: bv8;
  var v1072$1: bv8;
  var v1072$2: bv8;
  var v1073$1: bv8;
  var v1073$2: bv8;
  var v1074$1: bv8;
  var v1074$2: bv8;
  var v1075$1: bv32;
  var v1075$2: bv32;
  var v1076$1: bv8;
  var v1076$2: bv8;
  var v1077$1: bv8;
  var v1077$2: bv8;
  var v1078$1: bv8;
  var v1078$2: bv8;
  var v1079$1: bv8;
  var v1079$2: bv8;
  var v1080$1: bool;
  var v1080$2: bool;
  var v96$1: bv8;
  var v96$2: bv8;
  var v97$1: bv8;
  var v97$2: bv8;
  var v98$1: bv8;
  var v98$2: bv8;
  var v264$1: bv8;
  var v264$2: bv8;
  var v265$1: bv8;
  var v265$2: bv8;
  var v266$1: bv8;
  var v266$2: bv8;
  var v267$1: bv8;
  var v267$2: bv8;
  var v681$1: bv8;
  var v681$2: bv8;
  var v682$1: bv8;
  var v682$2: bv8;
  var v683$1: bv8;
  var v683$2: bv8;
  var v684$1: bv8;
  var v684$2: bv8;
  var v685$1: bool;
  var v685$2: bool;
  var v381$1: bv8;
  var v381$2: bv8;
  var v382$1: bv8;
  var v382$2: bv8;
  var v383$1: bv8;
  var v383$2: bv8;
  var v384$1: bv8;
  var v384$2: bv8;
  var v173$1: bv8;
  var v173$2: bv8;
  var v174$1: bv32;
  var v174$2: bv32;
  var v663$1: bv8;
  var v663$2: bv8;
  var v664$1: bv8;
  var v664$2: bv8;
  var v665$1: bool;
  var v665$2: bool;
  var v1039$1: bv32;
  var v1039$2: bv32;
  var v1040$1: bv32;
  var v1040$2: bv32;
  var v1041$1: bv32;
  var v1041$2: bv32;
  var v237$1: bv32;
  var v237$2: bv32;
  var v433$1: bool;
  var v433$2: bool;
  var v401$1: bv8;
  var v401$2: bv8;
  var v402$1: bv8;
  var v402$2: bv8;
  var v403$1: bv8;
  var v403$2: bv8;
  var v404$1: bv8;
  var v404$2: bv8;
  var v405$1: bv32;
  var v405$2: bv32;
  var v84$1: bv8;
  var v84$2: bv8;
  var v85$1: bv8;
  var v85$2: bv8;
  var v86$1: bv8;
  var v86$2: bv8;
  var v87$1: bv8;
  var v87$2: bv8;
  var v910$1: bv8;
  var v910$2: bv8;
  var v911$1: bv8;
  var v911$2: bv8;
  var v912$1: bv8;
  var v912$2: bv8;
  var v913$1: bv8;
  var v913$2: bv8;
  var v175$1: bv8;
  var v175$2: bv8;
  var v176$1: bv8;
  var v176$2: bv8;
  var v177$1: bv8;
  var v177$2: bv8;
  var v178$1: bv8;
  var v178$2: bv8;
  var v179$1: bv32;
  var v179$2: bv32;
  var v286$1: bv32;
  var v286$2: bv32;
  var v0$1: bv8;
  var v0$2: bv8;
  var v1$1: bv8;
  var v1$2: bv8;
  var v2$1: bv8;
  var v2$2: bv8;
  var v3$1: bv8;
  var v3$2: bv8;
  var v199$1: bv32;
  var v199$2: bv32;
  var v212$1: bv32;
  var v212$2: bv32;
  var v601$1: bv8;
  var v601$2: bv8;
  var v602$1: bv8;
  var v602$2: bv8;
  var v704$1: bv8;
  var v704$2: bv8;
  var v705$1: bv8;
  var v705$2: bv8;
  var v706$1: bv8;
  var v706$2: bv8;
  var v707$1: bv8;
  var v707$2: bv8;
  var v341$1: bool;
  var v341$2: bool;
  var v322$1: bv32;
  var v322$2: bv32;
  var v844$1: bv8;
  var v844$2: bv8;
  var v845$1: bv8;
  var v845$2: bv8;
  var v846$1: bv8;
  var v846$2: bv8;
  var v847$1: bool;
  var v847$2: bool;
  var v1029$1: bv8;
  var v1029$2: bv8;
  var v1030$1: bv8;
  var v1030$2: bv8;
  var v1031$1: bv8;
  var v1031$2: bv8;
  var v1032$1: bv8;
  var v1032$2: bv8;
  var v1033$1: bv8;
  var v1033$2: bv8;
  var v238$1: bv32;
  var v238$2: bv32;
  var v20$1: bv8;
  var v20$2: bv8;
  var v21$1: bv8;
  var v21$2: bv8;
  var v22$1: bv8;
  var v22$2: bv8;
  var v23$1: bv8;
  var v23$2: bv8;
  var v149$1: bv32;
  var v149$2: bv32;
  var v1034$1: bv8;
  var v1034$2: bv8;
  var v1035$1: bv8;
  var v1035$2: bv8;
  var v1036$1: bv8;
  var v1036$2: bv8;
  var v1037$1: bv32;
  var v1037$2: bv32;
  var v1038: bool;
  var v779$1: bv8;
  var v779$2: bv8;
  var v780$1: bv8;
  var v780$2: bv8;
  var v781$1: bv8;
  var v781$2: bv8;
  var v782$1: bv8;
  var v782$2: bv8;
  var v342$1: bv8;
  var v342$2: bv8;
  var v343$1: bv8;
  var v343$2: bv8;
  var v344$1: bv8;
  var v344$2: bv8;
  var v292$1: bv8;
  var v292$2: bv8;
  var v293$1: bv8;
  var v293$2: bv8;
  var v294$1: bv8;
  var v294$2: bv8;
  var v295$1: bv8;
  var v295$2: bv8;
  var v811$1: bv8;
  var v811$2: bv8;
  var v812$1: bv8;
  var v812$2: bv8;
  var v813$1: bv8;
  var v813$2: bv8;
  var v814$1: bv8;
  var v814$2: bv8;
  var v815$1: bv8;
  var v815$2: bv8;
  var v816$1: bv8;
  var v816$2: bv8;
  var v817$1: bv8;
  var v817$2: bv8;
  var v818$1: bv8;
  var v818$2: bv8;
  var v980$1: bv8;
  var v980$2: bv8;
  var v981$1: bv8;
  var v981$2: bv8;
  var v982$1: bv8;
  var v982$2: bv8;
  var v983$1: bv8;
  var v983$2: bv8;
  var v984$1: bool;
  var v984$2: bool;
  var v985$1: bv32;
  var v985$2: bv32;
  var v150$1: bv8;
  var v150$2: bv8;
  var v151$1: bv8;
  var v151$2: bv8;
  var v152$1: bv8;
  var v152$2: bv8;
  var v153$1: bv8;
  var v153$2: bv8;
  var v443$1: bv8;
  var v443$2: bv8;
  var v955$1: bv32;
  var v955$2: bv32;
  var v708$1: bool;
  var v708$2: bool;
  var v345$1: bv8;
  var v345$2: bv8;
  var v12$1: bv8;
  var v12$2: bv8;
  var v1042$1: bv32;
  var v1042$2: bv32;
  var v1043$1: bv8;
  var v1043$2: bv8;
  var v1044$1: bv8;
  var v1044$2: bv8;
  var v1045$1: bv8;
  var v1045$2: bv8;
  var v239$1: bv8;
  var v239$2: bv8;
  var v240$1: bv8;
  var v240$2: bv8;
  var v241$1: bv8;
  var v241$2: bv8;
  var v242$1: bv8;
  var v242$2: bv8;
  var v605$1: bv8;
  var v605$2: bv8;
  var v606$1: bv8;
  var v606$2: bv8;
  var v607$1: bv8;
  var v607$2: bv8;
  var v608$1: bv8;
  var v608$2: bv8;
  var v609$1: bv8;
  var v609$2: bv8;
  var v457$1: bv8;
  var v457$2: bv8;
  var v458$1: bv8;
  var v458$2: bv8;
  var v459$1: bv8;
  var v459$2: bv8;
  var v460$1: bv8;
  var v460$2: bv8;
  var v145$1: bv8;
  var v145$2: bv8;
  var v146$1: bv8;
  var v146$2: bv8;
  var v147$1: bv8;
  var v147$2: bv8;
  var v148$1: bv8;
  var v148$2: bv8;
  var v792$1: bv8;
  var v792$2: bv8;
  var v793$1: bv8;
  var v793$2: bv8;
  var v794$1: bv8;
  var v794$2: bv8;
  var v795$1: bv8;
  var v795$2: bv8;
  var v796$1: bv8;
  var v796$2: bv8;
  var v385$1: bv8;
  var v385$2: bv8;
  var v386$1: bv8;
  var v386$2: bv8;
  var v387$1: bv8;
  var v387$2: bv8;
  var v388$1: bv8;
  var v388$2: bv8;
  var v389$1: bool;
  var v389$2: bool;
  var v131$1: bv8;
  var v131$2: bv8;
  var v132$1: bv8;
  var v132$2: bv8;
  var v133$1: bv8;
  var v133$2: bv8;
  var v134$1: bv32;
  var v134$2: bv32;
  var v337$1: bv8;
  var v337$2: bv8;
  var v338$1: bv8;
  var v338$2: bv8;
  var v339$1: bv8;
  var v339$2: bv8;
  var v340$1: bv8;
  var v340$2: bv8;
  var v610$1: bv8;
  var v610$2: bv8;
  var v611$1: bv8;
  var v611$2: bv8;
  var v612$1: bv8;
  var v612$2: bv8;
  var v613$1: bv8;
  var v613$2: bv8;
  var v614$1: bv8;
  var v614$2: bv8;
  var v615$1: bv8;
  var v615$2: bv8;
  var v466$1: bv8;
  var v466$2: bv8;
  var v461$1: bv8;
  var v461$2: bv8;
  var v462$1: bv8;
  var v462$2: bv8;
  var v463$1: bv8;
  var v463$2: bv8;
  var v464$1: bv8;
  var v464$2: bv8;
  var v465$1: bv8;
  var v465$2: bv8;
  var v135$1: bv8;
  var v135$2: bv8;
  var v136$1: bv8;
  var v136$2: bv8;
  var v137$1: bv8;
  var v137$2: bv8;
  var v789$1: bv8;
  var v789$2: bv8;
  var v790$1: bv8;
  var v790$2: bv8;
  var v791$1: bv8;
  var v791$2: bv8;
  var v138$1: bv8;
  var v138$2: bv8;
  var v139$1: bv32;
  var v139$2: bv32;
  var v273$1: bv8;
  var v273$2: bv8;
  var v274$1: bv8;
  var v274$2: bv8;
  var v275$1: bv8;
  var v275$2: bv8;
  var v276$1: bv8;
  var v276$2: bv8;
  var v1114$1: bv32;
  var v1114$2: bv32;
  var v1115$1: bv8;
  var v1115$2: bv8;
  var v1116$1: bv8;
  var v1116$2: bv8;
  var v1117$1: bv8;
  var v1117$2: bv8;
  var v1118$1: bv8;
  var v1118$2: bv8;
  var v1119$1: bool;
  var v1119$2: bool;
  var v1124$1: bv8;
  var v1124$2: bv8;
  var v1125$1: bv8;
  var v1125$2: bv8;
  var v1126$1: bv8;
  var v1126$2: bv8;
  var v1127$1: bv8;
  var v1127$2: bv8;
  var v1128$1: bool;
  var v1128$2: bool;
  var v63$1: bv8;
  var v63$2: bv8;
  var v65$1: bv8;
  var v65$2: bv8;
  var v66$1: bv8;
  var v66$2: bv8;
  var v67$1: bv8;
  var v67$2: bv8;
  var v709$1: bv8;
  var v709$2: bv8;
  var v710$1: bv8;
  var v710$2: bv8;
  var v711$1: bv8;
  var v711$2: bv8;
  var v712$1: bv8;
  var v712$2: bv8;
  var v713$1: bv8;
  var v713$2: bv8;
  var v714$1: bv8;
  var v714$2: bv8;
  var v715$1: bv8;
  var v715$2: bv8;
  var v716$1: bv8;
  var v716$2: bv8;
  var v346$1: bv8;
  var v346$2: bv8;
  var v347$1: bv8;
  var v347$2: bv8;
  var v348$1: bv8;
  var v348$2: bv8;
  var v349$1: bv8;
  var v349$2: bv8;
  var v350$1: bv32;
  var v350$2: bv32;
  var v296$1: bv8;
  var v296$2: bv8;
  var v819$1: bv32;
  var v819$2: bv32;
  var v986$1: bv32;
  var v986$2: bv32;
  var v243$1: bv32;
  var v243$2: bv32;
  var v24$1: bv8;
  var v24$2: bv8;
  var v888$1: bv8;
  var v888$2: bv8;
  var v889$1: bv8;
  var v889$2: bv8;
  var v890$1: bv8;
  var v890$2: bv8;
  var v891$1: bv8;
  var v891$2: bv8;
  var v892$1: bv32;
  var v892$2: bv32;
  var v1089$1: bv32;
  var v1089$2: bv32;
  var v1090$1: bv32;
  var v1090$2: bv32;
  var v1091$1: bv8;
  var v1091$2: bv8;
  var v1092$1: bv8;
  var v1092$2: bv8;
  var v1093$1: bv8;
  var v1093$2: bv8;
  var v1094$1: bv8;
  var v1094$2: bv8;
  var v1095$1: bool;
  var v1095$2: bool;
  var v1096$1: bv8;
  var v1096$2: bv8;
  var v1097$1: bv8;
  var v1097$2: bv8;
  var v1098$1: bv8;
  var v1098$2: bv8;
  var v1099$1: bv8;
  var v1099$2: bv8;
  var v927$1: bv32;
  var v927$2: bv32;
  var v928$1: bv32;
  var v928$2: bv32;
  var v637$1: bv8;
  var v637$2: bv8;
  var v638$1: bv8;
  var v638$2: bv8;
  var v639$1: bv8;
  var v639$2: bv8;
  var v640$1: bv8;
  var v640$2: bv8;
  var v645$1: bv8;
  var v645$2: bv8;
  var v646$1: bv8;
  var v646$2: bv8;
  var v647$1: bv8;
  var v647$2: bv8;
  var v648$1: bv8;
  var v648$2: bv8;
  var v272$1: bv32;
  var v272$2: bv32;
  var v25$1: bv8;
  var v25$2: bv8;
  var v26$1: bv8;
  var v26$2: bv8;
  var v27$1: bv8;
  var v27$2: bv8;
  var v396$1: bv8;
  var v396$2: bv8;
  var v397$1: bv8;
  var v397$2: bv8;
  var v398$1: bv8;
  var v398$2: bv8;
  var v399$1: bv8;
  var v399$2: bv8;
  var v966$1: bv8;
  var v966$2: bv8;
  var v967$1: bv8;
  var v967$2: bv8;
  var v968$1: bv8;
  var v968$2: bv8;
  var v969$1: bv8;
  var v969$2: bv8;
  var v970$1: bv32;
  var v970$2: bv32;
  var v80$1: bv8;
  var v80$2: bv8;
  var v81$1: bv8;
  var v81$2: bv8;
  var v82$1: bv8;
  var v82$2: bv8;
  var v83$1: bv8;
  var v83$2: bv8;
  var v717$1: bool;
  var v717$2: bool;
  var v718$1: bv8;
  var v718$2: bv8;
  var v719$1: bv8;
  var v719$2: bv8;
  var v467$1: bv8;
  var v467$2: bv8;
  var v468$1: bv8;
  var v468$2: bv8;
  var v627$1: bv8;
  var v627$2: bv8;
  var v628$1: bv8;
  var v628$2: bv8;
  var v629$1: bv8;
  var v629$2: bv8;
  var v630$1: bv8;
  var v630$2: bv8;
  var v193$1: bv8;
  var v193$2: bv8;
  var v194$1: bv32;
  var v194$2: bv32;
  var v19$1: bv8;
  var v19$2: bv8;
  var v720$1: bv8;
  var v720$2: bv8;
  var v721$1: bv8;
  var v721$2: bv8;
  var v722$1: bv8;
  var v722$2: bv8;
  var v723$1: bv8;
  var v723$2: bv8;
  var v724$1: bv8;
  var v724$2: bv8;
  var v725$1: bv8;
  var v725$2: bv8;
  var v351$1: bv32;
  var v351$2: bv32;
  var v352$1: bv8;
  var v352$2: bv8;
  var v353$1: bv8;
  var v353$2: bv8;
  var v354$1: bv8;
  var v354$2: bv8;
  var v355$1: bv8;
  var v355$2: bv8;
  var v297$1: bv8;
  var v297$2: bv8;
  var v298$1: bv8;
  var v298$2: bv8;
  var v299$1: bv8;
  var v299$2: bv8;
  var v820$1: bv8;
  var v820$2: bv8;
  var v821$1: bv8;
  var v821$2: bv8;
  var v822$1: bv8;
  var v822$2: bv8;
  var v823$1: bv8;
  var v823$2: bv8;
  var v987$1: bool;
  var v987$2: bool;
  var v988$1: bv32;
  var v988$2: bv32;
  var v989$1: bv8;
  var v989$2: bv8;
  var v990$1: bv8;
  var v990$2: bv8;
  var v244$1: bv8;
  var v244$2: bv8;
  var v245$1: bv8;
  var v245$2: bv8;
  var v246$1: bv8;
  var v246$2: bv8;
  var v247$1: bv8;
  var v247$2: bv8;
  var v31$1: bv8;
  var v31$2: bv8;
  var v949$1: bv8;
  var v949$2: bv8;
  var v950$1: bool;
  var v950$2: bool;
  var v951$1: bv8;
  var v951$2: bv8;
  var v952$1: bv8;
  var v952$2: bv8;
  var v953$1: bv8;
  var v953$2: bv8;
  var v954$1: bv8;
  var v954$2: bv8;
  var v726$1: bv8;
  var v726$2: bv8;
  var v727$1: bv8;
  var v727$2: bv8;
  var v728$1: bv8;
  var v728$2: bv8;
  var v729$1: bv8;
  var v729$2: bv8;
  var v356$1: bool;
  var v356$2: bool;
  var v300$1: bv32;
  var v300$2: bv32;
  var v824$1: bool;
  var v824$2: bool;
  var v825$1: bv32;
  var v825$2: bv32;
  var v991$1: bv8;
  var v991$2: bv8;
  var v992$1: bv8;
  var v992$2: bv8;
  var v993$1: bv32;
  var v993$2: bv32;
  var v994$1: bv32;
  var v994$2: bv32;
  var v995$1: bv8;
  var v995$2: bv8;
  var v996$1: bv8;
  var v996$2: bv8;
  var v997$1: bv8;
  var v997$2: bv8;
  var v28$1: bv8;
  var v28$2: bv8;
  var v29$1: bv8;
  var v29$2: bv8;
  var v30$1: bv8;
  var v30$2: bv8;
  var v154$1: bv32;
  var v154$2: bv32;
  var v215$1: bv8;
  var v215$2: bv8;
  var v216$1: bv8;
  var v216$2: bv8;
  var v217$1: bv8;
  var v217$2: bv8;
  var v218$1: bool;
  var v218$2: bool;
  var v497$1: bv8;
  var v497$2: bv8;
  var v498$1: bv8;
  var v498$2: bv8;
  var v499$1: bv8;
  var v499$2: bv8;
  var v500$1: bv32;
  var v500$2: bv32;
  var v929$1: bv8;
  var v929$2: bv8;
  var v930$1: bv8;
  var v930$2: bv8;
  var v931$1: bv8;
  var v931$2: bv8;
  var v932$1: bv8;
  var v932$2: bv8;
  var v933$1: bv32;
  var v933$2: bv32;
  var v934$1: bool;
  var v934$2: bool;
  var v671$1: bool;
  var v671$2: bool;
  var v470$1: bv8;
  var v470$2: bv8;
  var v471$1: bv8;
  var v471$2: bv8;
  var v472$1: bv8;
  var v472$2: bv8;
  var v473$1: bv8;
  var v473$2: bv8;
  var v125$1: bv8;
  var v125$2: bv8;
  var v126$1: bv8;
  var v126$2: bv8;
  var v127$1: bv8;
  var v127$2: bv8;
  var v128$1: bv8;
  var v128$2: bv8;
  var v129$1: bv32;
  var v129$2: bv32;
  var v971$1: bool;
  var v971$2: bool;
  var v874$1: bv8;
  var v874$2: bv8;
  var v875$1: bv8;
  var v875$2: bv8;
  var v876$1: bv8;
  var v876$2: bv8;
  var v877$1: bv8;
  var v877$2: bv8;
  var v510$1: bv8;
  var v510$2: bv8;
  var v511$1: bv8;
  var v511$2: bv8;
  var v512$1: bv8;
  var v512$2: bv8;
  var v513$1: bv8;
  var v513$2: bv8;
  var v564$1: bv32;
  var v564$2: bv32;
  var v565$1: bv32;
  var v565$2: bv32;
  var v730$1: bv32;
  var v730$2: bv32;
  var v357$1: bv8;
  var v357$2: bv8;
  var v358$1: bv8;
  var v358$2: bv8;
  var v359$1: bv8;
  var v359$2: bv8;
  var v360$1: bv8;
  var v360$2: bv8;
  var v301$1: bv8;
  var v301$2: bv8;
  var v302$1: bv8;
  var v302$2: bv8;
  var v303$1: bv8;
  var v303$2: bv8;
  var v304$1: bv8;
  var v304$2: bv8;
  var v305$1: bool;
  var v305$2: bool;
  var v826$1: bv32;
  var v826$2: bv32;
  var v998$1: bv8;
  var v998$2: bv8;
  var v999$1: bv8;
  var v999$2: bv8;
  var v1000$1: bv8;
  var v1000$2: bv8;
  var v1001$1: bv8;
  var v1001$2: bv8;
  var v1002$1: bv8;
  var v1002$2: bv8;
  var v155$1: bv8;
  var v155$2: bv8;
  var v156$1: bv8;
  var v156$2: bv8;
  var v157$1: bv8;
  var v157$2: bv8;
  var v158$1: bv8;
  var v158$2: bv8;
  var v159$1: bv32;
  var v159$2: bv32;
  var v474$1: bool;
  var v474$2: bool;
  var v915$1: bv8;
  var v915$2: bv8;
  var v916$1: bv8;
  var v916$2: bv8;
  var v917$1: bv8;
  var v917$2: bv8;
  var v918$1: bv8;
  var v918$2: bv8;
  var v919$1: bool;
  var v919$2: bool;
  var v731$1: bv8;
  var v731$2: bv8;
  var v732$1: bv8;
  var v732$2: bv8;
  var v733$1: bv8;
  var v733$2: bv8;
  var v734$1: bv8;
  var v734$2: bv8;
  var v735$1: bool;
  var v735$2: bool;
  var v475$1: bv8;
  var v475$2: bv8;
  var v476$1: bv8;
  var v476$2: bv8;
  var v477$1: bv8;
  var v477$2: bv8;
  var v478$1: bv8;
  var v478$2: bv8;
  var v479$1: bv32;
  var v479$2: bv32;
  var v4$1: bv8;
  var v4$2: bv8;
  var v736$1: bv8;
  var v736$2: bv8;
  var v737$1: bv8;
  var v737$2: bv8;
  var v738$1: bv8;
  var v738$2: bv8;
  var v739$1: bv8;
  var v739$2: bv8;
  var v740$1: bv32;
  var v740$2: bv32;
  var v204$1: bv32;
  var v204$2: bv32;
  var v741$1: bv8;
  var v741$2: bv8;
  var v742$1: bv8;
  var v742$2: bv8;
  var v743$1: bv8;
  var v743$2: bv8;
  var v744$1: bv8;
  var v744$2: bv8;
  var v745$1: bool;
  var v745$2: bool;
  var v361$1: bv8;
  var v361$2: bv8;
  var v362$1: bv8;
  var v362$2: bv8;
  var v363$1: bv8;
  var v363$2: bv8;
  var v364$1: bv8;
  var v364$2: bv8;
  var v365$1: bool;
  var v365$2: bool;
  var v306$1: bv8;
  var v306$2: bv8;
  var v307$1: bv8;
  var v307$2: bv8;
  var v308$1: bv8;
  var v308$2: bv8;
  var v309$1: bv8;
  var v309$2: bv8;
  var v33$1: bv8;
  var v33$2: bv8;
  var v34$1: bv8;
  var v34$2: bv8;
  var v35$1: bv8;
  var v35$2: bv8;
  var v884$1: bv8;
  var v884$2: bv8;
  var v885$1: bv8;
  var v885$2: bv8;
  var v886$1: bv8;
  var v886$2: bv8;
  var v887$1: bv8;
  var v887$2: bv8;
  var v1081$1: bv8;
  var v1081$2: bv8;
  var v1082$1: bv8;
  var v1082$2: bv8;
  var v1083$1: bv8;
  var v1083$2: bv8;
  var v1084$1: bv8;
  var v1084$2: bv8;
  var v1085$1: bv8;
  var v1085$2: bv8;
  var v1086$1: bv8;
  var v1086$2: bv8;
  var v1087$1: bv8;
  var v1087$2: bv8;
  var v1088$1: bv8;
  var v1088$2: bv8;
  var v922$1: bv8;
  var v922$2: bv8;
  var v923$1: bv8;
  var v923$2: bv8;
  var v924$1: bv8;
  var v924$2: bv8;
  var v925$1: bv8;
  var v925$2: bv8;
  var v926$1: bool;
  var v926$2: bool;
  var v633$1: bv8;
  var v633$2: bv8;
  var v634$1: bv8;
  var v634$2: bv8;
  var v635$1: bv8;
  var v635$2: bv8;
  var v636$1: bool;
  var v636$2: bool;
  var v641$1: bv8;
  var v641$2: bv8;
  var v642$1: bv8;
  var v642$2: bv8;
  var v643$1: bv8;
  var v643$2: bv8;
  var v644$1: bv8;
  var v644$2: bv8;
  var v961$1: bv8;
  var v961$2: bv8;
  var v962$1: bv8;
  var v962$2: bv8;
  var v963$1: bv8;
  var v963$2: bv8;
  var v964$1: bv8;
  var v964$2: bv8;
  var v965$1: bool;
  var v965$2: bool;
  var v72$1: bv8;
  var v72$2: bv8;
  var v73$1: bv8;
  var v73$2: bv8;
  var v74$1: bv8;
  var v74$2: bv8;
  var v75$1: bv8;
  var v75$2: bv8;
  var v746$1: bv32;
  var v746$2: bv32;
  var v661$1: bv8;
  var v661$2: bv8;
  var v662$1: bv8;
  var v662$2: bv8;
  var v853$1: bv8;
  var v853$2: bv8;
  var v854$1: bv8;
  var v854$2: bv8;
  var v855$1: bv8;
  var v855$2: bv8;
  var v856$1: bv32;
  var v856$2: bv32;
  var v857$1: bv8;
  var v857$2: bv8;
  var v618$1: bv8;
  var v618$2: bv8;
  var v619$1: bv8;
  var v619$2: bv8;
  var v620$1: bv8;
  var v620$2: bv8;
  var v621$1: bv8;
  var v621$2: bv8;
  var v622$1: bool;
  var v622$2: bool;
  var v185$1: bv8;
  var v185$2: bv8;
  var v186$1: bv8;
  var v186$2: bv8;
  var v187$1: bv8;
  var v187$2: bv8;
  var v188$1: bv8;
  var v188$2: bv8;
  var v189$1: bv32;
  var v189$2: bv32;
  var v747$1: bv32;
  var v747$2: bv32;
  var v832$1: bv8;
  var v832$2: bv8;
  var v833$1: bv8;
  var v833$2: bv8;
  var v834$1: bv8;
  var v834$2: bv8;
  var v835$1: bv8;
  var v835$2: bv8;
  var v836$1: bool;
  var v836$2: bool;
  var v1003$1: bv8;
  var v1003$2: bv8;
  var v1004$1: bv8;
  var v1004$2: bv8;
  var v1005$1: bv8;
  var v1005$2: bv8;
  var v1006$1: bv8;
  var v1006$2: bv8;
  var v1007$1: bool;
  var v1007$2: bool;
  var v1008$1: bv32;
  var v1008$2: bv32;
  var v249$1: bv32;
  var v249$2: bv32;
  var v36$1: bv8;
  var v36$2: bv8;
  var v37$1: bv8;
  var v37$2: bv8;
  var v38$1: bv8;
  var v38$2: bv8;
  var v162$1: bv8;
  var v162$2: bv8;
  var v163$1: bv8;
  var v163$2: bv8;
  var v164$1: bv32;
  var v164$2: bv32;
  var v165$1: bv8;
  var v165$2: bv8;
  var v480$1: bv8;
  var v480$2: bv8;
  var v481$1: bv8;
  var v481$2: bv8;
  var v482$1: bv8;
  var v482$2: bv8;
  var v483$1: bv8;
  var v483$2: bv8;
  var v935$1: bv8;
  var v935$2: bv8;
  var v936$1: bv8;
  var v936$2: bv8;
  var v937$1: bv8;
  var v937$2: bv8;
  var v938$1: bv8;
  var v938$2: bv8;
  var v939$1: bool;
  var v939$2: bool;
  var v748$1: bv8;
  var v748$2: bv8;
  var v366$1: bv8;
  var v366$2: bv8;
  var v367$1: bv8;
  var v367$2: bv8;
  var v368$1: bv8;
  var v368$2: bv8;
  var v369$1: bv8;
  var v369$2: bv8;
  var v370$1: bv8;
  var v370$2: bv8;
  var v310$1: bv8;
  var v310$2: bv8;
  var v311$1: bv8;
  var v311$2: bv8;
  var v312$1: bv8;
  var v312$2: bv8;
  var v313$1: bv8;
  var v313$2: bv8;
  var v314$1: bv8;
  var v314$2: bv8;
  var v837$1: bv32;
  var v837$2: bv32;
  var v1009$1: bv32;
  var v1009$2: bv32;
  var v250$1: bv8;
  var v250$2: bv8;
  var v251$1: bv8;
  var v251$2: bv8;
  var v252$1: bv8;
  var v252$2: bv8;
  var v253$1: bv8;
  var v253$2: bv8;
  var v258$1: bv8;
  var v258$2: bv8;
  var v39$1: bv8;
  var v39$2: bv8;
  var v200$1: bv8;
  var v200$2: bv8;
  var v201$1: bv8;
  var v201$2: bv8;
  var v202$1: bv8;
  var v202$2: bv8;
  var v203$1: bv8;
  var v203$2: bv8;
  var v160$1: bv8;
  var v160$2: bv8;
  var v161$1: bv8;
  var v161$2: bv8;
  var v223$1: bv8;
  var v223$2: bv8;
  var v224$1: bv8;
  var v224$2: bv8;
  var v225$1: bv8;
  var v225$2: bv8;
  var v226$1: bv8;
  var v226$2: bv8;
  var v484$1: bool;
  var v484$2: bool;
  var v940$1: bv32;
  var v940$2: bv32;
  var v749$1: bv8;
  var v749$2: bv8;
  var v750$1: bv8;
  var v750$2: bv8;
  var v751$1: bv8;
  var v751$2: bv8;
  var v752$1: bool;
  var v752$2: bool;
  var v485$1: bv32;
  var v485$2: bv32;
  var v5$1: bv8;
  var v5$2: bv8;
  var v6$1: bv8;
  var v6$2: bv8;
  var v7$1: bv8;
  var v7$2: bv8;
  var v972$1: bv8;
  var v972$2: bv8;
  var v893$1: bv8;
  var v893$2: bv8;
  var v894$1: bv8;
  var v894$2: bv8;
  var v895$1: bv8;
  var v895$2: bv8;
  var v896$1: bv8;
  var v896$2: bv8;
  var v897$1: bool;
  var v897$2: bool;
  var v501$1: bv8;
  var v501$2: bv8;
  var v502$1: bv8;
  var v502$2: bv8;
  var v503$1: bv8;
  var v503$2: bv8;
  var v504$1: bv8;
  var v504$2: bv8;
  var v190$1: bv8;
  var v190$2: bv8;
  var v191$1: bv8;
  var v191$2: bv8;
  var v192$1: bv8;
  var v192$2: bv8;
  var v1109$1: bv8;
  var v1109$2: bv8;
  var v1110$1: bv8;
  var v1110$2: bv8;
  var v1111$1: bv8;
  var v1111$2: bv8;
  var v1112$1: bv8;
  var v1112$2: bv8;
  var v1113$1: bv32;
  var v1113$2: bv32;
  var v753$1: bv8;
  var v753$2: bv8;
  var v754$1: bv8;
  var v754$2: bv8;
  var v755$1: bv8;
  var v755$2: bv8;
  var v756$1: bv8;
  var v756$2: bv8;
  var v838$1: bv32;
  var v838$2: bv32;
  var v839$1: bv8;
  var v839$2: bv8;
  var v840$1: bv8;
  var v840$2: bv8;
  var v841$1: bv8;
  var v841$2: bv8;
  var v842$1: bv8;
  var v842$2: bv8;
  var v1010$1: bv8;
  var v1010$2: bv8;
  var v1011$1: bv8;
  var v1011$2: bv8;
  var v1012$1: bv8;
  var v1012$2: bv8;
  var v1013$1: bv8;
  var v1013$2: bv8;
  var v1014$1: bool;
  var v1014$2: bool;
  var v254$1: bv32;
  var v254$2: bv32;
  var v255$1: bv8;
  var v255$2: bv8;
  var v227$1: bv32;
  var v227$2: bv32;
  var v486$1: bv32;
  var v486$2: bv32;
  var v941$1: bv8;
  var v941$2: bv8;
  var v942$1: bv8;
  var v942$2: bv8;
  var v943$1: bv8;
  var v943$2: bv8;
  var v944$1: bv8;
  var v944$2: bv8;
  var v945$1: bool;
  var v945$2: bool;
  var v686$1: bv8;
  var v686$2: bv8;
  var v687$1: bv8;
  var v687$2: bv8;
  var v688$1: bv8;
  var v688$2: bv8;
  var v689$1: bv8;
  var v689$2: bv8;
  var v371$1: bv8;
  var v371$2: bv8;
  var v372$1: bv8;
  var v372$2: bv8;
  var v373$1: bv8;
  var v373$2: bv8;
  var v374$1: bv32;
  var v374$2: bv32;
  var v375$1: bv32;
  var v375$2: bv32;
  var v315$1: bv8;
  var v315$2: bv8;
  var v316$1: bv8;
  var v316$2: bv8;
  var v317$1: bv8;
  var v317$2: bv8;
  var v848$1: bv8;
  var v848$2: bv8;
  var v849$1: bv8;
  var v849$2: bv8;
  var v850$1: bv8;
  var v850$2: bv8;
  var v851$1: bv8;
  var v851$2: bv8;
  var v852$1: bv8;
  var v852$2: bv8;
  var v1015$1: bv32;
  var v1015$2: bv32;
  var v1016$1: bv32;
  var v1016$2: bv32;
  var v1017$1: bv32;
  var v1017$2: bv32;
  var v1018$1: bv8;
  var v1018$2: bv8;
  var v256$1: bv8;
  var v256$2: bv8;
  var v257$1: bv8;
  var v257$2: bv8;
  var v40$1: bv8;
  var v40$2: bv8;
  var v41$1: bv8;
  var v41$2: bv8;
  var v42$1: bv8;
  var v42$2: bv8;
  var v43$1: bv8;
  var v43$2: bv8;
  var v166$1: bv8;
  var v166$2: bv8;
  var v167$1: bv8;
  var v167$2: bv8;
  var v168$1: bv8;
  var v168$2: bv8;
  var v169$1: bv32;
  var v169$2: bv32;
  var v228$1: bv8;
  var v228$2: bv8;
  var v229$1: bv8;
  var v229$2: bv8;
  var v230$1: bv8;
  var v230$2: bv8;
  var v231$1: bv8;
  var v231$2: bv8;
  var v946$1: bv8;
  var v946$2: bv8;
  var v947$1: bv8;
  var v947$2: bv8;
  var v948$1: bv8;
  var v948$2: bv8;
  var v757$1: bv8;
  var v757$2: bv8;
  var v758$1: bv8;
  var v758$2: bv8;
  var v759$1: bv8;
  var v759$2: bv8;
  var v760$1: bv8;
  var v760$2: bv8;
  var v761$1: bv32;
  var v761$2: bv32;
  var v487$1: bv8;
  var v487$2: bv8;
  var v488$1: bv8;
  var v488$2: bv8;
  var v489$1: bv8;
  var v489$2: bv8;
  var v490$1: bv8;
  var v490$2: bv8;
  var v491$1: bool;
  var v491$2: bool;
  var v762$1: bv8;
  var v762$2: bv8;
  var v763$1: bv8;
  var v763$2: bv8;
  var v764$1: bv8;
  var v764$2: bv8;
  var v765$1: bv8;
  var v765$2: bv8;
  var v766$1: bool;
  var v766$2: bool;
  var v323$1: bv8;
  var v323$2: bv8;
  var v324$1: bv8;
  var v324$2: bv8;
  var v325$1: bv8;
  var v325$2: bv8;
  var v326$1: bv8;
  var v326$2: bv8;
  var v327$1: bool;
  var v327$2: bool;
  var v957$1: bv8;
  var v957$2: bv8;
  var v958$1: bv8;
  var v958$2: bv8;
  var v959$1: bv8;
  var v959$2: bv8;
  var v960$1: bool;
  var v960$2: bool;
  var v107$1: bv8;
  var v107$2: bv8;
  var v108$1: bv8;
  var v108$2: bv8;
  var v109$1: bv8;
  var v109$2: bv8;
  var v514$1: bv8;
  var v514$2: bv8;
  var v515$1: bv8;
  var v515$2: bv8;
  var v516$1: bv8;
  var v516$2: bv8;
  var v517$1: bv8;
  var v517$2: bv8;
  var v979$1: bool;
  var v979$2: bool;
  var v797$1: bv32;
  var v797$2: bv32;
  var v798$1: bv8;
  var v798$2: bv8;
  var v799$1: bv8;
  var v799$2: bv8;
  var v800$1: bv8;
  var v800$2: bv8;
  var v277$1: bool;
  var v277$2: bool;
  var v672$1: bv8;
  var v672$2: bv8;
  var v673$1: bv8;
  var v673$2: bv8;
  var v674$1: bv8;
  var v674$2: bv8;
  var v675$1: bv8;
  var v675$2: bv8;
  var v973$1: bv8;
  var v973$2: bv8;
  var v974$1: bv8;
  var v974$2: bv8;
  var v975$1: bv8;
  var v975$2: bv8;
  var v976$1: bool;
  var v976$2: bool;
  var v977$1: bv32;
  var v977$2: bv32;
  var v801$1: bv8;
  var v801$2: bv8;
  var v802$1: bool;
  var v802$2: bool;
  var v287$1: bv8;
  var v287$2: bv8;
  var v288$1: bv8;
  var v288$2: bv8;
  var v289$1: bv8;
  var v289$2: bv8;
  var v290$1: bv8;
  var v290$2: bv8;
  var v291$1: bool;
  var v291$2: bool;
  var v667$1: bv8;
  var v667$2: bv8;
  var v668$1: bv8;
  var v668$2: bv8;
  var v669$1: bv8;
  var v669$2: bv8;
  var v670$1: bv8;
  var v670$2: bv8;
  var v52$1: bv8;
  var v52$2: bv8;
  var v53$1: bv8;
  var v53$2: bv8;
  var v54$1: bv8;
  var v54$2: bv8;
  var v116$1: bv8;
  var v116$2: bv8;
  var v117$1: bv8;
  var v117$2: bv8;
  var v118$1: bv8;
  var v118$2: bv8;
  var v119$1: bv8;
  var v119$2: bv8;
  var v207$1: bv8;
  var v207$2: bv8;
  var v208$1: bv8;
  var v208$2: bv8;
  var v209$1: bv8;
  var v209$2: bv8;
  var v690$1: bv8;
  var v690$2: bv8;
  var v691$1: bv8;
  var v691$2: bv8;
  var v692$1: bv8;
  var v692$2: bv8;
  var v693$1: bv8;
  var v693$2: bv8;
  var v862$1: bv8;
  var v862$2: bv8;
  var v863$1: bv8;
  var v863$2: bv8;
  var v864$1: bv8;
  var v864$2: bv8;
  var v865$1: bv8;
  var v865$2: bv8;
  var v88$1: bv8;
  var v88$2: bv8;
  var v89$1: bv8;
  var v89$2: bv8;
  var v90$1: bv8;
  var v90$2: bv8;
  var v91$1: bv8;
  var v91$2: bv8;
  var v694$1: bool;
  var v694$2: bool;
  var v695$1: bv8;
  var v695$2: bv8;
  var v698$1: bv8;
  var v698$2: bv8;
  var v858$1: bv8;
  var v858$2: bv8;
  var v859$1: bv8;
  var v859$2: bv8;
  var v860$1: bv8;
  var v860$2: bv8;
  var v861$1: bool;
  var v861$2: bool;
  var v112$1: bv8;
  var v112$2: bv8;
  var v113$1: bv8;
  var v113$2: bv8;
  var v114$1: bv8;
  var v114$2: bv8;
  var v115$1: bv32;
  var v115$2: bv32;
  var v434$1: bv8;
  var v434$2: bv8;
  var v435$1: bv8;
  var v435$2: bv8;
  var v436$1: bv8;
  var v436$2: bv8;
  var v437$1: bv8;
  var v437$2: bv8;
  var v210$1: bv8;
  var v210$2: bv8;
  var v211$1: bv32;
  var v211$2: bv32;
  var v914$1: bv32;
  var v914$2: bv32;
  var v767$1: bv8;
  var v767$2: bv8;
  var v768$1: bv8;
  var v768$2: bv8;
  var v769$1: bv8;
  var v769$2: bv8;
  var v770$1: bv8;
  var v770$2: bv8;
  var v444$1: bv8;
  var v444$2: bv8;
  var v445$1: bv8;
  var v445$2: bv8;
  var v446$1: bv8;
  var v446$2: bv8;
  var v447$1: bool;
  var v447$2: bool;
  var v8$1: bv8;
  var v8$2: bv8;
  var v9$1: bv8;
  var v9$2: bv8;
  var v10$1: bv8;
  var v10$2: bv8;
  var v11$1: bv8;
  var v11$2: bv8;
  var v696$1: bv8;
  var v696$2: bv8;
  var v697$1: bv8;
  var v697$2: bv8;
  var v699$1: bv8;
  var v699$2: bv8;
  var v700$1: bv8;
  var v700$2: bv8;
  var v701$1: bv8;
  var v701$2: bv8;
  var v702$1: bv8;
  var v702$2: bv8;
  var v703$1: bool;
  var v703$2: bool;
  var v492$1: bv8;
  var v492$2: bv8;
  var v493$1: bv8;
  var v493$2: bv8;
  var v1057$1: bv8;
  var v1057$2: bv8;
  var v1058$1: bv8;
  var v1058$2: bv8;
  var v1059$1: bv8;
  var v1059$2: bv8;
  var v1060$1: bv8;
  var v1060$2: bv8;
  var v1061$1: bool;
  var v1061$2: bool;
  var v771$1: bv8;
  var v771$2: bv8;
  var v772$1: bv8;
  var v772$2: bv8;
  var v773$1: bv8;
  var v773$2: bv8;
  var v494$1: bv8;
  var v494$2: bv8;
  var v495$1: bv8;
  var v495$2: bv8;
  var v496$1: bv8;
  var v496$2: bv8;
  var v120$1: bv8;
  var v120$2: bv8;
  var v121$1: bv8;
  var v121$2: bv8;
  var v122$1: bv8;
  var v122$2: bv8;
  var v123$1: bv8;
  var v123$2: bv8;
  var v124$1: bv32;
  var v124$2: bv32;
  var v878$1: bv32;
  var v878$2: bv32;
  var v103$1: bv8;
  var v103$2: bv8;
  var v104$1: bv8;
  var v104$2: bv8;
  var v105$1: bv8;
  var v105$2: bv8;
  var v106$1: bool;
  var v106$2: bool;
  var v522$1: bv32;
  var v522$2: bv32;
  var v588$1: bv8;
  var v588$2: bv8;
  var v589$1: bv8;
  var v589$2: bv8;
  var v590$1: bv8;
  var v590$2: bv8;
  var v591$1: bv8;
  var v591$2: bv8;
  var v55$1: bv8;
  var v55$2: bv8;
  var v390$1: bv8;
  var v390$2: bv8;
  var v902$1: bv8;
  var v902$2: bv8;
  var v903$1: bv8;
  var v903$2: bv8;
  var v904$1: bv8;
  var v904$2: bv8;
  var v905$1: bv8;
  var v905$2: bv8;
  var v906$1: bv8;
  var v906$2: bv8;
  var v907$1: bv8;
  var v907$2: bv8;
  var v908$1: bv8;
  var v908$2: bv8;
  var v909$1: bv8;
  var v909$2: bv8;
  var v676$1: bv8;
  var v676$2: bv8;
  var v677$1: bv8;
  var v677$2: bv8;
  var v678$1: bv8;
  var v678$2: bv8;
  var v679$1: bv8;
  var v679$2: bv8;
  var v680$1: bv32;
  var v680$2: bv32;
  var v653$1: bv32;
  var v653$2: bv32;
  var v92$1: bv8;
  var v92$2: bv8;
  var v93$1: bv8;
  var v93$2: bv8;
  var v94$1: bv8;
  var v94$2: bv8;
  var v95$1: bv8;
  var v95$2: bv8;
  var v206$1: bool;
  var v206$2: bool;
  var v76$1: bv8;
  var v76$2: bv8;
  var v77$1: bv8;
  var v77$2: bv8;
  var v78$1: bv8;
  var v78$2: bv8;
  var v79$1: bv8;
  var v79$2: bv8;
  var v774$1: bv8;
  var v774$2: bv8;
  var v775$1: bv8;
  var v775$2: bv8;
  var v776$1: bv8;
  var v776$2: bv8;
  var v777$1: bv8;
  var v777$2: bv8;
  var v778$1: bv8;
  var v778$2: bv8;
  var v376$1: bv8;
  var v376$2: bv8;
  var v377$1: bv8;
  var v377$2: bv8;
  var v378$1: bv8;
  var v378$2: bv8;
  var v379$1: bv8;
  var v379$2: bv8;
  var v380$1: bool;
  var v380$2: bool;
  var v654$1: bv8;
  var v654$2: bv8;
  var v655$1: bv8;
  var v655$2: bv8;
  var v656$1: bv8;
  var v656$2: bv8;
  var v657$1: bv8;
  var v657$2: bv8;
  var v1019$1: bv8;
  var v1019$2: bv8;
  var v1020$1: bv8;
  var v1020$2: bv8;
  var v1021$1: bv8;
  var v1021$2: bv8;
  var v259$1: bv8;
  var v259$2: bv8;
  var v505$1: bool;
  var v505$2: bool;
  var v616$1: bv8;
  var v616$2: bv8;
  var v617$1: bv32;
  var v617$2: bv32;
  var v596$1: bv8;
  var v596$2: bv8;
  var v597$1: bv8;
  var v597$2: bv8;
  var v598$1: bv8;
  var v598$2: bv8;
  var v599$1: bv8;
  var v599$2: bv8;
  var v600$1: bool;
  var v600$2: bool;
  var v140$1: bv8;
  var v140$2: bv8;
  var v141$1: bv8;
  var v141$2: bv8;
  var v142$1: bv8;
  var v142$2: bv8;
  var v784$1: bv8;
  var v784$2: bv8;
  var v785$1: bv8;
  var v785$2: bv8;
  var v786$1: bv8;
  var v786$2: bv8;
  var v787$1: bv8;
  var v787$2: bv8;
  var v788$1: bool;
  var v788$2: bool;
  var v456$1: bool;
  var v456$2: bool;
  var v101$1: bv32;
  var v101$2: bv32;
  var v102$1: bv8;
  var v102$2: bv8;
  var v1105$1: bv8;
  var v1105$2: bv8;
  var v1106$1: bv8;
  var v1106$2: bv8;
  var v1107$1: bv8;
  var v1107$2: bv8;
  var v1108$1: bv8;
  var v1108$2: bv8;
  var v592$1: bv8;
  var v592$2: bv8;
  var v593$1: bv8;
  var v593$2: bv8;
  var v594$1: bv8;
  var v594$2: bv8;
  var v595$1: bv32;
  var v595$2: bv32;
  var v143$1: bv8;
  var v143$2: bv8;
  var v144$1: bv32;
  var v144$2: bv32;
  var v783$1: bv32;
  var v783$2: bv32;
  var v451$1: bv8;
  var v451$2: bv8;
  var v452$1: bv8;
  var v452$2: bv8;
  var v453$1: bv8;
  var v453$2: bv8;
  var v454$1: bv8;
  var v454$2: bv8;
  var v455$1: bv8;
  var v455$2: bv8;
  var v335$1: bv8;
  var v335$2: bv8;
  var v336$1: bv32;
  var v336$2: bv32;
  var v268$1: bv8;
  var v268$2: bv8;
  var v269$1: bv8;
  var v269$2: bv8;
  var v270$1: bv8;
  var v270$2: bv8;
  var v271$1: bv8;
  var v271$2: bv8;
  var v195$1: bv8;
  var v195$2: bv8;
  var v196$1: bv8;
  var v196$2: bv8;
  var v197$1: bv8;
  var v197$2: bv8;
  var v198$1: bv8;
  var v198$2: bv8;
  var v278$1: bv8;
  var v278$2: bv8;
  var v978$1: bv32;
  var v978$2: bv32;
  var v64$1: bv8;
  var v64$2: bv8;
  var v332$1: bv8;
  var v332$2: bv8;
  var v333$1: bv8;
  var v333$2: bv8;
  var v334$1: bv8;
  var v334$2: bv8;
  var v956$1: bv8;
  var v956$2: bv8;
  var v807$1: bv8;
  var v807$2: bv8;
  var v808$1: bv8;
  var v808$2: bv8;
  var v809$1: bv8;
  var v809$2: bv8;
  var v810$1: bv8;
  var v810$2: bv8;
  var v232$1: bool;
  var v232$2: bool;
  var v205: bool;
  var v631$1: bv32;
  var v631$2: bv32;
  var v632$1: bv8;
  var v632$2: bv8;
  var v99$1: bv8;
  var v99$2: bv8;
  var v48$1: bv8;
  var v48$2: bv8;
  var v49$1: bv8;
  var v49$2: bv8;
  var v50$1: bv8;
  var v50$2: bv8;
  var v51$1: bv8;
  var v51$2: bv8;
  var v394$1: bool;
  var v394$2: bool;
  var v68$1: bv8;
  var v68$2: bv8;
  var v69$1: bv8;
  var v69$2: bv8;
  var v70$1: bv8;
  var v70$2: bv8;
  var v71$1: bv8;
  var v71$2: bv8;
  var v803$1: bv8;
  var v803$2: bv8;
  var v804$1: bv8;
  var v804$2: bv8;
  var v805$1: bv8;
  var v805$2: bv8;
  var v806$1: bv8;
  var v806$2: bv8;
  var v879$1: bv8;
  var v879$2: bv8;
  var v880$1: bv8;
  var v880$2: bv8;
  var v881$1: bv8;
  var v881$2: bv8;
  var v882$1: bv8;
  var v882$2: bv8;
  var v883$1: bool;
  var v883$2: bool;
  var v56$1: bv8;
  var v56$2: bv8;
  var v57$1: bv8;
  var v57$2: bv8;
  var v58$1: bv8;
  var v58$2: bv8;
  var v59$1: bv8;
  var v59$2: bv8;
  var v110$1: bv8;
  var v110$2: bv8;
  var v100$1: bv32;
  var v100$2: bv32;
  var v170$1: bv8;
  var v170$2: bv8;
  var v171$1: bv8;
  var v171$2: bv8;
  var v172$1: bv8;
  var v172$2: bv8;
  var v429$1: bv8;
  var v429$2: bv8;
  var v430$1: bv8;
  var v430$2: bv8;
  var v431$1: bv8;
  var v431$2: bv8;
  var v432$1: bv8;
  var v432$2: bv8;
  var v1022$1: bv8;
  var v1022$2: bv8;
  var v1023$1: bv8;
  var v1023$2: bv8;
  var v1024$1: bv8;
  var v1024$2: bv8;
  var v1025$1: bv8;
  var v1025$2: bv8;
  var v1026$1: bool;
  var v1026$2: bool;
  var v260$1: bv8;
  var v260$2: bv8;
  var v261$1: bv8;
  var v261$2: bv8;
  var v262$1: bv8;
  var v262$2: bv8;
  var v263$1: bool;
  var v263$2: bool;
  var v1052$1: bv8;
  var v1052$2: bv8;
  var v1053$1: bv8;
  var v1053$2: bv8;
  var v1054$1: bv8;
  var v1054$2: bv8;
  var v1055$1: bv8;
  var v1055$2: bv8;
  var v1056$1: bool;
  var v1056$2: bool;
  var v1062$1: bv8;
  var v1062$2: bv8;
  var v1063$1: bv8;
  var v1063$2: bv8;
  var v1064$1: bv8;
  var v1064$2: bv8;
  var v1065$1: bv8;
  var v1065$2: bv8;
  var v469$1: bv32;
  var v469$2: bv32;
  var v279$1: bv8;
  var v279$2: bv8;
  var v280$1: bv8;
  var v280$2: bv8;
  var v281$1: bv8;
  var v281$2: bv8;
  var v282$1: bv8;
  var v282$2: bv8;
  var v283$1: bv8;
  var v283$2: bv8;
  var v284$1: bv8;
  var v284$2: bv8;
  var v285$1: bv8;
  var v285$2: bv8;
  var v559$1: bv8;
  var v559$2: bv8;
  var v560$1: bv8;
  var v560$2: bv8;
  var v561$1: bv8;
  var v561$2: bv8;
  var v562$1: bv8;
  var v562$2: bv8;
  var v563$1: bool;
  var v563$2: bool;
  var v13$1: bv8;
  var v13$2: bv8;
  var v14$1: bv8;
  var v14$2: bv8;
  var v15$1: bv8;
  var v15$2: bv8;
  var v233$1: bv8;
  var v233$2: bv8;
  var v234$1: bv8;
  var v234$2: bv8;
  var v235$1: bv8;
  var v235$2: bv8;
  var v236$1: bv8;
  var v236$2: bv8;
  var v660$1: bv32;
  var v660$2: bv32;
  var v318$1: bv8;
  var v318$2: bv8;
  var v319$1: bv8;
  var v319$2: bv8;
  var v320$1: bv8;
  var v320$2: bv8;
  var v321$1: bv8;
  var v321$2: bv8;
  var v843$1: bv8;
  var v843$2: bv8;
  var v1027$1: bv32;
  var v1027$2: bv32;
  var v1028$1: bv32;
  var v1028$2: bv32;
  var v44$1: bv8;
  var v44$2: bv8;
  var v45$1: bv8;
  var v45$2: bv8;
  var v46$1: bv8;
  var v46$2: bv8;
  var v391$1: bv8;
  var v391$2: bv8;
  var v392$1: bv8;
  var v392$2: bv8;
  var v393$1: bv8;
  var v393$2: bv8;
  var v506$1: bv8;
  var v506$2: bv8;
  var v507$1: bv8;
  var v507$2: bv8;
  var v508$1: bv8;
  var v508$2: bv8;
  var v509$1: bv8;
  var v509$2: bv8;
  var v518$1: bv8;
  var v518$2: bv8;
  var v519$1: bv8;
  var v519$2: bv8;
  var v520$1: bv8;
  var v520$2: bv8;
  var v521$1: bv8;
  var v521$2: bv8;
  var v1255$1: bv8;
  var v1255$2: bv8;
  var v1256$1: bv8;
  var v1256$2: bv8;
  var v1257$1: bv8;
  var v1257$2: bv8;
  var v1258$1: bv8;
  var v1258$2: bv8;
  var v1259$1: bv8;
  var v1259$2: bv8;
  var v1260$1: bv32;
  var v1260$2: bv32;
  var v1261$1: bv8;
  var v1261$2: bv8;
  var v1262$1: bv8;
  var v1262$2: bv8;
  var v1263$1: bv8;
  var v1263$2: bv8;
  var v1264$1: bv8;
  var v1264$2: bv8;
  var v1265$1: bv32;
  var v1265$2: bv32;
  var p0$1: bool;
  var p0$2: bool;
  var p1$1: bool;
  var p1$2: bool;
  var p2$1: bool;
  var p2$2: bool;
  var p3$1: bool;
  var p3$2: bool;
  var p4$1: bool;
  var p4$2: bool;
  var p5$1: bool;
  var p5$2: bool;
  var p6$1: bool;
  var p6$2: bool;
  var p7$1: bool;
  var p7$2: bool;
  var p8$1: bool;
  var p8$2: bool;
  var p9$1: bool;
  var p9$2: bool;
  var p10$1: bool;
  var p10$2: bool;
  var p11$1: bool;
  var p11$2: bool;
  var p12$1: bool;
  var p12$2: bool;
  var p13$1: bool;
  var p13$2: bool;
  var p14$1: bool;
  var p14$2: bool;
  var p15$1: bool;
  var p15$2: bool;
  var p16$1: bool;
  var p16$2: bool;
  var p17$1: bool;
  var p17$2: bool;
  var p18$1: bool;
  var p18$2: bool;
  var p19$1: bool;
  var p19$2: bool;
  var p20$1: bool;
  var p20$2: bool;
  var p21$1: bool;
  var p21$2: bool;
  var p22$1: bool;
  var p22$2: bool;
  var p23$1: bool;
  var p23$2: bool;
  var p24$1: bool;
  var p24$2: bool;
  var p25$1: bool;
  var p25$2: bool;
  var p26$1: bool;
  var p26$2: bool;
  var p27$1: bool;
  var p27$2: bool;
  var p28$1: bool;
  var p28$2: bool;
  var p29$1: bool;
  var p29$2: bool;
  var p30$1: bool;
  var p30$2: bool;
  var p31$1: bool;
  var p31$2: bool;
  var p32$1: bool;
  var p32$2: bool;
  var p33$1: bool;
  var p33$2: bool;
  var p34$1: bool;
  var p34$2: bool;
  var p35$1: bool;
  var p35$2: bool;
  var p36$1: bool;
  var p36$2: bool;
  var p37$1: bool;
  var p37$2: bool;
  var p38$1: bool;
  var p38$2: bool;
  var p39$1: bool;
  var p39$2: bool;
  var p40$1: bool;
  var p40$2: bool;
  var p41$1: bool;
  var p41$2: bool;
  var p42$1: bool;
  var p42$2: bool;
  var p43$1: bool;
  var p43$2: bool;
  var p44$1: bool;
  var p44$2: bool;
  var p45$1: bool;
  var p45$2: bool;
  var p46$1: bool;
  var p46$2: bool;
  var p47$1: bool;
  var p47$2: bool;
  var p48$1: bool;
  var p48$2: bool;
  var p49$1: bool;
  var p49$2: bool;
  var p50$1: bool;
  var p50$2: bool;
  var p51$1: bool;
  var p51$2: bool;
  var p52$1: bool;
  var p52$2: bool;
  var p53$1: bool;
  var p53$2: bool;
  var p54$1: bool;
  var p54$2: bool;
  var p55$1: bool;
  var p55$2: bool;
  var p56$1: bool;
  var p56$2: bool;
  var p57$1: bool;
  var p57$2: bool;
  var p58$1: bool;
  var p58$2: bool;
  var p59$1: bool;
  var p59$2: bool;
  var p60$1: bool;
  var p60$2: bool;
  var p61$1: bool;
  var p61$2: bool;
  var p62$1: bool;
  var p62$2: bool;
  var p63$1: bool;
  var p63$2: bool;
  var p64$1: bool;
  var p64$2: bool;
  var p65$1: bool;
  var p65$2: bool;
  var p66$1: bool;
  var p66$2: bool;
  var p67$1: bool;
  var p67$2: bool;
  var p68$1: bool;
  var p68$2: bool;
  var p69$1: bool;
  var p69$2: bool;
  var p70$1: bool;
  var p70$2: bool;
  var p71$1: bool;
  var p71$2: bool;
  var p72$1: bool;
  var p72$2: bool;
  var p73$1: bool;
  var p73$2: bool;
  var p74$1: bool;
  var p74$2: bool;
  var p75$1: bool;
  var p75$2: bool;
  var p76$1: bool;
  var p76$2: bool;
  var p77$1: bool;
  var p77$2: bool;
  var p78$1: bool;
  var p78$2: bool;
  var p79$1: bool;
  var p79$2: bool;
  var p80$1: bool;
  var p80$2: bool;
  var p81$1: bool;
  var p81$2: bool;
  var p82$1: bool;
  var p82$2: bool;
  var p83$1: bool;
  var p83$2: bool;
  var p84$1: bool;
  var p84$2: bool;
  var p85$1: bool;
  var p85$2: bool;
  var p86$1: bool;
  var p86$2: bool;
  var p87$1: bool;
  var p87$2: bool;
  var p88$1: bool;
  var p88$2: bool;
  var p89$1: bool;
  var p89$2: bool;
  var p90$1: bool;
  var p90$2: bool;
  var p91$1: bool;
  var p91$2: bool;
  var p92$1: bool;
  var p92$2: bool;
  var p93$1: bool;
  var p93$2: bool;
  var p94$1: bool;
  var p94$2: bool;
  var p95$1: bool;
  var p95$2: bool;
  var p96$1: bool;
  var p96$2: bool;
  var p97$1: bool;
  var p97$2: bool;
  var p98$1: bool;
  var p98$2: bool;
  var p99$1: bool;
  var p99$2: bool;
  var p100$1: bool;
  var p100$2: bool;
  var p101$1: bool;
  var p101$2: bool;
  var p102$1: bool;
  var p102$2: bool;
  var p103$1: bool;
  var p103$2: bool;
  var p104$1: bool;
  var p104$2: bool;
  var p105$1: bool;
  var p105$2: bool;
  var p106$1: bool;
  var p106$2: bool;
  var p107$1: bool;
  var p107$2: bool;
  var p108$1: bool;
  var p108$2: bool;
  var p109$1: bool;
  var p109$2: bool;
  var p110$1: bool;
  var p110$2: bool;
  var p111$1: bool;
  var p111$2: bool;
  var p112$1: bool;
  var p112$2: bool;
  var p113$1: bool;
  var p113$2: bool;
  var p114$1: bool;
  var p114$2: bool;
  var p115$1: bool;
  var p115$2: bool;
  var p116$1: bool;
  var p116$2: bool;
  var p117$1: bool;
  var p117$2: bool;
  var p118$1: bool;
  var p118$2: bool;
  var p119$1: bool;
  var p119$2: bool;
  var p120$1: bool;
  var p120$2: bool;
  var p121$1: bool;
  var p121$2: bool;
  var p122$1: bool;
  var p122$2: bool;
  var p123$1: bool;
  var p123$2: bool;
  var p124$1: bool;
  var p124$2: bool;
  var p125$1: bool;
  var p125$2: bool;
  var p126$1: bool;
  var p126$2: bool;
  var p127$1: bool;
  var p127$2: bool;
  var p128$1: bool;
  var p128$2: bool;
  var p129$1: bool;
  var p129$2: bool;
  var p130$1: bool;
  var p130$2: bool;
  var p131$1: bool;
  var p131$2: bool;
  var p132$1: bool;
  var p132$2: bool;
  var p133$1: bool;
  var p133$2: bool;
  var p134$1: bool;
  var p134$2: bool;
  var p135$1: bool;
  var p135$2: bool;
  var p136$1: bool;
  var p136$2: bool;
  var p137$1: bool;
  var p137$2: bool;
  var p138$1: bool;
  var p138$2: bool;
  var p139$1: bool;
  var p139$2: bool;
  var p140$1: bool;
  var p140$2: bool;
  var p141$1: bool;
  var p141$2: bool;
  var p142$1: bool;
  var p142$2: bool;
  var p143$1: bool;
  var p143$2: bool;
  var p144$1: bool;
  var p144$2: bool;
  var p145$1: bool;
  var p145$2: bool;
  var p146$1: bool;
  var p146$2: bool;
  var p147$1: bool;
  var p147$2: bool;
  var p148$1: bool;
  var p148$2: bool;
  var p149$1: bool;
  var p149$2: bool;
  var p150$1: bool;
  var p150$2: bool;
  var p151$1: bool;
  var p151$2: bool;
  var p152$1: bool;
  var p152$2: bool;
  var p153$1: bool;
  var p153$2: bool;
  var p154$1: bool;
  var p154$2: bool;
  var p155$1: bool;
  var p155$2: bool;
  var p156$1: bool;
  var p156$2: bool;
  var p157$1: bool;
  var p157$2: bool;
  var p158$1: bool;
  var p158$2: bool;
  var p159$1: bool;
  var p159$2: bool;
  var p160$1: bool;
  var p160$2: bool;
  var p161$1: bool;
  var p161$2: bool;
  var p162$1: bool;
  var p162$2: bool;
  var p163$1: bool;
  var p163$2: bool;
  var p164$1: bool;
  var p164$2: bool;
  var p165$1: bool;
  var p165$2: bool;
  var p166$1: bool;
  var p166$2: bool;
  var p167$1: bool;
  var p167$2: bool;
  var p168$1: bool;
  var p168$2: bool;
  var p169$1: bool;
  var p169$2: bool;
  var p170$1: bool;
  var p170$2: bool;
  var p171$1: bool;
  var p171$2: bool;
  var p172$1: bool;
  var p172$2: bool;
  var p173$1: bool;
  var p173$2: bool;
  var p174$1: bool;
  var p174$2: bool;
  var p175$1: bool;
  var p175$2: bool;
  var p176$1: bool;
  var p176$2: bool;
  var p177$1: bool;
  var p177$2: bool;
  var p178$1: bool;
  var p178$2: bool;
  var p179$1: bool;
  var p179$2: bool;
  var p180$1: bool;
  var p180$2: bool;
  var p181$1: bool;
  var p181$2: bool;
  var p182$1: bool;
  var p182$2: bool;
  var p183$1: bool;
  var p183$2: bool;
  var p184$1: bool;
  var p184$2: bool;
  var p185$1: bool;
  var p185$2: bool;
  var p186$1: bool;
  var p186$2: bool;
  var p187$1: bool;
  var p187$2: bool;
  var p188$1: bool;
  var p188$2: bool;
  var p189$1: bool;
  var p189$2: bool;
  var p190$1: bool;
  var p190$2: bool;
  var p191$1: bool;
  var p191$2: bool;
  var p192$1: bool;
  var p192$2: bool;
  var p193$1: bool;
  var p193$2: bool;
  var p194$1: bool;
  var p194$2: bool;
  var p195$1: bool;
  var p195$2: bool;
  var p196$1: bool;
  var p196$2: bool;
  var p197$1: bool;
  var p197$2: bool;
  var p198$1: bool;
  var p198$2: bool;
  var p199$1: bool;
  var p199$2: bool;
  var p200$1: bool;
  var p200$2: bool;
  var p201$1: bool;
  var p201$2: bool;
  var p202$1: bool;
  var p202$2: bool;
  var p203$1: bool;
  var p203$2: bool;
  var p204$1: bool;
  var p204$2: bool;
  var p205$1: bool;
  var p205$2: bool;
  var p206$1: bool;
  var p206$2: bool;
  var p207$1: bool;
  var p207$2: bool;
  var p208$1: bool;
  var p208$2: bool;
  var p209$1: bool;
  var p209$2: bool;
  var p210$1: bool;
  var p210$2: bool;
  var p211$1: bool;
  var p211$2: bool;
  var p212$1: bool;
  var p212$2: bool;
  var p213$1: bool;
  var p213$2: bool;
  var p214$1: bool;
  var p214$2: bool;
  var p215$1: bool;
  var p215$2: bool;
  var p216$1: bool;
  var p216$2: bool;
  var p217$1: bool;
  var p217$2: bool;
  var p218$1: bool;
  var p218$2: bool;
  var p219$1: bool;
  var p219$2: bool;
  var p220$1: bool;
  var p220$2: bool;
  var p221$1: bool;
  var p221$2: bool;
  var p222$1: bool;
  var p222$2: bool;
  var p223$1: bool;
  var p223$2: bool;
  var p224$1: bool;
  var p224$2: bool;
  var p225$1: bool;
  var p225$2: bool;
  var p226$1: bool;
  var p226$2: bool;
  var p227$1: bool;
  var p227$2: bool;
  var p228$1: bool;
  var p228$2: bool;
  var p229$1: bool;
  var p229$2: bool;
  var p230$1: bool;
  var p230$2: bool;
  var p231$1: bool;
  var p231$2: bool;
  var p232$1: bool;
  var p232$2: bool;
  var p233$1: bool;
  var p233$2: bool;
  var p234$1: bool;
  var p234$2: bool;
  var p235$1: bool;
  var p235$2: bool;
  var p236$1: bool;
  var p236$2: bool;
  var p237$1: bool;
  var p237$2: bool;
  var p238$1: bool;
  var p238$2: bool;
  var p239$1: bool;
  var p239$2: bool;
  var p240$1: bool;
  var p240$2: bool;
  var p241$1: bool;
  var p241$2: bool;
  var p242$1: bool;
  var p242$2: bool;
  var p243$1: bool;
  var p243$2: bool;
  var p244$1: bool;
  var p244$2: bool;
  var p245$1: bool;
  var p245$2: bool;
  var p246$1: bool;
  var p246$2: bool;
  var p247$1: bool;
  var p247$2: bool;
  var p248$1: bool;
  var p248$2: bool;
  var p249$1: bool;
  var p249$2: bool;
  var p250$1: bool;
  var p250$2: bool;
  var p251$1: bool;
  var p251$2: bool;
  var p252$1: bool;
  var p252$2: bool;
  var p253$1: bool;
  var p253$2: bool;
  var p254$1: bool;
  var p254$2: bool;
  var p255$1: bool;
  var p255$2: bool;
  var p256$1: bool;
  var p256$2: bool;
  var p257$1: bool;
  var p257$2: bool;
  var p258$1: bool;
  var p258$2: bool;
  var p259$1: bool;
  var p259$2: bool;
  var p260$1: bool;
  var p260$2: bool;
  var p261$1: bool;
  var p261$2: bool;
  var p262$1: bool;
  var p262$2: bool;
  var p263$1: bool;
  var p263$2: bool;
  var p264$1: bool;
  var p264$2: bool;
  var p265$1: bool;
  var p265$2: bool;
  var p266$1: bool;
  var p266$2: bool;
  var p267$1: bool;
  var p267$2: bool;
  var p268$1: bool;
  var p268$2: bool;
  var p269$1: bool;
  var p269$2: bool;
  var p270$1: bool;
  var p270$2: bool;
  var p271$1: bool;
  var p271$2: bool;
  var p272$1: bool;
  var p272$2: bool;
  var p273$1: bool;
  var p273$2: bool;
  var p274$1: bool;
  var p274$2: bool;
  var p275$1: bool;
  var p275$2: bool;
  var p276$1: bool;
  var p276$2: bool;
  var p277$1: bool;
  var p277$2: bool;
  var p278$1: bool;
  var p278$2: bool;
  var p279$1: bool;
  var p279$2: bool;
  var p280$1: bool;
  var p280$2: bool;
  var p281$1: bool;
  var p281$2: bool;
  var p282$1: bool;
  var p282$2: bool;
  var p283$1: bool;
  var p283$2: bool;
  var p284$1: bool;
  var p284$2: bool;
  var p285$1: bool;
  var p285$2: bool;
  var p286$1: bool;
  var p286$2: bool;
  var p287$1: bool;
  var p287$2: bool;
  var p288$1: bool;
  var p288$2: bool;
  var p289$1: bool;
  var p289$2: bool;
  var p290$1: bool;
  var p290$2: bool;
  var p291$1: bool;
  var p291$2: bool;
  var p292$1: bool;
  var p292$2: bool;
  var p293$1: bool;
  var p293$2: bool;
  var p294$1: bool;
  var p294$2: bool;
  var p295$1: bool;
  var p295$2: bool;
  var p296$1: bool;
  var p296$2: bool;
  var p297$1: bool;
  var p297$2: bool;
  var p298$1: bool;
  var p298$2: bool;
  var p299$1: bool;
  var p299$2: bool;
  var p300$1: bool;
  var p300$2: bool;
  var p301$1: bool;
  var p301$2: bool;
  var p302$1: bool;
  var p302$2: bool;
  var p303$1: bool;
  var p303$2: bool;
  var p304$1: bool;
  var p304$2: bool;
  var p305$1: bool;
  var p305$2: bool;
  var p306$1: bool;
  var p306$2: bool;
  var p307$1: bool;
  var p307$2: bool;
  var p308$1: bool;
  var p308$2: bool;
  var p309$1: bool;
  var p309$2: bool;
  var p310$1: bool;
  var p310$2: bool;
  var p311$1: bool;
  var p311$2: bool;
  var p312$1: bool;
  var p312$2: bool;
  var p313$1: bool;
  var p313$2: bool;
  var p314$1: bool;
  var p314$2: bool;
  var _HAVOC_bv32$1: bv32;
  var _HAVOC_bv32$2: bv32;


  $0:
    $$d_common$0bv32$1 := $d_common.coerce0[8:0];
    $$d_common$0bv32$2 := $d_common.coerce0[8:0];
    $$d_common$1bv32$1 := $d_common.coerce0[16:8];
    $$d_common$1bv32$2 := $d_common.coerce0[16:8];
    $$d_common$2bv32$1 := $d_common.coerce0[24:16];
    $$d_common$2bv32$2 := $d_common.coerce0[24:16];
    $$d_common$3bv32$1 := $d_common.coerce0[32:24];
    $$d_common$3bv32$2 := $d_common.coerce0[32:24];
    $$d_common$4bv32$1 := $d_common.coerce1[8:0];
    $$d_common$4bv32$2 := $d_common.coerce1[8:0];
    $$d_common$5bv32$1 := $d_common.coerce1[16:8];
    $$d_common$5bv32$2 := $d_common.coerce1[16:8];
    $$d_common$6bv32$1 := $d_common.coerce1[24:16];
    $$d_common$6bv32$2 := $d_common.coerce1[24:16];
    $$d_common$7bv32$1 := $d_common.coerce1[32:24];
    $$d_common$7bv32$2 := $d_common.coerce1[32:24];
    $$d_common$8bv32$1 := $d_common.coerce2[8:0];
    $$d_common$8bv32$2 := $d_common.coerce2[8:0];
    $$d_common$9bv32$1 := $d_common.coerce2[16:8];
    $$d_common$9bv32$2 := $d_common.coerce2[16:8];
    $$d_common$10bv32$1 := $d_common.coerce2[24:16];
    $$d_common$10bv32$2 := $d_common.coerce2[24:16];
    $$d_common$11bv32$1 := $d_common.coerce2[32:24];
    $$d_common$11bv32$2 := $d_common.coerce2[32:24];
    $$d_common$12bv32$1 := $d_common.coerce3[8:0];
    $$d_common$12bv32$2 := $d_common.coerce3[8:0];
    $$d_common$13bv32$1 := $d_common.coerce3[16:8];
    $$d_common$13bv32$2 := $d_common.coerce3[16:8];
    $$d_common$14bv32$1 := $d_common.coerce3[24:16];
    $$d_common$14bv32$2 := $d_common.coerce3[24:16];
    $$d_common$15bv32$1 := $d_common.coerce3[32:24];
    $$d_common$15bv32$2 := $d_common.coerce3[32:24];
    $$d_common$16bv32$1 := $d_common.coerce4[8:0];
    $$d_common$16bv32$2 := $d_common.coerce4[8:0];
    $$d_common$17bv32$1 := $d_common.coerce4[16:8];
    $$d_common$17bv32$2 := $d_common.coerce4[16:8];
    $$d_common$18bv32$1 := $d_common.coerce4[24:16];
    $$d_common$18bv32$2 := $d_common.coerce4[24:16];
    $$d_common$19bv32$1 := $d_common.coerce4[32:24];
    $$d_common$19bv32$2 := $d_common.coerce4[32:24];
    $$d_common$20bv32$1 := $d_common.coerce5[8:0];
    $$d_common$20bv32$2 := $d_common.coerce5[8:0];
    $$d_common$21bv32$1 := $d_common.coerce5[16:8];
    $$d_common$21bv32$2 := $d_common.coerce5[16:8];
    $$d_common$22bv32$1 := $d_common.coerce5[24:16];
    $$d_common$22bv32$2 := $d_common.coerce5[24:16];
    $$d_common$23bv32$1 := $d_common.coerce5[32:24];
    $$d_common$23bv32$2 := $d_common.coerce5[32:24];
    $$d_common$24bv32$1 := $d_common.coerce6[8:0];
    $$d_common$24bv32$2 := $d_common.coerce6[8:0];
    $$d_common$25bv32$1 := $d_common.coerce6[16:8];
    $$d_common$25bv32$2 := $d_common.coerce6[16:8];
    $$d_common$26bv32$1 := $d_common.coerce6[24:16];
    $$d_common$26bv32$2 := $d_common.coerce6[24:16];
    $$d_common$27bv32$1 := $d_common.coerce6[32:24];
    $$d_common$27bv32$2 := $d_common.coerce6[32:24];
    $$d_common$28bv32$1 := $d_common.coerce7[8:0];
    $$d_common$28bv32$2 := $d_common.coerce7[8:0];
    $$d_common$29bv32$1 := $d_common.coerce7[16:8];
    $$d_common$29bv32$2 := $d_common.coerce7[16:8];
    $$d_common$30bv32$1 := $d_common.coerce7[24:16];
    $$d_common$30bv32$2 := $d_common.coerce7[24:16];
    $$d_common$31bv32$1 := $d_common.coerce7[32:24];
    $$d_common$31bv32$2 := $d_common.coerce7[32:24];
    $$d_common$32bv32$1 := $d_common.coerce8[8:0];
    $$d_common$32bv32$2 := $d_common.coerce8[8:0];
    $$d_common$33bv32$1 := $d_common.coerce8[16:8];
    $$d_common$33bv32$2 := $d_common.coerce8[16:8];
    $$d_common$34bv32$1 := $d_common.coerce8[24:16];
    $$d_common$34bv32$2 := $d_common.coerce8[24:16];
    $$d_common$35bv32$1 := $d_common.coerce8[32:24];
    $$d_common$35bv32$2 := $d_common.coerce8[32:24];
    $$d_common$36bv32$1 := $d_common.coerce9[8:0];
    $$d_common$36bv32$2 := $d_common.coerce9[8:0];
    $$d_common$37bv32$1 := $d_common.coerce9[16:8];
    $$d_common$37bv32$2 := $d_common.coerce9[16:8];
    $$d_common$38bv32$1 := $d_common.coerce9[24:16];
    $$d_common$38bv32$2 := $d_common.coerce9[24:16];
    $$d_common$39bv32$1 := $d_common.coerce9[32:24];
    $$d_common$39bv32$2 := $d_common.coerce9[32:24];
    $$d_common$40bv32$1 := $d_common.coerce10[8:0];
    $$d_common$40bv32$2 := $d_common.coerce10[8:0];
    $$d_common$41bv32$1 := $d_common.coerce10[16:8];
    $$d_common$41bv32$2 := $d_common.coerce10[16:8];
    $$d_common$42bv32$1 := $d_common.coerce10[24:16];
    $$d_common$42bv32$2 := $d_common.coerce10[24:16];
    $$d_common$43bv32$1 := $d_common.coerce10[32:24];
    $$d_common$43bv32$2 := $d_common.coerce10[32:24];
    $$d_common$44bv32$1 := $d_common.coerce11[8:0];
    $$d_common$44bv32$2 := $d_common.coerce11[8:0];
    $$d_common$45bv32$1 := $d_common.coerce11[16:8];
    $$d_common$45bv32$2 := $d_common.coerce11[16:8];
    $$d_common$46bv32$1 := $d_common.coerce11[24:16];
    $$d_common$46bv32$2 := $d_common.coerce11[24:16];
    $$d_common$47bv32$1 := $d_common.coerce11[32:24];
    $$d_common$47bv32$2 := $d_common.coerce11[32:24];
    $$d_common$48bv32$1 := $d_common.coerce12[8:0];
    $$d_common$48bv32$2 := $d_common.coerce12[8:0];
    $$d_common$49bv32$1 := $d_common.coerce12[16:8];
    $$d_common$49bv32$2 := $d_common.coerce12[16:8];
    $$d_common$50bv32$1 := $d_common.coerce12[24:16];
    $$d_common$50bv32$2 := $d_common.coerce12[24:16];
    $$d_common$51bv32$1 := $d_common.coerce12[32:24];
    $$d_common$51bv32$2 := $d_common.coerce12[32:24];
    $$d_common$52bv32$1 := $d_common.coerce13[8:0];
    $$d_common$52bv32$2 := $d_common.coerce13[8:0];
    $$d_common$53bv32$1 := $d_common.coerce13[16:8];
    $$d_common$53bv32$2 := $d_common.coerce13[16:8];
    $$d_common$54bv32$1 := $d_common.coerce13[24:16];
    $$d_common$54bv32$2 := $d_common.coerce13[24:16];
    $$d_common$55bv32$1 := $d_common.coerce13[32:24];
    $$d_common$55bv32$2 := $d_common.coerce13[32:24];
    $$d_common$56bv32$1 := $d_common.coerce14[8:0];
    $$d_common$56bv32$2 := $d_common.coerce14[8:0];
    $$d_common$57bv32$1 := $d_common.coerce14[16:8];
    $$d_common$57bv32$2 := $d_common.coerce14[16:8];
    $$d_common$58bv32$1 := $d_common.coerce14[24:16];
    $$d_common$58bv32$2 := $d_common.coerce14[24:16];
    $$d_common$59bv32$1 := $d_common.coerce14[32:24];
    $$d_common$59bv32$2 := $d_common.coerce14[32:24];
    $$d_common$60bv32$1 := $d_common.coerce15[8:0];
    $$d_common$60bv32$2 := $d_common.coerce15[8:0];
    $$d_common$61bv32$1 := $d_common.coerce15[16:8];
    $$d_common$61bv32$2 := $d_common.coerce15[16:8];
    $$d_common$62bv32$1 := $d_common.coerce15[24:16];
    $$d_common$62bv32$2 := $d_common.coerce15[24:16];
    $$d_common$63bv32$1 := $d_common.coerce15[32:24];
    $$d_common$63bv32$2 := $d_common.coerce15[32:24];
    $$d_common$64bv32$1 := $d_common.coerce16[8:0];
    $$d_common$64bv32$2 := $d_common.coerce16[8:0];
    $$d_common$65bv32$1 := $d_common.coerce16[16:8];
    $$d_common$65bv32$2 := $d_common.coerce16[16:8];
    $$d_common$66bv32$1 := $d_common.coerce16[24:16];
    $$d_common$66bv32$2 := $d_common.coerce16[24:16];
    $$d_common$67bv32$1 := $d_common.coerce16[32:24];
    $$d_common$67bv32$2 := $d_common.coerce16[32:24];
    $$d_common$68bv32$1 := $d_common.coerce17[8:0];
    $$d_common$68bv32$2 := $d_common.coerce17[8:0];
    $$d_common$69bv32$1 := $d_common.coerce17[16:8];
    $$d_common$69bv32$2 := $d_common.coerce17[16:8];
    $$d_common$70bv32$1 := $d_common.coerce17[24:16];
    $$d_common$70bv32$2 := $d_common.coerce17[24:16];
    $$d_common$71bv32$1 := $d_common.coerce17[32:24];
    $$d_common$71bv32$2 := $d_common.coerce17[32:24];
    $$d_common$72bv32$1 := $d_common.coerce18[8:0];
    $$d_common$72bv32$2 := $d_common.coerce18[8:0];
    $$d_common$73bv32$1 := $d_common.coerce18[16:8];
    $$d_common$73bv32$2 := $d_common.coerce18[16:8];
    $$d_common$74bv32$1 := $d_common.coerce18[24:16];
    $$d_common$74bv32$2 := $d_common.coerce18[24:16];
    $$d_common$75bv32$1 := $d_common.coerce18[32:24];
    $$d_common$75bv32$2 := $d_common.coerce18[32:24];
    $$d_common$76bv32$1 := $d_common.coerce19[8:0];
    $$d_common$76bv32$2 := $d_common.coerce19[8:0];
    $$d_common$77bv32$1 := $d_common.coerce19[16:8];
    $$d_common$77bv32$2 := $d_common.coerce19[16:8];
    $$d_common$78bv32$1 := $d_common.coerce19[24:16];
    $$d_common$78bv32$2 := $d_common.coerce19[24:16];
    $$d_common$79bv32$1 := $d_common.coerce19[32:24];
    $$d_common$79bv32$2 := $d_common.coerce19[32:24];
    $$d_common$80bv32$1 := $d_common.coerce20[8:0];
    $$d_common$80bv32$2 := $d_common.coerce20[8:0];
    $$d_common$81bv32$1 := $d_common.coerce20[16:8];
    $$d_common$81bv32$2 := $d_common.coerce20[16:8];
    $$d_common$82bv32$1 := $d_common.coerce20[24:16];
    $$d_common$82bv32$2 := $d_common.coerce20[24:16];
    $$d_common$83bv32$1 := $d_common.coerce20[32:24];
    $$d_common$83bv32$2 := $d_common.coerce20[32:24];
    $$d_common$84bv32$1 := $d_common.coerce21[8:0];
    $$d_common$84bv32$2 := $d_common.coerce21[8:0];
    $$d_common$85bv32$1 := $d_common.coerce21[16:8];
    $$d_common$85bv32$2 := $d_common.coerce21[16:8];
    $$d_common$86bv32$1 := $d_common.coerce21[24:16];
    $$d_common$86bv32$2 := $d_common.coerce21[24:16];
    $$d_common$87bv32$1 := $d_common.coerce21[32:24];
    $$d_common$87bv32$2 := $d_common.coerce21[32:24];
    $$d_common$88bv32$1 := $d_common.coerce22[8:0];
    $$d_common$88bv32$2 := $d_common.coerce22[8:0];
    $$d_common$89bv32$1 := $d_common.coerce22[16:8];
    $$d_common$89bv32$2 := $d_common.coerce22[16:8];
    $$d_common$90bv32$1 := $d_common.coerce22[24:16];
    $$d_common$90bv32$2 := $d_common.coerce22[24:16];
    $$d_common$91bv32$1 := $d_common.coerce22[32:24];
    $$d_common$91bv32$2 := $d_common.coerce22[32:24];
    $$d_common$92bv32$1 := $d_common.coerce23[8:0];
    $$d_common$92bv32$2 := $d_common.coerce23[8:0];
    $$d_common$93bv32$1 := $d_common.coerce23[16:8];
    $$d_common$93bv32$2 := $d_common.coerce23[16:8];
    $$d_common$94bv32$1 := $d_common.coerce23[24:16];
    $$d_common$94bv32$2 := $d_common.coerce23[24:16];
    $$d_common$95bv32$1 := $d_common.coerce23[32:24];
    $$d_common$95bv32$2 := $d_common.coerce23[32:24];
    $$d_common$96bv32$1 := $d_common.coerce24[8:0];
    $$d_common$96bv32$2 := $d_common.coerce24[8:0];
    $$d_common$97bv32$1 := $d_common.coerce24[16:8];
    $$d_common$97bv32$2 := $d_common.coerce24[16:8];
    $$d_common$98bv32$1 := $d_common.coerce24[24:16];
    $$d_common$98bv32$2 := $d_common.coerce24[24:16];
    $$d_common$99bv32$1 := $d_common.coerce24[32:24];
    $$d_common$99bv32$2 := $d_common.coerce24[32:24];
    $$d_common$100bv32$1 := $d_common.coerce25[8:0];
    $$d_common$100bv32$2 := $d_common.coerce25[8:0];
    $$d_common$101bv32$1 := $d_common.coerce25[16:8];
    $$d_common$101bv32$2 := $d_common.coerce25[16:8];
    $$d_common$102bv32$1 := $d_common.coerce25[24:16];
    $$d_common$102bv32$2 := $d_common.coerce25[24:16];
    $$d_common$103bv32$1 := $d_common.coerce25[32:24];
    $$d_common$103bv32$2 := $d_common.coerce25[32:24];
    $$d_common$104bv32$1 := $d_common.coerce26[8:0];
    $$d_common$104bv32$2 := $d_common.coerce26[8:0];
    $$d_common$105bv32$1 := $d_common.coerce26[16:8];
    $$d_common$105bv32$2 := $d_common.coerce26[16:8];
    $$d_common$106bv32$1 := $d_common.coerce26[24:16];
    $$d_common$106bv32$2 := $d_common.coerce26[24:16];
    $$d_common$107bv32$1 := $d_common.coerce26[32:24];
    $$d_common$107bv32$2 := $d_common.coerce26[32:24];
    $$d_common$108bv32$1 := $d_common.coerce27[8:0];
    $$d_common$108bv32$2 := $d_common.coerce27[8:0];
    $$d_common$109bv32$1 := $d_common.coerce27[16:8];
    $$d_common$109bv32$2 := $d_common.coerce27[16:8];
    $$d_common$110bv32$1 := $d_common.coerce27[24:16];
    $$d_common$110bv32$2 := $d_common.coerce27[24:16];
    $$d_common$111bv32$1 := $d_common.coerce27[32:24];
    $$d_common$111bv32$2 := $d_common.coerce27[32:24];
    $$d_common$112bv32$1 := $d_common.coerce28[8:0];
    $$d_common$112bv32$2 := $d_common.coerce28[8:0];
    $$d_common$113bv32$1 := $d_common.coerce28[16:8];
    $$d_common$113bv32$2 := $d_common.coerce28[16:8];
    $$d_common$114bv32$1 := $d_common.coerce28[24:16];
    $$d_common$114bv32$2 := $d_common.coerce28[24:16];
    $$d_common$115bv32$1 := $d_common.coerce28[32:24];
    $$d_common$115bv32$2 := $d_common.coerce28[32:24];
    $$d_common$116bv32$1 := $d_common.coerce29[8:0];
    $$d_common$116bv32$2 := $d_common.coerce29[8:0];
    $$d_common$117bv32$1 := $d_common.coerce29[16:8];
    $$d_common$117bv32$2 := $d_common.coerce29[16:8];
    $$d_common$118bv32$1 := $d_common.coerce29[24:16];
    $$d_common$118bv32$2 := $d_common.coerce29[24:16];
    $$d_common$119bv32$1 := $d_common.coerce29[32:24];
    $$d_common$119bv32$2 := $d_common.coerce29[32:24];
    $$d_common$120bv32$1 := $d_common.coerce30[8:0];
    $$d_common$120bv32$2 := $d_common.coerce30[8:0];
    $$d_common$121bv32$1 := $d_common.coerce30[16:8];
    $$d_common$121bv32$2 := $d_common.coerce30[16:8];
    $$d_common$122bv32$1 := $d_common.coerce30[24:16];
    $$d_common$122bv32$2 := $d_common.coerce30[24:16];
    $$d_common$123bv32$1 := $d_common.coerce30[32:24];
    $$d_common$123bv32$2 := $d_common.coerce30[32:24];
    $$d_common$124bv32$1 := $d_common.coerce31[8:0];
    $$d_common$124bv32$2 := $d_common.coerce31[8:0];
    $$d_common$125bv32$1 := $d_common.coerce31[16:8];
    $$d_common$125bv32$2 := $d_common.coerce31[16:8];
    $$d_common$126bv32$1 := $d_common.coerce31[24:16];
    $$d_common$126bv32$2 := $d_common.coerce31[24:16];
    $$d_common$127bv32$1 := $d_common.coerce31[32:24];
    $$d_common$127bv32$2 := $d_common.coerce31[32:24];
    $$d_common$128bv32$1 := $d_common.coerce32[8:0];
    $$d_common$128bv32$2 := $d_common.coerce32[8:0];
    $$d_common$129bv32$1 := $d_common.coerce32[16:8];
    $$d_common$129bv32$2 := $d_common.coerce32[16:8];
    $$d_common$130bv32$1 := $d_common.coerce32[24:16];
    $$d_common$130bv32$2 := $d_common.coerce32[24:16];
    $$d_common$131bv32$1 := $d_common.coerce32[32:24];
    $$d_common$131bv32$2 := $d_common.coerce32[32:24];
    $$d_common$132bv32$1 := $d_common.coerce33[8:0];
    $$d_common$132bv32$2 := $d_common.coerce33[8:0];
    $$d_common$133bv32$1 := $d_common.coerce33[16:8];
    $$d_common$133bv32$2 := $d_common.coerce33[16:8];
    $$d_common$134bv32$1 := $d_common.coerce33[24:16];
    $$d_common$134bv32$2 := $d_common.coerce33[24:16];
    $$d_common$135bv32$1 := $d_common.coerce33[32:24];
    $$d_common$135bv32$2 := $d_common.coerce33[32:24];
    $$d_common$136bv32$1 := $d_common.coerce34[8:0];
    $$d_common$136bv32$2 := $d_common.coerce34[8:0];
    $$d_common$137bv32$1 := $d_common.coerce34[16:8];
    $$d_common$137bv32$2 := $d_common.coerce34[16:8];
    $$d_common$138bv32$1 := $d_common.coerce34[24:16];
    $$d_common$138bv32$2 := $d_common.coerce34[24:16];
    $$d_common$139bv32$1 := $d_common.coerce34[32:24];
    $$d_common$139bv32$2 := $d_common.coerce34[32:24];
    $$d_common$140bv32$1 := $d_common.coerce35[8:0];
    $$d_common$140bv32$2 := $d_common.coerce35[8:0];
    $$d_common$141bv32$1 := $d_common.coerce35[16:8];
    $$d_common$141bv32$2 := $d_common.coerce35[16:8];
    $$d_common$142bv32$1 := $d_common.coerce35[24:16];
    $$d_common$142bv32$2 := $d_common.coerce35[24:16];
    $$d_common$143bv32$1 := $d_common.coerce35[32:24];
    $$d_common$143bv32$2 := $d_common.coerce35[32:24];
    $$d_common$144bv32$1 := $d_common.coerce36[8:0];
    $$d_common$144bv32$2 := $d_common.coerce36[8:0];
    $$d_common$145bv32$1 := $d_common.coerce36[16:8];
    $$d_common$145bv32$2 := $d_common.coerce36[16:8];
    $$d_common$146bv32$1 := $d_common.coerce36[24:16];
    $$d_common$146bv32$2 := $d_common.coerce36[24:16];
    $$d_common$147bv32$1 := $d_common.coerce36[32:24];
    $$d_common$147bv32$2 := $d_common.coerce36[32:24];
    $$d_common$148bv32$1 := $d_common.coerce37[8:0];
    $$d_common$148bv32$2 := $d_common.coerce37[8:0];
    $$d_common$149bv32$1 := $d_common.coerce37[16:8];
    $$d_common$149bv32$2 := $d_common.coerce37[16:8];
    $$d_common$150bv32$1 := $d_common.coerce37[24:16];
    $$d_common$150bv32$2 := $d_common.coerce37[24:16];
    $$d_common$151bv32$1 := $d_common.coerce37[32:24];
    $$d_common$151bv32$2 := $d_common.coerce37[32:24];
    $$d_common$152bv32$1 := $d_common.coerce38[8:0];
    $$d_common$152bv32$2 := $d_common.coerce38[8:0];
    $$d_common$153bv32$1 := $d_common.coerce38[16:8];
    $$d_common$153bv32$2 := $d_common.coerce38[16:8];
    $$d_common$154bv32$1 := $d_common.coerce38[24:16];
    $$d_common$154bv32$2 := $d_common.coerce38[24:16];
    $$d_common$155bv32$1 := $d_common.coerce38[32:24];
    $$d_common$155bv32$2 := $d_common.coerce38[32:24];
    $$d_common$156bv32$1 := $d_common.coerce39[8:0];
    $$d_common$156bv32$2 := $d_common.coerce39[8:0];
    $$d_common$157bv32$1 := $d_common.coerce39[16:8];
    $$d_common$157bv32$2 := $d_common.coerce39[16:8];
    $$d_common$158bv32$1 := $d_common.coerce39[24:16];
    $$d_common$158bv32$2 := $d_common.coerce39[24:16];
    $$d_common$159bv32$1 := $d_common.coerce39[32:24];
    $$d_common$159bv32$2 := $d_common.coerce39[32:24];
    $$d_common$160bv32$1 := $d_common.coerce40[8:0];
    $$d_common$160bv32$2 := $d_common.coerce40[8:0];
    $$d_common$161bv32$1 := $d_common.coerce40[16:8];
    $$d_common$161bv32$2 := $d_common.coerce40[16:8];
    $$d_common$162bv32$1 := $d_common.coerce40[24:16];
    $$d_common$162bv32$2 := $d_common.coerce40[24:16];
    $$d_common$163bv32$1 := $d_common.coerce40[32:24];
    $$d_common$163bv32$2 := $d_common.coerce40[32:24];
    $$d_common$164bv32$1 := $d_common.coerce41[8:0];
    $$d_common$164bv32$2 := $d_common.coerce41[8:0];
    $$d_common$165bv32$1 := $d_common.coerce41[16:8];
    $$d_common$165bv32$2 := $d_common.coerce41[16:8];
    $$d_common$166bv32$1 := $d_common.coerce41[24:16];
    $$d_common$166bv32$2 := $d_common.coerce41[24:16];
    $$d_common$167bv32$1 := $d_common.coerce41[32:24];
    $$d_common$167bv32$2 := $d_common.coerce41[32:24];
    $$d_common$168bv32$1 := $d_common.coerce42[8:0];
    $$d_common$168bv32$2 := $d_common.coerce42[8:0];
    $$d_common$169bv32$1 := $d_common.coerce42[16:8];
    $$d_common$169bv32$2 := $d_common.coerce42[16:8];
    $$d_common$170bv32$1 := $d_common.coerce42[24:16];
    $$d_common$170bv32$2 := $d_common.coerce42[24:16];
    $$d_common$171bv32$1 := $d_common.coerce42[32:24];
    $$d_common$171bv32$2 := $d_common.coerce42[32:24];
    $$d_common$172bv32$1 := $d_common.coerce43[8:0];
    $$d_common$172bv32$2 := $d_common.coerce43[8:0];
    $$d_common$173bv32$1 := $d_common.coerce43[16:8];
    $$d_common$173bv32$2 := $d_common.coerce43[16:8];
    $$d_common$174bv32$1 := $d_common.coerce43[24:16];
    $$d_common$174bv32$2 := $d_common.coerce43[24:16];
    $$d_common$175bv32$1 := $d_common.coerce43[32:24];
    $$d_common$175bv32$2 := $d_common.coerce43[32:24];
    $$d_common$176bv32$1 := $d_common.coerce44[8:0];
    $$d_common$176bv32$2 := $d_common.coerce44[8:0];
    $$d_common$177bv32$1 := $d_common.coerce44[16:8];
    $$d_common$177bv32$2 := $d_common.coerce44[16:8];
    $$d_common$178bv32$1 := $d_common.coerce44[24:16];
    $$d_common$178bv32$2 := $d_common.coerce44[24:16];
    $$d_common$179bv32$1 := $d_common.coerce44[32:24];
    $$d_common$179bv32$2 := $d_common.coerce44[32:24];
    $$d_common$180bv32$1 := $d_common.coerce45[8:0];
    $$d_common$180bv32$2 := $d_common.coerce45[8:0];
    $$d_common$181bv32$1 := $d_common.coerce45[16:8];
    $$d_common$181bv32$2 := $d_common.coerce45[16:8];
    $$d_common$182bv32$1 := $d_common.coerce45[24:16];
    $$d_common$182bv32$2 := $d_common.coerce45[24:16];
    $$d_common$183bv32$1 := $d_common.coerce45[32:24];
    $$d_common$183bv32$2 := $d_common.coerce45[32:24];
    $$d_common$184bv32$1 := $d_common.coerce46[8:0];
    $$d_common$184bv32$2 := $d_common.coerce46[8:0];
    $$d_common$185bv32$1 := $d_common.coerce46[16:8];
    $$d_common$185bv32$2 := $d_common.coerce46[16:8];
    $$d_common$186bv32$1 := $d_common.coerce46[24:16];
    $$d_common$186bv32$2 := $d_common.coerce46[24:16];
    $$d_common$187bv32$1 := $d_common.coerce46[32:24];
    $$d_common$187bv32$2 := $d_common.coerce46[32:24];
    $$d_common$188bv32$1 := $d_common.coerce47[8:0];
    $$d_common$188bv32$2 := $d_common.coerce47[8:0];
    $$d_common$189bv32$1 := $d_common.coerce47[16:8];
    $$d_common$189bv32$2 := $d_common.coerce47[16:8];
    $$d_common$190bv32$1 := $d_common.coerce47[24:16];
    $$d_common$190bv32$2 := $d_common.coerce47[24:16];
    $$d_common$191bv32$1 := $d_common.coerce47[32:24];
    $$d_common$191bv32$2 := $d_common.coerce47[32:24];
    $$d_common$192bv32$1 := $d_common.coerce48[8:0];
    $$d_common$192bv32$2 := $d_common.coerce48[8:0];
    $$d_common$193bv32$1 := $d_common.coerce48[16:8];
    $$d_common$193bv32$2 := $d_common.coerce48[16:8];
    $$d_common$194bv32$1 := $d_common.coerce48[24:16];
    $$d_common$194bv32$2 := $d_common.coerce48[24:16];
    $$d_common$195bv32$1 := $d_common.coerce48[32:24];
    $$d_common$195bv32$2 := $d_common.coerce48[32:24];
    $$d_common$196bv32$1 := $d_common.coerce49[8:0];
    $$d_common$196bv32$2 := $d_common.coerce49[8:0];
    $$d_common$197bv32$1 := $d_common.coerce49[16:8];
    $$d_common$197bv32$2 := $d_common.coerce49[16:8];
    $$d_common$198bv32$1 := $d_common.coerce49[24:16];
    $$d_common$198bv32$2 := $d_common.coerce49[24:16];
    $$d_common$199bv32$1 := $d_common.coerce49[32:24];
    $$d_common$199bv32$2 := $d_common.coerce49[32:24];
    $$d_common$200bv32$1 := $d_common.coerce50[8:0];
    $$d_common$200bv32$2 := $d_common.coerce50[8:0];
    $$d_common$201bv32$1 := $d_common.coerce50[16:8];
    $$d_common$201bv32$2 := $d_common.coerce50[16:8];
    $$d_common$202bv32$1 := $d_common.coerce50[24:16];
    $$d_common$202bv32$2 := $d_common.coerce50[24:16];
    $$d_common$203bv32$1 := $d_common.coerce50[32:24];
    $$d_common$203bv32$2 := $d_common.coerce50[32:24];
    $$d_common$204bv32$1 := $d_common.coerce51[8:0];
    $$d_common$204bv32$2 := $d_common.coerce51[8:0];
    $$d_common$205bv32$1 := $d_common.coerce51[16:8];
    $$d_common$205bv32$2 := $d_common.coerce51[16:8];
    $$d_common$206bv32$1 := $d_common.coerce51[24:16];
    $$d_common$206bv32$2 := $d_common.coerce51[24:16];
    $$d_common$207bv32$1 := $d_common.coerce51[32:24];
    $$d_common$207bv32$2 := $d_common.coerce51[32:24];
    $$d_common$208bv32$1 := $d_common.coerce52[8:0];
    $$d_common$208bv32$2 := $d_common.coerce52[8:0];
    $$d_common$209bv32$1 := $d_common.coerce52[16:8];
    $$d_common$209bv32$2 := $d_common.coerce52[16:8];
    $$d_common$210bv32$1 := $d_common.coerce52[24:16];
    $$d_common$210bv32$2 := $d_common.coerce52[24:16];
    $$d_common$211bv32$1 := $d_common.coerce52[32:24];
    $$d_common$211bv32$2 := $d_common.coerce52[32:24];
    $$d_common$212bv32$1 := $d_common.coerce53[8:0];
    $$d_common$212bv32$2 := $d_common.coerce53[8:0];
    $$d_common$213bv32$1 := $d_common.coerce53[16:8];
    $$d_common$213bv32$2 := $d_common.coerce53[16:8];
    $$d_common$214bv32$1 := $d_common.coerce53[24:16];
    $$d_common$214bv32$2 := $d_common.coerce53[24:16];
    $$d_common$215bv32$1 := $d_common.coerce53[32:24];
    $$d_common$215bv32$2 := $d_common.coerce53[32:24];
    $$d_common$216bv32$1 := $d_common.coerce54[8:0];
    $$d_common$216bv32$2 := $d_common.coerce54[8:0];
    $$d_common$217bv32$1 := $d_common.coerce54[16:8];
    $$d_common$217bv32$2 := $d_common.coerce54[16:8];
    $$d_common$218bv32$1 := $d_common.coerce54[24:16];
    $$d_common$218bv32$2 := $d_common.coerce54[24:16];
    $$d_common$219bv32$1 := $d_common.coerce54[32:24];
    $$d_common$219bv32$2 := $d_common.coerce54[32:24];
    $$d_common$220bv32$1 := $d_common.coerce55[8:0];
    $$d_common$220bv32$2 := $d_common.coerce55[8:0];
    $$d_common$221bv32$1 := $d_common.coerce55[16:8];
    $$d_common$221bv32$2 := $d_common.coerce55[16:8];
    $$d_common$222bv32$1 := $d_common.coerce55[24:16];
    $$d_common$222bv32$2 := $d_common.coerce55[24:16];
    $$d_common$223bv32$1 := $d_common.coerce55[32:24];
    $$d_common$223bv32$2 := $d_common.coerce55[32:24];
    $$d_common$224bv32$1 := $d_common.coerce56[8:0];
    $$d_common$224bv32$2 := $d_common.coerce56[8:0];
    $$d_common$225bv32$1 := $d_common.coerce56[16:8];
    $$d_common$225bv32$2 := $d_common.coerce56[16:8];
    $$d_common$226bv32$1 := $d_common.coerce56[24:16];
    $$d_common$226bv32$2 := $d_common.coerce56[24:16];
    $$d_common$227bv32$1 := $d_common.coerce56[32:24];
    $$d_common$227bv32$2 := $d_common.coerce56[32:24];
    $$d_common$228bv32$1 := $d_common.coerce57[8:0];
    $$d_common$228bv32$2 := $d_common.coerce57[8:0];
    $$d_common$229bv32$1 := $d_common.coerce57[16:8];
    $$d_common$229bv32$2 := $d_common.coerce57[16:8];
    $$d_common$230bv32$1 := $d_common.coerce57[24:16];
    $$d_common$230bv32$2 := $d_common.coerce57[24:16];
    $$d_common$231bv32$1 := $d_common.coerce57[32:24];
    $$d_common$231bv32$2 := $d_common.coerce57[32:24];
    $$d_common$232bv32$1 := $d_common.coerce58[8:0];
    $$d_common$232bv32$2 := $d_common.coerce58[8:0];
    $$d_common$233bv32$1 := $d_common.coerce58[16:8];
    $$d_common$233bv32$2 := $d_common.coerce58[16:8];
    $$d_common$234bv32$1 := $d_common.coerce58[24:16];
    $$d_common$234bv32$2 := $d_common.coerce58[24:16];
    $$d_common$235bv32$1 := $d_common.coerce58[32:24];
    $$d_common$235bv32$2 := $d_common.coerce58[32:24];
    $$d_common$236bv32$1 := $d_common.coerce59[8:0];
    $$d_common$236bv32$2 := $d_common.coerce59[8:0];
    $$d_common$237bv32$1 := $d_common.coerce59[16:8];
    $$d_common$237bv32$2 := $d_common.coerce59[16:8];
    $$d_common$238bv32$1 := $d_common.coerce59[24:16];
    $$d_common$238bv32$2 := $d_common.coerce59[24:16];
    $$d_common$239bv32$1 := $d_common.coerce59[32:24];
    $$d_common$239bv32$2 := $d_common.coerce59[32:24];
    $$d_common$240bv32$1 := $d_common.coerce60[8:0];
    $$d_common$240bv32$2 := $d_common.coerce60[8:0];
    $$d_common$241bv32$1 := $d_common.coerce60[16:8];
    $$d_common$241bv32$2 := $d_common.coerce60[16:8];
    $$d_common$242bv32$1 := $d_common.coerce60[24:16];
    $$d_common$242bv32$2 := $d_common.coerce60[24:16];
    $$d_common$243bv32$1 := $d_common.coerce60[32:24];
    $$d_common$243bv32$2 := $d_common.coerce60[32:24];
    $$d_common$244bv32$1 := $d_common.coerce61[8:0];
    $$d_common$244bv32$2 := $d_common.coerce61[8:0];
    $$d_common$245bv32$1 := $d_common.coerce61[16:8];
    $$d_common$245bv32$2 := $d_common.coerce61[16:8];
    $$d_common$246bv32$1 := $d_common.coerce61[24:16];
    $$d_common$246bv32$2 := $d_common.coerce61[24:16];
    $$d_common$247bv32$1 := $d_common.coerce61[32:24];
    $$d_common$247bv32$2 := $d_common.coerce61[32:24];
    $$d_common$248bv32$1 := $d_common.coerce62[8:0];
    $$d_common$248bv32$2 := $d_common.coerce62[8:0];
    $$d_common$249bv32$1 := $d_common.coerce62[16:8];
    $$d_common$249bv32$2 := $d_common.coerce62[16:8];
    $$d_common$250bv32$1 := $d_common.coerce62[24:16];
    $$d_common$250bv32$2 := $d_common.coerce62[24:16];
    $$d_common$251bv32$1 := $d_common.coerce62[32:24];
    $$d_common$251bv32$2 := $d_common.coerce62[32:24];
    $$d_common$252bv32$1 := $d_common.coerce63[8:0];
    $$d_common$252bv32$2 := $d_common.coerce63[8:0];
    $$d_common$253bv32$1 := $d_common.coerce63[16:8];
    $$d_common$253bv32$2 := $d_common.coerce63[16:8];
    $$d_common$254bv32$1 := $d_common.coerce63[24:16];
    $$d_common$254bv32$2 := $d_common.coerce63[24:16];
    $$d_common$255bv32$1 := $d_common.coerce63[32:24];
    $$d_common$255bv32$2 := $d_common.coerce63[32:24];
    $$d_common$256bv32$1 := $d_common.coerce64[8:0];
    $$d_common$256bv32$2 := $d_common.coerce64[8:0];
    $$d_common$257bv32$1 := $d_common.coerce64[16:8];
    $$d_common$257bv32$2 := $d_common.coerce64[16:8];
    $$d_common$258bv32$1 := $d_common.coerce64[24:16];
    $$d_common$258bv32$2 := $d_common.coerce64[24:16];
    $$d_common$259bv32$1 := $d_common.coerce64[32:24];
    $$d_common$259bv32$2 := $d_common.coerce64[32:24];
    $$d_common$260bv32$1 := $d_common.coerce65[8:0];
    $$d_common$260bv32$2 := $d_common.coerce65[8:0];
    $$d_common$261bv32$1 := $d_common.coerce65[16:8];
    $$d_common$261bv32$2 := $d_common.coerce65[16:8];
    $$d_common$262bv32$1 := $d_common.coerce65[24:16];
    $$d_common$262bv32$2 := $d_common.coerce65[24:16];
    $$d_common$263bv32$1 := $d_common.coerce65[32:24];
    $$d_common$263bv32$2 := $d_common.coerce65[32:24];
    $$d_common$264bv32$1 := $d_common.coerce66[8:0];
    $$d_common$264bv32$2 := $d_common.coerce66[8:0];
    $$d_common$265bv32$1 := $d_common.coerce66[16:8];
    $$d_common$265bv32$2 := $d_common.coerce66[16:8];
    $$d_common$266bv32$1 := $d_common.coerce66[24:16];
    $$d_common$266bv32$2 := $d_common.coerce66[24:16];
    $$d_common$267bv32$1 := $d_common.coerce66[32:24];
    $$d_common$267bv32$2 := $d_common.coerce66[32:24];
    $$d_common$268bv32$1 := $d_common.coerce67[8:0];
    $$d_common$268bv32$2 := $d_common.coerce67[8:0];
    $$d_common$269bv32$1 := $d_common.coerce67[16:8];
    $$d_common$269bv32$2 := $d_common.coerce67[16:8];
    $$d_common$270bv32$1 := $d_common.coerce67[24:16];
    $$d_common$270bv32$2 := $d_common.coerce67[24:16];
    $$d_common$271bv32$1 := $d_common.coerce67[32:24];
    $$d_common$271bv32$2 := $d_common.coerce67[32:24];
    $$d_common$272bv32$1 := $d_common.coerce68[8:0];
    $$d_common$272bv32$2 := $d_common.coerce68[8:0];
    $$d_common$273bv32$1 := $d_common.coerce68[16:8];
    $$d_common$273bv32$2 := $d_common.coerce68[16:8];
    $$d_common$274bv32$1 := $d_common.coerce68[24:16];
    $$d_common$274bv32$2 := $d_common.coerce68[24:16];
    $$d_common$275bv32$1 := $d_common.coerce68[32:24];
    $$d_common$275bv32$2 := $d_common.coerce68[32:24];
    $$d_common$276bv32$1 := $d_common.coerce69[8:0];
    $$d_common$276bv32$2 := $d_common.coerce69[8:0];
    $$d_common$277bv32$1 := $d_common.coerce69[16:8];
    $$d_common$277bv32$2 := $d_common.coerce69[16:8];
    $$d_common$278bv32$1 := $d_common.coerce69[24:16];
    $$d_common$278bv32$2 := $d_common.coerce69[24:16];
    $$d_common$279bv32$1 := $d_common.coerce69[32:24];
    $$d_common$279bv32$2 := $d_common.coerce69[32:24];
    $$d_common$280bv32$1 := $d_common.coerce70[8:0];
    $$d_common$280bv32$2 := $d_common.coerce70[8:0];
    $$d_common$281bv32$1 := $d_common.coerce70[16:8];
    $$d_common$281bv32$2 := $d_common.coerce70[16:8];
    $$d_common$282bv32$1 := $d_common.coerce70[24:16];
    $$d_common$282bv32$2 := $d_common.coerce70[24:16];
    $$d_common$283bv32$1 := $d_common.coerce70[32:24];
    $$d_common$283bv32$2 := $d_common.coerce70[32:24];
    $$d_common$284bv32$1 := $d_common.coerce71[8:0];
    $$d_common$284bv32$2 := $d_common.coerce71[8:0];
    $$d_common$285bv32$1 := $d_common.coerce71[16:8];
    $$d_common$285bv32$2 := $d_common.coerce71[16:8];
    $$d_common$286bv32$1 := $d_common.coerce71[24:16];
    $$d_common$286bv32$2 := $d_common.coerce71[24:16];
    $$d_common$287bv32$1 := $d_common.coerce71[32:24];
    $$d_common$287bv32$2 := $d_common.coerce71[32:24];
    $$d_common$288bv32$1 := $d_common.coerce72[8:0];
    $$d_common$288bv32$2 := $d_common.coerce72[8:0];
    $$d_common$289bv32$1 := $d_common.coerce72[16:8];
    $$d_common$289bv32$2 := $d_common.coerce72[16:8];
    $$d_common$290bv32$1 := $d_common.coerce72[24:16];
    $$d_common$290bv32$2 := $d_common.coerce72[24:16];
    $$d_common$291bv32$1 := $d_common.coerce72[32:24];
    $$d_common$291bv32$2 := $d_common.coerce72[32:24];
    $$d_common$292bv32$1 := $d_common.coerce73[8:0];
    $$d_common$292bv32$2 := $d_common.coerce73[8:0];
    $$d_common$293bv32$1 := $d_common.coerce73[16:8];
    $$d_common$293bv32$2 := $d_common.coerce73[16:8];
    $$d_common$294bv32$1 := $d_common.coerce73[24:16];
    $$d_common$294bv32$2 := $d_common.coerce73[24:16];
    $$d_common$295bv32$1 := $d_common.coerce73[32:24];
    $$d_common$295bv32$2 := $d_common.coerce73[32:24];
    $$d_common$296bv32$1 := $d_common.coerce74[8:0];
    $$d_common$296bv32$2 := $d_common.coerce74[8:0];
    $$d_common$297bv32$1 := $d_common.coerce74[16:8];
    $$d_common$297bv32$2 := $d_common.coerce74[16:8];
    $$d_common$298bv32$1 := $d_common.coerce74[24:16];
    $$d_common$298bv32$2 := $d_common.coerce74[24:16];
    $$d_common$299bv32$1 := $d_common.coerce74[32:24];
    $$d_common$299bv32$2 := $d_common.coerce74[32:24];
    $$d_common$300bv32$1 := $d_common.coerce75[8:0];
    $$d_common$300bv32$2 := $d_common.coerce75[8:0];
    $$d_common$301bv32$1 := $d_common.coerce75[16:8];
    $$d_common$301bv32$2 := $d_common.coerce75[16:8];
    $$d_common$302bv32$1 := $d_common.coerce75[24:16];
    $$d_common$302bv32$2 := $d_common.coerce75[24:16];
    $$d_common$303bv32$1 := $d_common.coerce75[32:24];
    $$d_common$303bv32$2 := $d_common.coerce75[32:24];
    $$d_common$304bv32$1 := $d_common.coerce76[8:0];
    $$d_common$304bv32$2 := $d_common.coerce76[8:0];
    $$d_common$305bv32$1 := $d_common.coerce76[16:8];
    $$d_common$305bv32$2 := $d_common.coerce76[16:8];
    $$d_common$306bv32$1 := $d_common.coerce76[24:16];
    $$d_common$306bv32$2 := $d_common.coerce76[24:16];
    $$d_common$307bv32$1 := $d_common.coerce76[32:24];
    $$d_common$307bv32$2 := $d_common.coerce76[32:24];
    $$d_common$308bv32$1 := $d_common.coerce77[8:0];
    $$d_common$308bv32$2 := $d_common.coerce77[8:0];
    $$d_common$309bv32$1 := $d_common.coerce77[16:8];
    $$d_common$309bv32$2 := $d_common.coerce77[16:8];
    $$d_common$310bv32$1 := $d_common.coerce77[24:16];
    $$d_common$310bv32$2 := $d_common.coerce77[24:16];
    $$d_common$311bv32$1 := $d_common.coerce77[32:24];
    $$d_common$311bv32$2 := $d_common.coerce77[32:24];
    $$d_common$312bv32$1 := $d_common.coerce78[8:0];
    $$d_common$312bv32$2 := $d_common.coerce78[8:0];
    $$d_common$313bv32$1 := $d_common.coerce78[16:8];
    $$d_common$313bv32$2 := $d_common.coerce78[16:8];
    $$d_common$314bv32$1 := $d_common.coerce78[24:16];
    $$d_common$314bv32$2 := $d_common.coerce78[24:16];
    $$d_common$315bv32$1 := $d_common.coerce78[32:24];
    $$d_common$315bv32$2 := $d_common.coerce78[32:24];
    $$d_common$316bv32$1 := $d_common.coerce79[8:0];
    $$d_common$316bv32$2 := $d_common.coerce79[8:0];
    $$d_common$317bv32$1 := $d_common.coerce79[16:8];
    $$d_common$317bv32$2 := $d_common.coerce79[16:8];
    $$d_common$318bv32$1 := $d_common.coerce79[24:16];
    $$d_common$318bv32$2 := $d_common.coerce79[24:16];
    $$d_common$319bv32$1 := $d_common.coerce79[32:24];
    $$d_common$319bv32$2 := $d_common.coerce79[32:24];
    $$d_common$320bv32$1 := $d_common.coerce80[8:0];
    $$d_common$320bv32$2 := $d_common.coerce80[8:0];
    $$d_common$321bv32$1 := $d_common.coerce80[16:8];
    $$d_common$321bv32$2 := $d_common.coerce80[16:8];
    $$d_common$322bv32$1 := $d_common.coerce80[24:16];
    $$d_common$322bv32$2 := $d_common.coerce80[24:16];
    $$d_common$323bv32$1 := $d_common.coerce80[32:24];
    $$d_common$323bv32$2 := $d_common.coerce80[32:24];
    $$d_common$324bv32$1 := $d_common.coerce81[8:0];
    $$d_common$324bv32$2 := $d_common.coerce81[8:0];
    $$d_common$325bv32$1 := $d_common.coerce81[16:8];
    $$d_common$325bv32$2 := $d_common.coerce81[16:8];
    $$d_common$326bv32$1 := $d_common.coerce81[24:16];
    $$d_common$326bv32$2 := $d_common.coerce81[24:16];
    $$d_common$327bv32$1 := $d_common.coerce81[32:24];
    $$d_common$327bv32$2 := $d_common.coerce81[32:24];
    $$d_common$328bv32$1 := $d_common.coerce82[8:0];
    $$d_common$328bv32$2 := $d_common.coerce82[8:0];
    $$d_common$329bv32$1 := $d_common.coerce82[16:8];
    $$d_common$329bv32$2 := $d_common.coerce82[16:8];
    $$d_common$330bv32$1 := $d_common.coerce82[24:16];
    $$d_common$330bv32$2 := $d_common.coerce82[24:16];
    $$d_common$331bv32$1 := $d_common.coerce82[32:24];
    $$d_common$331bv32$2 := $d_common.coerce82[32:24];
    $$d_common$332bv32$1 := $d_common.coerce83[8:0];
    $$d_common$332bv32$2 := $d_common.coerce83[8:0];
    $$d_common$333bv32$1 := $d_common.coerce83[16:8];
    $$d_common$333bv32$2 := $d_common.coerce83[16:8];
    $$d_common$334bv32$1 := $d_common.coerce83[24:16];
    $$d_common$334bv32$2 := $d_common.coerce83[24:16];
    $$d_common$335bv32$1 := $d_common.coerce83[32:24];
    $$d_common$335bv32$2 := $d_common.coerce83[32:24];
    $$d_common$336bv32$1 := $d_common.coerce84[8:0];
    $$d_common$336bv32$2 := $d_common.coerce84[8:0];
    $$d_common$337bv32$1 := $d_common.coerce84[16:8];
    $$d_common$337bv32$2 := $d_common.coerce84[16:8];
    $$d_common$338bv32$1 := $d_common.coerce84[24:16];
    $$d_common$338bv32$2 := $d_common.coerce84[24:16];
    $$d_common$339bv32$1 := $d_common.coerce84[32:24];
    $$d_common$339bv32$2 := $d_common.coerce84[32:24];
    $$d_common$340bv32$1 := $d_common.coerce85[8:0];
    $$d_common$340bv32$2 := $d_common.coerce85[8:0];
    $$d_common$341bv32$1 := $d_common.coerce85[16:8];
    $$d_common$341bv32$2 := $d_common.coerce85[16:8];
    $$d_common$342bv32$1 := $d_common.coerce85[24:16];
    $$d_common$342bv32$2 := $d_common.coerce85[24:16];
    $$d_common$343bv32$1 := $d_common.coerce85[32:24];
    $$d_common$343bv32$2 := $d_common.coerce85[32:24];
    $$d_common$344bv32$1 := $d_common.coerce86[8:0];
    $$d_common$344bv32$2 := $d_common.coerce86[8:0];
    $$d_common$345bv32$1 := $d_common.coerce86[16:8];
    $$d_common$345bv32$2 := $d_common.coerce86[16:8];
    $$d_common$346bv32$1 := $d_common.coerce86[24:16];
    $$d_common$346bv32$2 := $d_common.coerce86[24:16];
    $$d_common$347bv32$1 := $d_common.coerce86[32:24];
    $$d_common$347bv32$2 := $d_common.coerce86[32:24];
    $$d_common$348bv32$1 := $d_common.coerce87[8:0];
    $$d_common$348bv32$2 := $d_common.coerce87[8:0];
    $$d_common$349bv32$1 := $d_common.coerce87[16:8];
    $$d_common$349bv32$2 := $d_common.coerce87[16:8];
    $$d_common$350bv32$1 := $d_common.coerce87[24:16];
    $$d_common$350bv32$2 := $d_common.coerce87[24:16];
    $$d_common$351bv32$1 := $d_common.coerce87[32:24];
    $$d_common$351bv32$2 := $d_common.coerce87[32:24];
    $$d_common$352bv32$1 := $d_common.coerce88[8:0];
    $$d_common$352bv32$2 := $d_common.coerce88[8:0];
    $$d_common$353bv32$1 := $d_common.coerce88[16:8];
    $$d_common$353bv32$2 := $d_common.coerce88[16:8];
    $$d_common$354bv32$1 := $d_common.coerce88[24:16];
    $$d_common$354bv32$2 := $d_common.coerce88[24:16];
    $$d_common$355bv32$1 := $d_common.coerce88[32:24];
    $$d_common$355bv32$2 := $d_common.coerce88[32:24];
    $$d_common$356bv32$1 := $d_common.coerce89[8:0];
    $$d_common$356bv32$2 := $d_common.coerce89[8:0];
    $$d_common$357bv32$1 := $d_common.coerce89[16:8];
    $$d_common$357bv32$2 := $d_common.coerce89[16:8];
    $$d_common$358bv32$1 := $d_common.coerce89[24:16];
    $$d_common$358bv32$2 := $d_common.coerce89[24:16];
    $$d_common$359bv32$1 := $d_common.coerce89[32:24];
    $$d_common$359bv32$2 := $d_common.coerce89[32:24];
    $$d_common$360bv32$1 := $d_common.coerce90[8:0];
    $$d_common$360bv32$2 := $d_common.coerce90[8:0];
    $$d_common$361bv32$1 := $d_common.coerce90[16:8];
    $$d_common$361bv32$2 := $d_common.coerce90[16:8];
    $$d_common$362bv32$1 := $d_common.coerce90[24:16];
    $$d_common$362bv32$2 := $d_common.coerce90[24:16];
    $$d_common$363bv32$1 := $d_common.coerce90[32:24];
    $$d_common$363bv32$2 := $d_common.coerce90[32:24];
    $$d_common$364bv32$1 := $d_common.coerce91[8:0];
    $$d_common$364bv32$2 := $d_common.coerce91[8:0];
    $$d_common$365bv32$1 := $d_common.coerce91[16:8];
    $$d_common$365bv32$2 := $d_common.coerce91[16:8];
    $$d_common$366bv32$1 := $d_common.coerce91[24:16];
    $$d_common$366bv32$2 := $d_common.coerce91[24:16];
    $$d_common$367bv32$1 := $d_common.coerce91[32:24];
    $$d_common$367bv32$2 := $d_common.coerce91[32:24];
    $$d_common$368bv32$1 := $d_common.coerce92[8:0];
    $$d_common$368bv32$2 := $d_common.coerce92[8:0];
    $$d_common$369bv32$1 := $d_common.coerce92[16:8];
    $$d_common$369bv32$2 := $d_common.coerce92[16:8];
    $$d_common$370bv32$1 := $d_common.coerce92[24:16];
    $$d_common$370bv32$2 := $d_common.coerce92[24:16];
    $$d_common$371bv32$1 := $d_common.coerce92[32:24];
    $$d_common$371bv32$2 := $d_common.coerce92[32:24];
    $$d_common$372bv32$1 := $d_common.coerce93[8:0];
    $$d_common$372bv32$2 := $d_common.coerce93[8:0];
    $$d_common$373bv32$1 := $d_common.coerce93[16:8];
    $$d_common$373bv32$2 := $d_common.coerce93[16:8];
    $$d_common$374bv32$1 := $d_common.coerce93[24:16];
    $$d_common$374bv32$2 := $d_common.coerce93[24:16];
    $$d_common$375bv32$1 := $d_common.coerce93[32:24];
    $$d_common$375bv32$2 := $d_common.coerce93[32:24];
    $$d_common$376bv32$1 := $d_common.coerce94[8:0];
    $$d_common$376bv32$2 := $d_common.coerce94[8:0];
    $$d_common$377bv32$1 := $d_common.coerce94[16:8];
    $$d_common$377bv32$2 := $d_common.coerce94[16:8];
    $$d_common$378bv32$1 := $d_common.coerce94[24:16];
    $$d_common$378bv32$2 := $d_common.coerce94[24:16];
    $$d_common$379bv32$1 := $d_common.coerce94[32:24];
    $$d_common$379bv32$2 := $d_common.coerce94[32:24];
    $$d_common$380bv32$1 := $d_common.coerce95[8:0];
    $$d_common$380bv32$2 := $d_common.coerce95[8:0];
    $$d_common$381bv32$1 := $d_common.coerce95[16:8];
    $$d_common$381bv32$2 := $d_common.coerce95[16:8];
    $$d_common$382bv32$1 := $d_common.coerce95[24:16];
    $$d_common$382bv32$2 := $d_common.coerce95[24:16];
    $$d_common$383bv32$1 := $d_common.coerce95[32:24];
    $$d_common$383bv32$2 := $d_common.coerce95[32:24];
    $$d_common$384bv32$1 := $d_common.coerce96[8:0];
    $$d_common$384bv32$2 := $d_common.coerce96[8:0];
    $$d_common$385bv32$1 := $d_common.coerce96[16:8];
    $$d_common$385bv32$2 := $d_common.coerce96[16:8];
    $$d_common$386bv32$1 := $d_common.coerce96[24:16];
    $$d_common$386bv32$2 := $d_common.coerce96[24:16];
    $$d_common$387bv32$1 := $d_common.coerce96[32:24];
    $$d_common$387bv32$2 := $d_common.coerce96[32:24];
    v0$1 := $$d_common$52bv32$1;
    v0$2 := $$d_common$52bv32$2;
    v1$1 := $$d_common$53bv32$1;
    v1$2 := $$d_common$53bv32$2;
    v2$1 := $$d_common$54bv32$1;
    v2$2 := $$d_common$54bv32$2;
    v3$1 := $$d_common$55bv32$1;
    v3$2 := $$d_common$55bv32$2;
    assume BV1_ZEXT32((if v3$1 ++ v2$1 ++ v1$1 ++ v0$1 == 20bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v3$2 ++ v2$2 ++ v1$2 ++ v0$2 == 20bv32 then 1bv1 else 0bv1)) != 0bv32;
    v4$1 := $$d_common$32bv32$1;
    v4$2 := $$d_common$32bv32$2;
    v5$1 := $$d_common$33bv32$1;
    v5$2 := $$d_common$33bv32$2;
    v6$1 := $$d_common$34bv32$1;
    v6$2 := $$d_common$34bv32$2;
    v7$1 := $$d_common$35bv32$1;
    v7$2 := $$d_common$35bv32$2;
    assume BV1_ZEXT32((if v7$1 ++ v6$1 ++ v5$1 ++ v4$1 == 104bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v7$2 ++ v6$2 ++ v5$2 ++ v4$2 == 104bv32 then 1bv1 else 0bv1)) != 0bv32;
    v8$1 := $$d_common$72bv32$1;
    v8$2 := $$d_common$72bv32$2;
    v9$1 := $$d_common$73bv32$1;
    v9$2 := $$d_common$73bv32$2;
    v10$1 := $$d_common$74bv32$1;
    v10$2 := $$d_common$74bv32$2;
    v11$1 := $$d_common$75bv32$1;
    v11$2 := $$d_common$75bv32$2;
    assume BV1_ZEXT32((if v11$1 ++ v10$1 ++ v9$1 ++ v8$1 == 51bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v11$2 ++ v10$2 ++ v9$2 ++ v8$2 == 51bv32 then 1bv1 else 0bv1)) != 0bv32;
    v12$1 := $$d_common$80bv32$1;
    v12$2 := $$d_common$80bv32$2;
    v13$1 := $$d_common$81bv32$1;
    v13$2 := $$d_common$81bv32$2;
    v14$1 := $$d_common$82bv32$1;
    v14$2 := $$d_common$82bv32$2;
    v15$1 := $$d_common$83bv32$1;
    v15$2 := $$d_common$83bv32$2;
    assume BV1_ZEXT32((if v15$1 ++ v14$1 ++ v13$1 ++ v12$1 == 2601bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v15$2 ++ v14$2 ++ v13$2 ++ v12$2 == 2601bv32 then 1bv1 else 0bv1)) != 0bv32;
    v16$1 := $$d_common$100bv32$1;
    v16$2 := $$d_common$100bv32$2;
    v17$1 := $$d_common$101bv32$1;
    v17$2 := $$d_common$101bv32$2;
    v18$1 := $$d_common$102bv32$1;
    v18$2 := $$d_common$102bv32$2;
    v19$1 := $$d_common$103bv32$1;
    v19$2 := $$d_common$103bv32$2;
    assume BV1_ZEXT32((if v19$1 ++ v18$1 ++ v17$1 ++ v16$1 == 6561bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v19$2 ++ v18$2 ++ v17$2 ++ v16$2 == 6561bv32 then 1bv1 else 0bv1)) != 0bv32;
    v20$1 := $$d_common$116bv32$1;
    v20$2 := $$d_common$116bv32$2;
    v21$1 := $$d_common$117bv32$1;
    v21$2 := $$d_common$117bv32$2;
    v22$1 := $$d_common$118bv32$1;
    v22$2 := $$d_common$118bv32$2;
    v23$1 := $$d_common$119bv32$1;
    v23$2 := $$d_common$119bv32$2;
    assume BV1_ZEXT32((if v23$1 ++ v22$1 ++ v21$1 ++ v20$1 == 17161bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v23$2 ++ v22$2 ++ v21$2 ++ v20$2 == 17161bv32 then 1bv1 else 0bv1)) != 0bv32;
    v24$1 := $$d_common$108bv32$1;
    v24$2 := $$d_common$108bv32$2;
    v25$1 := $$d_common$109bv32$1;
    v25$2 := $$d_common$109bv32$2;
    v26$1 := $$d_common$110bv32$1;
    v26$2 := $$d_common$110bv32$2;
    v27$1 := $$d_common$111bv32$1;
    v27$2 := $$d_common$111bv32$2;
    assume BV1_ZEXT32((if v27$1 ++ v26$1 ++ v25$1 ++ v24$1 == 131bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v27$2 ++ v26$2 ++ v25$2 ++ v24$2 == 131bv32 then 1bv1 else 0bv1)) != 0bv32;
    v28$1 := $$d_common$128bv32$1;
    v28$2 := $$d_common$128bv32$2;
    v29$1 := $$d_common$129bv32$1;
    v29$2 := $$d_common$129bv32$2;
    v30$1 := $$d_common$130bv32$1;
    v30$2 := $$d_common$130bv32$2;
    v31$1 := $$d_common$131bv32$1;
    v31$2 := $$d_common$131bv32$2;
    assume BV1_ZEXT32((if v31$1 ++ v30$1 ++ v29$1 ++ v28$1 == 0bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v31$2 ++ v30$2 ++ v29$2 ++ v28$2 == 0bv32 then 1bv1 else 0bv1)) != 0bv32;
    v32$1 := $$d_common$96bv32$1;
    v32$2 := $$d_common$96bv32$2;
    v33$1 := $$d_common$97bv32$1;
    v33$2 := $$d_common$97bv32$2;
    v34$1 := $$d_common$98bv32$1;
    v34$2 := $$d_common$98bv32$2;
    v35$1 := $$d_common$99bv32$1;
    v35$2 := $$d_common$99bv32$2;
    assume BV1_ZEXT32((if v35$1 ++ v34$1 ++ v33$1 ++ v32$1 == 81bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v35$2 ++ v34$2 ++ v33$2 ++ v32$2 == 81bv32 then 1bv1 else 0bv1)) != 0bv32;
    v36$1 := $$d_common$76bv32$1;
    v36$2 := $$d_common$76bv32$2;
    v37$1 := $$d_common$77bv32$1;
    v37$2 := $$d_common$77bv32$2;
    v38$1 := $$d_common$78bv32$1;
    v38$2 := $$d_common$78bv32$2;
    v39$1 := $$d_common$79bv32$1;
    v39$2 := $$d_common$79bv32$2;
    assume BV1_ZEXT32((if v39$1 ++ v38$1 ++ v37$1 ++ v36$1 == 51bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v39$2 ++ v38$2 ++ v37$2 ++ v36$2 == 51bv32 then 1bv1 else 0bv1)) != 0bv32;
    v40$1 := $$d_common$124bv32$1;
    v40$2 := $$d_common$124bv32$2;
    v41$1 := $$d_common$125bv32$1;
    v41$2 := $$d_common$125bv32$2;
    v42$1 := $$d_common$126bv32$1;
    v42$2 := $$d_common$126bv32$2;
    v43$1 := $$d_common$127bv32$1;
    v43$2 := $$d_common$127bv32$2;
    assume BV1_ZEXT32((if v43$1 ++ v42$1 ++ v41$1 ++ v40$1 == 0bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v43$2 ++ v42$2 ++ v41$2 ++ v40$2 == 0bv32 then 1bv1 else 0bv1)) != 0bv32;
    v44$1 := $$d_common$92bv32$1;
    v44$2 := $$d_common$92bv32$2;
    v45$1 := $$d_common$93bv32$1;
    v45$2 := $$d_common$93bv32$2;
    v46$1 := $$d_common$94bv32$1;
    v46$2 := $$d_common$94bv32$2;
    v47$1 := $$d_common$95bv32$1;
    v47$2 := $$d_common$95bv32$2;
    assume BV1_ZEXT32((if v47$1 ++ v46$1 ++ v45$1 ++ v44$1 == 81bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v47$2 ++ v46$2 ++ v45$2 ++ v44$2 == 81bv32 then 1bv1 else 0bv1)) != 0bv32;
    v48$1 := $$d_common$140bv32$1;
    v48$2 := $$d_common$140bv32$2;
    v49$1 := $$d_common$141bv32$1;
    v49$2 := $$d_common$141bv32$2;
    v50$1 := $$d_common$142bv32$1;
    v50$2 := $$d_common$142bv32$2;
    v51$1 := $$d_common$143bv32$1;
    v51$2 := $$d_common$143bv32$2;
    assume BV1_ZEXT32((if v51$1 ++ v50$1 ++ v49$1 ++ v48$1 == 183bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v51$2 ++ v50$2 ++ v49$2 ++ v48$2 == 183bv32 then 1bv1 else 0bv1)) != 0bv32;
    v52$1 := $$d_common$132bv32$1;
    v52$2 := $$d_common$132bv32$2;
    v53$1 := $$d_common$133bv32$1;
    v53$2 := $$d_common$133bv32$2;
    v54$1 := $$d_common$134bv32$1;
    v54$2 := $$d_common$134bv32$2;
    v55$1 := $$d_common$135bv32$1;
    v55$2 := $$d_common$135bv32$2;
    assume BV1_ZEXT32((if v55$1 ++ v54$1 ++ v53$1 ++ v52$1 == 51bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v55$2 ++ v54$2 ++ v53$2 ++ v52$2 == 51bv32 then 1bv1 else 0bv1)) != 0bv32;
    v56$1 := $$d_common$136bv32$1;
    v56$2 := $$d_common$136bv32$2;
    v57$1 := $$d_common$137bv32$1;
    v57$2 := $$d_common$137bv32$2;
    v58$1 := $$d_common$138bv32$1;
    v58$2 := $$d_common$138bv32$2;
    v59$1 := $$d_common$139bv32$1;
    v59$2 := $$d_common$139bv32$2;
    assume BV1_ZEXT32((if v59$1 ++ v58$1 ++ v57$1 ++ v56$1 == 51bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v59$2 ++ v58$2 ++ v57$2 ++ v56$2 == 51bv32 then 1bv1 else 0bv1)) != 0bv32;
    v60$1 := $$d_common$148bv32$1;
    v60$2 := $$d_common$148bv32$2;
    v61$1 := $$d_common$149bv32$1;
    v61$2 := $$d_common$149bv32$2;
    v62$1 := $$d_common$150bv32$1;
    v62$2 := $$d_common$150bv32$2;
    v63$1 := $$d_common$151bv32$1;
    v63$2 := $$d_common$151bv32$2;
    assume BV1_ZEXT32((if v63$1 ++ v62$1 ++ v61$1 ++ v60$1 == 33489bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v63$2 ++ v62$2 ++ v61$2 ++ v60$2 == 33489bv32 then 1bv1 else 0bv1)) != 0bv32;
    v64$1 := $$d_common$144bv32$1;
    v64$2 := $$d_common$144bv32$2;
    v65$1 := $$d_common$145bv32$1;
    v65$2 := $$d_common$145bv32$2;
    v66$1 := $$d_common$146bv32$1;
    v66$2 := $$d_common$146bv32$2;
    v67$1 := $$d_common$147bv32$1;
    v67$2 := $$d_common$147bv32$2;
    assume BV1_ZEXT32((if v67$1 ++ v66$1 ++ v65$1 ++ v64$1 == 183bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v67$2 ++ v66$2 ++ v65$2 ++ v64$2 == 183bv32 then 1bv1 else 0bv1)) != 0bv32;
    v68$1 := $$d_common$164bv32$1;
    v68$2 := $$d_common$164bv32$2;
    v69$1 := $$d_common$165bv32$1;
    v69$2 := $$d_common$165bv32$2;
    v70$1 := $$d_common$166bv32$1;
    v70$2 := $$d_common$166bv32$2;
    v71$1 := $$d_common$167bv32$1;
    v71$2 := $$d_common$167bv32$2;
    assume BV1_ZEXT32((if v71$1 ++ v70$1 ++ v69$1 ++ v68$1 == 23973bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v71$2 ++ v70$2 ++ v69$2 ++ v68$2 == 23973bv32 then 1bv1 else 0bv1)) != 0bv32;
    v72$1 := $$d_common$156bv32$1;
    v72$2 := $$d_common$156bv32$2;
    v73$1 := $$d_common$157bv32$1;
    v73$2 := $$d_common$157bv32$2;
    v74$1 := $$d_common$158bv32$1;
    v74$2 := $$d_common$158bv32$2;
    v75$1 := $$d_common$159bv32$1;
    v75$2 := $$d_common$159bv32$2;
    assume BV1_ZEXT32((if v75$1 ++ v74$1 ++ v73$1 ++ v72$1 == 131bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v75$2 ++ v74$2 ++ v73$2 ++ v72$2 == 131bv32 then 1bv1 else 0bv1)) != 0bv32;
    v76$1 := $$d_common$172bv32$1;
    v76$2 := $$d_common$172bv32$2;
    v77$1 := $$d_common$173bv32$1;
    v77$2 := $$d_common$173bv32$2;
    v78$1 := $$d_common$174bv32$1;
    v78$2 := $$d_common$174bv32$2;
    v79$1 := $$d_common$175bv32$1;
    v79$2 := $$d_common$175bv32$2;
    assume BV1_ZEXT32((if v79$1 ++ v78$1 ++ v77$1 ++ v76$1 == 52bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v79$2 ++ v78$2 ++ v77$2 ++ v76$2 == 52bv32 then 1bv1 else 0bv1)) != 0bv32;
    v80$1 := $$d_common$180bv32$1;
    v80$2 := $$d_common$180bv32$2;
    v81$1 := $$d_common$181bv32$1;
    v81$2 := $$d_common$181bv32$2;
    v82$1 := $$d_common$182bv32$1;
    v82$2 := $$d_common$182bv32$2;
    v83$1 := $$d_common$183bv32$1;
    v83$2 := $$d_common$183bv32$2;
    assume BV1_ZEXT32((if v83$1 ++ v82$1 ++ v81$1 ++ v80$1 == 1bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v83$2 ++ v82$2 ++ v81$2 ++ v80$2 == 1bv32 then 1bv1 else 0bv1)) != 0bv32;
    v84$1 := $$d_common$212bv32$1;
    v84$2 := $$d_common$212bv32$2;
    v85$1 := $$d_common$213bv32$1;
    v85$2 := $$d_common$213bv32$2;
    v86$1 := $$d_common$214bv32$1;
    v86$2 := $$d_common$214bv32$2;
    v87$1 := $$d_common$215bv32$1;
    v87$2 := $$d_common$215bv32$2;
    assume BV1_ZEXT32((if v87$1 ++ v86$1 ++ v85$1 ++ v84$1 == 23973bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v87$2 ++ v86$2 ++ v85$2 ++ v84$2 == 23973bv32 then 1bv1 else 0bv1)) != 0bv32;
    v88$1 := $$d_common$204bv32$1;
    v88$2 := $$d_common$204bv32$2;
    v89$1 := $$d_common$205bv32$1;
    v89$2 := $$d_common$205bv32$2;
    v90$1 := $$d_common$206bv32$1;
    v90$2 := $$d_common$206bv32$2;
    v91$1 := $$d_common$207bv32$1;
    v91$2 := $$d_common$207bv32$2;
    assume BV1_ZEXT32((if v91$1 ++ v90$1 ++ v89$1 ++ v88$1 == 131bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v91$2 ++ v90$2 ++ v89$2 ++ v88$2 == 131bv32 then 1bv1 else 0bv1)) != 0bv32;
    v92$1 := $$d_common$188bv32$1;
    v92$2 := $$d_common$188bv32$2;
    v93$1 := $$d_common$189bv32$1;
    v93$2 := $$d_common$189bv32$2;
    v94$1 := $$d_common$190bv32$1;
    v94$2 := $$d_common$190bv32$2;
    v95$1 := $$d_common$191bv32$1;
    v95$2 := $$d_common$191bv32$2;
    assume BV1_ZEXT32((if v95$1 ++ v94$1 ++ v93$1 ++ v92$1 == 1bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v95$2 ++ v94$2 ++ v93$2 ++ v92$2 == 1bv32 then 1bv1 else 0bv1)) != 0bv32;
    v96$1 := $$d_common$196bv32$1;
    v96$2 := $$d_common$196bv32$2;
    v97$1 := $$d_common$197bv32$1;
    v97$2 := $$d_common$197bv32$2;
    v98$1 := $$d_common$198bv32$1;
    v98$2 := $$d_common$198bv32$2;
    v99$1 := $$d_common$199bv32$1;
    v99$2 := $$d_common$199bv32$2;
    assume BV1_ZEXT32((if v99$1 ++ v98$1 ++ v97$1 ++ v96$1 == 1bv32 then 1bv1 else 0bv1)) != 0bv32 && BV1_ZEXT32((if v99$2 ++ v98$2 ++ v97$2 ++ v96$2 == 1bv32 then 1bv1 else 0bv1)) != 0bv32;
    v100$1 := group_id_x$1;
    v100$2 := group_id_x$2;
    v101$1 := local_id_x$1;
    v101$2 := local_id_x$2;
    v102$1 := $$d_common$52bv32$1;
    v102$2 := $$d_common$52bv32$2;
    v103$1 := $$d_common$53bv32$1;
    v103$2 := $$d_common$53bv32$2;
    v104$1 := $$d_common$54bv32$1;
    v104$2 := $$d_common$54bv32$2;
    v105$1 := $$d_common$55bv32$1;
    v105$2 := $$d_common$55bv32$2;
    v106$1 := BV32_SLT(v100$1, v105$1 ++ v104$1 ++ v103$1 ++ v102$1);
    v106$2 := BV32_SLT(v100$2, v105$2 ++ v104$2 ++ v103$2 ++ v102$2);
    p0$1 := false;
    p0$2 := false;
    p1$1 := false;
    p1$2 := false;
    p2$1 := false;
    p2$2 := false;
    p3$1 := false;
    p3$2 := false;
    p4$1 := false;
    p4$2 := false;
    p5$1 := false;
    p5$2 := false;
    p6$1 := false;
    p6$2 := false;
    p7$1 := false;
    p7$2 := false;
    p8$1 := false;
    p8$2 := false;
    p9$1 := false;
    p9$2 := false;
    p10$1 := false;
    p10$2 := false;
    p11$1 := false;
    p11$2 := false;
    p12$1 := false;
    p12$2 := false;
    p13$1 := false;
    p13$2 := false;
    p14$1 := false;
    p14$2 := false;
    p15$1 := false;
    p15$2 := false;
    p16$1 := false;
    p16$2 := false;
    p17$1 := false;
    p17$2 := false;
    p18$1 := false;
    p18$2 := false;
    p19$1 := false;
    p19$2 := false;
    p20$1 := false;
    p20$2 := false;
    p37$1 := false;
    p37$2 := false;
    p38$1 := false;
    p38$2 := false;
    p39$1 := false;
    p39$2 := false;
    p40$1 := false;
    p40$2 := false;
    p41$1 := false;
    p41$2 := false;
    p42$1 := false;
    p42$2 := false;
    p43$1 := false;
    p43$2 := false;
    p44$1 := false;
    p44$2 := false;
    p45$1 := false;
    p45$2 := false;
    p50$1 := false;
    p50$2 := false;
    p58$1 := false;
    p58$2 := false;
    p74$1 := false;
    p74$2 := false;
    p87$1 := false;
    p87$2 := false;
    p91$1 := false;
    p91$2 := false;
    p95$1 := false;
    p95$2 := false;
    p99$1 := false;
    p99$2 := false;
    p101$1 := false;
    p101$2 := false;
    p105$1 := false;
    p105$2 := false;
    p109$1 := false;
    p109$2 := false;
    p113$1 := false;
    p113$2 := false;
    p115$1 := false;
    p115$2 := false;
    p117$1 := false;
    p117$2 := false;
    p130$1 := false;
    p130$2 := false;
    p134$1 := false;
    p134$2 := false;
    p138$1 := false;
    p138$2 := false;
    p142$1 := false;
    p142$2 := false;
    p144$1 := false;
    p144$2 := false;
    p148$1 := false;
    p148$2 := false;
    p152$1 := false;
    p152$2 := false;
    p156$1 := false;
    p156$2 := false;
    p158$1 := false;
    p158$2 := false;
    p162$1 := false;
    p162$2 := false;
    p168$1 := false;
    p168$2 := false;
    p176$1 := false;
    p176$2 := false;
    p181$1 := false;
    p181$2 := false;
    p185$1 := false;
    p185$2 := false;
    p190$1 := false;
    p190$2 := false;
    p192$1 := false;
    p192$2 := false;
    p194$1 := false;
    p194$2 := false;
    p228$1 := false;
    p228$2 := false;
    p232$1 := false;
    p232$2 := false;
    p248$1 := false;
    p248$2 := false;
    p255$1 := false;
    p255$2 := false;
    p278$1 := false;
    p278$2 := false;
    p279$1 := false;
    p279$2 := false;
    p280$1 := false;
    p280$2 := false;
    p281$1 := false;
    p281$2 := false;
    p282$1 := false;
    p282$2 := false;
    p283$1 := false;
    p283$2 := false;
    p284$1 := false;
    p284$2 := false;
    p285$1 := false;
    p285$2 := false;
    p286$1 := false;
    p286$2 := false;
    p287$1 := false;
    p287$2 := false;
    p288$1 := false;
    p288$2 := false;
    p289$1 := false;
    p289$2 := false;
    p290$1 := false;
    p290$2 := false;
    p291$1 := false;
    p291$2 := false;
    p292$1 := false;
    p292$2 := false;
    p293$1 := false;
    p293$2 := false;
    p294$1 := false;
    p294$2 := false;
    p0$1 := (if v106$1 then v106$1 else p0$1);
    p0$2 := (if v106$2 then v106$2 else p0$2);
    p1$1 := (if !v106$1 then !v106$1 else p1$1);
    p1$2 := (if !v106$2 then !v106$2 else p1$2);
    v107$1 := (if p0$1 then $$d_common$80bv32$1 else v107$1);
    v107$2 := (if p0$2 then $$d_common$80bv32$2 else v107$2);
    v108$1 := (if p0$1 then $$d_common$81bv32$1 else v108$1);
    v108$2 := (if p0$2 then $$d_common$81bv32$2 else v108$2);
    v109$1 := (if p0$1 then $$d_common$82bv32$1 else v109$1);
    v109$2 := (if p0$2 then $$d_common$82bv32$2 else v109$2);
    v110$1 := (if p0$1 then $$d_common$83bv32$1 else v110$1);
    v110$2 := (if p0$2 then $$d_common$83bv32$2 else v110$2);
    $d_unique_point_no.0$1, $d_unique_d_Row.0$1, $d_unique_d_Col.0$1, $d_unique_d_tRowLoc.0$1, $d_unique_d_tColLoc.0$1, $d_in.0$1 := (if p0$1 then v100$1 else $d_unique_point_no.0$1), (if p0$1 then MKPTR($arrayId$$d_endoRow, 0bv32) else $d_unique_d_Row.0$1), (if p0$1 then MKPTR($arrayId$$d_endoCol, 0bv32) else $d_unique_d_Col.0$1), (if p0$1 then MKPTR($arrayId$$d_tEndoRowLoc, 0bv32) else $d_unique_d_tRowLoc.0$1), (if p0$1 then MKPTR($arrayId$$d_tEndoColLoc, 0bv32) else $d_unique_d_tColLoc.0$1), (if p0$1 then MKPTR($arrayId$$d_endoT, BV32_MUL(v100$1, v110$1 ++ v109$1 ++ v108$1 ++ v107$1)) else $d_in.0$1);
    $d_unique_point_no.0$2, $d_unique_d_Row.0$2, $d_unique_d_Col.0$2, $d_unique_d_tRowLoc.0$2, $d_unique_d_tColLoc.0$2, $d_in.0$2 := (if p0$2 then v100$2 else $d_unique_point_no.0$2), (if p0$2 then MKPTR($arrayId$$d_endoRow, 0bv32) else $d_unique_d_Row.0$2), (if p0$2 then MKPTR($arrayId$$d_endoCol, 0bv32) else $d_unique_d_Col.0$2), (if p0$2 then MKPTR($arrayId$$d_tEndoRowLoc, 0bv32) else $d_unique_d_tRowLoc.0$2), (if p0$2 then MKPTR($arrayId$$d_tEndoColLoc, 0bv32) else $d_unique_d_tColLoc.0$2), (if p0$2 then MKPTR($arrayId$$d_endoT, BV32_MUL(v100$2, v110$2 ++ v109$2 ++ v108$2 ++ v107$2)) else $d_in.0$2);
    v111$1 := (if p1$1 then $$d_common$52bv32$1 else v111$1);
    v111$2 := (if p1$2 then $$d_common$52bv32$2 else v111$2);
    v112$1 := (if p1$1 then $$d_common$53bv32$1 else v112$1);
    v112$2 := (if p1$2 then $$d_common$53bv32$2 else v112$2);
    v113$1 := (if p1$1 then $$d_common$54bv32$1 else v113$1);
    v113$2 := (if p1$2 then $$d_common$54bv32$2 else v113$2);
    v114$1 := (if p1$1 then $$d_common$55bv32$1 else v114$1);
    v114$2 := (if p1$2 then $$d_common$55bv32$2 else v114$2);
    v115$1 := (if p1$1 then BV32_SUB(v100$1, v114$1 ++ v113$1 ++ v112$1 ++ v111$1) else v115$1);
    v115$2 := (if p1$2 then BV32_SUB(v100$2, v114$2 ++ v113$2 ++ v112$2 ++ v111$2) else v115$2);
    v116$1 := (if p1$1 then $$d_common$80bv32$1 else v116$1);
    v116$2 := (if p1$2 then $$d_common$80bv32$2 else v116$2);
    v117$1 := (if p1$1 then $$d_common$81bv32$1 else v117$1);
    v117$2 := (if p1$2 then $$d_common$81bv32$2 else v117$2);
    v118$1 := (if p1$1 then $$d_common$82bv32$1 else v118$1);
    v118$2 := (if p1$2 then $$d_common$82bv32$2 else v118$2);
    v119$1 := (if p1$1 then $$d_common$83bv32$1 else v119$1);
    v119$2 := (if p1$2 then $$d_common$83bv32$2 else v119$2);
    $d_unique_point_no.0$1, $d_unique_d_Row.0$1, $d_unique_d_Col.0$1, $d_unique_d_tRowLoc.0$1, $d_unique_d_tColLoc.0$1, $d_in.0$1 := (if p1$1 then v115$1 else $d_unique_point_no.0$1), (if p1$1 then MKPTR($arrayId$$d_epiRow, 0bv32) else $d_unique_d_Row.0$1), (if p1$1 then MKPTR($arrayId$$d_epiCol, 0bv32) else $d_unique_d_Col.0$1), (if p1$1 then MKPTR($arrayId$$d_tEpiRowLoc, 0bv32) else $d_unique_d_tRowLoc.0$1), (if p1$1 then MKPTR($arrayId$$d_tEpiColLoc, 0bv32) else $d_unique_d_tColLoc.0$1), (if p1$1 then MKPTR($arrayId$$d_epiT, BV32_MUL(v115$1, v119$1 ++ v118$1 ++ v117$1 ++ v116$1)) else $d_in.0$1);
    $d_unique_point_no.0$2, $d_unique_d_Row.0$2, $d_unique_d_Col.0$2, $d_unique_d_tRowLoc.0$2, $d_unique_d_tColLoc.0$2, $d_in.0$2 := (if p1$2 then v115$2 else $d_unique_point_no.0$2), (if p1$2 then MKPTR($arrayId$$d_epiRow, 0bv32) else $d_unique_d_Row.0$2), (if p1$2 then MKPTR($arrayId$$d_epiCol, 0bv32) else $d_unique_d_Col.0$2), (if p1$2 then MKPTR($arrayId$$d_tEpiRowLoc, 0bv32) else $d_unique_d_tRowLoc.0$2), (if p1$2 then MKPTR($arrayId$$d_tEpiColLoc, 0bv32) else $d_unique_d_tColLoc.0$2), (if p1$2 then MKPTR($arrayId$$d_epiT, BV32_MUL(v115$2, v119$2 ++ v118$2 ++ v117$2 ++ v116$2)) else $d_in.0$2);
    v120$1 := $$d_common$100bv32$1;
    v120$2 := $$d_common$100bv32$2;
    v121$1 := $$d_common$101bv32$1;
    v121$2 := $$d_common$101bv32$2;
    v122$1 := $$d_common$102bv32$1;
    v122$2 := $$d_common$102bv32$2;
    v123$1 := $$d_common$103bv32$1;
    v123$2 := $$d_common$103bv32$2;
    v124$1 := BV32_MUL(v100$1, v123$1 ++ v122$1 ++ v121$1 ++ v120$1);
    v124$2 := BV32_MUL(v100$2, v123$2 ++ v122$2 ++ v121$2 ++ v120$2);
    v125$1 := $$d_common$116bv32$1;
    v125$2 := $$d_common$116bv32$2;
    v126$1 := $$d_common$117bv32$1;
    v126$2 := $$d_common$117bv32$2;
    v127$1 := $$d_common$118bv32$1;
    v127$2 := $$d_common$118bv32$2;
    v128$1 := $$d_common$119bv32$1;
    v128$2 := $$d_common$119bv32$2;
    v129$1 := BV32_MUL(v100$1, v128$1 ++ v127$1 ++ v126$1 ++ v125$1);
    v129$2 := BV32_MUL(v100$2, v128$2 ++ v127$2 ++ v126$2 ++ v125$2);
    v130$1 := $$d_common$148bv32$1;
    v130$2 := $$d_common$148bv32$2;
    v131$1 := $$d_common$149bv32$1;
    v131$2 := $$d_common$149bv32$2;
    v132$1 := $$d_common$150bv32$1;
    v132$2 := $$d_common$150bv32$2;
    v133$1 := $$d_common$151bv32$1;
    v133$2 := $$d_common$151bv32$2;
    v134$1 := BV32_MUL(v100$1, v133$1 ++ v132$1 ++ v131$1 ++ v130$1);
    v134$2 := BV32_MUL(v100$2, v133$2 ++ v132$2 ++ v131$2 ++ v130$2);
    v135$1 := $$d_common$164bv32$1;
    v135$2 := $$d_common$164bv32$2;
    v136$1 := $$d_common$165bv32$1;
    v136$2 := $$d_common$165bv32$2;
    v137$1 := $$d_common$166bv32$1;
    v137$2 := $$d_common$166bv32$2;
    v138$1 := $$d_common$167bv32$1;
    v138$2 := $$d_common$167bv32$2;
    v139$1 := BV32_MUL(v100$1, v138$1 ++ v137$1 ++ v136$1 ++ v135$1);
    v139$2 := BV32_MUL(v100$2, v138$2 ++ v137$2 ++ v136$2 ++ v135$2);
    v140$1 := $$d_common$212bv32$1;
    v140$2 := $$d_common$212bv32$2;
    v141$1 := $$d_common$213bv32$1;
    v141$2 := $$d_common$213bv32$2;
    v142$1 := $$d_common$214bv32$1;
    v142$2 := $$d_common$214bv32$2;
    v143$1 := $$d_common$215bv32$1;
    v143$2 := $$d_common$215bv32$2;
    v144$1 := BV32_MUL(v100$1, v143$1 ++ v142$1 ++ v141$1 ++ v140$1);
    v144$2 := BV32_MUL(v100$2, v143$2 ++ v142$2 ++ v141$2 ++ v140$2);
    v145$1 := $$d_common$228bv32$1;
    v145$2 := $$d_common$228bv32$2;
    v146$1 := $$d_common$229bv32$1;
    v146$2 := $$d_common$229bv32$2;
    v147$1 := $$d_common$230bv32$1;
    v147$2 := $$d_common$230bv32$2;
    v148$1 := $$d_common$231bv32$1;
    v148$2 := $$d_common$231bv32$2;
    v149$1 := BV32_MUL(v100$1, v148$1 ++ v147$1 ++ v146$1 ++ v145$1);
    v149$2 := BV32_MUL(v100$2, v148$2 ++ v147$2 ++ v146$2 ++ v145$2);
    v150$1 := $$d_common$276bv32$1;
    v150$2 := $$d_common$276bv32$2;
    v151$1 := $$d_common$277bv32$1;
    v151$2 := $$d_common$277bv32$2;
    v152$1 := $$d_common$278bv32$1;
    v152$2 := $$d_common$278bv32$2;
    v153$1 := $$d_common$279bv32$1;
    v153$2 := $$d_common$279bv32$2;
    v154$1 := BV32_MUL(v100$1, v153$1 ++ v152$1 ++ v151$1 ++ v150$1);
    v154$2 := BV32_MUL(v100$2, v153$2 ++ v152$2 ++ v151$2 ++ v150$2);
    v155$1 := $$d_common$292bv32$1;
    v155$2 := $$d_common$292bv32$2;
    v156$1 := $$d_common$293bv32$1;
    v156$2 := $$d_common$293bv32$2;
    v157$1 := $$d_common$294bv32$1;
    v157$2 := $$d_common$294bv32$2;
    v158$1 := $$d_common$295bv32$1;
    v158$2 := $$d_common$295bv32$2;
    v159$1 := BV32_MUL(v100$1, v158$1 ++ v157$1 ++ v156$1 ++ v155$1);
    v159$2 := BV32_MUL(v100$2, v158$2 ++ v157$2 ++ v156$2 ++ v155$2);
    v160$1 := $$d_common$308bv32$1;
    v160$2 := $$d_common$308bv32$2;
    v161$1 := $$d_common$309bv32$1;
    v161$2 := $$d_common$309bv32$2;
    v162$1 := $$d_common$310bv32$1;
    v162$2 := $$d_common$310bv32$2;
    v163$1 := $$d_common$311bv32$1;
    v163$2 := $$d_common$311bv32$2;
    v164$1 := BV32_MUL(v100$1, v163$1 ++ v162$1 ++ v161$1 ++ v160$1);
    v164$2 := BV32_MUL(v100$2, v163$2 ++ v162$2 ++ v161$2 ++ v160$2);
    v165$1 := $$d_common$324bv32$1;
    v165$2 := $$d_common$324bv32$2;
    v166$1 := $$d_common$325bv32$1;
    v166$2 := $$d_common$325bv32$2;
    v167$1 := $$d_common$326bv32$1;
    v167$2 := $$d_common$326bv32$2;
    v168$1 := $$d_common$327bv32$1;
    v168$2 := $$d_common$327bv32$2;
    v169$1 := BV32_MUL(v100$1, v168$1 ++ v167$1 ++ v166$1 ++ v165$1);
    v169$2 := BV32_MUL(v100$2, v168$2 ++ v167$2 ++ v166$2 ++ v165$2);
    v170$1 := $$d_common$340bv32$1;
    v170$2 := $$d_common$340bv32$2;
    v171$1 := $$d_common$341bv32$1;
    v171$2 := $$d_common$341bv32$2;
    v172$1 := $$d_common$342bv32$1;
    v172$2 := $$d_common$342bv32$2;
    v173$1 := $$d_common$343bv32$1;
    v173$2 := $$d_common$343bv32$2;
    v174$1 := BV32_MUL(v100$1, v173$1 ++ v172$1 ++ v171$1 ++ v170$1);
    v174$2 := BV32_MUL(v100$2, v173$2 ++ v172$2 ++ v171$2 ++ v170$2);
    v175$1 := $$d_common$372bv32$1;
    v175$2 := $$d_common$372bv32$2;
    v176$1 := $$d_common$373bv32$1;
    v176$2 := $$d_common$373bv32$2;
    v177$1 := $$d_common$374bv32$1;
    v177$2 := $$d_common$374bv32$2;
    v178$1 := $$d_common$375bv32$1;
    v178$2 := $$d_common$375bv32$2;
    v179$1 := BV32_MUL(v100$1, v178$1 ++ v177$1 ++ v176$1 ++ v175$1);
    v179$2 := BV32_MUL(v100$2, v178$2 ++ v177$2 ++ v176$2 ++ v175$2);
    v180$1 := $$d_common$80bv32$1;
    v180$2 := $$d_common$80bv32$2;
    v181$1 := $$d_common$81bv32$1;
    v181$2 := $$d_common$81bv32$2;
    v182$1 := $$d_common$82bv32$1;
    v182$2 := $$d_common$82bv32$2;
    v183$1 := $$d_common$83bv32$1;
    v183$2 := $$d_common$83bv32$2;
    v184$1 := BV32_MUL(v100$1, v183$1 ++ v182$1 ++ v181$1 ++ v180$1);
    v184$2 := BV32_MUL(v100$2, v183$2 ++ v182$2 ++ v181$2 ++ v180$2);
    v185$1 := $$d_common$76bv32$1;
    v185$2 := $$d_common$76bv32$2;
    v186$1 := $$d_common$77bv32$1;
    v186$2 := $$d_common$77bv32$2;
    v187$1 := $$d_common$78bv32$1;
    v187$2 := $$d_common$78bv32$2;
    v188$1 := $$d_common$79bv32$1;
    v188$2 := $$d_common$79bv32$2;
    v189$1 := BV32_MUL(v100$1, v188$1 ++ v187$1 ++ v186$1 ++ v185$1);
    v189$2 := BV32_MUL(v100$2, v188$2 ++ v187$2 ++ v186$2 ++ v185$2);
    v190$1 := $$d_common$316bv32$1;
    v190$2 := $$d_common$316bv32$2;
    v191$1 := $$d_common$317bv32$1;
    v191$2 := $$d_common$317bv32$2;
    v192$1 := $$d_common$318bv32$1;
    v192$2 := $$d_common$318bv32$2;
    v193$1 := $$d_common$319bv32$1;
    v193$2 := $$d_common$319bv32$2;
    v194$1 := BV32_MUL(v100$1, v193$1 ++ v192$1 ++ v191$1 ++ v190$1);
    v194$2 := BV32_MUL(v100$2, v193$2 ++ v192$2 ++ v191$2 ++ v190$2);
    v195$1 := $$d_common$364bv32$1;
    v195$2 := $$d_common$364bv32$2;
    v196$1 := $$d_common$365bv32$1;
    v196$2 := $$d_common$365bv32$2;
    v197$1 := $$d_common$366bv32$1;
    v197$2 := $$d_common$366bv32$2;
    v198$1 := $$d_common$367bv32$1;
    v198$2 := $$d_common$367bv32$2;
    v199$1 := BV32_MUL(v100$1, v198$1 ++ v197$1 ++ v196$1 ++ v195$1);
    v199$2 := BV32_MUL(v100$2, v198$2 ++ v197$2 ++ v196$2 ++ v195$2);
    v200$1 := $$d_common$364bv32$1;
    v200$2 := $$d_common$364bv32$2;
    v201$1 := $$d_common$365bv32$1;
    v201$2 := $$d_common$365bv32$2;
    v202$1 := $$d_common$366bv32$1;
    v202$2 := $$d_common$366bv32$2;
    v203$1 := $$d_common$367bv32$1;
    v203$2 := $$d_common$367bv32$2;
    v204$1 := BV32_MUL(v100$1, v203$1 ++ v202$1 ++ v201$1 ++ v200$1);
    v204$2 := BV32_MUL(v100$2, v203$2 ++ v202$2 ++ v201$2 ++ v200$2);
    v205 := $d_frame_no == 0bv32;
    goto __partitioned_block_$truebb0_0, $falsebb0;

  $falsebb0:
    assume {:partition} !v205 && !v205;
    goto $12;

  $12:
    v248 := $d_frame_no != 0bv32;
    goto __partitioned_block_$truebb4_0, $falsebb4;

  $falsebb4:
    assume {:partition} !v248 && !v248;
    goto $253;

  $253:
    v1218 := $d_frame_no != 0bv32;
    goto $truebb91, $falsebb91;

  $falsebb91:
    assume {:partition} !v1218 && !v1218;
    goto $261;

  $261:
    return;

  $truebb91:
    assume {:partition} v1218 && v1218;
    v1219 := BV32_SREM($d_frame_no, 10bv32) == 0bv32;
    goto __partitioned_block_$truebb92_0, $falsebb92;

  $falsebb92:
    assume {:partition} !v1219 && !v1219;
    goto $261;

  __partitioned_block_$truebb92_0:
    assume {:partition} v1219 && v1219;
    goto __partitioned_block_$truebb92_1;

  __partitioned_block_$truebb92_1:
    call {:sourceloc_num 1461} $bugle_barrier_duplicated_0(1bv1, 1bv1);
    v1220$1 := $$d_common$32bv32$1;
    v1220$2 := $$d_common$32bv32$2;
    v1221$1 := $$d_common$33bv32$1;
    v1221$2 := $$d_common$33bv32$2;
    v1222$1 := $$d_common$34bv32$1;
    v1222$2 := $$d_common$34bv32$2;
    v1223$1 := $$d_common$35bv32$1;
    v1223$2 := $$d_common$35bv32$2;
    v1224$1 := BV32_ADD(BV32_MUL($d_unique_point_no.0$1, v1223$1 ++ v1222$1 ++ v1221$1 ++ v1220$1), $d_frame_no);
    v1224$2 := BV32_ADD(BV32_MUL($d_unique_point_no.0$2, v1223$2 ++ v1222$2 ++ v1221$2 ++ v1220$2), $d_frame_no);
    p278$1 := (if base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc else p278$1);
    p278$2 := (if base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc else p278$2);
    p279$1 := (if base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc else p279$1);
    p279$2 := (if base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc else p279$2);
    call {:sourceloc} {:sourceloc_num 1466} _LOG_READ_$$d_tEpiRowLoc(p278$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1224$1), $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1224$1)]);
    assume {:do_not_predicate} {:check_id "check_state_15"} {:captureState "check_state_15"} {:sourceloc} {:sourceloc_num 1466} true;
    call {:check_id "check_state_15"} {:sourceloc} {:sourceloc_num 1466} _CHECK_READ_$$d_tEpiRowLoc(p278$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1224$2), $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1224$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEpiRowLoc"} true;
    v1225$1 := (if p278$1 then $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1224$1)] else v1225$1);
    v1225$2 := (if p278$2 then $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1224$2)] else v1225$2);
    p280$1 := (if p279$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc else p280$1);
    p280$2 := (if p279$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc else p280$2);
    p281$1 := (if p279$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc else p281$1);
    p281$2 := (if p279$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc else p281$2);
    call {:sourceloc} {:sourceloc_num 1467} _LOG_READ_$$d_tEndoRowLoc(p280$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1224$1), $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1224$1)]);
    assume {:do_not_predicate} {:check_id "check_state_14"} {:captureState "check_state_14"} {:sourceloc} {:sourceloc_num 1467} true;
    call {:check_id "check_state_14"} {:sourceloc} {:sourceloc_num 1467} _CHECK_READ_$$d_tEndoRowLoc(p280$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1224$2), $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1224$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEndoRowLoc"} true;
    v1225$1 := (if p280$1 then $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1224$1)] else v1225$1);
    v1225$2 := (if p280$2 then $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1224$2)] else v1225$2);
    assert {:bad_pointer_access} {:sourceloc_num 1468} {:thread 1} p281$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1468} {:thread 2} p281$2 ==> false;
    p282$1 := (if base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p282$1);
    p282$2 := (if base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p282$2);
    p283$1 := (if base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p283$1);
    p283$2 := (if base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p283$2);
    call {:sourceloc} {:sourceloc_num 1469} _LOG_WRITE_$$d_epiRow(p282$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), v1225$1, $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiRow(p282$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2));
    assume {:do_not_predicate} {:check_id "check_state_13"} {:captureState "check_state_13"} {:sourceloc} {:sourceloc_num 1469} true;
    call {:check_id "check_state_13"} {:sourceloc} {:sourceloc_num 1469} _CHECK_WRITE_$$d_epiRow(p282$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), v1225$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_epiRow"} true;
    $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] := (if p282$1 then v1225$1 else $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] := (if p282$2 then v1225$2 else $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    p284$1 := (if p283$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p284$1);
    p284$2 := (if p283$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p284$2);
    p285$1 := (if p283$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p285$1);
    p285$2 := (if p283$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p285$2);
    call {:sourceloc} {:sourceloc_num 1470} _LOG_WRITE_$$d_endoRow(p284$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), v1225$1, $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoRow(p284$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2));
    assume {:do_not_predicate} {:check_id "check_state_12"} {:captureState "check_state_12"} {:sourceloc} {:sourceloc_num 1470} true;
    call {:check_id "check_state_12"} {:sourceloc} {:sourceloc_num 1470} _CHECK_WRITE_$$d_endoRow(p284$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), v1225$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_endoRow"} true;
    $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] := (if p284$1 then v1225$1 else $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] := (if p284$2 then v1225$2 else $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assert {:bad_pointer_access} {:sourceloc_num 1471} {:thread 1} p285$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1471} {:thread 2} p285$2 ==> false;
    p286$1 := (if base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc else p286$1);
    p286$2 := (if base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc else p286$2);
    p287$1 := (if base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc else p287$1);
    p287$2 := (if base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc else p287$2);
    call {:sourceloc} {:sourceloc_num 1472} _LOG_READ_$$d_tEndoColLoc(p286$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1224$1), $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1224$1)]);
    assume {:do_not_predicate} {:check_id "check_state_11"} {:captureState "check_state_11"} {:sourceloc} {:sourceloc_num 1472} true;
    call {:check_id "check_state_11"} {:sourceloc} {:sourceloc_num 1472} _CHECK_READ_$$d_tEndoColLoc(p286$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1224$2), $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1224$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEndoColLoc"} true;
    v1226$1 := (if p286$1 then $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1224$1)] else v1226$1);
    v1226$2 := (if p286$2 then $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1224$2)] else v1226$2);
    p288$1 := (if p287$1 && base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc else p288$1);
    p288$2 := (if p287$2 && base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc else p288$2);
    p289$1 := (if p287$1 && base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc else p289$1);
    p289$2 := (if p287$2 && base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc else p289$2);
    call {:sourceloc} {:sourceloc_num 1473} _LOG_READ_$$d_tEpiColLoc(p288$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1224$1), $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1224$1)]);
    assume {:do_not_predicate} {:check_id "check_state_10"} {:captureState "check_state_10"} {:sourceloc} {:sourceloc_num 1473} true;
    call {:check_id "check_state_10"} {:sourceloc} {:sourceloc_num 1473} _CHECK_READ_$$d_tEpiColLoc(p288$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1224$2), $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1224$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEpiColLoc"} true;
    v1226$1 := (if p288$1 then $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1224$1)] else v1226$1);
    v1226$2 := (if p288$2 then $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1224$2)] else v1226$2);
    assert {:bad_pointer_access} {:sourceloc_num 1474} {:thread 1} p289$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1474} {:thread 2} p289$2 ==> false;
    p290$1 := (if base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p290$1);
    p290$2 := (if base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p290$2);
    p291$1 := (if base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p291$1);
    p291$2 := (if base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p291$2);
    call {:sourceloc} {:sourceloc_num 1475} _LOG_WRITE_$$d_endoCol(p290$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), v1226$1, $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoCol(p290$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2));
    assume {:do_not_predicate} {:check_id "check_state_9"} {:captureState "check_state_9"} {:sourceloc} {:sourceloc_num 1475} true;
    call {:check_id "check_state_9"} {:sourceloc} {:sourceloc_num 1475} _CHECK_WRITE_$$d_endoCol(p290$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), v1226$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_endoCol"} true;
    $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] := (if p290$1 then v1226$1 else $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] := (if p290$2 then v1226$2 else $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    p292$1 := (if p291$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p292$1);
    p292$2 := (if p291$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p292$2);
    p293$1 := (if p291$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p293$1);
    p293$2 := (if p291$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p293$2);
    call {:sourceloc} {:sourceloc_num 1476} _LOG_WRITE_$$d_epiCol(p292$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), v1226$1, $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiCol(p292$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2));
    assume {:do_not_predicate} {:check_id "check_state_8"} {:captureState "check_state_8"} {:sourceloc} {:sourceloc_num 1476} true;
    call {:check_id "check_state_8"} {:sourceloc} {:sourceloc_num 1476} _CHECK_WRITE_$$d_epiCol(p292$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), v1226$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_epiCol"} true;
    $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] := (if p292$1 then v1226$1 else $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] := (if p292$2 then v1226$2 else $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assert {:bad_pointer_access} {:sourceloc_num 1477} {:thread 1} p293$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1477} {:thread 2} p293$2 ==> false;
    $ei_new.33$1 := v101$1;
    $ei_new.33$2 := v101$2;
    p294$1 := true;
    p294$2 := true;
    assume {:captureState "loop_entry_state_0_0"} true;
    goto $256;

  $256:
    assume {:captureState "loop_head_state_0"} true;
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b392 ==> _WRITE_HAS_OCCURRED_$$d_epiT ==> BV32_AND(BV32_SUB(256bv32, 1bv32), _WATCHED_OFFSET) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b391 ==> _READ_HAS_OCCURRED_$$d_epiT ==> BV32_AND(BV32_SUB(256bv32, 1bv32), _WATCHED_OFFSET) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b390 ==> _WRITE_HAS_OCCURRED_$$d_endoT ==> BV32_AND(BV32_SUB(256bv32, 1bv32), _WATCHED_OFFSET) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b389 ==> _READ_HAS_OCCURRED_$$d_endoT ==> BV32_AND(BV32_SUB(256bv32, 1bv32), _WATCHED_OFFSET) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p294$1 ==> _b7 ==> p294$1 ==> $d_frame_no != 0bv32 && BV32_SREM($d_frame_no, 10bv32) == 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p294$2 ==> _b7 ==> p294$2 ==> $d_frame_no != 0bv32 && BV32_SREM($d_frame_no, 10bv32) == 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b6 ==> $d_frame_no != 0bv32 && BV32_SREM($d_frame_no, 10bv32) == 0bv32 && BV32_SLT($ei_new.33$1, $d_common.coerce20[32:24] ++ $d_common.coerce20[24:16] ++ $d_common.coerce20[16:8] ++ $d_common.coerce20[8:0]) ==> p294$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b6 ==> $d_frame_no != 0bv32 && BV32_SREM($d_frame_no, 10bv32) == 0bv32 && BV32_SLT($ei_new.33$2, $d_common.coerce20[32:24] ++ $d_common.coerce20[24:16] ++ $d_common.coerce20[16:8] ++ $d_common.coerce20[8:0]) ==> p294$2;
    assert {:tag "loopBound"} {:thread 1} p294$1 ==> _b5 ==> BV32_UGE($ei_new.33$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p294$2 ==> _b5 ==> BV32_UGE($ei_new.33$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p294$1 ==> _b4 ==> BV32_ULE($ei_new.33$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p294$2 ==> _b4 ==> BV32_ULE($ei_new.33$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p294$1 ==> _b3 ==> BV32_SGE($ei_new.33$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p294$2 ==> _b3 ==> BV32_SGE($ei_new.33$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p294$1 ==> _b2 ==> BV32_SLE($ei_new.33$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p294$2 ==> _b2 ==> BV32_SLE($ei_new.33$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p294$1 ==> _b1 ==> BV32_SLE(0bv32, $ei_new.33$1);
    assert {:tag "guardNonNeg"} {:thread 2} p294$2 ==> _b1 ==> BV32_SLE(0bv32, $ei_new.33$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p294$1 ==> _b0 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.33$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p294$2 ==> _b0 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.33$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1478} p294$1 ==> true;
    v1227$1 := (if p294$1 then $$d_common$80bv32$1 else v1227$1);
    v1227$2 := (if p294$2 then $$d_common$80bv32$2 else v1227$2);
    v1228$1 := (if p294$1 then $$d_common$81bv32$1 else v1228$1);
    v1228$2 := (if p294$2 then $$d_common$81bv32$2 else v1228$2);
    v1229$1 := (if p294$1 then $$d_common$82bv32$1 else v1229$1);
    v1229$2 := (if p294$2 then $$d_common$82bv32$2 else v1229$2);
    v1230$1 := (if p294$1 then $$d_common$83bv32$1 else v1230$1);
    v1230$2 := (if p294$2 then $$d_common$83bv32$2 else v1230$2);
    v1231$1 := (if p294$1 then BV32_SLT($ei_new.33$1, v1230$1 ++ v1229$1 ++ v1228$1 ++ v1227$1) else v1231$1);
    v1231$2 := (if p294$2 then BV32_SLT($ei_new.33$2, v1230$2 ++ v1229$2 ++ v1228$2 ++ v1227$2) else v1231$2);
    p295$1 := false;
    p295$2 := false;
    p296$1 := false;
    p296$2 := false;
    p297$1 := false;
    p297$2 := false;
    p298$1 := false;
    p298$2 := false;
    p299$1 := false;
    p299$2 := false;
    p300$1 := false;
    p300$2 := false;
    p301$1 := false;
    p301$2 := false;
    p302$1 := false;
    p302$2 := false;
    p303$1 := false;
    p303$2 := false;
    p304$1 := false;
    p304$2 := false;
    p305$1 := false;
    p305$2 := false;
    p306$1 := false;
    p306$2 := false;
    p307$1 := false;
    p307$2 := false;
    p308$1 := false;
    p308$2 := false;
    p309$1 := false;
    p309$2 := false;
    p310$1 := false;
    p310$2 := false;
    p311$1 := false;
    p311$2 := false;
    p312$1 := false;
    p312$2 := false;
    p313$1 := false;
    p313$2 := false;
    p314$1 := false;
    p314$2 := false;
    p295$1 := (if p294$1 && v1231$1 then v1231$1 else p295$1);
    p295$2 := (if p294$2 && v1231$2 then v1231$2 else p295$2);
    p294$1 := (if p294$1 && !v1231$1 then v1231$1 else p294$1);
    p294$2 := (if p294$2 && !v1231$2 then v1231$2 else p294$2);
    v1232$1 := (if p295$1 then $$d_common$72bv32$1 else v1232$1);
    v1232$2 := (if p295$2 then $$d_common$72bv32$2 else v1232$2);
    v1233$1 := (if p295$1 then $$d_common$73bv32$1 else v1233$1);
    v1233$2 := (if p295$2 then $$d_common$73bv32$2 else v1233$2);
    v1234$1 := (if p295$1 then $$d_common$74bv32$1 else v1234$1);
    v1234$2 := (if p295$2 then $$d_common$74bv32$2 else v1234$2);
    v1235$1 := (if p295$1 then $$d_common$75bv32$1 else v1235$1);
    v1235$2 := (if p295$2 then $$d_common$75bv32$2 else v1235$2);
    v1236$1 := (if p295$1 then $$d_common$72bv32$1 else v1236$1);
    v1236$2 := (if p295$2 then $$d_common$72bv32$2 else v1236$2);
    v1237$1 := (if p295$1 then $$d_common$73bv32$1 else v1237$1);
    v1237$2 := (if p295$2 then $$d_common$73bv32$2 else v1237$2);
    v1238$1 := (if p295$1 then $$d_common$74bv32$1 else v1238$1);
    v1238$2 := (if p295$2 then $$d_common$74bv32$2 else v1238$2);
    v1239$1 := (if p295$1 then $$d_common$75bv32$1 else v1239$1);
    v1239$2 := (if p295$2 then $$d_common$75bv32$2 else v1239$2);
    v1240$1 := (if p295$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.33$1, 1bv32), v1239$1 ++ v1238$1 ++ v1237$1 ++ v1236$1), 1bv32), 1bv32) else v1240$1);
    v1240$2 := (if p295$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.33$2, 1bv32), v1239$2 ++ v1238$2 ++ v1237$2 ++ v1236$2), 1bv32), 1bv32) else v1240$2);
    v1241$1 := (if p295$1 then $$d_common$72bv32$1 else v1241$1);
    v1241$2 := (if p295$2 then $$d_common$72bv32$2 else v1241$2);
    v1242$1 := (if p295$1 then $$d_common$73bv32$1 else v1242$1);
    v1242$2 := (if p295$2 then $$d_common$73bv32$2 else v1242$2);
    v1243$1 := (if p295$1 then $$d_common$74bv32$1 else v1243$1);
    v1243$2 := (if p295$2 then $$d_common$74bv32$2 else v1243$2);
    v1244$1 := (if p295$1 then $$d_common$75bv32$1 else v1244$1);
    v1244$2 := (if p295$2 then $$d_common$75bv32$2 else v1244$2);
    v1245$1 := (if p295$1 then BV32_SREM(BV32_ADD($ei_new.33$1, 1bv32), v1244$1 ++ v1243$1 ++ v1242$1 ++ v1241$1) == 0bv32 else v1245$1);
    v1245$2 := (if p295$2 then BV32_SREM(BV32_ADD($ei_new.33$2, 1bv32), v1244$2 ++ v1243$2 ++ v1242$2 ++ v1241$2) == 0bv32 else v1245$2);
    p297$1 := (if p295$1 && v1245$1 then v1245$1 else p297$1);
    p297$2 := (if p295$2 && v1245$2 then v1245$2 else p297$2);
    p296$1 := (if p295$1 && !v1245$1 then !v1245$1 else p296$1);
    p296$2 := (if p295$2 && !v1245$2 then !v1245$2 else p296$2);
    $row.13$1, $col.13$1 := (if p296$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.33$1, 1bv32), v1235$1 ++ v1234$1 ++ v1233$1 ++ v1232$1), 1bv32) else $row.13$1), (if p296$1 then v1240$1 else $col.13$1);
    $row.13$2, $col.13$2 := (if p296$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.33$2, 1bv32), v1235$2 ++ v1234$2 ++ v1233$2 ++ v1232$2), 1bv32) else $row.13$2), (if p296$2 then v1240$2 else $col.13$2);
    v1246$1 := (if p297$1 then $$d_common$72bv32$1 else v1246$1);
    v1246$2 := (if p297$2 then $$d_common$72bv32$2 else v1246$2);
    v1247$1 := (if p297$1 then $$d_common$73bv32$1 else v1247$1);
    v1247$2 := (if p297$2 then $$d_common$73bv32$2 else v1247$2);
    v1248$1 := (if p297$1 then $$d_common$74bv32$1 else v1248$1);
    v1248$2 := (if p297$2 then $$d_common$74bv32$2 else v1248$2);
    v1249$1 := (if p297$1 then $$d_common$75bv32$1 else v1249$1);
    v1249$2 := (if p297$2 then $$d_common$75bv32$2 else v1249$2);
    $row.13$1, $col.13$1 := (if p297$1 then BV32_SUB(v1249$1 ++ v1248$1 ++ v1247$1 ++ v1246$1, 1bv32) else $row.13$1), (if p297$1 then BV32_SUB(v1240$1, 1bv32) else $col.13$1);
    $row.13$2, $col.13$2 := (if p297$2 then BV32_SUB(v1249$2 ++ v1248$2 ++ v1247$2 ++ v1246$2, 1bv32) else $row.13$2), (if p297$2 then BV32_SUB(v1240$2, 1bv32) else $col.13$2);
    p298$1 := (if p295$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p298$1);
    p298$2 := (if p295$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p298$2);
    p299$1 := (if p295$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p299$1);
    p299$2 := (if p295$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p299$2);
    call {:sourceloc} {:sourceloc_num 1502} _LOG_READ_$$d_epiRow(p298$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_7"} {:captureState "check_state_7"} {:sourceloc} {:sourceloc_num 1502} true;
    call {:check_id "check_state_7"} {:sourceloc} {:sourceloc_num 1502} _CHECK_READ_$$d_epiRow(p298$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v1250$1 := (if p298$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1250$1);
    v1250$2 := (if p298$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1250$2);
    p301$1 := (if p299$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p301$1);
    p301$2 := (if p299$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p301$2);
    p300$1 := (if p299$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p300$1);
    p300$2 := (if p299$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p300$2);
    assert {:bad_pointer_access} {:sourceloc_num 1504} {:thread 1} p300$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1504} {:thread 2} p300$2 ==> false;
    call {:sourceloc} {:sourceloc_num 1503} _LOG_READ_$$d_endoRow(p301$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_6"} {:captureState "check_state_6"} {:sourceloc} {:sourceloc_num 1503} true;
    call {:check_id "check_state_6"} {:sourceloc} {:sourceloc_num 1503} _CHECK_READ_$$d_endoRow(p301$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v1250$1 := (if p301$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1250$1);
    v1250$2 := (if p301$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1250$2);
    p302$1 := (if p295$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p302$1);
    p302$2 := (if p295$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p302$2);
    p303$1 := (if p295$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p303$1);
    p303$2 := (if p295$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p303$2);
    call {:sourceloc} {:sourceloc_num 1505} _LOG_READ_$$d_endoCol(p302$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_5"} {:captureState "check_state_5"} {:sourceloc} {:sourceloc_num 1505} true;
    call {:check_id "check_state_5"} {:sourceloc} {:sourceloc_num 1505} _CHECK_READ_$$d_endoCol(p302$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v1251$1 := (if p302$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1251$1);
    v1251$2 := (if p302$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1251$2);
    p305$1 := (if p303$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p305$1);
    p305$2 := (if p303$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p305$2);
    p304$1 := (if p303$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p304$1);
    p304$2 := (if p303$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p304$2);
    assert {:bad_pointer_access} {:sourceloc_num 1507} {:thread 1} p304$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1507} {:thread 2} p304$2 ==> false;
    call {:sourceloc} {:sourceloc_num 1506} _LOG_READ_$$d_epiCol(p305$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_4"} {:captureState "check_state_4"} {:sourceloc} {:sourceloc_num 1506} true;
    call {:check_id "check_state_4"} {:sourceloc} {:sourceloc_num 1506} _CHECK_READ_$$d_epiCol(p305$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v1251$1 := (if p305$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1251$1);
    v1251$2 := (if p305$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1251$2);
    v1252$1 := (if p295$1 then $$d_common$36bv32$1 else v1252$1);
    v1252$2 := (if p295$2 then $$d_common$36bv32$2 else v1252$2);
    v1253$1 := (if p295$1 then $$d_common$37bv32$1 else v1253$1);
    v1253$2 := (if p295$2 then $$d_common$37bv32$2 else v1253$2);
    v1254$1 := (if p295$1 then $$d_common$38bv32$1 else v1254$1);
    v1254$2 := (if p295$2 then $$d_common$38bv32$2 else v1254$2);
    v1255$1 := (if p295$1 then $$d_common$39bv32$1 else v1255$1);
    v1255$2 := (if p295$2 then $$d_common$39bv32$2 else v1255$2);
    v1256$1 := (if p295$1 then $$d_common$28bv32$1 else v1256$1);
    v1256$2 := (if p295$2 then $$d_common$28bv32$2 else v1256$2);
    v1257$1 := (if p295$1 then $$d_common$29bv32$1 else v1257$1);
    v1257$2 := (if p295$2 then $$d_common$29bv32$2 else v1257$2);
    v1258$1 := (if p295$1 then $$d_common$30bv32$1 else v1258$1);
    v1258$2 := (if p295$2 then $$d_common$30bv32$2 else v1258$2);
    v1259$1 := (if p295$1 then $$d_common$31bv32$1 else v1259$1);
    v1259$2 := (if p295$2 then $$d_common$31bv32$2 else v1259$2);
    p306$1 := (if p295$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_endoT then base#MKPTR($d_in.0$1) == $arrayId$$d_endoT else p306$1);
    p306$2 := (if p295$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_endoT then base#MKPTR($d_in.0$2) == $arrayId$$d_endoT else p306$2);
    p307$1 := (if p295$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_endoT then base#MKPTR($d_in.0$1) != $arrayId$$d_endoT else p307$1);
    p307$2 := (if p295$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_endoT then base#MKPTR($d_in.0$2) != $arrayId$$d_endoT else p307$2);
    call {:sourceloc} {:sourceloc_num 1516} _LOG_READ_$$d_endoT(p306$1, BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)]);
    assume {:do_not_predicate} {:check_id "check_state_3"} {:captureState "check_state_3"} {:sourceloc} {:sourceloc_num 1516} true;
    call {:check_id "check_state_3"} {:sourceloc} {:sourceloc_num 1516} _CHECK_READ_$$d_endoT(p306$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoT"} true;
    v1260$1 := (if p306$1 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)] else v1260$1);
    v1260$2 := (if p306$2 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)] else v1260$2);
    p309$1 := (if p307$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_epiT then base#MKPTR($d_in.0$1) == $arrayId$$d_epiT else p309$1);
    p309$2 := (if p307$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_epiT then base#MKPTR($d_in.0$2) == $arrayId$$d_epiT else p309$2);
    p308$1 := (if p307$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_epiT then base#MKPTR($d_in.0$1) != $arrayId$$d_epiT else p308$1);
    p308$2 := (if p307$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_epiT then base#MKPTR($d_in.0$2) != $arrayId$$d_epiT else p308$2);
    assert {:bad_pointer_access} {:sourceloc_num 1518} {:thread 1} p308$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1518} {:thread 2} p308$2 ==> false;
    call {:sourceloc} {:sourceloc_num 1517} _LOG_READ_$$d_epiT(p309$1, BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)]);
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 1517} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 1517} _CHECK_READ_$$d_epiT(p309$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiT"} true;
    v1260$1 := (if p309$1 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)] else v1260$1);
    v1260$2 := (if p309$2 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)] else v1260$2);
    v1261$1 := (if p295$1 then $$d_common$28bv32$1 else v1261$1);
    v1261$2 := (if p295$2 then $$d_common$28bv32$2 else v1261$2);
    v1262$1 := (if p295$1 then $$d_common$29bv32$1 else v1262$1);
    v1262$2 := (if p295$2 then $$d_common$29bv32$2 else v1262$2);
    v1263$1 := (if p295$1 then $$d_common$30bv32$1 else v1263$1);
    v1263$2 := (if p295$2 then $$d_common$30bv32$2 else v1263$2);
    v1264$1 := (if p295$1 then $$d_common$31bv32$1 else v1264$1);
    v1264$2 := (if p295$2 then $$d_common$31bv32$2 else v1264$2);
    havoc _HAVOC_bv32$1, _HAVOC_bv32$2;
    v1265$1 := (if p295$1 then _HAVOC_bv32$1 else v1265$1);
    v1265$2 := (if p295$2 then _HAVOC_bv32$2 else v1265$2);
    p310$1 := (if p295$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_endoT then base#MKPTR($d_in.0$1) == $arrayId$$d_endoT else p310$1);
    p310$2 := (if p295$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_endoT then base#MKPTR($d_in.0$2) == $arrayId$$d_endoT else p310$2);
    p311$1 := (if p295$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_endoT then base#MKPTR($d_in.0$1) != $arrayId$$d_endoT else p311$1);
    p311$2 := (if p295$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_endoT then base#MKPTR($d_in.0$2) != $arrayId$$d_endoT else p311$2);
    call {:sourceloc} {:sourceloc_num 1524} _LOG_WRITE_$$d_endoT(p310$1, BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1), FADD32(FMUL32(v1259$1 ++ v1258$1 ++ v1257$1 ++ v1256$1, v1260$1), FMUL32(FSUB32(1065353216bv32, v1264$1 ++ v1263$1 ++ v1262$1 ++ v1261$1), v1265$1)), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoT(p310$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2));
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 1524} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 1524} _CHECK_WRITE_$$d_endoT(p310$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2), FADD32(FMUL32(v1259$2 ++ v1258$2 ++ v1257$2 ++ v1256$2, v1260$2), FMUL32(FSUB32(1065353216bv32, v1264$2 ++ v1263$2 ++ v1262$2 ++ v1261$2), v1265$2)));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_endoT"} true;
    $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)] := (if p310$1 then FADD32(FMUL32(v1259$1 ++ v1258$1 ++ v1257$1 ++ v1256$1, v1260$1), FMUL32(FSUB32(1065353216bv32, v1264$1 ++ v1263$1 ++ v1262$1 ++ v1261$1), v1265$1)) else $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)]);
    $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)] := (if p310$2 then FADD32(FMUL32(v1259$2 ++ v1258$2 ++ v1257$2 ++ v1256$2, v1260$2), FMUL32(FSUB32(1065353216bv32, v1264$2 ++ v1263$2 ++ v1262$2 ++ v1261$2), v1265$2)) else $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)]);
    p313$1 := (if p311$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_epiT then base#MKPTR($d_in.0$1) == $arrayId$$d_epiT else p313$1);
    p313$2 := (if p311$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_epiT then base#MKPTR($d_in.0$2) == $arrayId$$d_epiT else p313$2);
    p312$1 := (if p311$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_epiT then base#MKPTR($d_in.0$1) != $arrayId$$d_epiT else p312$1);
    p312$2 := (if p311$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_epiT then base#MKPTR($d_in.0$2) != $arrayId$$d_epiT else p312$2);
    assert {:bad_pointer_access} {:sourceloc_num 1526} {:thread 1} p312$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1526} {:thread 2} p312$2 ==> false;
    call {:sourceloc} {:sourceloc_num 1525} _LOG_WRITE_$$d_epiT(p313$1, BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1), FADD32(FMUL32(v1259$1 ++ v1258$1 ++ v1257$1 ++ v1256$1, v1260$1), FMUL32(FSUB32(1065353216bv32, v1264$1 ++ v1263$1 ++ v1262$1 ++ v1261$1), v1265$1)), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiT(p313$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2));
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 1525} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 1525} _CHECK_WRITE_$$d_epiT(p313$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2), FADD32(FMUL32(v1259$2 ++ v1258$2 ++ v1257$2 ++ v1256$2, v1260$2), FMUL32(FSUB32(1065353216bv32, v1264$2 ++ v1263$2 ++ v1262$2 ++ v1261$2), v1265$2)));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_epiT"} true;
    $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)] := (if p313$1 then FADD32(FMUL32(v1259$1 ++ v1258$1 ++ v1257$1 ++ v1256$1, v1260$1), FMUL32(FSUB32(1065353216bv32, v1264$1 ++ v1263$1 ++ v1262$1 ++ v1261$1), v1265$1)) else $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.33$1)]);
    $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)] := (if p313$2 then FADD32(FMUL32(v1259$2 ++ v1258$2 ++ v1257$2 ++ v1256$2, v1260$2), FMUL32(FSUB32(1065353216bv32, v1264$2 ++ v1263$2 ++ v1262$2 ++ v1261$2), v1265$2)) else $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.33$2)]);
    $ei_new.33$1 := (if p295$1 then BV32_ADD($ei_new.33$1, 256bv32) else $ei_new.33$1);
    $ei_new.33$2 := (if p295$2 then BV32_ADD($ei_new.33$2, 256bv32) else $ei_new.33$2);
    p294$1 := (if p295$1 then true else p294$1);
    p294$2 := (if p295$2 then true else p294$2);
    goto $256.backedge, __partitioned_block_$256.tail_0;

  __partitioned_block_$256.tail_0:
    assume !p294$1 && !p294$2;
    goto __partitioned_block_$256.tail_1;

  __partitioned_block_$256.tail_1:
    call {:sourceloc_num 1528} $bugle_barrier_duplicated_1(1bv1, 1bv1);
    goto $261;

  $256.backedge:
    assume {:backedge} p294$1 || p294$2;
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto $256;

  __partitioned_block_$truebb4_0:
    assume {:partition} v248 && v248;
    goto __partitioned_block_$truebb4_1;

  __partitioned_block_$truebb4_1:
    call {:sourceloc_num 255} $bugle_barrier_duplicated_2(1bv1, 1bv1);
    p37$1 := (if base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p37$1);
    p37$2 := (if base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p37$2);
    p38$1 := (if base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p38$1);
    p38$2 := (if base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p38$2);
    call {:sourceloc} {:sourceloc_num 256} _LOG_READ_$$d_epiRow(p37$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_141"} {:captureState "check_state_141"} {:sourceloc} {:sourceloc_num 256} true;
    call {:check_id "check_state_141"} {:sourceloc} {:sourceloc_num 256} _CHECK_READ_$$d_epiRow(p37$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v249$1 := (if p37$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v249$1);
    v249$2 := (if p37$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v249$2);
    p39$1 := (if p38$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p39$1);
    p39$2 := (if p38$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p39$2);
    p40$1 := (if p38$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p40$1);
    p40$2 := (if p38$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p40$2);
    call {:sourceloc} {:sourceloc_num 257} _LOG_READ_$$d_endoRow(p39$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_140"} {:captureState "check_state_140"} {:sourceloc} {:sourceloc_num 257} true;
    call {:check_id "check_state_140"} {:sourceloc} {:sourceloc_num 257} _CHECK_READ_$$d_endoRow(p39$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v249$1 := (if p39$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v249$1);
    v249$2 := (if p39$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v249$2);
    assert {:bad_pointer_access} {:sourceloc_num 258} {:thread 1} p40$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 258} {:thread 2} p40$2 ==> false;
    v250$1 := $$d_common$16bv32$1;
    v250$2 := $$d_common$16bv32$2;
    v251$1 := $$d_common$17bv32$1;
    v251$2 := $$d_common$17bv32$2;
    v252$1 := $$d_common$18bv32$1;
    v252$2 := $$d_common$18bv32$2;
    v253$1 := $$d_common$19bv32$1;
    v253$2 := $$d_common$19bv32$2;
    p41$1 := (if base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p41$1);
    p41$2 := (if base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p41$2);
    p42$1 := (if base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p42$1);
    p42$2 := (if base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p42$2);
    call {:sourceloc} {:sourceloc_num 263} _LOG_READ_$$d_endoCol(p41$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_139"} {:captureState "check_state_139"} {:sourceloc} {:sourceloc_num 263} true;
    call {:check_id "check_state_139"} {:sourceloc} {:sourceloc_num 263} _CHECK_READ_$$d_endoCol(p41$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v254$1 := (if p41$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v254$1);
    v254$2 := (if p41$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v254$2);
    p43$1 := (if p42$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p43$1);
    p43$2 := (if p42$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p43$2);
    p44$1 := (if p42$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p44$1);
    p44$2 := (if p42$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p44$2);
    call {:sourceloc} {:sourceloc_num 264} _LOG_READ_$$d_epiCol(p43$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_138"} {:captureState "check_state_138"} {:sourceloc} {:sourceloc_num 264} true;
    call {:check_id "check_state_138"} {:sourceloc} {:sourceloc_num 264} _CHECK_READ_$$d_epiCol(p43$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v254$1 := (if p43$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v254$1);
    v254$2 := (if p43$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v254$2);
    assert {:bad_pointer_access} {:sourceloc_num 265} {:thread 1} p44$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 265} {:thread 2} p44$2 ==> false;
    v255$1 := $$d_common$16bv32$1;
    v255$2 := $$d_common$16bv32$2;
    v256$1 := $$d_common$17bv32$1;
    v256$2 := $$d_common$17bv32$2;
    v257$1 := $$d_common$18bv32$1;
    v257$2 := $$d_common$18bv32$2;
    v258$1 := $$d_common$19bv32$1;
    v258$2 := $$d_common$19bv32$2;
    $ei_new.1$1 := v101$1;
    $ei_new.1$2 := v101$2;
    p45$1 := true;
    p45$2 := true;
    assume {:captureState "loop_entry_state_46_0"} true;
    goto $14;

  $14:
    assume {:captureState "loop_head_state_46"} true;
    assert {:tag "accessBreak"} _b393 ==> _WRITE_HAS_OCCURRED_$$d_in2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce25), $d_common.coerce25), $d_common.coerce25), $d_common.coerce25);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p45$1 ==> _b15 ==> p45$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p45$2 ==> _b15 ==> p45$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b14 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.1$1, $d_common.coerce25[32:24] ++ $d_common.coerce25[24:16] ++ $d_common.coerce25[16:8] ++ $d_common.coerce25[8:0]) ==> p45$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b14 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.1$2, $d_common.coerce25[32:24] ++ $d_common.coerce25[24:16] ++ $d_common.coerce25[16:8] ++ $d_common.coerce25[8:0]) ==> p45$2;
    assert {:tag "loopBound"} {:thread 1} p45$1 ==> _b13 ==> BV32_UGE($ei_new.1$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p45$2 ==> _b13 ==> BV32_UGE($ei_new.1$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p45$1 ==> _b12 ==> BV32_ULE($ei_new.1$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p45$2 ==> _b12 ==> BV32_ULE($ei_new.1$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p45$1 ==> _b11 ==> BV32_SGE($ei_new.1$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p45$2 ==> _b11 ==> BV32_SGE($ei_new.1$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p45$1 ==> _b10 ==> BV32_SLE($ei_new.1$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p45$2 ==> _b10 ==> BV32_SLE($ei_new.1$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p45$1 ==> _b9 ==> BV32_SLE(0bv32, $ei_new.1$1);
    assert {:tag "guardNonNeg"} {:thread 2} p45$2 ==> _b9 ==> BV32_SLE(0bv32, $ei_new.1$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p45$1 ==> _b8 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.1$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p45$2 ==> _b8 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.1$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 270} p45$1 ==> true;
    v259$1 := (if p45$1 then $$d_common$100bv32$1 else v259$1);
    v259$2 := (if p45$2 then $$d_common$100bv32$2 else v259$2);
    v260$1 := (if p45$1 then $$d_common$101bv32$1 else v260$1);
    v260$2 := (if p45$2 then $$d_common$101bv32$2 else v260$2);
    v261$1 := (if p45$1 then $$d_common$102bv32$1 else v261$1);
    v261$2 := (if p45$2 then $$d_common$102bv32$2 else v261$2);
    v262$1 := (if p45$1 then $$d_common$103bv32$1 else v262$1);
    v262$2 := (if p45$2 then $$d_common$103bv32$2 else v262$2);
    v263$1 := (if p45$1 then BV32_SLT($ei_new.1$1, v262$1 ++ v261$1 ++ v260$1 ++ v259$1) else v263$1);
    v263$2 := (if p45$2 then BV32_SLT($ei_new.1$2, v262$2 ++ v261$2 ++ v260$2 ++ v259$2) else v263$2);
    p46$1 := false;
    p46$2 := false;
    p47$1 := false;
    p47$2 := false;
    p48$1 := false;
    p48$2 := false;
    p49$1 := false;
    p49$2 := false;
    p46$1 := (if p45$1 && v263$1 then v263$1 else p46$1);
    p46$2 := (if p45$2 && v263$2 then v263$2 else p46$2);
    p45$1 := (if p45$1 && !v263$1 then v263$1 else p45$1);
    p45$2 := (if p45$2 && !v263$2 then v263$2 else p45$2);
    v264$1 := (if p46$1 then $$d_common$92bv32$1 else v264$1);
    v264$2 := (if p46$2 then $$d_common$92bv32$2 else v264$2);
    v265$1 := (if p46$1 then $$d_common$93bv32$1 else v265$1);
    v265$2 := (if p46$2 then $$d_common$93bv32$2 else v265$2);
    v266$1 := (if p46$1 then $$d_common$94bv32$1 else v266$1);
    v266$2 := (if p46$2 then $$d_common$94bv32$2 else v266$2);
    v267$1 := (if p46$1 then $$d_common$95bv32$1 else v267$1);
    v267$2 := (if p46$2 then $$d_common$95bv32$2 else v267$2);
    v268$1 := (if p46$1 then $$d_common$92bv32$1 else v268$1);
    v268$2 := (if p46$2 then $$d_common$92bv32$2 else v268$2);
    v269$1 := (if p46$1 then $$d_common$93bv32$1 else v269$1);
    v269$2 := (if p46$2 then $$d_common$93bv32$2 else v269$2);
    v270$1 := (if p46$1 then $$d_common$94bv32$1 else v270$1);
    v270$2 := (if p46$2 then $$d_common$94bv32$2 else v270$2);
    v271$1 := (if p46$1 then $$d_common$95bv32$1 else v271$1);
    v271$2 := (if p46$2 then $$d_common$95bv32$2 else v271$2);
    v272$1 := (if p46$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.1$1, 1bv32), v271$1 ++ v270$1 ++ v269$1 ++ v268$1), 1bv32), 1bv32) else v272$1);
    v272$2 := (if p46$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.1$2, 1bv32), v271$2 ++ v270$2 ++ v269$2 ++ v268$2), 1bv32), 1bv32) else v272$2);
    v273$1 := (if p46$1 then $$d_common$92bv32$1 else v273$1);
    v273$2 := (if p46$2 then $$d_common$92bv32$2 else v273$2);
    v274$1 := (if p46$1 then $$d_common$93bv32$1 else v274$1);
    v274$2 := (if p46$2 then $$d_common$93bv32$2 else v274$2);
    v275$1 := (if p46$1 then $$d_common$94bv32$1 else v275$1);
    v275$2 := (if p46$2 then $$d_common$94bv32$2 else v275$2);
    v276$1 := (if p46$1 then $$d_common$95bv32$1 else v276$1);
    v276$2 := (if p46$2 then $$d_common$95bv32$2 else v276$2);
    v277$1 := (if p46$1 then BV32_SREM(BV32_ADD($ei_new.1$1, 1bv32), v276$1 ++ v275$1 ++ v274$1 ++ v273$1) == 0bv32 else v277$1);
    v277$2 := (if p46$2 then BV32_SREM(BV32_ADD($ei_new.1$2, 1bv32), v276$2 ++ v275$2 ++ v274$2 ++ v273$2) == 0bv32 else v277$2);
    p48$1 := (if p46$1 && v277$1 then v277$1 else p48$1);
    p48$2 := (if p46$2 && v277$2 then v277$2 else p48$2);
    p47$1 := (if p46$1 && !v277$1 then !v277$1 else p47$1);
    p47$2 := (if p46$2 && !v277$2 then !v277$2 else p47$2);
    $row.1$1, $col.1$1 := (if p47$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.1$1, 1bv32), v267$1 ++ v266$1 ++ v265$1 ++ v264$1), 1bv32) else $row.1$1), (if p47$1 then v272$1 else $col.1$1);
    $row.1$2, $col.1$2 := (if p47$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.1$2, 1bv32), v267$2 ++ v266$2 ++ v265$2 ++ v264$2), 1bv32) else $row.1$2), (if p47$2 then v272$2 else $col.1$2);
    v278$1 := (if p48$1 then $$d_common$92bv32$1 else v278$1);
    v278$2 := (if p48$2 then $$d_common$92bv32$2 else v278$2);
    v279$1 := (if p48$1 then $$d_common$93bv32$1 else v279$1);
    v279$2 := (if p48$2 then $$d_common$93bv32$2 else v279$2);
    v280$1 := (if p48$1 then $$d_common$94bv32$1 else v280$1);
    v280$2 := (if p48$2 then $$d_common$94bv32$2 else v280$2);
    v281$1 := (if p48$1 then $$d_common$95bv32$1 else v281$1);
    v281$2 := (if p48$2 then $$d_common$95bv32$2 else v281$2);
    $row.1$1, $col.1$1 := (if p48$1 then BV32_SUB(v281$1 ++ v280$1 ++ v279$1 ++ v278$1, 1bv32) else $row.1$1), (if p48$1 then BV32_SUB(v272$1, 1bv32) else $col.1$1);
    $row.1$2, $col.1$2 := (if p48$2 then BV32_SUB(v281$2 ++ v280$2 ++ v279$2 ++ v278$2, 1bv32) else $row.1$2), (if p48$2 then BV32_SUB(v272$2, 1bv32) else $col.1$2);
    v282$1 := (if p46$1 then $$d_common$36bv32$1 else v282$1);
    v282$2 := (if p46$2 then $$d_common$36bv32$2 else v282$2);
    v283$1 := (if p46$1 then $$d_common$37bv32$1 else v283$1);
    v283$2 := (if p46$2 then $$d_common$37bv32$2 else v283$2);
    v284$1 := (if p46$1 then $$d_common$38bv32$1 else v284$1);
    v284$2 := (if p46$2 then $$d_common$38bv32$2 else v284$2);
    v285$1 := (if p46$1 then $$d_common$39bv32$1 else v285$1);
    v285$2 := (if p46$2 then $$d_common$39bv32$2 else v285$2);
    havoc _HAVOC_bv32$1, _HAVOC_bv32$2;
    v286$1 := (if p46$1 then _HAVOC_bv32$1 else v286$1);
    v286$2 := (if p46$2 then _HAVOC_bv32$2 else v286$2);
    call {:sourceloc} {:sourceloc_num 299} _LOG_WRITE_$$d_in2_all(p46$1, BV32_ADD(v124$1, $ei_new.1$1), v286$1, $$d_in2_all[BV32_ADD(v124$1, $ei_new.1$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_all(p46$2, BV32_ADD(v124$2, $ei_new.1$2));
    assume {:do_not_predicate} {:check_id "check_state_137"} {:captureState "check_state_137"} {:sourceloc} {:sourceloc_num 299} true;
    call {:check_id "check_state_137"} {:sourceloc} {:sourceloc_num 299} _CHECK_WRITE_$$d_in2_all(p46$2, BV32_ADD(v124$2, $ei_new.1$2), v286$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_all"} true;
    $$d_in2_all[BV32_ADD(v124$1, $ei_new.1$1)] := (if p46$1 then v286$1 else $$d_in2_all[BV32_ADD(v124$1, $ei_new.1$1)]);
    $$d_in2_all[BV32_ADD(v124$2, $ei_new.1$2)] := (if p46$2 then v286$2 else $$d_in2_all[BV32_ADD(v124$2, $ei_new.1$2)]);
    $ei_new.1$1 := (if p46$1 then BV32_ADD($ei_new.1$1, 256bv32) else $ei_new.1$1);
    $ei_new.1$2 := (if p46$2 then BV32_ADD($ei_new.1$2, 256bv32) else $ei_new.1$2);
    p45$1 := (if p46$1 then true else p45$1);
    p45$2 := (if p46$2 then true else p45$2);
    goto $14.backedge, __partitioned_block_$14.tail_0;

  __partitioned_block_$14.tail_0:
    assume !p45$1 && !p45$2;
    goto __partitioned_block_$14.tail_1;

  __partitioned_block_$14.tail_1:
    call {:sourceloc_num 301} $bugle_barrier_duplicated_3(1bv1, 1bv1);
    $ei_new.2$1 := v101$1;
    $ei_new.2$2 := v101$2;
    p50$1 := true;
    p50$2 := true;
    assume {:captureState "loop_entry_state_45_0"} true;
    goto $19;

  $19:
    assume {:captureState "loop_head_state_45"} true;
    assert {:tag "accessBreak"} _b394 ==> _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce20), $d_common.coerce20), $d_common.coerce20), $d_common.coerce20);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p50$1 ==> _b23 ==> p50$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p50$2 ==> _b23 ==> p50$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b22 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.2$1, $d_common.coerce20[32:24] ++ $d_common.coerce20[24:16] ++ $d_common.coerce20[16:8] ++ $d_common.coerce20[8:0]) ==> p50$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b22 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.2$2, $d_common.coerce20[32:24] ++ $d_common.coerce20[24:16] ++ $d_common.coerce20[16:8] ++ $d_common.coerce20[8:0]) ==> p50$2;
    assert {:tag "loopBound"} {:thread 1} p50$1 ==> _b21 ==> BV32_UGE($ei_new.2$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p50$2 ==> _b21 ==> BV32_UGE($ei_new.2$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p50$1 ==> _b20 ==> BV32_ULE($ei_new.2$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p50$2 ==> _b20 ==> BV32_ULE($ei_new.2$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p50$1 ==> _b19 ==> BV32_SGE($ei_new.2$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p50$2 ==> _b19 ==> BV32_SGE($ei_new.2$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p50$1 ==> _b18 ==> BV32_SLE($ei_new.2$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p50$2 ==> _b18 ==> BV32_SLE($ei_new.2$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p50$1 ==> _b17 ==> BV32_SLE(0bv32, $ei_new.2$1);
    assert {:tag "guardNonNeg"} {:thread 2} p50$2 ==> _b17 ==> BV32_SLE(0bv32, $ei_new.2$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p50$1 ==> _b16 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.2$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p50$2 ==> _b16 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.2$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 302} p50$1 ==> true;
    v287$1 := (if p50$1 then $$d_common$80bv32$1 else v287$1);
    v287$2 := (if p50$2 then $$d_common$80bv32$2 else v287$2);
    v288$1 := (if p50$1 then $$d_common$81bv32$1 else v288$1);
    v288$2 := (if p50$2 then $$d_common$81bv32$2 else v288$2);
    v289$1 := (if p50$1 then $$d_common$82bv32$1 else v289$1);
    v289$2 := (if p50$2 then $$d_common$82bv32$2 else v289$2);
    v290$1 := (if p50$1 then $$d_common$83bv32$1 else v290$1);
    v290$2 := (if p50$2 then $$d_common$83bv32$2 else v290$2);
    v291$1 := (if p50$1 then BV32_SLT($ei_new.2$1, v290$1 ++ v289$1 ++ v288$1 ++ v287$1) else v291$1);
    v291$2 := (if p50$2 then BV32_SLT($ei_new.2$2, v290$2 ++ v289$2 ++ v288$2 ++ v287$2) else v291$2);
    p51$1 := false;
    p51$2 := false;
    p52$1 := false;
    p52$2 := false;
    p53$1 := false;
    p53$2 := false;
    p54$1 := false;
    p54$2 := false;
    p55$1 := false;
    p55$2 := false;
    p56$1 := false;
    p56$2 := false;
    p57$1 := false;
    p57$2 := false;
    p51$1 := (if p50$1 && v291$1 then v291$1 else p51$1);
    p51$2 := (if p50$2 && v291$2 then v291$2 else p51$2);
    p50$1 := (if p50$1 && !v291$1 then v291$1 else p50$1);
    p50$2 := (if p50$2 && !v291$2 then v291$2 else p50$2);
    v292$1 := (if p51$1 then $$d_common$72bv32$1 else v292$1);
    v292$2 := (if p51$2 then $$d_common$72bv32$2 else v292$2);
    v293$1 := (if p51$1 then $$d_common$73bv32$1 else v293$1);
    v293$2 := (if p51$2 then $$d_common$73bv32$2 else v293$2);
    v294$1 := (if p51$1 then $$d_common$74bv32$1 else v294$1);
    v294$2 := (if p51$2 then $$d_common$74bv32$2 else v294$2);
    v295$1 := (if p51$1 then $$d_common$75bv32$1 else v295$1);
    v295$2 := (if p51$2 then $$d_common$75bv32$2 else v295$2);
    v296$1 := (if p51$1 then $$d_common$72bv32$1 else v296$1);
    v296$2 := (if p51$2 then $$d_common$72bv32$2 else v296$2);
    v297$1 := (if p51$1 then $$d_common$73bv32$1 else v297$1);
    v297$2 := (if p51$2 then $$d_common$73bv32$2 else v297$2);
    v298$1 := (if p51$1 then $$d_common$74bv32$1 else v298$1);
    v298$2 := (if p51$2 then $$d_common$74bv32$2 else v298$2);
    v299$1 := (if p51$1 then $$d_common$75bv32$1 else v299$1);
    v299$2 := (if p51$2 then $$d_common$75bv32$2 else v299$2);
    v300$1 := (if p51$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.2$1, 1bv32), v299$1 ++ v298$1 ++ v297$1 ++ v296$1), 1bv32), 1bv32) else v300$1);
    v300$2 := (if p51$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.2$2, 1bv32), v299$2 ++ v298$2 ++ v297$2 ++ v296$2), 1bv32), 1bv32) else v300$2);
    v301$1 := (if p51$1 then $$d_common$72bv32$1 else v301$1);
    v301$2 := (if p51$2 then $$d_common$72bv32$2 else v301$2);
    v302$1 := (if p51$1 then $$d_common$73bv32$1 else v302$1);
    v302$2 := (if p51$2 then $$d_common$73bv32$2 else v302$2);
    v303$1 := (if p51$1 then $$d_common$74bv32$1 else v303$1);
    v303$2 := (if p51$2 then $$d_common$74bv32$2 else v303$2);
    v304$1 := (if p51$1 then $$d_common$75bv32$1 else v304$1);
    v304$2 := (if p51$2 then $$d_common$75bv32$2 else v304$2);
    v305$1 := (if p51$1 then BV32_SREM(BV32_ADD($ei_new.2$1, 1bv32), v304$1 ++ v303$1 ++ v302$1 ++ v301$1) == 0bv32 else v305$1);
    v305$2 := (if p51$2 then BV32_SREM(BV32_ADD($ei_new.2$2, 1bv32), v304$2 ++ v303$2 ++ v302$2 ++ v301$2) == 0bv32 else v305$2);
    p53$1 := (if p51$1 && v305$1 then v305$1 else p53$1);
    p53$2 := (if p51$2 && v305$2 then v305$2 else p53$2);
    p52$1 := (if p51$1 && !v305$1 then !v305$1 else p52$1);
    p52$2 := (if p51$2 && !v305$2 then !v305$2 else p52$2);
    $row.2$1, $col.2$1 := (if p52$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.2$1, 1bv32), v295$1 ++ v294$1 ++ v293$1 ++ v292$1), 1bv32) else $row.2$1), (if p52$1 then v300$1 else $col.2$1);
    $row.2$2, $col.2$2 := (if p52$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.2$2, 1bv32), v295$2 ++ v294$2 ++ v293$2 ++ v292$2), 1bv32) else $row.2$2), (if p52$2 then v300$2 else $col.2$2);
    v306$1 := (if p53$1 then $$d_common$72bv32$1 else v306$1);
    v306$2 := (if p53$2 then $$d_common$72bv32$2 else v306$2);
    v307$1 := (if p53$1 then $$d_common$73bv32$1 else v307$1);
    v307$2 := (if p53$2 then $$d_common$73bv32$2 else v307$2);
    v308$1 := (if p53$1 then $$d_common$74bv32$1 else v308$1);
    v308$2 := (if p53$2 then $$d_common$74bv32$2 else v308$2);
    v309$1 := (if p53$1 then $$d_common$75bv32$1 else v309$1);
    v309$2 := (if p53$2 then $$d_common$75bv32$2 else v309$2);
    $row.2$1, $col.2$1 := (if p53$1 then BV32_SUB(v309$1 ++ v308$1 ++ v307$1 ++ v306$1, 1bv32) else $row.2$1), (if p53$1 then BV32_SUB(v300$1, 1bv32) else $col.2$1);
    $row.2$2, $col.2$2 := (if p53$2 then BV32_SUB(v309$2 ++ v308$2 ++ v307$2 ++ v306$2, 1bv32) else $row.2$2), (if p53$2 then BV32_SUB(v300$2, 1bv32) else $col.2$2);
    v310$1 := (if p51$1 then $$d_common$72bv32$1 else v310$1);
    v310$2 := (if p51$2 then $$d_common$72bv32$2 else v310$2);
    v311$1 := (if p51$1 then $$d_common$73bv32$1 else v311$1);
    v311$2 := (if p51$2 then $$d_common$73bv32$2 else v311$2);
    v312$1 := (if p51$1 then $$d_common$74bv32$1 else v312$1);
    v312$2 := (if p51$2 then $$d_common$74bv32$2 else v312$2);
    v313$1 := (if p51$1 then $$d_common$75bv32$1 else v313$1);
    v313$2 := (if p51$2 then $$d_common$75bv32$2 else v313$2);
    v314$1 := (if p51$1 then $$d_common$72bv32$1 else v314$1);
    v314$2 := (if p51$2 then $$d_common$72bv32$2 else v314$2);
    v315$1 := (if p51$1 then $$d_common$73bv32$1 else v315$1);
    v315$2 := (if p51$2 then $$d_common$73bv32$2 else v315$2);
    v316$1 := (if p51$1 then $$d_common$74bv32$1 else v316$1);
    v316$2 := (if p51$2 then $$d_common$74bv32$2 else v316$2);
    v317$1 := (if p51$1 then $$d_common$75bv32$1 else v317$1);
    v317$2 := (if p51$2 then $$d_common$75bv32$2 else v317$2);
    v318$1 := (if p51$1 then $$d_common$72bv32$1 else v318$1);
    v318$2 := (if p51$2 then $$d_common$72bv32$2 else v318$2);
    v319$1 := (if p51$1 then $$d_common$73bv32$1 else v319$1);
    v319$2 := (if p51$2 then $$d_common$73bv32$2 else v319$2);
    v320$1 := (if p51$1 then $$d_common$74bv32$1 else v320$1);
    v320$2 := (if p51$2 then $$d_common$74bv32$2 else v320$2);
    v321$1 := (if p51$1 then $$d_common$75bv32$1 else v321$1);
    v321$2 := (if p51$2 then $$d_common$75bv32$2 else v321$2);
    p54$1 := (if p51$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_endoT then base#MKPTR($d_in.0$1) == $arrayId$$d_endoT else p54$1);
    p54$2 := (if p51$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_endoT then base#MKPTR($d_in.0$2) == $arrayId$$d_endoT else p54$2);
    p55$1 := (if p51$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_endoT then base#MKPTR($d_in.0$1) != $arrayId$$d_endoT else p55$1);
    p55$2 := (if p51$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_endoT then base#MKPTR($d_in.0$2) != $arrayId$$d_endoT else p55$2);
    call {:sourceloc} {:sourceloc_num 338} _LOG_READ_$$d_endoT(p54$1, BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$1 ++ v316$1 ++ v315$1 ++ v314$1, 1bv32), $col.2$1), v321$1 ++ v320$1 ++ v319$1 ++ v318$1), BV32_SUB(BV32_SUB(v313$1 ++ v312$1 ++ v311$1 ++ v310$1, 1bv32), $row.2$1))), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$1 ++ v316$1 ++ v315$1 ++ v314$1, 1bv32), $col.2$1), v321$1 ++ v320$1 ++ v319$1 ++ v318$1), BV32_SUB(BV32_SUB(v313$1 ++ v312$1 ++ v311$1 ++ v310$1, 1bv32), $row.2$1)))]);
    assume {:do_not_predicate} {:check_id "check_state_136"} {:captureState "check_state_136"} {:sourceloc} {:sourceloc_num 338} true;
    call {:check_id "check_state_136"} {:sourceloc} {:sourceloc_num 338} _CHECK_READ_$$d_endoT(p54$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$2 ++ v316$2 ++ v315$2 ++ v314$2, 1bv32), $col.2$2), v321$2 ++ v320$2 ++ v319$2 ++ v318$2), BV32_SUB(BV32_SUB(v313$2 ++ v312$2 ++ v311$2 ++ v310$2, 1bv32), $row.2$2))), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$2 ++ v316$2 ++ v315$2 ++ v314$2, 1bv32), $col.2$2), v321$2 ++ v320$2 ++ v319$2 ++ v318$2), BV32_SUB(BV32_SUB(v313$2 ++ v312$2 ++ v311$2 ++ v310$2, 1bv32), $row.2$2)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoT"} true;
    v322$1 := (if p54$1 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$1 ++ v316$1 ++ v315$1 ++ v314$1, 1bv32), $col.2$1), v321$1 ++ v320$1 ++ v319$1 ++ v318$1), BV32_SUB(BV32_SUB(v313$1 ++ v312$1 ++ v311$1 ++ v310$1, 1bv32), $row.2$1)))] else v322$1);
    v322$2 := (if p54$2 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$2 ++ v316$2 ++ v315$2 ++ v314$2, 1bv32), $col.2$2), v321$2 ++ v320$2 ++ v319$2 ++ v318$2), BV32_SUB(BV32_SUB(v313$2 ++ v312$2 ++ v311$2 ++ v310$2, 1bv32), $row.2$2)))] else v322$2);
    p57$1 := (if p55$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_epiT then base#MKPTR($d_in.0$1) == $arrayId$$d_epiT else p57$1);
    p57$2 := (if p55$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_epiT then base#MKPTR($d_in.0$2) == $arrayId$$d_epiT else p57$2);
    p56$1 := (if p55$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_epiT then base#MKPTR($d_in.0$1) != $arrayId$$d_epiT else p56$1);
    p56$2 := (if p55$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_epiT then base#MKPTR($d_in.0$2) != $arrayId$$d_epiT else p56$2);
    assert {:bad_pointer_access} {:sourceloc_num 340} {:thread 1} p56$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 340} {:thread 2} p56$2 ==> false;
    call {:sourceloc} {:sourceloc_num 339} _LOG_READ_$$d_epiT(p57$1, BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$1 ++ v316$1 ++ v315$1 ++ v314$1, 1bv32), $col.2$1), v321$1 ++ v320$1 ++ v319$1 ++ v318$1), BV32_SUB(BV32_SUB(v313$1 ++ v312$1 ++ v311$1 ++ v310$1, 1bv32), $row.2$1))), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$1 ++ v316$1 ++ v315$1 ++ v314$1, 1bv32), $col.2$1), v321$1 ++ v320$1 ++ v319$1 ++ v318$1), BV32_SUB(BV32_SUB(v313$1 ++ v312$1 ++ v311$1 ++ v310$1, 1bv32), $row.2$1)))]);
    assume {:do_not_predicate} {:check_id "check_state_135"} {:captureState "check_state_135"} {:sourceloc} {:sourceloc_num 339} true;
    call {:check_id "check_state_135"} {:sourceloc} {:sourceloc_num 339} _CHECK_READ_$$d_epiT(p57$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$2 ++ v316$2 ++ v315$2 ++ v314$2, 1bv32), $col.2$2), v321$2 ++ v320$2 ++ v319$2 ++ v318$2), BV32_SUB(BV32_SUB(v313$2 ++ v312$2 ++ v311$2 ++ v310$2, 1bv32), $row.2$2))), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$2 ++ v316$2 ++ v315$2 ++ v314$2, 1bv32), $col.2$2), v321$2 ++ v320$2 ++ v319$2 ++ v318$2), BV32_SUB(BV32_SUB(v313$2 ++ v312$2 ++ v311$2 ++ v310$2, 1bv32), $row.2$2)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiT"} true;
    v322$1 := (if p57$1 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$1 ++ v316$1 ++ v315$1 ++ v314$1, 1bv32), $col.2$1), v321$1 ++ v320$1 ++ v319$1 ++ v318$1), BV32_SUB(BV32_SUB(v313$1 ++ v312$1 ++ v311$1 ++ v310$1, 1bv32), $row.2$1)))] else v322$1);
    v322$2 := (if p57$2 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL(BV32_SUB(BV32_SUB(v317$2 ++ v316$2 ++ v315$2 ++ v314$2, 1bv32), $col.2$2), v321$2 ++ v320$2 ++ v319$2 ++ v318$2), BV32_SUB(BV32_SUB(v313$2 ++ v312$2 ++ v311$2 ++ v310$2, 1bv32), $row.2$2)))] else v322$2);
    call {:sourceloc} {:sourceloc_num 341} _LOG_WRITE_$$d_in_mod_temp_all(p51$1, BV32_ADD(v184$1, $ei_new.2$1), v322$1, $$d_in_mod_temp_all[BV32_ADD(v184$1, $ei_new.2$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all(p51$2, BV32_ADD(v184$2, $ei_new.2$2));
    assume {:do_not_predicate} {:check_id "check_state_134"} {:captureState "check_state_134"} {:sourceloc} {:sourceloc_num 341} true;
    call {:check_id "check_state_134"} {:sourceloc} {:sourceloc_num 341} _CHECK_WRITE_$$d_in_mod_temp_all(p51$2, BV32_ADD(v184$2, $ei_new.2$2), v322$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in_mod_temp_all"} true;
    $$d_in_mod_temp_all[BV32_ADD(v184$1, $ei_new.2$1)] := (if p51$1 then v322$1 else $$d_in_mod_temp_all[BV32_ADD(v184$1, $ei_new.2$1)]);
    $$d_in_mod_temp_all[BV32_ADD(v184$2, $ei_new.2$2)] := (if p51$2 then v322$2 else $$d_in_mod_temp_all[BV32_ADD(v184$2, $ei_new.2$2)]);
    $ei_new.2$1 := (if p51$1 then BV32_ADD($ei_new.2$1, 256bv32) else $ei_new.2$1);
    $ei_new.2$2 := (if p51$2 then BV32_ADD($ei_new.2$2, 256bv32) else $ei_new.2$2);
    p50$1 := (if p51$1 then true else p50$1);
    p50$2 := (if p51$2 then true else p50$2);
    goto $19.backedge, __partitioned_block_$19.tail_0;

  __partitioned_block_$19.tail_0:
    assume !p50$1 && !p50$2;
    goto __partitioned_block_$19.tail_1;

  __partitioned_block_$19.tail_1:
    call {:sourceloc_num 343} $bugle_barrier_duplicated_4(1bv1, 1bv1);
    $ei_new.3$1 := v101$1;
    $ei_new.3$2 := v101$2;
    p58$1 := true;
    p58$2 := true;
    assume {:captureState "loop_entry_state_42_0"} true;
    goto $24;

  $24:
    assume {:captureState "loop_head_state_42"} true;
    assert {:tag "accessBreak"} _b395 ==> _WRITE_HAS_OCCURRED_$$d_conv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce29), $d_common.coerce29), $d_common.coerce29), $d_common.coerce29);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p58$1 ==> _b31 ==> p58$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p58$2 ==> _b31 ==> p58$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b30 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$1, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) ==> p58$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b30 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$2, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) ==> p58$2;
    assert {:tag "loopBound"} {:thread 1} p58$1 ==> _b29 ==> BV32_UGE($ei_new.3$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p58$2 ==> _b29 ==> BV32_UGE($ei_new.3$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p58$1 ==> _b28 ==> BV32_ULE($ei_new.3$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p58$2 ==> _b28 ==> BV32_ULE($ei_new.3$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p58$1 ==> _b27 ==> BV32_SGE($ei_new.3$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p58$2 ==> _b27 ==> BV32_SGE($ei_new.3$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p58$1 ==> _b26 ==> BV32_SLE($ei_new.3$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p58$2 ==> _b26 ==> BV32_SLE($ei_new.3$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p58$1 ==> _b25 ==> BV32_SLE(0bv32, $ei_new.3$1);
    assert {:tag "guardNonNeg"} {:thread 2} p58$2 ==> _b25 ==> BV32_SLE(0bv32, $ei_new.3$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p58$1 ==> _b24 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.3$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p58$2 ==> _b24 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.3$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 344} p58$1 ==> true;
    v323$1 := (if p58$1 then $$d_common$116bv32$1 else v323$1);
    v323$2 := (if p58$2 then $$d_common$116bv32$2 else v323$2);
    v324$1 := (if p58$1 then $$d_common$117bv32$1 else v324$1);
    v324$2 := (if p58$2 then $$d_common$117bv32$2 else v324$2);
    v325$1 := (if p58$1 then $$d_common$118bv32$1 else v325$1);
    v325$2 := (if p58$2 then $$d_common$118bv32$2 else v325$2);
    v326$1 := (if p58$1 then $$d_common$119bv32$1 else v326$1);
    v326$2 := (if p58$2 then $$d_common$119bv32$2 else v326$2);
    v327$1 := (if p58$1 then BV32_SLT($ei_new.3$1, v326$1 ++ v325$1 ++ v324$1 ++ v323$1) else v327$1);
    v327$2 := (if p58$2 then BV32_SLT($ei_new.3$2, v326$2 ++ v325$2 ++ v324$2 ++ v323$2) else v327$2);
    p59$1 := false;
    p59$2 := false;
    p60$1 := false;
    p60$2 := false;
    p61$1 := false;
    p61$2 := false;
    p62$1 := false;
    p62$2 := false;
    p63$1 := false;
    p63$2 := false;
    p64$1 := false;
    p64$2 := false;
    p65$1 := false;
    p65$2 := false;
    p66$1 := false;
    p66$2 := false;
    p67$1 := false;
    p67$2 := false;
    p68$1 := false;
    p68$2 := false;
    p69$1 := false;
    p69$2 := false;
    p70$1 := false;
    p70$2 := false;
    p59$1 := (if p58$1 && v327$1 then v327$1 else p59$1);
    p59$2 := (if p58$2 && v327$2 then v327$2 else p59$2);
    p58$1 := (if p58$1 && !v327$1 then v327$1 else p58$1);
    p58$2 := (if p58$2 && !v327$2 then v327$2 else p58$2);
    v328$1 := (if p59$1 then $$d_common$108bv32$1 else v328$1);
    v328$2 := (if p59$2 then $$d_common$108bv32$2 else v328$2);
    v329$1 := (if p59$1 then $$d_common$109bv32$1 else v329$1);
    v329$2 := (if p59$2 then $$d_common$109bv32$2 else v329$2);
    v330$1 := (if p59$1 then $$d_common$110bv32$1 else v330$1);
    v330$2 := (if p59$2 then $$d_common$110bv32$2 else v330$2);
    v331$1 := (if p59$1 then $$d_common$111bv32$1 else v331$1);
    v331$2 := (if p59$2 then $$d_common$111bv32$2 else v331$2);
    v332$1 := (if p59$1 then $$d_common$108bv32$1 else v332$1);
    v332$2 := (if p59$2 then $$d_common$108bv32$2 else v332$2);
    v333$1 := (if p59$1 then $$d_common$109bv32$1 else v333$1);
    v333$2 := (if p59$2 then $$d_common$109bv32$2 else v333$2);
    v334$1 := (if p59$1 then $$d_common$110bv32$1 else v334$1);
    v334$2 := (if p59$2 then $$d_common$110bv32$2 else v334$2);
    v335$1 := (if p59$1 then $$d_common$111bv32$1 else v335$1);
    v335$2 := (if p59$2 then $$d_common$111bv32$2 else v335$2);
    v336$1 := (if p59$1 then BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.3$1, 1bv32), v335$1 ++ v334$1 ++ v333$1 ++ v332$1), 1bv32) else v336$1);
    v336$2 := (if p59$2 then BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.3$2, 1bv32), v335$2 ++ v334$2 ++ v333$2 ++ v332$2), 1bv32) else v336$2);
    v337$1 := (if p59$1 then $$d_common$108bv32$1 else v337$1);
    v337$2 := (if p59$2 then $$d_common$108bv32$2 else v337$2);
    v338$1 := (if p59$1 then $$d_common$109bv32$1 else v338$1);
    v338$2 := (if p59$2 then $$d_common$109bv32$2 else v338$2);
    v339$1 := (if p59$1 then $$d_common$110bv32$1 else v339$1);
    v339$2 := (if p59$2 then $$d_common$110bv32$2 else v339$2);
    v340$1 := (if p59$1 then $$d_common$111bv32$1 else v340$1);
    v340$2 := (if p59$2 then $$d_common$111bv32$2 else v340$2);
    v341$1 := (if p59$1 then BV32_SREM(BV32_ADD($ei_new.3$1, 1bv32), v340$1 ++ v339$1 ++ v338$1 ++ v337$1) == 0bv32 else v341$1);
    v341$2 := (if p59$2 then BV32_SREM(BV32_ADD($ei_new.3$2, 1bv32), v340$2 ++ v339$2 ++ v338$2 ++ v337$2) == 0bv32 else v341$2);
    p61$1 := (if p59$1 && v341$1 then v341$1 else p61$1);
    p61$2 := (if p59$2 && v341$2 then v341$2 else p61$2);
    p60$1 := (if p59$1 && !v341$1 then !v341$1 else p60$1);
    p60$2 := (if p59$2 && !v341$2 then !v341$2 else p60$2);
    $jc.0$1, $ic.0$1 := (if p60$1 then v336$1 else $jc.0$1), (if p60$1 then BV32_SREM(BV32_ADD($ei_new.3$1, 1bv32), v331$1 ++ v330$1 ++ v329$1 ++ v328$1) else $ic.0$1);
    $jc.0$2, $ic.0$2 := (if p60$2 then v336$2 else $jc.0$2), (if p60$2 then BV32_SREM(BV32_ADD($ei_new.3$2, 1bv32), v331$2 ++ v330$2 ++ v329$2 ++ v328$2) else $ic.0$2);
    v342$1 := (if p61$1 then $$d_common$108bv32$1 else v342$1);
    v342$2 := (if p61$2 then $$d_common$108bv32$2 else v342$2);
    v343$1 := (if p61$1 then $$d_common$109bv32$1 else v343$1);
    v343$2 := (if p61$2 then $$d_common$109bv32$2 else v343$2);
    v344$1 := (if p61$1 then $$d_common$110bv32$1 else v344$1);
    v344$2 := (if p61$2 then $$d_common$110bv32$2 else v344$2);
    v345$1 := (if p61$1 then $$d_common$111bv32$1 else v345$1);
    v345$2 := (if p61$2 then $$d_common$111bv32$2 else v345$2);
    $jc.0$1, $ic.0$1 := (if p61$1 then BV32_SUB(v336$1, 1bv32) else $jc.0$1), (if p61$1 then v345$1 ++ v344$1 ++ v343$1 ++ v342$1 else $ic.0$1);
    $jc.0$2, $ic.0$2 := (if p61$2 then BV32_SUB(v336$2, 1bv32) else $jc.0$2), (if p61$2 then v345$2 ++ v344$2 ++ v343$2 ++ v342$2 else $ic.0$2);
    v346$1 := (if p59$1 then $$d_common$128bv32$1 else v346$1);
    v346$2 := (if p59$2 then $$d_common$128bv32$2 else v346$2);
    v347$1 := (if p59$1 then $$d_common$129bv32$1 else v347$1);
    v347$2 := (if p59$2 then $$d_common$129bv32$2 else v347$2);
    v348$1 := (if p59$1 then $$d_common$130bv32$1 else v348$1);
    v348$2 := (if p59$2 then $$d_common$130bv32$2 else v348$2);
    v349$1 := (if p59$1 then $$d_common$131bv32$1 else v349$1);
    v349$2 := (if p59$2 then $$d_common$131bv32$2 else v349$2);
    v350$1 := (if p59$1 then BV32_ADD($jc.0$1, v349$1 ++ v348$1 ++ v347$1 ++ v346$1) else v350$1);
    v350$2 := (if p59$2 then BV32_ADD($jc.0$2, v349$2 ++ v348$2 ++ v347$2 ++ v346$2) else v350$2);
    v351$1 := (if p59$1 then BV32_ADD(v350$1, 1bv32) else v351$1);
    v351$2 := (if p59$2 then BV32_ADD(v350$2, 1bv32) else v351$2);
    v352$1 := (if p59$1 then $$d_common$96bv32$1 else v352$1);
    v352$2 := (if p59$2 then $$d_common$96bv32$2 else v352$2);
    v353$1 := (if p59$1 then $$d_common$97bv32$1 else v353$1);
    v353$2 := (if p59$2 then $$d_common$97bv32$2 else v353$2);
    v354$1 := (if p59$1 then $$d_common$98bv32$1 else v354$1);
    v354$2 := (if p59$2 then $$d_common$98bv32$2 else v354$2);
    v355$1 := (if p59$1 then $$d_common$99bv32$1 else v355$1);
    v355$2 := (if p59$2 then $$d_common$99bv32$2 else v355$2);
    v356$1 := (if p59$1 then BV32_SLT(v355$1 ++ v354$1 ++ v353$1 ++ v352$1, v351$1) else v356$1);
    v356$2 := (if p59$2 then BV32_SLT(v355$2 ++ v354$2 ++ v353$2 ++ v352$2, v351$2) else v356$2);
    p63$1 := (if p59$1 && v356$1 then v356$1 else p63$1);
    p63$2 := (if p59$2 && v356$2 then v356$2 else p63$2);
    p62$1 := (if p59$1 && !v356$1 then !v356$1 else p62$1);
    p62$2 := (if p59$2 && !v356$2 then !v356$2 else p62$2);
    $ja1.0$1 := (if p62$1 then 1bv32 else $ja1.0$1);
    $ja1.0$2 := (if p62$2 then 1bv32 else $ja1.0$2);
    v357$1 := (if p63$1 then $$d_common$96bv32$1 else v357$1);
    v357$2 := (if p63$2 then $$d_common$96bv32$2 else v357$2);
    v358$1 := (if p63$1 then $$d_common$97bv32$1 else v358$1);
    v358$2 := (if p63$2 then $$d_common$97bv32$2 else v358$2);
    v359$1 := (if p63$1 then $$d_common$98bv32$1 else v359$1);
    v359$2 := (if p63$2 then $$d_common$98bv32$2 else v359$2);
    v360$1 := (if p63$1 then $$d_common$99bv32$1 else v360$1);
    v360$2 := (if p63$2 then $$d_common$99bv32$2 else v360$2);
    $ja1.0$1 := (if p63$1 then BV32_SUB(v351$1, v360$1 ++ v359$1 ++ v358$1 ++ v357$1) else $ja1.0$1);
    $ja1.0$2 := (if p63$2 then BV32_SUB(v351$2, v360$2 ++ v359$2 ++ v358$2 ++ v357$2) else $ja1.0$2);
    v361$1 := (if p59$1 then $$d_common$76bv32$1 else v361$1);
    v361$2 := (if p59$2 then $$d_common$76bv32$2 else v361$2);
    v362$1 := (if p59$1 then $$d_common$77bv32$1 else v362$1);
    v362$2 := (if p59$2 then $$d_common$77bv32$2 else v362$2);
    v363$1 := (if p59$1 then $$d_common$78bv32$1 else v363$1);
    v363$2 := (if p59$2 then $$d_common$78bv32$2 else v363$2);
    v364$1 := (if p59$1 then $$d_common$79bv32$1 else v364$1);
    v364$2 := (if p59$2 then $$d_common$79bv32$2 else v364$2);
    v365$1 := (if p59$1 then BV32_SLT(v364$1 ++ v363$1 ++ v362$1 ++ v361$1, v350$1) else v365$1);
    v365$2 := (if p59$2 then BV32_SLT(v364$2 ++ v363$2 ++ v362$2 ++ v361$2, v350$2) else v365$2);
    p65$1 := (if p59$1 && v365$1 then v365$1 else p65$1);
    p65$2 := (if p59$2 && v365$2 then v365$2 else p65$2);
    p64$1 := (if p59$1 && !v365$1 then !v365$1 else p64$1);
    p64$2 := (if p59$2 && !v365$2 then !v365$2 else p64$2);
    $ja2.0$1 := (if p64$1 then v350$1 else $ja2.0$1);
    $ja2.0$2 := (if p64$2 then v350$2 else $ja2.0$2);
    v366$1 := (if p65$1 then $$d_common$76bv32$1 else v366$1);
    v366$2 := (if p65$2 then $$d_common$76bv32$2 else v366$2);
    v367$1 := (if p65$1 then $$d_common$77bv32$1 else v367$1);
    v367$2 := (if p65$2 then $$d_common$77bv32$2 else v367$2);
    v368$1 := (if p65$1 then $$d_common$78bv32$1 else v368$1);
    v368$2 := (if p65$2 then $$d_common$78bv32$2 else v368$2);
    v369$1 := (if p65$1 then $$d_common$79bv32$1 else v369$1);
    v369$2 := (if p65$2 then $$d_common$79bv32$2 else v369$2);
    $ja2.0$1 := (if p65$1 then v369$1 ++ v368$1 ++ v367$1 ++ v366$1 else $ja2.0$1);
    $ja2.0$2 := (if p65$2 then v369$2 ++ v368$2 ++ v367$2 ++ v366$2 else $ja2.0$2);
    v370$1 := (if p59$1 then $$d_common$124bv32$1 else v370$1);
    v370$2 := (if p59$2 then $$d_common$124bv32$2 else v370$2);
    v371$1 := (if p59$1 then $$d_common$125bv32$1 else v371$1);
    v371$2 := (if p59$2 then $$d_common$125bv32$2 else v371$2);
    v372$1 := (if p59$1 then $$d_common$126bv32$1 else v372$1);
    v372$2 := (if p59$2 then $$d_common$126bv32$2 else v372$2);
    v373$1 := (if p59$1 then $$d_common$127bv32$1 else v373$1);
    v373$2 := (if p59$2 then $$d_common$127bv32$2 else v373$2);
    v374$1 := (if p59$1 then BV32_ADD($ic.0$1, v373$1 ++ v372$1 ++ v371$1 ++ v370$1) else v374$1);
    v374$2 := (if p59$2 then BV32_ADD($ic.0$2, v373$2 ++ v372$2 ++ v371$2 ++ v370$2) else v374$2);
    v375$1 := (if p59$1 then BV32_ADD(v374$1, 1bv32) else v375$1);
    v375$2 := (if p59$2 then BV32_ADD(v374$2, 1bv32) else v375$2);
    v376$1 := (if p59$1 then $$d_common$92bv32$1 else v376$1);
    v376$2 := (if p59$2 then $$d_common$92bv32$2 else v376$2);
    v377$1 := (if p59$1 then $$d_common$93bv32$1 else v377$1);
    v377$2 := (if p59$2 then $$d_common$93bv32$2 else v377$2);
    v378$1 := (if p59$1 then $$d_common$94bv32$1 else v378$1);
    v378$2 := (if p59$2 then $$d_common$94bv32$2 else v378$2);
    v379$1 := (if p59$1 then $$d_common$95bv32$1 else v379$1);
    v379$2 := (if p59$2 then $$d_common$95bv32$2 else v379$2);
    v380$1 := (if p59$1 then BV32_SLT(v379$1 ++ v378$1 ++ v377$1 ++ v376$1, v375$1) else v380$1);
    v380$2 := (if p59$2 then BV32_SLT(v379$2 ++ v378$2 ++ v377$2 ++ v376$2, v375$2) else v380$2);
    p67$1 := (if p59$1 && v380$1 then v380$1 else p67$1);
    p67$2 := (if p59$2 && v380$2 then v380$2 else p67$2);
    p66$1 := (if p59$1 && !v380$1 then !v380$1 else p66$1);
    p66$2 := (if p59$2 && !v380$2 then !v380$2 else p66$2);
    $ia1.0$1 := (if p66$1 then 1bv32 else $ia1.0$1);
    $ia1.0$2 := (if p66$2 then 1bv32 else $ia1.0$2);
    v381$1 := (if p67$1 then $$d_common$92bv32$1 else v381$1);
    v381$2 := (if p67$2 then $$d_common$92bv32$2 else v381$2);
    v382$1 := (if p67$1 then $$d_common$93bv32$1 else v382$1);
    v382$2 := (if p67$2 then $$d_common$93bv32$2 else v382$2);
    v383$1 := (if p67$1 then $$d_common$94bv32$1 else v383$1);
    v383$2 := (if p67$2 then $$d_common$94bv32$2 else v383$2);
    v384$1 := (if p67$1 then $$d_common$95bv32$1 else v384$1);
    v384$2 := (if p67$2 then $$d_common$95bv32$2 else v384$2);
    $ia1.0$1 := (if p67$1 then BV32_SUB(v375$1, v384$1 ++ v383$1 ++ v382$1 ++ v381$1) else $ia1.0$1);
    $ia1.0$2 := (if p67$2 then BV32_SUB(v375$2, v384$2 ++ v383$2 ++ v382$2 ++ v381$2) else $ia1.0$2);
    v385$1 := (if p59$1 then $$d_common$72bv32$1 else v385$1);
    v385$2 := (if p59$2 then $$d_common$72bv32$2 else v385$2);
    v386$1 := (if p59$1 then $$d_common$73bv32$1 else v386$1);
    v386$2 := (if p59$2 then $$d_common$73bv32$2 else v386$2);
    v387$1 := (if p59$1 then $$d_common$74bv32$1 else v387$1);
    v387$2 := (if p59$2 then $$d_common$74bv32$2 else v387$2);
    v388$1 := (if p59$1 then $$d_common$75bv32$1 else v388$1);
    v388$2 := (if p59$2 then $$d_common$75bv32$2 else v388$2);
    v389$1 := (if p59$1 then BV32_SLT(v388$1 ++ v387$1 ++ v386$1 ++ v385$1, v374$1) else v389$1);
    v389$2 := (if p59$2 then BV32_SLT(v388$2 ++ v387$2 ++ v386$2 ++ v385$2, v374$2) else v389$2);
    p69$1 := (if p59$1 && v389$1 then v389$1 else p69$1);
    p69$2 := (if p59$2 && v389$2 then v389$2 else p69$2);
    p68$1 := (if p59$1 && !v389$1 then !v389$1 else p68$1);
    p68$2 := (if p59$2 && !v389$2 then !v389$2 else p68$2);
    $ia2.0$1 := (if p68$1 then v374$1 else $ia2.0$1);
    $ia2.0$2 := (if p68$2 then v374$2 else $ia2.0$2);
    v390$1 := (if p69$1 then $$d_common$72bv32$1 else v390$1);
    v390$2 := (if p69$2 then $$d_common$72bv32$2 else v390$2);
    v391$1 := (if p69$1 then $$d_common$73bv32$1 else v391$1);
    v391$2 := (if p69$2 then $$d_common$73bv32$2 else v391$2);
    v392$1 := (if p69$1 then $$d_common$74bv32$1 else v392$1);
    v392$2 := (if p69$2 then $$d_common$74bv32$2 else v392$2);
    v393$1 := (if p69$1 then $$d_common$75bv32$1 else v393$1);
    v393$2 := (if p69$2 then $$d_common$75bv32$2 else v393$2);
    $ia2.0$1 := (if p69$1 then v393$1 ++ v392$1 ++ v391$1 ++ v390$1 else $ia2.0$1);
    $ia2.0$2 := (if p69$2 then v393$2 ++ v392$2 ++ v391$2 ++ v390$2 else $ia2.0$2);
    $ja.0$1, $s.0$1 := (if p59$1 then $ja1.0$1 else $ja.0$1), (if p59$1 then 0bv32 else $s.0$1);
    $ja.0$2, $s.0$2 := (if p59$2 then $ja1.0$2 else $ja.0$2), (if p59$2 then 0bv32 else $s.0$2);
    p70$1 := (if p59$1 then true else p70$1);
    p70$2 := (if p59$2 then true else p70$2);
    assume {:captureState "loop_entry_state_43_0"} true;
    goto $40;

  $40:
    assume {:captureState "loop_head_state_43"} true;
    assert p70$1 ==> p58$1;
    assert p70$2 ==> p58$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p70$1 ==> _b373 ==> p70$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$1, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p70$2 ==> _b373 ==> p70$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$2, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b372 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$1, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) && BV32_SLE($ja.0$1, $ja2.0$1) ==> p70$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b372 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$2, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) && BV32_SLE($ja.0$2, $ja2.0$2) ==> p70$2;
    assert {:tag "loopBound"} {:thread 1} p70$1 ==> _b371 ==> BV32_UGE($ja.0$1, $ja1.0$1);
    assert {:tag "loopBound"} {:thread 2} p70$2 ==> _b371 ==> BV32_UGE($ja.0$2, $ja1.0$2);
    assert {:tag "loopBound"} {:thread 1} p70$1 ==> _b370 ==> BV32_ULE($ja.0$1, $ja1.0$1);
    assert {:tag "loopBound"} {:thread 2} p70$2 ==> _b370 ==> BV32_ULE($ja.0$2, $ja1.0$2);
    assert {:tag "loopBound"} {:thread 1} p70$1 ==> _b369 ==> BV32_SGE($ja.0$1, $ja1.0$1);
    assert {:tag "loopBound"} {:thread 2} p70$2 ==> _b369 ==> BV32_SGE($ja.0$2, $ja1.0$2);
    assert {:tag "loopBound"} {:thread 1} p70$1 ==> _b368 ==> BV32_SLE($ja.0$1, $ja1.0$1);
    assert {:tag "loopBound"} {:thread 2} p70$2 ==> _b368 ==> BV32_SLE($ja.0$2, $ja1.0$2);
    assert {:tag "guardNonNeg"} {:thread 1} p70$1 ==> _b367 ==> BV32_SLE(0bv32, $ja.0$1);
    assert {:tag "guardNonNeg"} {:thread 2} p70$2 ==> _b367 ==> BV32_SLE(0bv32, $ja.0$2);
    assert {:block_sourceloc} {:sourceloc_num 420} p70$1 ==> true;
    v394$1 := (if p70$1 then BV32_SLE($ja.0$1, $ja2.0$1) else v394$1);
    v394$2 := (if p70$2 then BV32_SLE($ja.0$2, $ja2.0$2) else v394$2);
    p71$1 := false;
    p71$2 := false;
    p72$1 := false;
    p72$2 := false;
    p71$1 := (if p70$1 && v394$1 then v394$1 else p71$1);
    p71$2 := (if p70$2 && v394$2 then v394$2 else p71$2);
    p70$1 := (if p70$1 && !v394$1 then v394$1 else p70$1);
    p70$2 := (if p70$2 && !v394$2 then v394$2 else p70$2);
    $ia.0$1, $s.1$1 := (if p71$1 then $ia1.0$1 else $ia.0$1), (if p71$1 then $s.0$1 else $s.1$1);
    $ia.0$2, $s.1$2 := (if p71$2 then $ia1.0$2 else $ia.0$2), (if p71$2 then $s.0$2 else $s.1$2);
    p72$1 := (if p71$1 then true else p72$1);
    p72$2 := (if p71$2 then true else p72$2);
    assume {:captureState "loop_entry_state_44_0"} true;
    goto $42;

  $42:
    assume {:captureState "loop_head_state_44"} true;
    assert p72$1 ==> p70$1;
    assert p72$2 ==> p70$2;
    assert p70$1 ==> p58$1;
    assert p70$2 ==> p58$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p72$1 ==> _b380 ==> p72$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$1, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) && BV32_SLE($ja.0$1, $ja2.0$1);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p72$2 ==> _b380 ==> p72$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$2, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) && BV32_SLE($ja.0$2, $ja2.0$2);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b379 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$1, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) && BV32_SLE($ja.0$1, $ja2.0$1) && BV32_SLE($ia.0$1, $ia2.0$1) ==> p72$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b379 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.3$2, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) && BV32_SLE($ja.0$2, $ja2.0$2) && BV32_SLE($ia.0$2, $ia2.0$2) ==> p72$2;
    assert {:tag "loopBound"} {:thread 1} p72$1 ==> _b378 ==> BV32_UGE($ia.0$1, $ia1.0$1);
    assert {:tag "loopBound"} {:thread 2} p72$2 ==> _b378 ==> BV32_UGE($ia.0$2, $ia1.0$2);
    assert {:tag "loopBound"} {:thread 1} p72$1 ==> _b377 ==> BV32_ULE($ia.0$1, $ia1.0$1);
    assert {:tag "loopBound"} {:thread 2} p72$2 ==> _b377 ==> BV32_ULE($ia.0$2, $ia1.0$2);
    assert {:tag "loopBound"} {:thread 1} p72$1 ==> _b376 ==> BV32_SGE($ia.0$1, $ia1.0$1);
    assert {:tag "loopBound"} {:thread 2} p72$2 ==> _b376 ==> BV32_SGE($ia.0$2, $ia1.0$2);
    assert {:tag "loopBound"} {:thread 1} p72$1 ==> _b375 ==> BV32_SLE($ia.0$1, $ia1.0$1);
    assert {:tag "loopBound"} {:thread 2} p72$2 ==> _b375 ==> BV32_SLE($ia.0$2, $ia1.0$2);
    assert {:tag "guardNonNeg"} {:thread 1} p72$1 ==> _b374 ==> BV32_SLE(0bv32, $ia.0$1);
    assert {:tag "guardNonNeg"} {:thread 2} p72$2 ==> _b374 ==> BV32_SLE(0bv32, $ia.0$2);
    assert {:block_sourceloc} {:sourceloc_num 422} p72$1 ==> true;
    v395$1 := (if p72$1 then BV32_SLE($ia.0$1, $ia2.0$1) else v395$1);
    v395$2 := (if p72$2 then BV32_SLE($ia.0$2, $ia2.0$2) else v395$2);
    p73$1 := false;
    p73$2 := false;
    p73$1 := (if p72$1 && v395$1 then v395$1 else p73$1);
    p73$2 := (if p72$2 && v395$2 then v395$2 else p73$2);
    p72$1 := (if p72$1 && !v395$1 then v395$1 else p72$1);
    p72$2 := (if p72$2 && !v395$2 then v395$2 else p72$2);
    v396$1 := (if p73$1 then $$d_common$72bv32$1 else v396$1);
    v396$2 := (if p73$2 then $$d_common$72bv32$2 else v396$2);
    v397$1 := (if p73$1 then $$d_common$73bv32$1 else v397$1);
    v397$2 := (if p73$2 then $$d_common$73bv32$2 else v397$2);
    v398$1 := (if p73$1 then $$d_common$74bv32$1 else v398$1);
    v398$2 := (if p73$2 then $$d_common$74bv32$2 else v398$2);
    v399$1 := (if p73$1 then $$d_common$75bv32$1 else v399$1);
    v399$2 := (if p73$2 then $$d_common$75bv32$2 else v399$2);
    call {:sourceloc} {:sourceloc_num 428} _LOG_READ_$$d_in_mod_temp_all(p73$1, BV32_ADD(v184$1, BV32_SUB(BV32_ADD(BV32_MUL(v399$1 ++ v398$1 ++ v397$1 ++ v396$1, BV32_SUB($ja.0$1, 1bv32)), $ia.0$1), 1bv32)), $$d_in_mod_temp_all[BV32_ADD(v184$1, BV32_SUB(BV32_ADD(BV32_MUL(v399$1 ++ v398$1 ++ v397$1 ++ v396$1, BV32_SUB($ja.0$1, 1bv32)), $ia.0$1), 1bv32))]);
    assume {:do_not_predicate} {:check_id "check_state_132"} {:captureState "check_state_132"} {:sourceloc} {:sourceloc_num 428} true;
    call {:check_id "check_state_132"} {:sourceloc} {:sourceloc_num 428} _CHECK_READ_$$d_in_mod_temp_all(p73$2, BV32_ADD(v184$2, BV32_SUB(BV32_ADD(BV32_MUL(v399$2 ++ v398$2 ++ v397$2 ++ v396$2, BV32_SUB($ja.0$2, 1bv32)), $ia.0$2), 1bv32)), $$d_in_mod_temp_all[BV32_ADD(v184$2, BV32_SUB(BV32_ADD(BV32_MUL(v399$2 ++ v398$2 ++ v397$2 ++ v396$2, BV32_SUB($ja.0$2, 1bv32)), $ia.0$2), 1bv32))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in_mod_temp_all"} true;
    v400$1 := (if p73$1 then $$d_in_mod_temp_all[BV32_ADD(v184$1, BV32_SUB(BV32_ADD(BV32_MUL(v399$1 ++ v398$1 ++ v397$1 ++ v396$1, BV32_SUB($ja.0$1, 1bv32)), $ia.0$1), 1bv32))] else v400$1);
    v400$2 := (if p73$2 then $$d_in_mod_temp_all[BV32_ADD(v184$2, BV32_SUB(BV32_ADD(BV32_MUL(v399$2 ++ v398$2 ++ v397$2 ++ v396$2, BV32_SUB($ja.0$2, 1bv32)), $ia.0$2), 1bv32))] else v400$2);
    v401$1 := (if p73$1 then $$d_common$92bv32$1 else v401$1);
    v401$2 := (if p73$2 then $$d_common$92bv32$2 else v401$2);
    v402$1 := (if p73$1 then $$d_common$93bv32$1 else v402$1);
    v402$2 := (if p73$2 then $$d_common$93bv32$2 else v402$2);
    v403$1 := (if p73$1 then $$d_common$94bv32$1 else v403$1);
    v403$2 := (if p73$2 then $$d_common$94bv32$2 else v403$2);
    v404$1 := (if p73$1 then $$d_common$95bv32$1 else v404$1);
    v404$2 := (if p73$2 then $$d_common$95bv32$2 else v404$2);
    call {:sourceloc} {:sourceloc_num 433} _LOG_READ_$$d_in2_all(p73$1, BV32_ADD(v124$1, BV32_SUB(BV32_ADD(BV32_MUL(v404$1 ++ v403$1 ++ v402$1 ++ v401$1, BV32_SUB(BV32_SUB(v351$1, $ja.0$1), 1bv32)), BV32_SUB(v375$1, $ia.0$1)), 1bv32)), $$d_in2_all[BV32_ADD(v124$1, BV32_SUB(BV32_ADD(BV32_MUL(v404$1 ++ v403$1 ++ v402$1 ++ v401$1, BV32_SUB(BV32_SUB(v351$1, $ja.0$1), 1bv32)), BV32_SUB(v375$1, $ia.0$1)), 1bv32))]);
    assume {:do_not_predicate} {:check_id "check_state_133"} {:captureState "check_state_133"} {:sourceloc} {:sourceloc_num 433} true;
    call {:check_id "check_state_133"} {:sourceloc} {:sourceloc_num 433} _CHECK_READ_$$d_in2_all(p73$2, BV32_ADD(v124$2, BV32_SUB(BV32_ADD(BV32_MUL(v404$2 ++ v403$2 ++ v402$2 ++ v401$2, BV32_SUB(BV32_SUB(v351$2, $ja.0$2), 1bv32)), BV32_SUB(v375$2, $ia.0$2)), 1bv32)), $$d_in2_all[BV32_ADD(v124$2, BV32_SUB(BV32_ADD(BV32_MUL(v404$2 ++ v403$2 ++ v402$2 ++ v401$2, BV32_SUB(BV32_SUB(v351$2, $ja.0$2), 1bv32)), BV32_SUB(v375$2, $ia.0$2)), 1bv32))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_all"} true;
    v405$1 := (if p73$1 then $$d_in2_all[BV32_ADD(v124$1, BV32_SUB(BV32_ADD(BV32_MUL(v404$1 ++ v403$1 ++ v402$1 ++ v401$1, BV32_SUB(BV32_SUB(v351$1, $ja.0$1), 1bv32)), BV32_SUB(v375$1, $ia.0$1)), 1bv32))] else v405$1);
    v405$2 := (if p73$2 then $$d_in2_all[BV32_ADD(v124$2, BV32_SUB(BV32_ADD(BV32_MUL(v404$2 ++ v403$2 ++ v402$2 ++ v401$2, BV32_SUB(BV32_SUB(v351$2, $ja.0$2), 1bv32)), BV32_SUB(v375$2, $ia.0$2)), 1bv32))] else v405$2);
    $ia.0$1, $s.1$1 := (if p73$1 then BV32_ADD($ia.0$1, 1bv32) else $ia.0$1), (if p73$1 then FADD32(FMUL32(v400$1, v405$1), $s.1$1) else $s.1$1);
    $ia.0$2, $s.1$2 := (if p73$2 then BV32_ADD($ia.0$2, 1bv32) else $ia.0$2), (if p73$2 then FADD32(FMUL32(v400$2, v405$2), $s.1$2) else $s.1$2);
    p72$1 := (if p73$1 then true else p72$1);
    p72$2 := (if p73$2 then true else p72$2);
    goto $42.backedge, $42.tail;

  $42.tail:
    assume !p72$1 && !p72$2;
    $ja.0$1, $s.0$1 := (if p71$1 then BV32_ADD($ja.0$1, 1bv32) else $ja.0$1), (if p71$1 then $s.1$1 else $s.0$1);
    $ja.0$2, $s.0$2 := (if p71$2 then BV32_ADD($ja.0$2, 1bv32) else $ja.0$2), (if p71$2 then $s.1$2 else $s.0$2);
    p70$1 := (if p71$1 then true else p70$1);
    p70$2 := (if p71$2 then true else p70$2);
    goto $40.backedge, $40.tail;

  $40.tail:
    assume !p70$1 && !p70$2;
    call {:sourceloc} {:sourceloc_num 438} _LOG_WRITE_$$d_conv_all(p59$1, BV32_ADD(v129$1, $ei_new.3$1), $s.0$1, $$d_conv_all[BV32_ADD(v129$1, $ei_new.3$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_conv_all(p59$2, BV32_ADD(v129$2, $ei_new.3$2));
    assume {:do_not_predicate} {:check_id "check_state_131"} {:captureState "check_state_131"} {:sourceloc} {:sourceloc_num 438} true;
    call {:check_id "check_state_131"} {:sourceloc} {:sourceloc_num 438} _CHECK_WRITE_$$d_conv_all(p59$2, BV32_ADD(v129$2, $ei_new.3$2), $s.0$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_conv_all"} true;
    $$d_conv_all[BV32_ADD(v129$1, $ei_new.3$1)] := (if p59$1 then $s.0$1 else $$d_conv_all[BV32_ADD(v129$1, $ei_new.3$1)]);
    $$d_conv_all[BV32_ADD(v129$2, $ei_new.3$2)] := (if p59$2 then $s.0$2 else $$d_conv_all[BV32_ADD(v129$2, $ei_new.3$2)]);
    $ei_new.3$1 := (if p59$1 then BV32_ADD($ei_new.3$1, 256bv32) else $ei_new.3$1);
    $ei_new.3$2 := (if p59$2 then BV32_ADD($ei_new.3$2, 256bv32) else $ei_new.3$2);
    p58$1 := (if p59$1 then true else p58$1);
    p58$2 := (if p59$2 then true else p58$2);
    goto $24.backedge, __partitioned_block_$24.tail_0;

  __partitioned_block_$24.tail_0:
    assume !p58$1 && !p58$2;
    goto __partitioned_block_$24.tail_1;

  __partitioned_block_$24.tail_1:
    call {:sourceloc_num 440} $bugle_barrier_duplicated_5(1bv1, 1bv1);
    $ei_new.4$1 := v101$1;
    $ei_new.4$2 := v101$2;
    p74$1 := true;
    p74$2 := true;
    assume {:captureState "loop_entry_state_41_0"} true;
    goto $49;

  $49:
    assume {:captureState "loop_head_state_41"} true;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p74$1 ==> _b39 ==> p74$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p74$2 ==> _b39 ==> p74$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b38 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.4$1, $d_common.coerce37[32:24] ++ $d_common.coerce37[24:16] ++ $d_common.coerce37[16:8] ++ $d_common.coerce37[8:0]) ==> p74$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b38 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.4$2, $d_common.coerce37[32:24] ++ $d_common.coerce37[24:16] ++ $d_common.coerce37[16:8] ++ $d_common.coerce37[8:0]) ==> p74$2;
    assert {:tag "loopBound"} {:thread 1} p74$1 ==> _b37 ==> BV32_UGE($ei_new.4$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p74$2 ==> _b37 ==> BV32_UGE($ei_new.4$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p74$1 ==> _b36 ==> BV32_ULE($ei_new.4$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p74$2 ==> _b36 ==> BV32_ULE($ei_new.4$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p74$1 ==> _b35 ==> BV32_SGE($ei_new.4$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p74$2 ==> _b35 ==> BV32_SGE($ei_new.4$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p74$1 ==> _b34 ==> BV32_SLE($ei_new.4$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p74$2 ==> _b34 ==> BV32_SLE($ei_new.4$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p74$1 ==> _b33 ==> BV32_SLE(0bv32, $ei_new.4$1);
    assert {:tag "guardNonNeg"} {:thread 2} p74$2 ==> _b33 ==> BV32_SLE(0bv32, $ei_new.4$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p74$1 ==> _b32 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.4$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p74$2 ==> _b32 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.4$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 441} p74$1 ==> true;
    v406$1 := (if p74$1 then $$d_common$148bv32$1 else v406$1);
    v406$2 := (if p74$2 then $$d_common$148bv32$2 else v406$2);
    v407$1 := (if p74$1 then $$d_common$149bv32$1 else v407$1);
    v407$2 := (if p74$2 then $$d_common$149bv32$2 else v407$2);
    v408$1 := (if p74$1 then $$d_common$150bv32$1 else v408$1);
    v408$2 := (if p74$2 then $$d_common$150bv32$2 else v408$2);
    v409$1 := (if p74$1 then $$d_common$151bv32$1 else v409$1);
    v409$2 := (if p74$2 then $$d_common$151bv32$2 else v409$2);
    v410$1 := (if p74$1 then BV32_SLT($ei_new.4$1, v409$1 ++ v408$1 ++ v407$1 ++ v406$1) else v410$1);
    v410$2 := (if p74$2 then BV32_SLT($ei_new.4$2, v409$2 ++ v408$2 ++ v407$2 ++ v406$2) else v410$2);
    p75$1 := false;
    p75$2 := false;
    p76$1 := false;
    p76$2 := false;
    p77$1 := false;
    p77$2 := false;
    p78$1 := false;
    p78$2 := false;
    p79$1 := false;
    p79$2 := false;
    p80$1 := false;
    p80$2 := false;
    p81$1 := false;
    p81$2 := false;
    p82$1 := false;
    p82$2 := false;
    p83$1 := false;
    p83$2 := false;
    p84$1 := false;
    p84$2 := false;
    p85$1 := false;
    p85$2 := false;
    p86$1 := false;
    p86$2 := false;
    p75$1 := (if p74$1 && v410$1 then v410$1 else p75$1);
    p75$2 := (if p74$2 && v410$2 then v410$2 else p75$2);
    p74$1 := (if p74$1 && !v410$1 then v410$1 else p74$1);
    p74$2 := (if p74$2 && !v410$2 then v410$2 else p74$2);
    v411$1 := (if p75$1 then $$d_common$140bv32$1 else v411$1);
    v411$2 := (if p75$2 then $$d_common$140bv32$2 else v411$2);
    v412$1 := (if p75$1 then $$d_common$141bv32$1 else v412$1);
    v412$2 := (if p75$2 then $$d_common$141bv32$2 else v412$2);
    v413$1 := (if p75$1 then $$d_common$142bv32$1 else v413$1);
    v413$2 := (if p75$2 then $$d_common$142bv32$2 else v413$2);
    v414$1 := (if p75$1 then $$d_common$143bv32$1 else v414$1);
    v414$2 := (if p75$2 then $$d_common$143bv32$2 else v414$2);
    v415$1 := (if p75$1 then $$d_common$140bv32$1 else v415$1);
    v415$2 := (if p75$2 then $$d_common$140bv32$2 else v415$2);
    v416$1 := (if p75$1 then $$d_common$141bv32$1 else v416$1);
    v416$2 := (if p75$2 then $$d_common$141bv32$2 else v416$2);
    v417$1 := (if p75$1 then $$d_common$142bv32$1 else v417$1);
    v417$2 := (if p75$2 then $$d_common$142bv32$2 else v417$2);
    v418$1 := (if p75$1 then $$d_common$143bv32$1 else v418$1);
    v418$2 := (if p75$2 then $$d_common$143bv32$2 else v418$2);
    v419$1 := (if p75$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.4$1, 1bv32), v418$1 ++ v417$1 ++ v416$1 ++ v415$1), 1bv32), 1bv32) else v419$1);
    v419$2 := (if p75$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.4$2, 1bv32), v418$2 ++ v417$2 ++ v416$2 ++ v415$2), 1bv32), 1bv32) else v419$2);
    v420$1 := (if p75$1 then $$d_common$140bv32$1 else v420$1);
    v420$2 := (if p75$2 then $$d_common$140bv32$2 else v420$2);
    v421$1 := (if p75$1 then $$d_common$141bv32$1 else v421$1);
    v421$2 := (if p75$2 then $$d_common$141bv32$2 else v421$2);
    v422$1 := (if p75$1 then $$d_common$142bv32$1 else v422$1);
    v422$2 := (if p75$2 then $$d_common$142bv32$2 else v422$2);
    v423$1 := (if p75$1 then $$d_common$143bv32$1 else v423$1);
    v423$2 := (if p75$2 then $$d_common$143bv32$2 else v423$2);
    v424$1 := (if p75$1 then BV32_SREM(BV32_ADD($ei_new.4$1, 1bv32), v423$1 ++ v422$1 ++ v421$1 ++ v420$1) == 0bv32 else v424$1);
    v424$2 := (if p75$2 then BV32_SREM(BV32_ADD($ei_new.4$2, 1bv32), v423$2 ++ v422$2 ++ v421$2 ++ v420$2) == 0bv32 else v424$2);
    p77$1 := (if p75$1 && v424$1 then v424$1 else p77$1);
    p77$2 := (if p75$2 && v424$2 then v424$2 else p77$2);
    p76$1 := (if p75$1 && !v424$1 then !v424$1 else p76$1);
    p76$2 := (if p75$2 && !v424$2 then !v424$2 else p76$2);
    $row.3$1, $col.3$1 := (if p76$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.4$1, 1bv32), v414$1 ++ v413$1 ++ v412$1 ++ v411$1), 1bv32) else $row.3$1), (if p76$1 then v419$1 else $col.3$1);
    $row.3$2, $col.3$2 := (if p76$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.4$2, 1bv32), v414$2 ++ v413$2 ++ v412$2 ++ v411$2), 1bv32) else $row.3$2), (if p76$2 then v419$2 else $col.3$2);
    v425$1 := (if p77$1 then $$d_common$140bv32$1 else v425$1);
    v425$2 := (if p77$2 then $$d_common$140bv32$2 else v425$2);
    v426$1 := (if p77$1 then $$d_common$141bv32$1 else v426$1);
    v426$2 := (if p77$2 then $$d_common$141bv32$2 else v426$2);
    v427$1 := (if p77$1 then $$d_common$142bv32$1 else v427$1);
    v427$2 := (if p77$2 then $$d_common$142bv32$2 else v427$2);
    v428$1 := (if p77$1 then $$d_common$143bv32$1 else v428$1);
    v428$2 := (if p77$2 then $$d_common$143bv32$2 else v428$2);
    $row.3$1, $col.3$1 := (if p77$1 then BV32_SUB(v428$1 ++ v427$1 ++ v426$1 ++ v425$1, 1bv32) else $row.3$1), (if p77$1 then BV32_SUB(v419$1, 1bv32) else $col.3$1);
    $row.3$2, $col.3$2 := (if p77$2 then BV32_SUB(v428$2 ++ v427$2 ++ v426$2 ++ v425$2, 1bv32) else $row.3$2), (if p77$2 then BV32_SUB(v419$2, 1bv32) else $col.3$2);
    v429$1 := (if p75$1 then $$d_common$132bv32$1 else v429$1);
    v429$2 := (if p75$2 then $$d_common$132bv32$2 else v429$2);
    v430$1 := (if p75$1 then $$d_common$133bv32$1 else v430$1);
    v430$2 := (if p75$2 then $$d_common$133bv32$2 else v430$2);
    v431$1 := (if p75$1 then $$d_common$134bv32$1 else v431$1);
    v431$2 := (if p75$2 then $$d_common$134bv32$2 else v431$2);
    v432$1 := (if p75$1 then $$d_common$135bv32$1 else v432$1);
    v432$2 := (if p75$2 then $$d_common$135bv32$2 else v432$2);
    v433$1 := (if p75$1 then BV32_SGT($row.3$1, BV32_SUB(v432$1 ++ v431$1 ++ v430$1 ++ v429$1, 1bv32)) else v433$1);
    v433$2 := (if p75$2 then BV32_SGT($row.3$2, BV32_SUB(v432$2 ++ v431$2 ++ v430$2 ++ v429$2, 1bv32)) else v433$2);
    p78$1 := (if p75$1 && v433$1 then v433$1 else p78$1);
    p78$2 := (if p75$2 && v433$2 then v433$2 else p78$2);
    p86$1 := (if p75$1 && !v433$1 then !v433$1 else p86$1);
    p86$2 := (if p75$2 && !v433$2 then !v433$2 else p86$2);
    v434$1 := (if p78$1 then $$d_common$132bv32$1 else v434$1);
    v434$2 := (if p78$2 then $$d_common$132bv32$2 else v434$2);
    v435$1 := (if p78$1 then $$d_common$133bv32$1 else v435$1);
    v435$2 := (if p78$2 then $$d_common$133bv32$2 else v435$2);
    v436$1 := (if p78$1 then $$d_common$134bv32$1 else v436$1);
    v436$2 := (if p78$2 then $$d_common$134bv32$2 else v436$2);
    v437$1 := (if p78$1 then $$d_common$135bv32$1 else v437$1);
    v437$2 := (if p78$2 then $$d_common$135bv32$2 else v437$2);
    v438$1 := (if p78$1 then $$d_common$92bv32$1 else v438$1);
    v438$2 := (if p78$2 then $$d_common$92bv32$2 else v438$2);
    v439$1 := (if p78$1 then $$d_common$93bv32$1 else v439$1);
    v439$2 := (if p78$2 then $$d_common$93bv32$2 else v439$2);
    v440$1 := (if p78$1 then $$d_common$94bv32$1 else v440$1);
    v440$2 := (if p78$2 then $$d_common$94bv32$2 else v440$2);
    v441$1 := (if p78$1 then $$d_common$95bv32$1 else v441$1);
    v441$2 := (if p78$2 then $$d_common$95bv32$2 else v441$2);
    v442$1 := (if p78$1 then BV32_SLT($row.3$1, BV32_ADD(v437$1 ++ v436$1 ++ v435$1 ++ v434$1, v441$1 ++ v440$1 ++ v439$1 ++ v438$1)) else v442$1);
    v442$2 := (if p78$2 then BV32_SLT($row.3$2, BV32_ADD(v437$2 ++ v436$2 ++ v435$2 ++ v434$2, v441$2 ++ v440$2 ++ v439$2 ++ v438$2)) else v442$2);
    p79$1 := (if p78$1 && v442$1 then v442$1 else p79$1);
    p79$2 := (if p78$2 && v442$2 then v442$2 else p79$2);
    p86$1 := (if p78$1 && !v442$1 then !v442$1 else p86$1);
    p86$2 := (if p78$2 && !v442$2 then !v442$2 else p86$2);
    v443$1 := (if p79$1 then $$d_common$136bv32$1 else v443$1);
    v443$2 := (if p79$2 then $$d_common$136bv32$2 else v443$2);
    v444$1 := (if p79$1 then $$d_common$137bv32$1 else v444$1);
    v444$2 := (if p79$2 then $$d_common$137bv32$2 else v444$2);
    v445$1 := (if p79$1 then $$d_common$138bv32$1 else v445$1);
    v445$2 := (if p79$2 then $$d_common$138bv32$2 else v445$2);
    v446$1 := (if p79$1 then $$d_common$139bv32$1 else v446$1);
    v446$2 := (if p79$2 then $$d_common$139bv32$2 else v446$2);
    v447$1 := (if p79$1 then BV32_SGT($col.3$1, BV32_SUB(v446$1 ++ v445$1 ++ v444$1 ++ v443$1, 1bv32)) else v447$1);
    v447$2 := (if p79$2 then BV32_SGT($col.3$2, BV32_SUB(v446$2 ++ v445$2 ++ v444$2 ++ v443$2, 1bv32)) else v447$2);
    p80$1 := (if p79$1 && v447$1 then v447$1 else p80$1);
    p80$2 := (if p79$2 && v447$2 then v447$2 else p80$2);
    p86$1 := (if p79$1 && !v447$1 then !v447$1 else p86$1);
    p86$2 := (if p79$2 && !v447$2 then !v447$2 else p86$2);
    v448$1 := (if p80$1 then $$d_common$136bv32$1 else v448$1);
    v448$2 := (if p80$2 then $$d_common$136bv32$2 else v448$2);
    v449$1 := (if p80$1 then $$d_common$137bv32$1 else v449$1);
    v449$2 := (if p80$2 then $$d_common$137bv32$2 else v449$2);
    v450$1 := (if p80$1 then $$d_common$138bv32$1 else v450$1);
    v450$2 := (if p80$2 then $$d_common$138bv32$2 else v450$2);
    v451$1 := (if p80$1 then $$d_common$139bv32$1 else v451$1);
    v451$2 := (if p80$2 then $$d_common$139bv32$2 else v451$2);
    v452$1 := (if p80$1 then $$d_common$96bv32$1 else v452$1);
    v452$2 := (if p80$2 then $$d_common$96bv32$2 else v452$2);
    v453$1 := (if p80$1 then $$d_common$97bv32$1 else v453$1);
    v453$2 := (if p80$2 then $$d_common$97bv32$2 else v453$2);
    v454$1 := (if p80$1 then $$d_common$98bv32$1 else v454$1);
    v454$2 := (if p80$2 then $$d_common$98bv32$2 else v454$2);
    v455$1 := (if p80$1 then $$d_common$99bv32$1 else v455$1);
    v455$2 := (if p80$2 then $$d_common$99bv32$2 else v455$2);
    v456$1 := (if p80$1 then BV32_SLT($col.3$1, BV32_ADD(v451$1 ++ v450$1 ++ v449$1 ++ v448$1, v455$1 ++ v454$1 ++ v453$1 ++ v452$1)) else v456$1);
    v456$2 := (if p80$2 then BV32_SLT($col.3$2, BV32_ADD(v451$2 ++ v450$2 ++ v449$2 ++ v448$2, v455$2 ++ v454$2 ++ v453$2 ++ v452$2)) else v456$2);
    p81$1 := (if p80$1 && v456$1 then v456$1 else p81$1);
    p81$2 := (if p80$2 && v456$2 then v456$2 else p81$2);
    p86$1 := (if p80$1 && !v456$1 then !v456$1 else p86$1);
    p86$2 := (if p80$2 && !v456$2 then !v456$2 else p86$2);
    v457$1 := (if p81$1 then $$d_common$132bv32$1 else v457$1);
    v457$2 := (if p81$2 then $$d_common$132bv32$2 else v457$2);
    v458$1 := (if p81$1 then $$d_common$133bv32$1 else v458$1);
    v458$2 := (if p81$2 then $$d_common$133bv32$2 else v458$2);
    v459$1 := (if p81$1 then $$d_common$134bv32$1 else v459$1);
    v459$2 := (if p81$2 then $$d_common$134bv32$2 else v459$2);
    v460$1 := (if p81$1 then $$d_common$135bv32$1 else v460$1);
    v460$2 := (if p81$2 then $$d_common$135bv32$2 else v460$2);
    v461$1 := (if p81$1 then $$d_common$136bv32$1 else v461$1);
    v461$2 := (if p81$2 then $$d_common$136bv32$2 else v461$2);
    v462$1 := (if p81$1 then $$d_common$137bv32$1 else v462$1);
    v462$2 := (if p81$2 then $$d_common$137bv32$2 else v462$2);
    v463$1 := (if p81$1 then $$d_common$138bv32$1 else v463$1);
    v463$2 := (if p81$2 then $$d_common$138bv32$2 else v463$2);
    v464$1 := (if p81$1 then $$d_common$139bv32$1 else v464$1);
    v464$2 := (if p81$2 then $$d_common$139bv32$2 else v464$2);
    v465$1 := (if p81$1 then $$d_common$92bv32$1 else v465$1);
    v465$2 := (if p81$2 then $$d_common$92bv32$2 else v465$2);
    v466$1 := (if p81$1 then $$d_common$93bv32$1 else v466$1);
    v466$2 := (if p81$2 then $$d_common$93bv32$2 else v466$2);
    v467$1 := (if p81$1 then $$d_common$94bv32$1 else v467$1);
    v467$2 := (if p81$2 then $$d_common$94bv32$2 else v467$2);
    v468$1 := (if p81$1 then $$d_common$95bv32$1 else v468$1);
    v468$2 := (if p81$2 then $$d_common$95bv32$2 else v468$2);
    call {:sourceloc} {:sourceloc_num 505} _LOG_READ_$$d_in2_all(p81$1, BV32_ADD(v124$1, BV32_ADD(BV32_MUL(BV32_SUB($col.3$1, v464$1 ++ v463$1 ++ v462$1 ++ v461$1), v468$1 ++ v467$1 ++ v466$1 ++ v465$1), BV32_SUB($row.3$1, v460$1 ++ v459$1 ++ v458$1 ++ v457$1))), $$d_in2_all[BV32_ADD(v124$1, BV32_ADD(BV32_MUL(BV32_SUB($col.3$1, v464$1 ++ v463$1 ++ v462$1 ++ v461$1), v468$1 ++ v467$1 ++ v466$1 ++ v465$1), BV32_SUB($row.3$1, v460$1 ++ v459$1 ++ v458$1 ++ v457$1)))]);
    assume {:do_not_predicate} {:check_id "check_state_129"} {:captureState "check_state_129"} {:sourceloc} {:sourceloc_num 505} true;
    call {:check_id "check_state_129"} {:sourceloc} {:sourceloc_num 505} _CHECK_READ_$$d_in2_all(p81$2, BV32_ADD(v124$2, BV32_ADD(BV32_MUL(BV32_SUB($col.3$2, v464$2 ++ v463$2 ++ v462$2 ++ v461$2), v468$2 ++ v467$2 ++ v466$2 ++ v465$2), BV32_SUB($row.3$2, v460$2 ++ v459$2 ++ v458$2 ++ v457$2))), $$d_in2_all[BV32_ADD(v124$2, BV32_ADD(BV32_MUL(BV32_SUB($col.3$2, v464$2 ++ v463$2 ++ v462$2 ++ v461$2), v468$2 ++ v467$2 ++ v466$2 ++ v465$2), BV32_SUB($row.3$2, v460$2 ++ v459$2 ++ v458$2 ++ v457$2)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_all"} true;
    v469$1 := (if p81$1 then $$d_in2_all[BV32_ADD(v124$1, BV32_ADD(BV32_MUL(BV32_SUB($col.3$1, v464$1 ++ v463$1 ++ v462$1 ++ v461$1), v468$1 ++ v467$1 ++ v466$1 ++ v465$1), BV32_SUB($row.3$1, v460$1 ++ v459$1 ++ v458$1 ++ v457$1)))] else v469$1);
    v469$2 := (if p81$2 then $$d_in2_all[BV32_ADD(v124$2, BV32_ADD(BV32_MUL(BV32_SUB($col.3$2, v464$2 ++ v463$2 ++ v462$2 ++ v461$2), v468$2 ++ v467$2 ++ v466$2 ++ v465$2), BV32_SUB($row.3$2, v460$2 ++ v459$2 ++ v458$2 ++ v457$2)))] else v469$2);
    call {:sourceloc} {:sourceloc_num 506} _LOG_WRITE_$$d_in2_pad_cumv_all(p81$1, BV32_ADD(v134$1, $ei_new.4$1), v469$1, $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.4$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(p81$2, BV32_ADD(v134$2, $ei_new.4$2));
    assume {:do_not_predicate} {:check_id "check_state_130"} {:captureState "check_state_130"} {:sourceloc} {:sourceloc_num 506} true;
    call {:check_id "check_state_130"} {:sourceloc} {:sourceloc_num 506} _CHECK_WRITE_$$d_in2_pad_cumv_all(p81$2, BV32_ADD(v134$2, $ei_new.4$2), v469$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_all"} true;
    $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.4$1)] := (if p81$1 then v469$1 else $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.4$1)]);
    $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.4$2)] := (if p81$2 then v469$2 else $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.4$2)]);
    p86$1 := (if p82$1 then true else p86$1);
    p86$2 := (if p82$2 then true else p86$2);
    p86$1 := (if p83$1 then true else p86$1);
    p86$2 := (if p83$2 then true else p86$2);
    p86$1 := (if p84$1 then true else p86$1);
    p86$2 := (if p84$2 then true else p86$2);
    p86$1 := (if p85$1 then true else p86$1);
    p86$2 := (if p85$2 then true else p86$2);
    call {:sourceloc} {:sourceloc_num 508} _LOG_WRITE_$$d_in2_pad_cumv_all(p86$1, BV32_ADD(v134$1, $ei_new.4$1), 0bv32, $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.4$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(p86$2, BV32_ADD(v134$2, $ei_new.4$2));
    assume {:do_not_predicate} {:check_id "check_state_128"} {:captureState "check_state_128"} {:sourceloc} {:sourceloc_num 508} true;
    call {:check_id "check_state_128"} {:sourceloc} {:sourceloc_num 508} _CHECK_WRITE_$$d_in2_pad_cumv_all(p86$2, BV32_ADD(v134$2, $ei_new.4$2), 0bv32);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_all"} true;
    $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.4$1)] := (if p86$1 then 0bv32 else $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.4$1)]);
    $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.4$2)] := (if p86$2 then 0bv32 else $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.4$2)]);
    $ei_new.4$1 := (if p75$1 then BV32_ADD($ei_new.4$1, 256bv32) else $ei_new.4$1);
    $ei_new.4$2 := (if p75$2 then BV32_ADD($ei_new.4$2, 256bv32) else $ei_new.4$2);
    p74$1 := (if p75$1 then true else p74$1);
    p74$2 := (if p75$2 then true else p74$2);
    goto $49.backedge, __partitioned_block_$49.tail_0;

  __partitioned_block_$49.tail_0:
    assume !p74$1 && !p74$2;
    goto __partitioned_block_$49.tail_1;

  __partitioned_block_$49.tail_1:
    call {:sourceloc_num 511} $bugle_barrier_duplicated_6(1bv1, 1bv1);
    $ei_new.5$1 := v101$1;
    $ei_new.5$2 := v101$2;
    p87$1 := true;
    p87$2 := true;
    assume {:captureState "loop_entry_state_39_0"} true;
    goto $60;

  $60:
    assume {:captureState "loop_head_state_39"} true;
    assert {:tag "accessBreak"} _b396 ==> _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce37), $d_common.coerce37), $d_common.coerce37), $d_common.coerce37);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p87$1 ==> _b47 ==> p87$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p87$2 ==> _b47 ==> p87$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b46 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.5$1, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) ==> p87$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b46 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.5$2, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) ==> p87$2;
    assert {:tag "loopBound"} {:thread 1} p87$1 ==> _b45 ==> BV32_UGE($ei_new.5$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p87$2 ==> _b45 ==> BV32_UGE($ei_new.5$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p87$1 ==> _b44 ==> BV32_ULE($ei_new.5$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p87$2 ==> _b44 ==> BV32_ULE($ei_new.5$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p87$1 ==> _b43 ==> BV32_SGE($ei_new.5$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p87$2 ==> _b43 ==> BV32_SGE($ei_new.5$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p87$1 ==> _b42 ==> BV32_SLE($ei_new.5$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p87$2 ==> _b42 ==> BV32_SLE($ei_new.5$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p87$1 ==> _b41 ==> BV32_SLE(0bv32, $ei_new.5$1);
    assert {:tag "guardNonNeg"} {:thread 2} p87$2 ==> _b41 ==> BV32_SLE(0bv32, $ei_new.5$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p87$1 ==> _b40 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.5$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p87$2 ==> _b40 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.5$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 512} p87$1 ==> true;
    v470$1 := (if p87$1 then $$d_common$144bv32$1 else v470$1);
    v470$2 := (if p87$2 then $$d_common$144bv32$2 else v470$2);
    v471$1 := (if p87$1 then $$d_common$145bv32$1 else v471$1);
    v471$2 := (if p87$2 then $$d_common$145bv32$2 else v471$2);
    v472$1 := (if p87$1 then $$d_common$146bv32$1 else v472$1);
    v472$2 := (if p87$2 then $$d_common$146bv32$2 else v472$2);
    v473$1 := (if p87$1 then $$d_common$147bv32$1 else v473$1);
    v473$2 := (if p87$2 then $$d_common$147bv32$2 else v473$2);
    v474$1 := (if p87$1 then BV32_SLT($ei_new.5$1, v473$1 ++ v472$1 ++ v471$1 ++ v470$1) else v474$1);
    v474$2 := (if p87$2 then BV32_SLT($ei_new.5$2, v473$2 ++ v472$2 ++ v471$2 ++ v470$2) else v474$2);
    p88$1 := false;
    p88$2 := false;
    p89$1 := false;
    p89$2 := false;
    p88$1 := (if p87$1 && v474$1 then v474$1 else p88$1);
    p88$2 := (if p87$2 && v474$2 then v474$2 else p88$2);
    p87$1 := (if p87$1 && !v474$1 then v474$1 else p87$1);
    p87$2 := (if p87$2 && !v474$2 then v474$2 else p87$2);
    v475$1 := (if p88$1 then $$d_common$140bv32$1 else v475$1);
    v475$2 := (if p88$2 then $$d_common$140bv32$2 else v475$2);
    v476$1 := (if p88$1 then $$d_common$141bv32$1 else v476$1);
    v476$2 := (if p88$2 then $$d_common$141bv32$2 else v476$2);
    v477$1 := (if p88$1 then $$d_common$142bv32$1 else v477$1);
    v477$2 := (if p88$2 then $$d_common$142bv32$2 else v477$2);
    v478$1 := (if p88$1 then $$d_common$143bv32$1 else v478$1);
    v478$2 := (if p88$2 then $$d_common$143bv32$2 else v478$2);
    v479$1 := (if p88$1 then BV32_MUL($ei_new.5$1, v478$1 ++ v477$1 ++ v476$1 ++ v475$1) else v479$1);
    v479$2 := (if p88$2 then BV32_MUL($ei_new.5$2, v478$2 ++ v477$2 ++ v476$2 ++ v475$2) else v479$2);
    $position.0$1, $sum.0$1 := (if p88$1 then v479$1 else $position.0$1), (if p88$1 then 0bv32 else $sum.0$1);
    $position.0$2, $sum.0$2 := (if p88$2 then v479$2 else $position.0$2), (if p88$2 then 0bv32 else $sum.0$2);
    p89$1 := (if p88$1 then true else p89$1);
    p89$2 := (if p88$2 then true else p89$2);
    assume {:captureState "loop_entry_state_40_0"} true;
    goto $62;

  $62:
    assume {:captureState "loop_head_state_40"} true;
    assert {:tag "accessBreak"} _b397 ==> _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce37), $d_common.coerce37), $d_common.coerce37), $d_common.coerce37);
    assert p89$1 ==> p87$1;
    assert p89$2 ==> p87$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p89$1 ==> _b366 ==> p89$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.5$1, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p89$2 ==> _b366 ==> p89$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.5$2, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b365 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.5$1, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) && BV32_SLT($position.0$1, BV32_ADD(BV32_MUL($ei_new.5$1, $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0]), $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0])) ==> p89$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b365 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.5$2, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) && BV32_SLT($position.0$2, BV32_ADD(BV32_MUL($ei_new.5$2, $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0]), $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0])) ==> p89$2;
    assert {:tag "loopBound"} {:thread 1} p89$1 ==> _b364 ==> BV32_UGE($position.0$1, v479$1);
    assert {:tag "loopBound"} {:thread 2} p89$2 ==> _b364 ==> BV32_UGE($position.0$2, v479$2);
    assert {:tag "loopBound"} {:thread 1} p89$1 ==> _b363 ==> BV32_ULE($position.0$1, v479$1);
    assert {:tag "loopBound"} {:thread 2} p89$2 ==> _b363 ==> BV32_ULE($position.0$2, v479$2);
    assert {:tag "loopBound"} {:thread 1} p89$1 ==> _b362 ==> BV32_SGE($position.0$1, v479$1);
    assert {:tag "loopBound"} {:thread 2} p89$2 ==> _b362 ==> BV32_SGE($position.0$2, v479$2);
    assert {:tag "loopBound"} {:thread 1} p89$1 ==> _b361 ==> BV32_SLE($position.0$1, v479$1);
    assert {:tag "loopBound"} {:thread 2} p89$2 ==> _b361 ==> BV32_SLE($position.0$2, v479$2);
    assert {:tag "guardNonNeg"} {:thread 1} p89$1 ==> _b360 ==> BV32_SLE(0bv32, $position.0$1);
    assert {:tag "guardNonNeg"} {:thread 2} p89$2 ==> _b360 ==> BV32_SLE(0bv32, $position.0$2);
    assert {:block_sourceloc} {:sourceloc_num 522} p89$1 ==> true;
    v480$1 := (if p89$1 then $$d_common$140bv32$1 else v480$1);
    v480$2 := (if p89$2 then $$d_common$140bv32$2 else v480$2);
    v481$1 := (if p89$1 then $$d_common$141bv32$1 else v481$1);
    v481$2 := (if p89$2 then $$d_common$141bv32$2 else v481$2);
    v482$1 := (if p89$1 then $$d_common$142bv32$1 else v482$1);
    v482$2 := (if p89$2 then $$d_common$142bv32$2 else v482$2);
    v483$1 := (if p89$1 then $$d_common$143bv32$1 else v483$1);
    v483$2 := (if p89$2 then $$d_common$143bv32$2 else v483$2);
    v484$1 := (if p89$1 then BV32_SLT($position.0$1, BV32_ADD(v479$1, v483$1 ++ v482$1 ++ v481$1 ++ v480$1)) else v484$1);
    v484$2 := (if p89$2 then BV32_SLT($position.0$2, BV32_ADD(v479$2, v483$2 ++ v482$2 ++ v481$2 ++ v480$2)) else v484$2);
    p90$1 := false;
    p90$2 := false;
    p90$1 := (if p89$1 && v484$1 then v484$1 else p90$1);
    p90$2 := (if p89$2 && v484$2 then v484$2 else p90$2);
    p89$1 := (if p89$1 && !v484$1 then v484$1 else p89$1);
    p89$2 := (if p89$2 && !v484$2 then v484$2 else p89$2);
    call {:sourceloc} {:sourceloc_num 528} _LOG_READ_$$d_in2_pad_cumv_all(p90$1, BV32_ADD(v134$1, $position.0$1), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_125"} {:captureState "check_state_125"} {:sourceloc} {:sourceloc_num 528} true;
    call {:check_id "check_state_125"} {:sourceloc} {:sourceloc_num 528} _CHECK_READ_$$d_in2_pad_cumv_all(p90$2, BV32_ADD(v134$2, $position.0$2), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v485$1 := (if p90$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.0$1)] else v485$1);
    v485$2 := (if p90$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.0$2)] else v485$2);
    call {:sourceloc} {:sourceloc_num 529} _LOG_WRITE_$$d_in2_pad_cumv_all(p90$1, BV32_ADD(v134$1, $position.0$1), FADD32(v485$1, $sum.0$1), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.0$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(p90$2, BV32_ADD(v134$2, $position.0$2));
    assume {:do_not_predicate} {:check_id "check_state_126"} {:captureState "check_state_126"} {:sourceloc} {:sourceloc_num 529} true;
    call {:check_id "check_state_126"} {:sourceloc} {:sourceloc_num 529} _CHECK_WRITE_$$d_in2_pad_cumv_all(p90$2, BV32_ADD(v134$2, $position.0$2), FADD32(v485$2, $sum.0$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_all"} true;
    $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.0$1)] := (if p90$1 then FADD32(v485$1, $sum.0$1) else $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.0$1)]);
    $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.0$2)] := (if p90$2 then FADD32(v485$2, $sum.0$2) else $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.0$2)]);
    call {:sourceloc} {:sourceloc_num 530} _LOG_READ_$$d_in2_pad_cumv_all(p90$1, BV32_ADD(v134$1, $position.0$1), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_127"} {:captureState "check_state_127"} {:sourceloc} {:sourceloc_num 530} true;
    call {:check_id "check_state_127"} {:sourceloc} {:sourceloc_num 530} _CHECK_READ_$$d_in2_pad_cumv_all(p90$2, BV32_ADD(v134$2, $position.0$2), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v486$1 := (if p90$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.0$1)] else v486$1);
    v486$2 := (if p90$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.0$2)] else v486$2);
    $position.0$1, $sum.0$1 := (if p90$1 then BV32_ADD($position.0$1, 1bv32) else $position.0$1), (if p90$1 then v486$1 else $sum.0$1);
    $position.0$2, $sum.0$2 := (if p90$2 then BV32_ADD($position.0$2, 1bv32) else $position.0$2), (if p90$2 then v486$2 else $sum.0$2);
    p89$1 := (if p90$1 then true else p89$1);
    p89$2 := (if p90$2 then true else p89$2);
    goto $62.backedge, $62.tail;

  $62.tail:
    assume !p89$1 && !p89$2;
    $ei_new.5$1 := (if p88$1 then BV32_ADD($ei_new.5$1, 256bv32) else $ei_new.5$1);
    $ei_new.5$2 := (if p88$2 then BV32_ADD($ei_new.5$2, 256bv32) else $ei_new.5$2);
    p87$1 := (if p88$1 then true else p87$1);
    p87$2 := (if p88$2 then true else p87$2);
    goto $60.backedge, __partitioned_block_$60.tail_0;

  __partitioned_block_$60.tail_0:
    assume !p87$1 && !p87$2;
    goto __partitioned_block_$60.tail_1;

  __partitioned_block_$60.tail_1:
    call {:sourceloc_num 534} $bugle_barrier_duplicated_7(1bv1, 1bv1);
    $ei_new.6$1 := v101$1;
    $ei_new.6$2 := v101$2;
    p91$1 := true;
    p91$2 := true;
    assume {:captureState "loop_entry_state_38_0"} true;
    goto $67;

  $67:
    assume {:captureState "loop_head_state_38"} true;
    assert {:tag "accessBreak"} _b398 ==> _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce41), $d_common.coerce41), $d_common.coerce41), $d_common.coerce41);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p91$1 ==> _b55 ==> p91$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p91$2 ==> _b55 ==> p91$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b54 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.6$1, $d_common.coerce41[32:24] ++ $d_common.coerce41[24:16] ++ $d_common.coerce41[16:8] ++ $d_common.coerce41[8:0]) ==> p91$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b54 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.6$2, $d_common.coerce41[32:24] ++ $d_common.coerce41[24:16] ++ $d_common.coerce41[16:8] ++ $d_common.coerce41[8:0]) ==> p91$2;
    assert {:tag "loopBound"} {:thread 1} p91$1 ==> _b53 ==> BV32_UGE($ei_new.6$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p91$2 ==> _b53 ==> BV32_UGE($ei_new.6$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p91$1 ==> _b52 ==> BV32_ULE($ei_new.6$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p91$2 ==> _b52 ==> BV32_ULE($ei_new.6$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p91$1 ==> _b51 ==> BV32_SGE($ei_new.6$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p91$2 ==> _b51 ==> BV32_SGE($ei_new.6$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p91$1 ==> _b50 ==> BV32_SLE($ei_new.6$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p91$2 ==> _b50 ==> BV32_SLE($ei_new.6$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p91$1 ==> _b49 ==> BV32_SLE(0bv32, $ei_new.6$1);
    assert {:tag "guardNonNeg"} {:thread 2} p91$2 ==> _b49 ==> BV32_SLE(0bv32, $ei_new.6$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p91$1 ==> _b48 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.6$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p91$2 ==> _b48 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.6$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 535} p91$1 ==> true;
    v487$1 := (if p91$1 then $$d_common$164bv32$1 else v487$1);
    v487$2 := (if p91$2 then $$d_common$164bv32$2 else v487$2);
    v488$1 := (if p91$1 then $$d_common$165bv32$1 else v488$1);
    v488$2 := (if p91$2 then $$d_common$165bv32$2 else v488$2);
    v489$1 := (if p91$1 then $$d_common$166bv32$1 else v489$1);
    v489$2 := (if p91$2 then $$d_common$166bv32$2 else v489$2);
    v490$1 := (if p91$1 then $$d_common$167bv32$1 else v490$1);
    v490$2 := (if p91$2 then $$d_common$167bv32$2 else v490$2);
    v491$1 := (if p91$1 then BV32_SLT($ei_new.6$1, v490$1 ++ v489$1 ++ v488$1 ++ v487$1) else v491$1);
    v491$2 := (if p91$2 then BV32_SLT($ei_new.6$2, v490$2 ++ v489$2 ++ v488$2 ++ v487$2) else v491$2);
    p92$1 := false;
    p92$2 := false;
    p93$1 := false;
    p93$2 := false;
    p94$1 := false;
    p94$2 := false;
    p92$1 := (if p91$1 && v491$1 then v491$1 else p92$1);
    p92$2 := (if p91$2 && v491$2 then v491$2 else p92$2);
    p91$1 := (if p91$1 && !v491$1 then v491$1 else p91$1);
    p91$2 := (if p91$2 && !v491$2 then v491$2 else p91$2);
    v492$1 := (if p92$1 then $$d_common$156bv32$1 else v492$1);
    v492$2 := (if p92$2 then $$d_common$156bv32$2 else v492$2);
    v493$1 := (if p92$1 then $$d_common$157bv32$1 else v493$1);
    v493$2 := (if p92$2 then $$d_common$157bv32$2 else v493$2);
    v494$1 := (if p92$1 then $$d_common$158bv32$1 else v494$1);
    v494$2 := (if p92$2 then $$d_common$158bv32$2 else v494$2);
    v495$1 := (if p92$1 then $$d_common$159bv32$1 else v495$1);
    v495$2 := (if p92$2 then $$d_common$159bv32$2 else v495$2);
    v496$1 := (if p92$1 then $$d_common$156bv32$1 else v496$1);
    v496$2 := (if p92$2 then $$d_common$156bv32$2 else v496$2);
    v497$1 := (if p92$1 then $$d_common$157bv32$1 else v497$1);
    v497$2 := (if p92$2 then $$d_common$157bv32$2 else v497$2);
    v498$1 := (if p92$1 then $$d_common$158bv32$1 else v498$1);
    v498$2 := (if p92$2 then $$d_common$158bv32$2 else v498$2);
    v499$1 := (if p92$1 then $$d_common$159bv32$1 else v499$1);
    v499$2 := (if p92$2 then $$d_common$159bv32$2 else v499$2);
    v500$1 := (if p92$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.6$1, 1bv32), v499$1 ++ v498$1 ++ v497$1 ++ v496$1), 1bv32), 1bv32) else v500$1);
    v500$2 := (if p92$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.6$2, 1bv32), v499$2 ++ v498$2 ++ v497$2 ++ v496$2), 1bv32), 1bv32) else v500$2);
    v501$1 := (if p92$1 then $$d_common$156bv32$1 else v501$1);
    v501$2 := (if p92$2 then $$d_common$156bv32$2 else v501$2);
    v502$1 := (if p92$1 then $$d_common$157bv32$1 else v502$1);
    v502$2 := (if p92$2 then $$d_common$157bv32$2 else v502$2);
    v503$1 := (if p92$1 then $$d_common$158bv32$1 else v503$1);
    v503$2 := (if p92$2 then $$d_common$158bv32$2 else v503$2);
    v504$1 := (if p92$1 then $$d_common$159bv32$1 else v504$1);
    v504$2 := (if p92$2 then $$d_common$159bv32$2 else v504$2);
    v505$1 := (if p92$1 then BV32_SREM(BV32_ADD($ei_new.6$1, 1bv32), v504$1 ++ v503$1 ++ v502$1 ++ v501$1) == 0bv32 else v505$1);
    v505$2 := (if p92$2 then BV32_SREM(BV32_ADD($ei_new.6$2, 1bv32), v504$2 ++ v503$2 ++ v502$2 ++ v501$2) == 0bv32 else v505$2);
    p94$1 := (if p92$1 && v505$1 then v505$1 else p94$1);
    p94$2 := (if p92$2 && v505$2 then v505$2 else p94$2);
    p93$1 := (if p92$1 && !v505$1 then !v505$1 else p93$1);
    p93$2 := (if p92$2 && !v505$2 then !v505$2 else p93$2);
    $row.4$1, $col.4$1 := (if p93$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.6$1, 1bv32), v495$1 ++ v494$1 ++ v493$1 ++ v492$1), 1bv32) else $row.4$1), (if p93$1 then v500$1 else $col.4$1);
    $row.4$2, $col.4$2 := (if p93$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.6$2, 1bv32), v495$2 ++ v494$2 ++ v493$2 ++ v492$2), 1bv32) else $row.4$2), (if p93$2 then v500$2 else $col.4$2);
    v506$1 := (if p94$1 then $$d_common$156bv32$1 else v506$1);
    v506$2 := (if p94$2 then $$d_common$156bv32$2 else v506$2);
    v507$1 := (if p94$1 then $$d_common$157bv32$1 else v507$1);
    v507$2 := (if p94$2 then $$d_common$157bv32$2 else v507$2);
    v508$1 := (if p94$1 then $$d_common$158bv32$1 else v508$1);
    v508$2 := (if p94$2 then $$d_common$158bv32$2 else v508$2);
    v509$1 := (if p94$1 then $$d_common$159bv32$1 else v509$1);
    v509$2 := (if p94$2 then $$d_common$159bv32$2 else v509$2);
    $row.4$1, $col.4$1 := (if p94$1 then BV32_SUB(v509$1 ++ v508$1 ++ v507$1 ++ v506$1, 1bv32) else $row.4$1), (if p94$1 then BV32_SUB(v500$1, 1bv32) else $col.4$1);
    $row.4$2, $col.4$2 := (if p94$2 then BV32_SUB(v509$2 ++ v508$2 ++ v507$2 ++ v506$2, 1bv32) else $row.4$2), (if p94$2 then BV32_SUB(v500$2, 1bv32) else $col.4$2);
    v510$1 := (if p92$1 then $$d_common$172bv32$1 else v510$1);
    v510$2 := (if p92$2 then $$d_common$172bv32$2 else v510$2);
    v511$1 := (if p92$1 then $$d_common$173bv32$1 else v511$1);
    v511$2 := (if p92$2 then $$d_common$173bv32$2 else v511$2);
    v512$1 := (if p92$1 then $$d_common$174bv32$1 else v512$1);
    v512$2 := (if p92$2 then $$d_common$174bv32$2 else v512$2);
    v513$1 := (if p92$1 then $$d_common$175bv32$1 else v513$1);
    v513$2 := (if p92$2 then $$d_common$175bv32$2 else v513$2);
    v514$1 := (if p92$1 then $$d_common$180bv32$1 else v514$1);
    v514$2 := (if p92$2 then $$d_common$180bv32$2 else v514$2);
    v515$1 := (if p92$1 then $$d_common$181bv32$1 else v515$1);
    v515$2 := (if p92$2 then $$d_common$181bv32$2 else v515$2);
    v516$1 := (if p92$1 then $$d_common$182bv32$1 else v516$1);
    v516$2 := (if p92$2 then $$d_common$182bv32$2 else v516$2);
    v517$1 := (if p92$1 then $$d_common$183bv32$1 else v517$1);
    v517$2 := (if p92$2 then $$d_common$183bv32$2 else v517$2);
    v518$1 := (if p92$1 then $$d_common$140bv32$1 else v518$1);
    v518$2 := (if p92$2 then $$d_common$140bv32$2 else v518$2);
    v519$1 := (if p92$1 then $$d_common$141bv32$1 else v519$1);
    v519$2 := (if p92$2 then $$d_common$141bv32$2 else v519$2);
    v520$1 := (if p92$1 then $$d_common$142bv32$1 else v520$1);
    v520$2 := (if p92$2 then $$d_common$142bv32$2 else v520$2);
    v521$1 := (if p92$1 then $$d_common$143bv32$1 else v521$1);
    v521$2 := (if p92$2 then $$d_common$143bv32$2 else v521$2);
    call {:sourceloc} {:sourceloc_num 571} _LOG_READ_$$d_in2_pad_cumv_all(p92$1, BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.4$1, v517$1 ++ v516$1 ++ v515$1 ++ v514$1), 1bv32), v521$1 ++ v520$1 ++ v519$1 ++ v518$1), BV32_SUB(BV32_ADD($row.4$1, v513$1 ++ v512$1 ++ v511$1 ++ v510$1), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.4$1, v517$1 ++ v516$1 ++ v515$1 ++ v514$1), 1bv32), v521$1 ++ v520$1 ++ v519$1 ++ v518$1), BV32_SUB(BV32_ADD($row.4$1, v513$1 ++ v512$1 ++ v511$1 ++ v510$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_123"} {:captureState "check_state_123"} {:sourceloc} {:sourceloc_num 571} true;
    call {:check_id "check_state_123"} {:sourceloc} {:sourceloc_num 571} _CHECK_READ_$$d_in2_pad_cumv_all(p92$2, BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.4$2, v517$2 ++ v516$2 ++ v515$2 ++ v514$2), 1bv32), v521$2 ++ v520$2 ++ v519$2 ++ v518$2), BV32_SUB(BV32_ADD($row.4$2, v513$2 ++ v512$2 ++ v511$2 ++ v510$2), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.4$2, v517$2 ++ v516$2 ++ v515$2 ++ v514$2), 1bv32), v521$2 ++ v520$2 ++ v519$2 ++ v518$2), BV32_SUB(BV32_ADD($row.4$2, v513$2 ++ v512$2 ++ v511$2 ++ v510$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v522$1 := (if p92$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.4$1, v517$1 ++ v516$1 ++ v515$1 ++ v514$1), 1bv32), v521$1 ++ v520$1 ++ v519$1 ++ v518$1), BV32_SUB(BV32_ADD($row.4$1, v513$1 ++ v512$1 ++ v511$1 ++ v510$1), 1bv32)))] else v522$1);
    v522$2 := (if p92$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.4$2, v517$2 ++ v516$2 ++ v515$2 ++ v514$2), 1bv32), v521$2 ++ v520$2 ++ v519$2 ++ v518$2), BV32_SUB(BV32_ADD($row.4$2, v513$2 ++ v512$2 ++ v511$2 ++ v510$2), 1bv32)))] else v522$2);
    call {:sourceloc} {:sourceloc_num 572} _LOG_WRITE_$$d_in2_pad_cumv_sel_all(p92$1, BV32_ADD(v139$1, $ei_new.6$1), v522$1, $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.6$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all(p92$2, BV32_ADD(v139$2, $ei_new.6$2));
    assume {:do_not_predicate} {:check_id "check_state_124"} {:captureState "check_state_124"} {:sourceloc} {:sourceloc_num 572} true;
    call {:check_id "check_state_124"} {:sourceloc} {:sourceloc_num 572} _CHECK_WRITE_$$d_in2_pad_cumv_sel_all(p92$2, BV32_ADD(v139$2, $ei_new.6$2), v522$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_sel_all"} true;
    $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.6$1)] := (if p92$1 then v522$1 else $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.6$1)]);
    $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.6$2)] := (if p92$2 then v522$2 else $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.6$2)]);
    $ei_new.6$1 := (if p92$1 then BV32_ADD($ei_new.6$1, 256bv32) else $ei_new.6$1);
    $ei_new.6$2 := (if p92$2 then BV32_ADD($ei_new.6$2, 256bv32) else $ei_new.6$2);
    p91$1 := (if p92$1 then true else p91$1);
    p91$2 := (if p92$2 then true else p91$2);
    goto $67.backedge, __partitioned_block_$67.tail_0;

  __partitioned_block_$67.tail_0:
    assume !p91$1 && !p91$2;
    goto __partitioned_block_$67.tail_1;

  __partitioned_block_$67.tail_1:
    call {:sourceloc_num 574} $bugle_barrier_duplicated_8(1bv1, 1bv1);
    $ei_new.7$1 := v101$1;
    $ei_new.7$2 := v101$2;
    p95$1 := true;
    p95$2 := true;
    assume {:captureState "loop_entry_state_37_0"} true;
    goto $72;

  $72:
    assume {:captureState "loop_head_state_37"} true;
    assert {:tag "accessBreak"} _b399 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p95$1 ==> _b63 ==> p95$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p95$2 ==> _b63 ==> p95$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b62 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.7$1, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p95$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b62 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.7$2, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p95$2;
    assert {:tag "loopBound"} {:thread 1} p95$1 ==> _b61 ==> BV32_UGE($ei_new.7$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p95$2 ==> _b61 ==> BV32_UGE($ei_new.7$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p95$1 ==> _b60 ==> BV32_ULE($ei_new.7$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p95$2 ==> _b60 ==> BV32_ULE($ei_new.7$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p95$1 ==> _b59 ==> BV32_SGE($ei_new.7$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p95$2 ==> _b59 ==> BV32_SGE($ei_new.7$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p95$1 ==> _b58 ==> BV32_SLE($ei_new.7$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p95$2 ==> _b58 ==> BV32_SLE($ei_new.7$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p95$1 ==> _b57 ==> BV32_SLE(0bv32, $ei_new.7$1);
    assert {:tag "guardNonNeg"} {:thread 2} p95$2 ==> _b57 ==> BV32_SLE(0bv32, $ei_new.7$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p95$1 ==> _b56 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.7$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p95$2 ==> _b56 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.7$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 575} p95$1 ==> true;
    v523$1 := (if p95$1 then $$d_common$212bv32$1 else v523$1);
    v523$2 := (if p95$2 then $$d_common$212bv32$2 else v523$2);
    v524$1 := (if p95$1 then $$d_common$213bv32$1 else v524$1);
    v524$2 := (if p95$2 then $$d_common$213bv32$2 else v524$2);
    v525$1 := (if p95$1 then $$d_common$214bv32$1 else v525$1);
    v525$2 := (if p95$2 then $$d_common$214bv32$2 else v525$2);
    v526$1 := (if p95$1 then $$d_common$215bv32$1 else v526$1);
    v526$2 := (if p95$2 then $$d_common$215bv32$2 else v526$2);
    v527$1 := (if p95$1 then BV32_SLT($ei_new.7$1, v526$1 ++ v525$1 ++ v524$1 ++ v523$1) else v527$1);
    v527$2 := (if p95$2 then BV32_SLT($ei_new.7$2, v526$2 ++ v525$2 ++ v524$2 ++ v523$2) else v527$2);
    p96$1 := false;
    p96$2 := false;
    p97$1 := false;
    p97$2 := false;
    p98$1 := false;
    p98$2 := false;
    p96$1 := (if p95$1 && v527$1 then v527$1 else p96$1);
    p96$2 := (if p95$2 && v527$2 then v527$2 else p96$2);
    p95$1 := (if p95$1 && !v527$1 then v527$1 else p95$1);
    p95$2 := (if p95$2 && !v527$2 then v527$2 else p95$2);
    v528$1 := (if p96$1 then $$d_common$204bv32$1 else v528$1);
    v528$2 := (if p96$2 then $$d_common$204bv32$2 else v528$2);
    v529$1 := (if p96$1 then $$d_common$205bv32$1 else v529$1);
    v529$2 := (if p96$2 then $$d_common$205bv32$2 else v529$2);
    v530$1 := (if p96$1 then $$d_common$206bv32$1 else v530$1);
    v530$2 := (if p96$2 then $$d_common$206bv32$2 else v530$2);
    v531$1 := (if p96$1 then $$d_common$207bv32$1 else v531$1);
    v531$2 := (if p96$2 then $$d_common$207bv32$2 else v531$2);
    v532$1 := (if p96$1 then $$d_common$204bv32$1 else v532$1);
    v532$2 := (if p96$2 then $$d_common$204bv32$2 else v532$2);
    v533$1 := (if p96$1 then $$d_common$205bv32$1 else v533$1);
    v533$2 := (if p96$2 then $$d_common$205bv32$2 else v533$2);
    v534$1 := (if p96$1 then $$d_common$206bv32$1 else v534$1);
    v534$2 := (if p96$2 then $$d_common$206bv32$2 else v534$2);
    v535$1 := (if p96$1 then $$d_common$207bv32$1 else v535$1);
    v535$2 := (if p96$2 then $$d_common$207bv32$2 else v535$2);
    v536$1 := (if p96$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.7$1, 1bv32), v535$1 ++ v534$1 ++ v533$1 ++ v532$1), 1bv32), 1bv32) else v536$1);
    v536$2 := (if p96$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.7$2, 1bv32), v535$2 ++ v534$2 ++ v533$2 ++ v532$2), 1bv32), 1bv32) else v536$2);
    v537$1 := (if p96$1 then $$d_common$204bv32$1 else v537$1);
    v537$2 := (if p96$2 then $$d_common$204bv32$2 else v537$2);
    v538$1 := (if p96$1 then $$d_common$205bv32$1 else v538$1);
    v538$2 := (if p96$2 then $$d_common$205bv32$2 else v538$2);
    v539$1 := (if p96$1 then $$d_common$206bv32$1 else v539$1);
    v539$2 := (if p96$2 then $$d_common$206bv32$2 else v539$2);
    v540$1 := (if p96$1 then $$d_common$207bv32$1 else v540$1);
    v540$2 := (if p96$2 then $$d_common$207bv32$2 else v540$2);
    v541$1 := (if p96$1 then BV32_SREM(BV32_ADD($ei_new.7$1, 1bv32), v540$1 ++ v539$1 ++ v538$1 ++ v537$1) == 0bv32 else v541$1);
    v541$2 := (if p96$2 then BV32_SREM(BV32_ADD($ei_new.7$2, 1bv32), v540$2 ++ v539$2 ++ v538$2 ++ v537$2) == 0bv32 else v541$2);
    p98$1 := (if p96$1 && v541$1 then v541$1 else p98$1);
    p98$2 := (if p96$2 && v541$2 then v541$2 else p98$2);
    p97$1 := (if p96$1 && !v541$1 then !v541$1 else p97$1);
    p97$2 := (if p96$2 && !v541$2 then !v541$2 else p97$2);
    $row.5$1, $col.5$1 := (if p97$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.7$1, 1bv32), v531$1 ++ v530$1 ++ v529$1 ++ v528$1), 1bv32) else $row.5$1), (if p97$1 then v536$1 else $col.5$1);
    $row.5$2, $col.5$2 := (if p97$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.7$2, 1bv32), v531$2 ++ v530$2 ++ v529$2 ++ v528$2), 1bv32) else $row.5$2), (if p97$2 then v536$2 else $col.5$2);
    v542$1 := (if p98$1 then $$d_common$204bv32$1 else v542$1);
    v542$2 := (if p98$2 then $$d_common$204bv32$2 else v542$2);
    v543$1 := (if p98$1 then $$d_common$205bv32$1 else v543$1);
    v543$2 := (if p98$2 then $$d_common$205bv32$2 else v543$2);
    v544$1 := (if p98$1 then $$d_common$206bv32$1 else v544$1);
    v544$2 := (if p98$2 then $$d_common$206bv32$2 else v544$2);
    v545$1 := (if p98$1 then $$d_common$207bv32$1 else v545$1);
    v545$2 := (if p98$2 then $$d_common$207bv32$2 else v545$2);
    $row.5$1, $col.5$1 := (if p98$1 then BV32_SUB(v545$1 ++ v544$1 ++ v543$1 ++ v542$1, 1bv32) else $row.5$1), (if p98$1 then BV32_SUB(v536$1, 1bv32) else $col.5$1);
    $row.5$2, $col.5$2 := (if p98$2 then BV32_SUB(v545$2 ++ v544$2 ++ v543$2 ++ v542$2, 1bv32) else $row.5$2), (if p98$2 then BV32_SUB(v536$2, 1bv32) else $col.5$2);
    v546$1 := (if p96$1 then $$d_common$188bv32$1 else v546$1);
    v546$2 := (if p96$2 then $$d_common$188bv32$2 else v546$2);
    v547$1 := (if p96$1 then $$d_common$189bv32$1 else v547$1);
    v547$2 := (if p96$2 then $$d_common$189bv32$2 else v547$2);
    v548$1 := (if p96$1 then $$d_common$190bv32$1 else v548$1);
    v548$2 := (if p96$2 then $$d_common$190bv32$2 else v548$2);
    v549$1 := (if p96$1 then $$d_common$191bv32$1 else v549$1);
    v549$2 := (if p96$2 then $$d_common$191bv32$2 else v549$2);
    v550$1 := (if p96$1 then $$d_common$196bv32$1 else v550$1);
    v550$2 := (if p96$2 then $$d_common$196bv32$2 else v550$2);
    v551$1 := (if p96$1 then $$d_common$197bv32$1 else v551$1);
    v551$2 := (if p96$2 then $$d_common$197bv32$2 else v551$2);
    v552$1 := (if p96$1 then $$d_common$198bv32$1 else v552$1);
    v552$2 := (if p96$2 then $$d_common$198bv32$2 else v552$2);
    v553$1 := (if p96$1 then $$d_common$199bv32$1 else v553$1);
    v553$2 := (if p96$2 then $$d_common$199bv32$2 else v553$2);
    v554$1 := (if p96$1 then $$d_common$140bv32$1 else v554$1);
    v554$2 := (if p96$2 then $$d_common$140bv32$2 else v554$2);
    v555$1 := (if p96$1 then $$d_common$141bv32$1 else v555$1);
    v555$2 := (if p96$2 then $$d_common$141bv32$2 else v555$2);
    v556$1 := (if p96$1 then $$d_common$142bv32$1 else v556$1);
    v556$2 := (if p96$2 then $$d_common$142bv32$2 else v556$2);
    v557$1 := (if p96$1 then $$d_common$143bv32$1 else v557$1);
    v557$2 := (if p96$2 then $$d_common$143bv32$2 else v557$2);
    call {:sourceloc} {:sourceloc_num 611} _LOG_READ_$$d_in2_pad_cumv_all(p96$1, BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.5$1, v553$1 ++ v552$1 ++ v551$1 ++ v550$1), 1bv32), v557$1 ++ v556$1 ++ v555$1 ++ v554$1), BV32_SUB(BV32_ADD($row.5$1, v549$1 ++ v548$1 ++ v547$1 ++ v546$1), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.5$1, v553$1 ++ v552$1 ++ v551$1 ++ v550$1), 1bv32), v557$1 ++ v556$1 ++ v555$1 ++ v554$1), BV32_SUB(BV32_ADD($row.5$1, v549$1 ++ v548$1 ++ v547$1 ++ v546$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_121"} {:captureState "check_state_121"} {:sourceloc} {:sourceloc_num 611} true;
    call {:check_id "check_state_121"} {:sourceloc} {:sourceloc_num 611} _CHECK_READ_$$d_in2_pad_cumv_all(p96$2, BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.5$2, v553$2 ++ v552$2 ++ v551$2 ++ v550$2), 1bv32), v557$2 ++ v556$2 ++ v555$2 ++ v554$2), BV32_SUB(BV32_ADD($row.5$2, v549$2 ++ v548$2 ++ v547$2 ++ v546$2), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.5$2, v553$2 ++ v552$2 ++ v551$2 ++ v550$2), 1bv32), v557$2 ++ v556$2 ++ v555$2 ++ v554$2), BV32_SUB(BV32_ADD($row.5$2, v549$2 ++ v548$2 ++ v547$2 ++ v546$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v558$1 := (if p96$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.5$1, v553$1 ++ v552$1 ++ v551$1 ++ v550$1), 1bv32), v557$1 ++ v556$1 ++ v555$1 ++ v554$1), BV32_SUB(BV32_ADD($row.5$1, v549$1 ++ v548$1 ++ v547$1 ++ v546$1), 1bv32)))] else v558$1);
    v558$2 := (if p96$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.5$2, v553$2 ++ v552$2 ++ v551$2 ++ v550$2), 1bv32), v557$2 ++ v556$2 ++ v555$2 ++ v554$2), BV32_SUB(BV32_ADD($row.5$2, v549$2 ++ v548$2 ++ v547$2 ++ v546$2), 1bv32)))] else v558$2);
    call {:sourceloc} {:sourceloc_num 612} _LOG_WRITE_$$d_in2_sub_cumh_all(p96$1, BV32_ADD(v144$1, $ei_new.7$1), v558$1, $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.7$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(p96$2, BV32_ADD(v144$2, $ei_new.7$2));
    assume {:do_not_predicate} {:check_id "check_state_122"} {:captureState "check_state_122"} {:sourceloc} {:sourceloc_num 612} true;
    call {:check_id "check_state_122"} {:sourceloc} {:sourceloc_num 612} _CHECK_WRITE_$$d_in2_sub_cumh_all(p96$2, BV32_ADD(v144$2, $ei_new.7$2), v558$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_all"} true;
    $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.7$1)] := (if p96$1 then v558$1 else $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.7$1)]);
    $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.7$2)] := (if p96$2 then v558$2 else $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.7$2)]);
    $ei_new.7$1 := (if p96$1 then BV32_ADD($ei_new.7$1, 256bv32) else $ei_new.7$1);
    $ei_new.7$2 := (if p96$2 then BV32_ADD($ei_new.7$2, 256bv32) else $ei_new.7$2);
    p95$1 := (if p96$1 then true else p95$1);
    p95$2 := (if p96$2 then true else p95$2);
    goto $72.backedge, __partitioned_block_$72.tail_0;

  __partitioned_block_$72.tail_0:
    assume !p95$1 && !p95$2;
    goto __partitioned_block_$72.tail_1;

  __partitioned_block_$72.tail_1:
    call {:sourceloc_num 614} $bugle_barrier_duplicated_9(1bv1, 1bv1);
    goto __partitioned_block_$72.tail_2;

  __partitioned_block_$72.tail_2:
    call {:sourceloc_num 615} $bugle_barrier_duplicated_10(1bv1, 1bv1);
    $ei_new.8$1 := v101$1;
    $ei_new.8$2 := v101$2;
    p99$1 := true;
    p99$2 := true;
    assume {:captureState "loop_entry_state_36_0"} true;
    goto $77;

  $77:
    assume {:captureState "loop_head_state_36"} true;
    assert {:tag "accessBreak"} _b402 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "accessBreak"} _b401 ==> _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "accessBreak"} _b400 ==> _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce41), $d_common.coerce41), $d_common.coerce41), $d_common.coerce41);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p99$1 ==> _b71 ==> p99$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p99$2 ==> _b71 ==> p99$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b70 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.8$1, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p99$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b70 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.8$2, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p99$2;
    assert {:tag "loopBound"} {:thread 1} p99$1 ==> _b69 ==> BV32_UGE($ei_new.8$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p99$2 ==> _b69 ==> BV32_UGE($ei_new.8$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p99$1 ==> _b68 ==> BV32_ULE($ei_new.8$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p99$2 ==> _b68 ==> BV32_ULE($ei_new.8$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p99$1 ==> _b67 ==> BV32_SGE($ei_new.8$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p99$2 ==> _b67 ==> BV32_SGE($ei_new.8$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p99$1 ==> _b66 ==> BV32_SLE($ei_new.8$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p99$2 ==> _b66 ==> BV32_SLE($ei_new.8$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p99$1 ==> _b65 ==> BV32_SLE(0bv32, $ei_new.8$1);
    assert {:tag "guardNonNeg"} {:thread 2} p99$2 ==> _b65 ==> BV32_SLE(0bv32, $ei_new.8$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p99$1 ==> _b64 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.8$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p99$2 ==> _b64 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.8$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 616} p99$1 ==> true;
    v559$1 := (if p99$1 then $$d_common$212bv32$1 else v559$1);
    v559$2 := (if p99$2 then $$d_common$212bv32$2 else v559$2);
    v560$1 := (if p99$1 then $$d_common$213bv32$1 else v560$1);
    v560$2 := (if p99$2 then $$d_common$213bv32$2 else v560$2);
    v561$1 := (if p99$1 then $$d_common$214bv32$1 else v561$1);
    v561$2 := (if p99$2 then $$d_common$214bv32$2 else v561$2);
    v562$1 := (if p99$1 then $$d_common$215bv32$1 else v562$1);
    v562$2 := (if p99$2 then $$d_common$215bv32$2 else v562$2);
    v563$1 := (if p99$1 then BV32_SLT($ei_new.8$1, v562$1 ++ v561$1 ++ v560$1 ++ v559$1) else v563$1);
    v563$2 := (if p99$2 then BV32_SLT($ei_new.8$2, v562$2 ++ v561$2 ++ v560$2 ++ v559$2) else v563$2);
    p100$1 := false;
    p100$2 := false;
    p100$1 := (if p99$1 && v563$1 then v563$1 else p100$1);
    p100$2 := (if p99$2 && v563$2 then v563$2 else p100$2);
    p99$1 := (if p99$1 && !v563$1 then v563$1 else p99$1);
    p99$2 := (if p99$2 && !v563$2 then v563$2 else p99$2);
    call {:sourceloc} {:sourceloc_num 622} _LOG_READ_$$d_in2_pad_cumv_sel_all(p100$1, BV32_ADD(v139$1, $ei_new.8$1), $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.8$1)]);
    assume {:do_not_predicate} {:check_id "check_state_118"} {:captureState "check_state_118"} {:sourceloc} {:sourceloc_num 622} true;
    call {:check_id "check_state_118"} {:sourceloc} {:sourceloc_num 622} _CHECK_READ_$$d_in2_pad_cumv_sel_all(p100$2, BV32_ADD(v139$2, $ei_new.8$2), $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.8$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_sel_all"} true;
    v564$1 := (if p100$1 then $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.8$1)] else v564$1);
    v564$2 := (if p100$2 then $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.8$2)] else v564$2);
    call {:sourceloc} {:sourceloc_num 623} _LOG_READ_$$d_in2_sub_cumh_all(p100$1, BV32_ADD(v144$1, $ei_new.8$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.8$1)]);
    assume {:do_not_predicate} {:check_id "check_state_119"} {:captureState "check_state_119"} {:sourceloc} {:sourceloc_num 623} true;
    call {:check_id "check_state_119"} {:sourceloc} {:sourceloc_num 623} _CHECK_READ_$$d_in2_sub_cumh_all(p100$2, BV32_ADD(v144$2, $ei_new.8$2), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.8$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v565$1 := (if p100$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.8$1)] else v565$1);
    v565$2 := (if p100$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.8$2)] else v565$2);
    call {:sourceloc} {:sourceloc_num 624} _LOG_WRITE_$$d_in2_sub_cumh_all(p100$1, BV32_ADD(v144$1, $ei_new.8$1), FSUB32(v564$1, v565$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.8$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(p100$2, BV32_ADD(v144$2, $ei_new.8$2));
    assume {:do_not_predicate} {:check_id "check_state_120"} {:captureState "check_state_120"} {:sourceloc} {:sourceloc_num 624} true;
    call {:check_id "check_state_120"} {:sourceloc} {:sourceloc_num 624} _CHECK_WRITE_$$d_in2_sub_cumh_all(p100$2, BV32_ADD(v144$2, $ei_new.8$2), FSUB32(v564$2, v565$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_all"} true;
    $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.8$1)] := (if p100$1 then FSUB32(v564$1, v565$1) else $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.8$1)]);
    $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.8$2)] := (if p100$2 then FSUB32(v564$2, v565$2) else $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.8$2)]);
    $ei_new.8$1 := (if p100$1 then BV32_ADD($ei_new.8$1, 256bv32) else $ei_new.8$1);
    $ei_new.8$2 := (if p100$2 then BV32_ADD($ei_new.8$2, 256bv32) else $ei_new.8$2);
    p99$1 := (if p100$1 then true else p99$1);
    p99$2 := (if p100$2 then true else p99$2);
    goto $77.backedge, __partitioned_block_$77.tail_0;

  __partitioned_block_$77.tail_0:
    assume !p99$1 && !p99$2;
    goto __partitioned_block_$77.tail_1;

  __partitioned_block_$77.tail_1:
    call {:sourceloc_num 626} $bugle_barrier_duplicated_11(1bv1, 1bv1);
    $ei_new.9$1 := v101$1;
    $ei_new.9$2 := v101$2;
    p101$1 := true;
    p101$2 := true;
    assume {:captureState "loop_entry_state_34_0"} true;
    goto $80;

  $80:
    assume {:captureState "loop_head_state_34"} true;
    assert {:tag "accessBreak"} _b403 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p101$1 ==> _b79 ==> p101$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p101$2 ==> _b79 ==> p101$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b78 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.9$1, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) ==> p101$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b78 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.9$2, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) ==> p101$2;
    assert {:tag "loopBound"} {:thread 1} p101$1 ==> _b77 ==> BV32_UGE($ei_new.9$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p101$2 ==> _b77 ==> BV32_UGE($ei_new.9$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p101$1 ==> _b76 ==> BV32_ULE($ei_new.9$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p101$2 ==> _b76 ==> BV32_ULE($ei_new.9$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p101$1 ==> _b75 ==> BV32_SGE($ei_new.9$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p101$2 ==> _b75 ==> BV32_SGE($ei_new.9$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p101$1 ==> _b74 ==> BV32_SLE($ei_new.9$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p101$2 ==> _b74 ==> BV32_SLE($ei_new.9$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p101$1 ==> _b73 ==> BV32_SLE(0bv32, $ei_new.9$1);
    assert {:tag "guardNonNeg"} {:thread 2} p101$2 ==> _b73 ==> BV32_SLE(0bv32, $ei_new.9$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p101$1 ==> _b72 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.9$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p101$2 ==> _b72 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.9$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 627} p101$1 ==> true;
    v566$1 := (if p101$1 then $$d_common$204bv32$1 else v566$1);
    v566$2 := (if p101$2 then $$d_common$204bv32$2 else v566$2);
    v567$1 := (if p101$1 then $$d_common$205bv32$1 else v567$1);
    v567$2 := (if p101$2 then $$d_common$205bv32$2 else v567$2);
    v568$1 := (if p101$1 then $$d_common$206bv32$1 else v568$1);
    v568$2 := (if p101$2 then $$d_common$206bv32$2 else v568$2);
    v569$1 := (if p101$1 then $$d_common$207bv32$1 else v569$1);
    v569$2 := (if p101$2 then $$d_common$207bv32$2 else v569$2);
    v570$1 := (if p101$1 then BV32_SLT($ei_new.9$1, v569$1 ++ v568$1 ++ v567$1 ++ v566$1) else v570$1);
    v570$2 := (if p101$2 then BV32_SLT($ei_new.9$2, v569$2 ++ v568$2 ++ v567$2 ++ v566$2) else v570$2);
    p102$1 := false;
    p102$2 := false;
    p103$1 := false;
    p103$2 := false;
    p102$1 := (if p101$1 && v570$1 then v570$1 else p102$1);
    p102$2 := (if p101$2 && v570$2 then v570$2 else p102$2);
    p101$1 := (if p101$1 && !v570$1 then v570$1 else p101$1);
    p101$2 := (if p101$2 && !v570$2 then v570$2 else p101$2);
    $position.1$1, $sum.1$1 := (if p102$1 then $ei_new.9$1 else $position.1$1), (if p102$1 then 0bv32 else $sum.1$1);
    $position.1$2, $sum.1$2 := (if p102$2 then $ei_new.9$2 else $position.1$2), (if p102$2 then 0bv32 else $sum.1$2);
    p103$1 := (if p102$1 then true else p103$1);
    p103$2 := (if p102$2 then true else p103$2);
    assume {:captureState "loop_entry_state_35_0"} true;
    goto $82;

  $82:
    assume {:captureState "loop_head_state_35"} true;
    assert {:tag "accessBreak"} _b404 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert p103$1 ==> p101$1;
    assert p103$2 ==> p101$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p103$1 ==> _b359 ==> p103$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.9$1, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p103$2 ==> _b359 ==> p103$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.9$2, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b358 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.9$1, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) && BV32_SLT($position.1$1, BV32_ADD($ei_new.9$1, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0])) ==> p103$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b358 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.9$2, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) && BV32_SLT($position.1$2, BV32_ADD($ei_new.9$2, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0])) ==> p103$2;
    assert {:tag "loopBound"} {:thread 1} p103$1 ==> _b357 ==> BV32_UGE($position.1$1, $ei_new.9$1);
    assert {:tag "loopBound"} {:thread 2} p103$2 ==> _b357 ==> BV32_UGE($position.1$2, $ei_new.9$2);
    assert {:tag "loopBound"} {:thread 1} p103$1 ==> _b356 ==> BV32_ULE($position.1$1, $ei_new.9$1);
    assert {:tag "loopBound"} {:thread 2} p103$2 ==> _b356 ==> BV32_ULE($position.1$2, $ei_new.9$2);
    assert {:tag "loopBound"} {:thread 1} p103$1 ==> _b355 ==> BV32_SGE($position.1$1, $ei_new.9$1);
    assert {:tag "loopBound"} {:thread 2} p103$2 ==> _b355 ==> BV32_SGE($position.1$2, $ei_new.9$2);
    assert {:tag "loopBound"} {:thread 1} p103$1 ==> _b354 ==> BV32_SLE($position.1$1, $ei_new.9$1);
    assert {:tag "loopBound"} {:thread 2} p103$2 ==> _b354 ==> BV32_SLE($position.1$2, $ei_new.9$2);
    assert {:tag "guardNonNeg"} {:thread 1} p103$1 ==> _b353 ==> BV32_SLE(0bv32, $position.1$1);
    assert {:tag "guardNonNeg"} {:thread 2} p103$2 ==> _b353 ==> BV32_SLE(0bv32, $position.1$2);
    assert {:block_sourceloc} {:sourceloc_num 633} p103$1 ==> true;
    v571$1 := (if p103$1 then $$d_common$212bv32$1 else v571$1);
    v571$2 := (if p103$2 then $$d_common$212bv32$2 else v571$2);
    v572$1 := (if p103$1 then $$d_common$213bv32$1 else v572$1);
    v572$2 := (if p103$2 then $$d_common$213bv32$2 else v572$2);
    v573$1 := (if p103$1 then $$d_common$214bv32$1 else v573$1);
    v573$2 := (if p103$2 then $$d_common$214bv32$2 else v573$2);
    v574$1 := (if p103$1 then $$d_common$215bv32$1 else v574$1);
    v574$2 := (if p103$2 then $$d_common$215bv32$2 else v574$2);
    v575$1 := (if p103$1 then BV32_SLT($position.1$1, BV32_ADD($ei_new.9$1, v574$1 ++ v573$1 ++ v572$1 ++ v571$1)) else v575$1);
    v575$2 := (if p103$2 then BV32_SLT($position.1$2, BV32_ADD($ei_new.9$2, v574$2 ++ v573$2 ++ v572$2 ++ v571$2)) else v575$2);
    p104$1 := false;
    p104$2 := false;
    p104$1 := (if p103$1 && v575$1 then v575$1 else p104$1);
    p104$2 := (if p103$2 && v575$2 then v575$2 else p104$2);
    p103$1 := (if p103$1 && !v575$1 then v575$1 else p103$1);
    p103$2 := (if p103$2 && !v575$2 then v575$2 else p103$2);
    call {:sourceloc} {:sourceloc_num 639} _LOG_READ_$$d_in2_sub_cumh_all(p104$1, BV32_ADD(v144$1, $position.1$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.1$1)]);
    assume {:do_not_predicate} {:check_id "check_state_115"} {:captureState "check_state_115"} {:sourceloc} {:sourceloc_num 639} true;
    call {:check_id "check_state_115"} {:sourceloc} {:sourceloc_num 639} _CHECK_READ_$$d_in2_sub_cumh_all(p104$2, BV32_ADD(v144$2, $position.1$2), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.1$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v576$1 := (if p104$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.1$1)] else v576$1);
    v576$2 := (if p104$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.1$2)] else v576$2);
    call {:sourceloc} {:sourceloc_num 640} _LOG_WRITE_$$d_in2_sub_cumh_all(p104$1, BV32_ADD(v144$1, $position.1$1), FADD32(v576$1, $sum.1$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.1$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(p104$2, BV32_ADD(v144$2, $position.1$2));
    assume {:do_not_predicate} {:check_id "check_state_116"} {:captureState "check_state_116"} {:sourceloc} {:sourceloc_num 640} true;
    call {:check_id "check_state_116"} {:sourceloc} {:sourceloc_num 640} _CHECK_WRITE_$$d_in2_sub_cumh_all(p104$2, BV32_ADD(v144$2, $position.1$2), FADD32(v576$2, $sum.1$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_all"} true;
    $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.1$1)] := (if p104$1 then FADD32(v576$1, $sum.1$1) else $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.1$1)]);
    $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.1$2)] := (if p104$2 then FADD32(v576$2, $sum.1$2) else $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.1$2)]);
    call {:sourceloc} {:sourceloc_num 641} _LOG_READ_$$d_in2_sub_cumh_all(p104$1, BV32_ADD(v144$1, $position.1$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.1$1)]);
    assume {:do_not_predicate} {:check_id "check_state_117"} {:captureState "check_state_117"} {:sourceloc} {:sourceloc_num 641} true;
    call {:check_id "check_state_117"} {:sourceloc} {:sourceloc_num 641} _CHECK_READ_$$d_in2_sub_cumh_all(p104$2, BV32_ADD(v144$2, $position.1$2), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.1$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v577$1 := (if p104$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.1$1)] else v577$1);
    v577$2 := (if p104$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.1$2)] else v577$2);
    v578$1 := (if p104$1 then $$d_common$204bv32$1 else v578$1);
    v578$2 := (if p104$2 then $$d_common$204bv32$2 else v578$2);
    v579$1 := (if p104$1 then $$d_common$205bv32$1 else v579$1);
    v579$2 := (if p104$2 then $$d_common$205bv32$2 else v579$2);
    v580$1 := (if p104$1 then $$d_common$206bv32$1 else v580$1);
    v580$2 := (if p104$2 then $$d_common$206bv32$2 else v580$2);
    v581$1 := (if p104$1 then $$d_common$207bv32$1 else v581$1);
    v581$2 := (if p104$2 then $$d_common$207bv32$2 else v581$2);
    $position.1$1, $sum.1$1 := (if p104$1 then BV32_ADD($position.1$1, v581$1 ++ v580$1 ++ v579$1 ++ v578$1) else $position.1$1), (if p104$1 then v577$1 else $sum.1$1);
    $position.1$2, $sum.1$2 := (if p104$2 then BV32_ADD($position.1$2, v581$2 ++ v580$2 ++ v579$2 ++ v578$2) else $position.1$2), (if p104$2 then v577$2 else $sum.1$2);
    p103$1 := (if p104$1 then true else p103$1);
    p103$2 := (if p104$2 then true else p103$2);
    goto $82.backedge, $82.tail;

  $82.tail:
    assume !p103$1 && !p103$2;
    $ei_new.9$1 := (if p102$1 then BV32_ADD($ei_new.9$1, 256bv32) else $ei_new.9$1);
    $ei_new.9$2 := (if p102$2 then BV32_ADD($ei_new.9$2, 256bv32) else $ei_new.9$2);
    p101$1 := (if p102$1 then true else p101$1);
    p101$2 := (if p102$2 then true else p101$2);
    goto $80.backedge, __partitioned_block_$80.tail_0;

  __partitioned_block_$80.tail_0:
    assume !p101$1 && !p101$2;
    goto __partitioned_block_$80.tail_1;

  __partitioned_block_$80.tail_1:
    call {:sourceloc_num 649} $bugle_barrier_duplicated_12(1bv1, 1bv1);
    $ei_new.10$1 := v101$1;
    $ei_new.10$2 := v101$2;
    p105$1 := true;
    p105$2 := true;
    assume {:captureState "loop_entry_state_33_0"} true;
    goto $87;

  $87:
    assume {:captureState "loop_head_state_33"} true;
    assert {:tag "accessBreak"} _b405 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce57), $d_common.coerce57), $d_common.coerce57), $d_common.coerce57);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p105$1 ==> _b87 ==> p105$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p105$2 ==> _b87 ==> p105$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b86 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.10$1, $d_common.coerce57[32:24] ++ $d_common.coerce57[24:16] ++ $d_common.coerce57[16:8] ++ $d_common.coerce57[8:0]) ==> p105$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b86 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.10$2, $d_common.coerce57[32:24] ++ $d_common.coerce57[24:16] ++ $d_common.coerce57[16:8] ++ $d_common.coerce57[8:0]) ==> p105$2;
    assert {:tag "loopBound"} {:thread 1} p105$1 ==> _b85 ==> BV32_UGE($ei_new.10$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p105$2 ==> _b85 ==> BV32_UGE($ei_new.10$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p105$1 ==> _b84 ==> BV32_ULE($ei_new.10$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p105$2 ==> _b84 ==> BV32_ULE($ei_new.10$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p105$1 ==> _b83 ==> BV32_SGE($ei_new.10$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p105$2 ==> _b83 ==> BV32_SGE($ei_new.10$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p105$1 ==> _b82 ==> BV32_SLE($ei_new.10$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p105$2 ==> _b82 ==> BV32_SLE($ei_new.10$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p105$1 ==> _b81 ==> BV32_SLE(0bv32, $ei_new.10$1);
    assert {:tag "guardNonNeg"} {:thread 2} p105$2 ==> _b81 ==> BV32_SLE(0bv32, $ei_new.10$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p105$1 ==> _b80 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.10$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p105$2 ==> _b80 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.10$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 650} p105$1 ==> true;
    v582$1 := (if p105$1 then $$d_common$228bv32$1 else v582$1);
    v582$2 := (if p105$2 then $$d_common$228bv32$2 else v582$2);
    v583$1 := (if p105$1 then $$d_common$229bv32$1 else v583$1);
    v583$2 := (if p105$2 then $$d_common$229bv32$2 else v583$2);
    v584$1 := (if p105$1 then $$d_common$230bv32$1 else v584$1);
    v584$2 := (if p105$2 then $$d_common$230bv32$2 else v584$2);
    v585$1 := (if p105$1 then $$d_common$231bv32$1 else v585$1);
    v585$2 := (if p105$2 then $$d_common$231bv32$2 else v585$2);
    v586$1 := (if p105$1 then BV32_SLT($ei_new.10$1, v585$1 ++ v584$1 ++ v583$1 ++ v582$1) else v586$1);
    v586$2 := (if p105$2 then BV32_SLT($ei_new.10$2, v585$2 ++ v584$2 ++ v583$2 ++ v582$2) else v586$2);
    p106$1 := false;
    p106$2 := false;
    p107$1 := false;
    p107$2 := false;
    p108$1 := false;
    p108$2 := false;
    p106$1 := (if p105$1 && v586$1 then v586$1 else p106$1);
    p106$2 := (if p105$2 && v586$2 then v586$2 else p106$2);
    p105$1 := (if p105$1 && !v586$1 then v586$1 else p105$1);
    p105$2 := (if p105$2 && !v586$2 then v586$2 else p105$2);
    v587$1 := (if p106$1 then $$d_common$220bv32$1 else v587$1);
    v587$2 := (if p106$2 then $$d_common$220bv32$2 else v587$2);
    v588$1 := (if p106$1 then $$d_common$221bv32$1 else v588$1);
    v588$2 := (if p106$2 then $$d_common$221bv32$2 else v588$2);
    v589$1 := (if p106$1 then $$d_common$222bv32$1 else v589$1);
    v589$2 := (if p106$2 then $$d_common$222bv32$2 else v589$2);
    v590$1 := (if p106$1 then $$d_common$223bv32$1 else v590$1);
    v590$2 := (if p106$2 then $$d_common$223bv32$2 else v590$2);
    v591$1 := (if p106$1 then $$d_common$220bv32$1 else v591$1);
    v591$2 := (if p106$2 then $$d_common$220bv32$2 else v591$2);
    v592$1 := (if p106$1 then $$d_common$221bv32$1 else v592$1);
    v592$2 := (if p106$2 then $$d_common$221bv32$2 else v592$2);
    v593$1 := (if p106$1 then $$d_common$222bv32$1 else v593$1);
    v593$2 := (if p106$2 then $$d_common$222bv32$2 else v593$2);
    v594$1 := (if p106$1 then $$d_common$223bv32$1 else v594$1);
    v594$2 := (if p106$2 then $$d_common$223bv32$2 else v594$2);
    v595$1 := (if p106$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.10$1, 1bv32), v594$1 ++ v593$1 ++ v592$1 ++ v591$1), 1bv32), 1bv32) else v595$1);
    v595$2 := (if p106$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.10$2, 1bv32), v594$2 ++ v593$2 ++ v592$2 ++ v591$2), 1bv32), 1bv32) else v595$2);
    v596$1 := (if p106$1 then $$d_common$220bv32$1 else v596$1);
    v596$2 := (if p106$2 then $$d_common$220bv32$2 else v596$2);
    v597$1 := (if p106$1 then $$d_common$221bv32$1 else v597$1);
    v597$2 := (if p106$2 then $$d_common$221bv32$2 else v597$2);
    v598$1 := (if p106$1 then $$d_common$222bv32$1 else v598$1);
    v598$2 := (if p106$2 then $$d_common$222bv32$2 else v598$2);
    v599$1 := (if p106$1 then $$d_common$223bv32$1 else v599$1);
    v599$2 := (if p106$2 then $$d_common$223bv32$2 else v599$2);
    v600$1 := (if p106$1 then BV32_SREM(BV32_ADD($ei_new.10$1, 1bv32), v599$1 ++ v598$1 ++ v597$1 ++ v596$1) == 0bv32 else v600$1);
    v600$2 := (if p106$2 then BV32_SREM(BV32_ADD($ei_new.10$2, 1bv32), v599$2 ++ v598$2 ++ v597$2 ++ v596$2) == 0bv32 else v600$2);
    p108$1 := (if p106$1 && v600$1 then v600$1 else p108$1);
    p108$2 := (if p106$2 && v600$2 then v600$2 else p108$2);
    p107$1 := (if p106$1 && !v600$1 then !v600$1 else p107$1);
    p107$2 := (if p106$2 && !v600$2 then !v600$2 else p107$2);
    $row.6$1, $col.6$1 := (if p107$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.10$1, 1bv32), v590$1 ++ v589$1 ++ v588$1 ++ v587$1), 1bv32) else $row.6$1), (if p107$1 then v595$1 else $col.6$1);
    $row.6$2, $col.6$2 := (if p107$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.10$2, 1bv32), v590$2 ++ v589$2 ++ v588$2 ++ v587$2), 1bv32) else $row.6$2), (if p107$2 then v595$2 else $col.6$2);
    v601$1 := (if p108$1 then $$d_common$220bv32$1 else v601$1);
    v601$2 := (if p108$2 then $$d_common$220bv32$2 else v601$2);
    v602$1 := (if p108$1 then $$d_common$221bv32$1 else v602$1);
    v602$2 := (if p108$2 then $$d_common$221bv32$2 else v602$2);
    v603$1 := (if p108$1 then $$d_common$222bv32$1 else v603$1);
    v603$2 := (if p108$2 then $$d_common$222bv32$2 else v603$2);
    v604$1 := (if p108$1 then $$d_common$223bv32$1 else v604$1);
    v604$2 := (if p108$2 then $$d_common$223bv32$2 else v604$2);
    $row.6$1, $col.6$1 := (if p108$1 then BV32_SUB(v604$1 ++ v603$1 ++ v602$1 ++ v601$1, 1bv32) else $row.6$1), (if p108$1 then BV32_SUB(v595$1, 1bv32) else $col.6$1);
    $row.6$2, $col.6$2 := (if p108$2 then BV32_SUB(v604$2 ++ v603$2 ++ v602$2 ++ v601$2, 1bv32) else $row.6$2), (if p108$2 then BV32_SUB(v595$2, 1bv32) else $col.6$2);
    v605$1 := (if p106$1 then $$d_common$236bv32$1 else v605$1);
    v605$2 := (if p106$2 then $$d_common$236bv32$2 else v605$2);
    v606$1 := (if p106$1 then $$d_common$237bv32$1 else v606$1);
    v606$2 := (if p106$2 then $$d_common$237bv32$2 else v606$2);
    v607$1 := (if p106$1 then $$d_common$238bv32$1 else v607$1);
    v607$2 := (if p106$2 then $$d_common$238bv32$2 else v607$2);
    v608$1 := (if p106$1 then $$d_common$239bv32$1 else v608$1);
    v608$2 := (if p106$2 then $$d_common$239bv32$2 else v608$2);
    v609$1 := (if p106$1 then $$d_common$244bv32$1 else v609$1);
    v609$2 := (if p106$2 then $$d_common$244bv32$2 else v609$2);
    v610$1 := (if p106$1 then $$d_common$245bv32$1 else v610$1);
    v610$2 := (if p106$2 then $$d_common$245bv32$2 else v610$2);
    v611$1 := (if p106$1 then $$d_common$246bv32$1 else v611$1);
    v611$2 := (if p106$2 then $$d_common$246bv32$2 else v611$2);
    v612$1 := (if p106$1 then $$d_common$247bv32$1 else v612$1);
    v612$2 := (if p106$2 then $$d_common$247bv32$2 else v612$2);
    v613$1 := (if p106$1 then $$d_common$204bv32$1 else v613$1);
    v613$2 := (if p106$2 then $$d_common$204bv32$2 else v613$2);
    v614$1 := (if p106$1 then $$d_common$205bv32$1 else v614$1);
    v614$2 := (if p106$2 then $$d_common$205bv32$2 else v614$2);
    v615$1 := (if p106$1 then $$d_common$206bv32$1 else v615$1);
    v615$2 := (if p106$2 then $$d_common$206bv32$2 else v615$2);
    v616$1 := (if p106$1 then $$d_common$207bv32$1 else v616$1);
    v616$2 := (if p106$2 then $$d_common$207bv32$2 else v616$2);
    call {:sourceloc} {:sourceloc_num 686} _LOG_READ_$$d_in2_sub_cumh_all(p106$1, BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.6$1, v612$1 ++ v611$1 ++ v610$1 ++ v609$1), 1bv32), v616$1 ++ v615$1 ++ v614$1 ++ v613$1), BV32_SUB(BV32_ADD($row.6$1, v608$1 ++ v607$1 ++ v606$1 ++ v605$1), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.6$1, v612$1 ++ v611$1 ++ v610$1 ++ v609$1), 1bv32), v616$1 ++ v615$1 ++ v614$1 ++ v613$1), BV32_SUB(BV32_ADD($row.6$1, v608$1 ++ v607$1 ++ v606$1 ++ v605$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_113"} {:captureState "check_state_113"} {:sourceloc} {:sourceloc_num 686} true;
    call {:check_id "check_state_113"} {:sourceloc} {:sourceloc_num 686} _CHECK_READ_$$d_in2_sub_cumh_all(p106$2, BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.6$2, v612$2 ++ v611$2 ++ v610$2 ++ v609$2), 1bv32), v616$2 ++ v615$2 ++ v614$2 ++ v613$2), BV32_SUB(BV32_ADD($row.6$2, v608$2 ++ v607$2 ++ v606$2 ++ v605$2), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.6$2, v612$2 ++ v611$2 ++ v610$2 ++ v609$2), 1bv32), v616$2 ++ v615$2 ++ v614$2 ++ v613$2), BV32_SUB(BV32_ADD($row.6$2, v608$2 ++ v607$2 ++ v606$2 ++ v605$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v617$1 := (if p106$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.6$1, v612$1 ++ v611$1 ++ v610$1 ++ v609$1), 1bv32), v616$1 ++ v615$1 ++ v614$1 ++ v613$1), BV32_SUB(BV32_ADD($row.6$1, v608$1 ++ v607$1 ++ v606$1 ++ v605$1), 1bv32)))] else v617$1);
    v617$2 := (if p106$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.6$2, v612$2 ++ v611$2 ++ v610$2 ++ v609$2), 1bv32), v616$2 ++ v615$2 ++ v614$2 ++ v613$2), BV32_SUB(BV32_ADD($row.6$2, v608$2 ++ v607$2 ++ v606$2 ++ v605$2), 1bv32)))] else v617$2);
    call {:sourceloc} {:sourceloc_num 687} _LOG_WRITE_$$d_in2_sub_cumh_sel_all(p106$1, BV32_ADD(v149$1, $ei_new.10$1), v617$1, $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.10$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all(p106$2, BV32_ADD(v149$2, $ei_new.10$2));
    assume {:do_not_predicate} {:check_id "check_state_114"} {:captureState "check_state_114"} {:sourceloc} {:sourceloc_num 687} true;
    call {:check_id "check_state_114"} {:sourceloc} {:sourceloc_num 687} _CHECK_WRITE_$$d_in2_sub_cumh_sel_all(p106$2, BV32_ADD(v149$2, $ei_new.10$2), v617$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_sel_all"} true;
    $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.10$1)] := (if p106$1 then v617$1 else $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.10$1)]);
    $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.10$2)] := (if p106$2 then v617$2 else $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.10$2)]);
    $ei_new.10$1 := (if p106$1 then BV32_ADD($ei_new.10$1, 256bv32) else $ei_new.10$1);
    $ei_new.10$2 := (if p106$2 then BV32_ADD($ei_new.10$2, 256bv32) else $ei_new.10$2);
    p105$1 := (if p106$1 then true else p105$1);
    p105$2 := (if p106$2 then true else p105$2);
    goto $87.backedge, __partitioned_block_$87.tail_0;

  __partitioned_block_$87.tail_0:
    assume !p105$1 && !p105$2;
    goto __partitioned_block_$87.tail_1;

  __partitioned_block_$87.tail_1:
    call {:sourceloc_num 689} $bugle_barrier_duplicated_13(1bv1, 1bv1);
    $ei_new.11$1 := v101$1;
    $ei_new.11$2 := v101$2;
    p109$1 := true;
    p109$2 := true;
    assume {:captureState "loop_entry_state_32_0"} true;
    goto $92;

  $92:
    assume {:captureState "loop_head_state_32"} true;
    assert {:tag "accessBreak"} _b406 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce69), $d_common.coerce69), $d_common.coerce69), $d_common.coerce69);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p109$1 ==> _b95 ==> p109$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p109$2 ==> _b95 ==> p109$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b94 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.11$1, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p109$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b94 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.11$2, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p109$2;
    assert {:tag "loopBound"} {:thread 1} p109$1 ==> _b93 ==> BV32_UGE($ei_new.11$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p109$2 ==> _b93 ==> BV32_UGE($ei_new.11$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p109$1 ==> _b92 ==> BV32_ULE($ei_new.11$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p109$2 ==> _b92 ==> BV32_ULE($ei_new.11$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p109$1 ==> _b91 ==> BV32_SGE($ei_new.11$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p109$2 ==> _b91 ==> BV32_SGE($ei_new.11$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p109$1 ==> _b90 ==> BV32_SLE($ei_new.11$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p109$2 ==> _b90 ==> BV32_SLE($ei_new.11$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p109$1 ==> _b89 ==> BV32_SLE(0bv32, $ei_new.11$1);
    assert {:tag "guardNonNeg"} {:thread 2} p109$2 ==> _b89 ==> BV32_SLE(0bv32, $ei_new.11$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p109$1 ==> _b88 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.11$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p109$2 ==> _b88 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.11$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 690} p109$1 ==> true;
    v618$1 := (if p109$1 then $$d_common$276bv32$1 else v618$1);
    v618$2 := (if p109$2 then $$d_common$276bv32$2 else v618$2);
    v619$1 := (if p109$1 then $$d_common$277bv32$1 else v619$1);
    v619$2 := (if p109$2 then $$d_common$277bv32$2 else v619$2);
    v620$1 := (if p109$1 then $$d_common$278bv32$1 else v620$1);
    v620$2 := (if p109$2 then $$d_common$278bv32$2 else v620$2);
    v621$1 := (if p109$1 then $$d_common$279bv32$1 else v621$1);
    v621$2 := (if p109$2 then $$d_common$279bv32$2 else v621$2);
    v622$1 := (if p109$1 then BV32_SLT($ei_new.11$1, v621$1 ++ v620$1 ++ v619$1 ++ v618$1) else v622$1);
    v622$2 := (if p109$2 then BV32_SLT($ei_new.11$2, v621$2 ++ v620$2 ++ v619$2 ++ v618$2) else v622$2);
    p110$1 := false;
    p110$2 := false;
    p111$1 := false;
    p111$2 := false;
    p112$1 := false;
    p112$2 := false;
    p110$1 := (if p109$1 && v622$1 then v622$1 else p110$1);
    p110$2 := (if p109$2 && v622$2 then v622$2 else p110$2);
    p109$1 := (if p109$1 && !v622$1 then v622$1 else p109$1);
    p109$2 := (if p109$2 && !v622$2 then v622$2 else p109$2);
    v623$1 := (if p110$1 then $$d_common$268bv32$1 else v623$1);
    v623$2 := (if p110$2 then $$d_common$268bv32$2 else v623$2);
    v624$1 := (if p110$1 then $$d_common$269bv32$1 else v624$1);
    v624$2 := (if p110$2 then $$d_common$269bv32$2 else v624$2);
    v625$1 := (if p110$1 then $$d_common$270bv32$1 else v625$1);
    v625$2 := (if p110$2 then $$d_common$270bv32$2 else v625$2);
    v626$1 := (if p110$1 then $$d_common$271bv32$1 else v626$1);
    v626$2 := (if p110$2 then $$d_common$271bv32$2 else v626$2);
    v627$1 := (if p110$1 then $$d_common$268bv32$1 else v627$1);
    v627$2 := (if p110$2 then $$d_common$268bv32$2 else v627$2);
    v628$1 := (if p110$1 then $$d_common$269bv32$1 else v628$1);
    v628$2 := (if p110$2 then $$d_common$269bv32$2 else v628$2);
    v629$1 := (if p110$1 then $$d_common$270bv32$1 else v629$1);
    v629$2 := (if p110$2 then $$d_common$270bv32$2 else v629$2);
    v630$1 := (if p110$1 then $$d_common$271bv32$1 else v630$1);
    v630$2 := (if p110$2 then $$d_common$271bv32$2 else v630$2);
    v631$1 := (if p110$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.11$1, 1bv32), v630$1 ++ v629$1 ++ v628$1 ++ v627$1), 1bv32), 1bv32) else v631$1);
    v631$2 := (if p110$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.11$2, 1bv32), v630$2 ++ v629$2 ++ v628$2 ++ v627$2), 1bv32), 1bv32) else v631$2);
    v632$1 := (if p110$1 then $$d_common$268bv32$1 else v632$1);
    v632$2 := (if p110$2 then $$d_common$268bv32$2 else v632$2);
    v633$1 := (if p110$1 then $$d_common$269bv32$1 else v633$1);
    v633$2 := (if p110$2 then $$d_common$269bv32$2 else v633$2);
    v634$1 := (if p110$1 then $$d_common$270bv32$1 else v634$1);
    v634$2 := (if p110$2 then $$d_common$270bv32$2 else v634$2);
    v635$1 := (if p110$1 then $$d_common$271bv32$1 else v635$1);
    v635$2 := (if p110$2 then $$d_common$271bv32$2 else v635$2);
    v636$1 := (if p110$1 then BV32_SREM(BV32_ADD($ei_new.11$1, 1bv32), v635$1 ++ v634$1 ++ v633$1 ++ v632$1) == 0bv32 else v636$1);
    v636$2 := (if p110$2 then BV32_SREM(BV32_ADD($ei_new.11$2, 1bv32), v635$2 ++ v634$2 ++ v633$2 ++ v632$2) == 0bv32 else v636$2);
    p112$1 := (if p110$1 && v636$1 then v636$1 else p112$1);
    p112$2 := (if p110$2 && v636$2 then v636$2 else p112$2);
    p111$1 := (if p110$1 && !v636$1 then !v636$1 else p111$1);
    p111$2 := (if p110$2 && !v636$2 then !v636$2 else p111$2);
    $row.7$1, $col.7$1 := (if p111$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.11$1, 1bv32), v626$1 ++ v625$1 ++ v624$1 ++ v623$1), 1bv32) else $row.7$1), (if p111$1 then v631$1 else $col.7$1);
    $row.7$2, $col.7$2 := (if p111$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.11$2, 1bv32), v626$2 ++ v625$2 ++ v624$2 ++ v623$2), 1bv32) else $row.7$2), (if p111$2 then v631$2 else $col.7$2);
    v637$1 := (if p112$1 then $$d_common$268bv32$1 else v637$1);
    v637$2 := (if p112$2 then $$d_common$268bv32$2 else v637$2);
    v638$1 := (if p112$1 then $$d_common$269bv32$1 else v638$1);
    v638$2 := (if p112$2 then $$d_common$269bv32$2 else v638$2);
    v639$1 := (if p112$1 then $$d_common$270bv32$1 else v639$1);
    v639$2 := (if p112$2 then $$d_common$270bv32$2 else v639$2);
    v640$1 := (if p112$1 then $$d_common$271bv32$1 else v640$1);
    v640$2 := (if p112$2 then $$d_common$271bv32$2 else v640$2);
    $row.7$1, $col.7$1 := (if p112$1 then BV32_SUB(v640$1 ++ v639$1 ++ v638$1 ++ v637$1, 1bv32) else $row.7$1), (if p112$1 then BV32_SUB(v631$1, 1bv32) else $col.7$1);
    $row.7$2, $col.7$2 := (if p112$2 then BV32_SUB(v640$2 ++ v639$2 ++ v638$2 ++ v637$2, 1bv32) else $row.7$2), (if p112$2 then BV32_SUB(v631$2, 1bv32) else $col.7$2);
    v641$1 := (if p110$1 then $$d_common$252bv32$1 else v641$1);
    v641$2 := (if p110$2 then $$d_common$252bv32$2 else v641$2);
    v642$1 := (if p110$1 then $$d_common$253bv32$1 else v642$1);
    v642$2 := (if p110$2 then $$d_common$253bv32$2 else v642$2);
    v643$1 := (if p110$1 then $$d_common$254bv32$1 else v643$1);
    v643$2 := (if p110$2 then $$d_common$254bv32$2 else v643$2);
    v644$1 := (if p110$1 then $$d_common$255bv32$1 else v644$1);
    v644$2 := (if p110$2 then $$d_common$255bv32$2 else v644$2);
    v645$1 := (if p110$1 then $$d_common$260bv32$1 else v645$1);
    v645$2 := (if p110$2 then $$d_common$260bv32$2 else v645$2);
    v646$1 := (if p110$1 then $$d_common$261bv32$1 else v646$1);
    v646$2 := (if p110$2 then $$d_common$261bv32$2 else v646$2);
    v647$1 := (if p110$1 then $$d_common$262bv32$1 else v647$1);
    v647$2 := (if p110$2 then $$d_common$262bv32$2 else v647$2);
    v648$1 := (if p110$1 then $$d_common$263bv32$1 else v648$1);
    v648$2 := (if p110$2 then $$d_common$263bv32$2 else v648$2);
    v649$1 := (if p110$1 then $$d_common$204bv32$1 else v649$1);
    v649$2 := (if p110$2 then $$d_common$204bv32$2 else v649$2);
    v650$1 := (if p110$1 then $$d_common$205bv32$1 else v650$1);
    v650$2 := (if p110$2 then $$d_common$205bv32$2 else v650$2);
    v651$1 := (if p110$1 then $$d_common$206bv32$1 else v651$1);
    v651$2 := (if p110$2 then $$d_common$206bv32$2 else v651$2);
    v652$1 := (if p110$1 then $$d_common$207bv32$1 else v652$1);
    v652$2 := (if p110$2 then $$d_common$207bv32$2 else v652$2);
    call {:sourceloc} {:sourceloc_num 726} _LOG_READ_$$d_in2_sub_cumh_all(p110$1, BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.7$1, v648$1 ++ v647$1 ++ v646$1 ++ v645$1), 1bv32), v652$1 ++ v651$1 ++ v650$1 ++ v649$1), BV32_SUB(BV32_ADD($row.7$1, v644$1 ++ v643$1 ++ v642$1 ++ v641$1), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.7$1, v648$1 ++ v647$1 ++ v646$1 ++ v645$1), 1bv32), v652$1 ++ v651$1 ++ v650$1 ++ v649$1), BV32_SUB(BV32_ADD($row.7$1, v644$1 ++ v643$1 ++ v642$1 ++ v641$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_111"} {:captureState "check_state_111"} {:sourceloc} {:sourceloc_num 726} true;
    call {:check_id "check_state_111"} {:sourceloc} {:sourceloc_num 726} _CHECK_READ_$$d_in2_sub_cumh_all(p110$2, BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.7$2, v648$2 ++ v647$2 ++ v646$2 ++ v645$2), 1bv32), v652$2 ++ v651$2 ++ v650$2 ++ v649$2), BV32_SUB(BV32_ADD($row.7$2, v644$2 ++ v643$2 ++ v642$2 ++ v641$2), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.7$2, v648$2 ++ v647$2 ++ v646$2 ++ v645$2), 1bv32), v652$2 ++ v651$2 ++ v650$2 ++ v649$2), BV32_SUB(BV32_ADD($row.7$2, v644$2 ++ v643$2 ++ v642$2 ++ v641$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v653$1 := (if p110$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.7$1, v648$1 ++ v647$1 ++ v646$1 ++ v645$1), 1bv32), v652$1 ++ v651$1 ++ v650$1 ++ v649$1), BV32_SUB(BV32_ADD($row.7$1, v644$1 ++ v643$1 ++ v642$1 ++ v641$1), 1bv32)))] else v653$1);
    v653$2 := (if p110$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.7$2, v648$2 ++ v647$2 ++ v646$2 ++ v645$2), 1bv32), v652$2 ++ v651$2 ++ v650$2 ++ v649$2), BV32_SUB(BV32_ADD($row.7$2, v644$2 ++ v643$2 ++ v642$2 ++ v641$2), 1bv32)))] else v653$2);
    call {:sourceloc} {:sourceloc_num 727} _LOG_WRITE_$$d_in2_sub2_all(p110$1, BV32_ADD(v154$1, $ei_new.11$1), v653$1, $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.11$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all(p110$2, BV32_ADD(v154$2, $ei_new.11$2));
    assume {:do_not_predicate} {:check_id "check_state_112"} {:captureState "check_state_112"} {:sourceloc} {:sourceloc_num 727} true;
    call {:check_id "check_state_112"} {:sourceloc} {:sourceloc_num 727} _CHECK_WRITE_$$d_in2_sub2_all(p110$2, BV32_ADD(v154$2, $ei_new.11$2), v653$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub2_all"} true;
    $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.11$1)] := (if p110$1 then v653$1 else $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.11$1)]);
    $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.11$2)] := (if p110$2 then v653$2 else $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.11$2)]);
    $ei_new.11$1 := (if p110$1 then BV32_ADD($ei_new.11$1, 256bv32) else $ei_new.11$1);
    $ei_new.11$2 := (if p110$2 then BV32_ADD($ei_new.11$2, 256bv32) else $ei_new.11$2);
    p109$1 := (if p110$1 then true else p109$1);
    p109$2 := (if p110$2 then true else p109$2);
    goto $92.backedge, __partitioned_block_$92.tail_0;

  __partitioned_block_$92.tail_0:
    assume !p109$1 && !p109$2;
    goto __partitioned_block_$92.tail_1;

  __partitioned_block_$92.tail_1:
    call {:sourceloc_num 729} $bugle_barrier_duplicated_14(1bv1, 1bv1);
    $ei_new.12$1 := v101$1;
    $ei_new.12$2 := v101$2;
    p113$1 := true;
    p113$2 := true;
    assume {:captureState "loop_entry_state_31_0"} true;
    goto $97;

  $97:
    assume {:captureState "loop_head_state_31"} true;
    assert {:tag "accessBreak"} _b409 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce69), $d_common.coerce69), $d_common.coerce69), $d_common.coerce69);
    assert {:tag "accessBreak"} _b408 ==> _READ_HAS_OCCURRED_$$d_in2_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce69), $d_common.coerce69), $d_common.coerce69), $d_common.coerce69);
    assert {:tag "accessBreak"} _b407 ==> _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce57), $d_common.coerce57), $d_common.coerce57), $d_common.coerce57);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p113$1 ==> _b103 ==> p113$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p113$2 ==> _b103 ==> p113$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b102 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.12$1, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p113$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b102 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.12$2, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p113$2;
    assert {:tag "loopBound"} {:thread 1} p113$1 ==> _b101 ==> BV32_UGE($ei_new.12$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p113$2 ==> _b101 ==> BV32_UGE($ei_new.12$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p113$1 ==> _b100 ==> BV32_ULE($ei_new.12$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p113$2 ==> _b100 ==> BV32_ULE($ei_new.12$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p113$1 ==> _b99 ==> BV32_SGE($ei_new.12$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p113$2 ==> _b99 ==> BV32_SGE($ei_new.12$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p113$1 ==> _b98 ==> BV32_SLE($ei_new.12$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p113$2 ==> _b98 ==> BV32_SLE($ei_new.12$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p113$1 ==> _b97 ==> BV32_SLE(0bv32, $ei_new.12$1);
    assert {:tag "guardNonNeg"} {:thread 2} p113$2 ==> _b97 ==> BV32_SLE(0bv32, $ei_new.12$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p113$1 ==> _b96 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.12$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p113$2 ==> _b96 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.12$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 730} p113$1 ==> true;
    v654$1 := (if p113$1 then $$d_common$276bv32$1 else v654$1);
    v654$2 := (if p113$2 then $$d_common$276bv32$2 else v654$2);
    v655$1 := (if p113$1 then $$d_common$277bv32$1 else v655$1);
    v655$2 := (if p113$2 then $$d_common$277bv32$2 else v655$2);
    v656$1 := (if p113$1 then $$d_common$278bv32$1 else v656$1);
    v656$2 := (if p113$2 then $$d_common$278bv32$2 else v656$2);
    v657$1 := (if p113$1 then $$d_common$279bv32$1 else v657$1);
    v657$2 := (if p113$2 then $$d_common$279bv32$2 else v657$2);
    v658$1 := (if p113$1 then BV32_SLT($ei_new.12$1, v657$1 ++ v656$1 ++ v655$1 ++ v654$1) else v658$1);
    v658$2 := (if p113$2 then BV32_SLT($ei_new.12$2, v657$2 ++ v656$2 ++ v655$2 ++ v654$2) else v658$2);
    p114$1 := false;
    p114$2 := false;
    p114$1 := (if p113$1 && v658$1 then v658$1 else p114$1);
    p114$2 := (if p113$2 && v658$2 then v658$2 else p114$2);
    p113$1 := (if p113$1 && !v658$1 then v658$1 else p113$1);
    p113$2 := (if p113$2 && !v658$2 then v658$2 else p113$2);
    call {:sourceloc} {:sourceloc_num 736} _LOG_READ_$$d_in2_sub_cumh_sel_all(p114$1, BV32_ADD(v149$1, $ei_new.12$1), $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.12$1)]);
    assume {:do_not_predicate} {:check_id "check_state_108"} {:captureState "check_state_108"} {:sourceloc} {:sourceloc_num 736} true;
    call {:check_id "check_state_108"} {:sourceloc} {:sourceloc_num 736} _CHECK_READ_$$d_in2_sub_cumh_sel_all(p114$2, BV32_ADD(v149$2, $ei_new.12$2), $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.12$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_sel_all"} true;
    v659$1 := (if p114$1 then $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.12$1)] else v659$1);
    v659$2 := (if p114$2 then $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.12$2)] else v659$2);
    call {:sourceloc} {:sourceloc_num 737} _LOG_READ_$$d_in2_sub2_all(p114$1, BV32_ADD(v154$1, $ei_new.12$1), $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.12$1)]);
    assume {:do_not_predicate} {:check_id "check_state_109"} {:captureState "check_state_109"} {:sourceloc} {:sourceloc_num 737} true;
    call {:check_id "check_state_109"} {:sourceloc} {:sourceloc_num 737} _CHECK_READ_$$d_in2_sub2_all(p114$2, BV32_ADD(v154$2, $ei_new.12$2), $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.12$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub2_all"} true;
    v660$1 := (if p114$1 then $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.12$1)] else v660$1);
    v660$2 := (if p114$2 then $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.12$2)] else v660$2);
    call {:sourceloc} {:sourceloc_num 738} _LOG_WRITE_$$d_in2_sub2_all(p114$1, BV32_ADD(v154$1, $ei_new.12$1), FSUB32(v659$1, v660$1), $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.12$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all(p114$2, BV32_ADD(v154$2, $ei_new.12$2));
    assume {:do_not_predicate} {:check_id "check_state_110"} {:captureState "check_state_110"} {:sourceloc} {:sourceloc_num 738} true;
    call {:check_id "check_state_110"} {:sourceloc} {:sourceloc_num 738} _CHECK_WRITE_$$d_in2_sub2_all(p114$2, BV32_ADD(v154$2, $ei_new.12$2), FSUB32(v659$2, v660$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub2_all"} true;
    $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.12$1)] := (if p114$1 then FSUB32(v659$1, v660$1) else $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.12$1)]);
    $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.12$2)] := (if p114$2 then FSUB32(v659$2, v660$2) else $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.12$2)]);
    $ei_new.12$1 := (if p114$1 then BV32_ADD($ei_new.12$1, 256bv32) else $ei_new.12$1);
    $ei_new.12$2 := (if p114$2 then BV32_ADD($ei_new.12$2, 256bv32) else $ei_new.12$2);
    p113$1 := (if p114$1 then true else p113$1);
    p113$2 := (if p114$2 then true else p113$2);
    goto $97.backedge, __partitioned_block_$97.tail_0;

  __partitioned_block_$97.tail_0:
    assume !p113$1 && !p113$2;
    goto __partitioned_block_$97.tail_1;

  __partitioned_block_$97.tail_1:
    call {:sourceloc_num 740} $bugle_barrier_duplicated_15(1bv1, 1bv1);
    $ei_new.13$1 := v101$1;
    $ei_new.13$2 := v101$2;
    p115$1 := true;
    p115$2 := true;
    assume {:captureState "loop_entry_state_30_0"} true;
    goto $100;

  $100:
    assume {:captureState "loop_head_state_30"} true;
    assert {:tag "accessBreak"} _b411 ==> _WRITE_HAS_OCCURRED_$$d_in2_sqr_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce73), $d_common.coerce73), $d_common.coerce73), $d_common.coerce73);
    assert {:tag "accessBreak"} _b410 ==> _READ_HAS_OCCURRED_$$d_in2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce25), $d_common.coerce25), $d_common.coerce25), $d_common.coerce25);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p115$1 ==> _b111 ==> p115$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p115$2 ==> _b111 ==> p115$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b110 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.13$1, $d_common.coerce73[32:24] ++ $d_common.coerce73[24:16] ++ $d_common.coerce73[16:8] ++ $d_common.coerce73[8:0]) ==> p115$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b110 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.13$2, $d_common.coerce73[32:24] ++ $d_common.coerce73[24:16] ++ $d_common.coerce73[16:8] ++ $d_common.coerce73[8:0]) ==> p115$2;
    assert {:tag "loopBound"} {:thread 1} p115$1 ==> _b109 ==> BV32_UGE($ei_new.13$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p115$2 ==> _b109 ==> BV32_UGE($ei_new.13$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p115$1 ==> _b108 ==> BV32_ULE($ei_new.13$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p115$2 ==> _b108 ==> BV32_ULE($ei_new.13$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p115$1 ==> _b107 ==> BV32_SGE($ei_new.13$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p115$2 ==> _b107 ==> BV32_SGE($ei_new.13$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p115$1 ==> _b106 ==> BV32_SLE($ei_new.13$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p115$2 ==> _b106 ==> BV32_SLE($ei_new.13$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p115$1 ==> _b105 ==> BV32_SLE(0bv32, $ei_new.13$1);
    assert {:tag "guardNonNeg"} {:thread 2} p115$2 ==> _b105 ==> BV32_SLE(0bv32, $ei_new.13$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p115$1 ==> _b104 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.13$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p115$2 ==> _b104 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.13$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 741} p115$1 ==> true;
    v661$1 := (if p115$1 then $$d_common$292bv32$1 else v661$1);
    v661$2 := (if p115$2 then $$d_common$292bv32$2 else v661$2);
    v662$1 := (if p115$1 then $$d_common$293bv32$1 else v662$1);
    v662$2 := (if p115$2 then $$d_common$293bv32$2 else v662$2);
    v663$1 := (if p115$1 then $$d_common$294bv32$1 else v663$1);
    v663$2 := (if p115$2 then $$d_common$294bv32$2 else v663$2);
    v664$1 := (if p115$1 then $$d_common$295bv32$1 else v664$1);
    v664$2 := (if p115$2 then $$d_common$295bv32$2 else v664$2);
    v665$1 := (if p115$1 then BV32_SLT($ei_new.13$1, v664$1 ++ v663$1 ++ v662$1 ++ v661$1) else v665$1);
    v665$2 := (if p115$2 then BV32_SLT($ei_new.13$2, v664$2 ++ v663$2 ++ v662$2 ++ v661$2) else v665$2);
    p116$1 := false;
    p116$2 := false;
    p116$1 := (if p115$1 && v665$1 then v665$1 else p116$1);
    p116$2 := (if p115$2 && v665$2 then v665$2 else p116$2);
    p115$1 := (if p115$1 && !v665$1 then v665$1 else p115$1);
    p115$2 := (if p115$2 && !v665$2 then v665$2 else p115$2);
    call {:sourceloc} {:sourceloc_num 747} _LOG_READ_$$d_in2_all(p116$1, BV32_ADD(v124$1, $ei_new.13$1), $$d_in2_all[BV32_ADD(v124$1, $ei_new.13$1)]);
    assume {:do_not_predicate} {:check_id "check_state_106"} {:captureState "check_state_106"} {:sourceloc} {:sourceloc_num 747} true;
    call {:check_id "check_state_106"} {:sourceloc} {:sourceloc_num 747} _CHECK_READ_$$d_in2_all(p116$2, BV32_ADD(v124$2, $ei_new.13$2), $$d_in2_all[BV32_ADD(v124$2, $ei_new.13$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_all"} true;
    v666$1 := (if p116$1 then $$d_in2_all[BV32_ADD(v124$1, $ei_new.13$1)] else v666$1);
    v666$2 := (if p116$2 then $$d_in2_all[BV32_ADD(v124$2, $ei_new.13$2)] else v666$2);
    call {:sourceloc} {:sourceloc_num 748} _LOG_WRITE_$$d_in2_sqr_all(p116$1, BV32_ADD(v159$1, $ei_new.13$1), FMUL32(v666$1, v666$1), $$d_in2_sqr_all[BV32_ADD(v159$1, $ei_new.13$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all(p116$2, BV32_ADD(v159$2, $ei_new.13$2));
    assume {:do_not_predicate} {:check_id "check_state_107"} {:captureState "check_state_107"} {:sourceloc} {:sourceloc_num 748} true;
    call {:check_id "check_state_107"} {:sourceloc} {:sourceloc_num 748} _CHECK_WRITE_$$d_in2_sqr_all(p116$2, BV32_ADD(v159$2, $ei_new.13$2), FMUL32(v666$2, v666$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sqr_all"} true;
    $$d_in2_sqr_all[BV32_ADD(v159$1, $ei_new.13$1)] := (if p116$1 then FMUL32(v666$1, v666$1) else $$d_in2_sqr_all[BV32_ADD(v159$1, $ei_new.13$1)]);
    $$d_in2_sqr_all[BV32_ADD(v159$2, $ei_new.13$2)] := (if p116$2 then FMUL32(v666$2, v666$2) else $$d_in2_sqr_all[BV32_ADD(v159$2, $ei_new.13$2)]);
    $ei_new.13$1 := (if p116$1 then BV32_ADD($ei_new.13$1, 256bv32) else $ei_new.13$1);
    $ei_new.13$2 := (if p116$2 then BV32_ADD($ei_new.13$2, 256bv32) else $ei_new.13$2);
    p115$1 := (if p116$1 then true else p115$1);
    p115$2 := (if p116$2 then true else p115$2);
    goto $100.backedge, __partitioned_block_$100.tail_0;

  __partitioned_block_$100.tail_0:
    assume !p115$1 && !p115$2;
    goto __partitioned_block_$100.tail_1;

  __partitioned_block_$100.tail_1:
    call {:sourceloc_num 750} $bugle_barrier_duplicated_16(1bv1, 1bv1);
    $ei_new.14$1 := v101$1;
    $ei_new.14$2 := v101$2;
    p117$1 := true;
    p117$2 := true;
    assume {:captureState "loop_entry_state_29_0"} true;
    goto $103;

  $103:
    assume {:captureState "loop_head_state_29"} true;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p117$1 ==> _b119 ==> p117$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p117$2 ==> _b119 ==> p117$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b118 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.14$1, $d_common.coerce37[32:24] ++ $d_common.coerce37[24:16] ++ $d_common.coerce37[16:8] ++ $d_common.coerce37[8:0]) ==> p117$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b118 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.14$2, $d_common.coerce37[32:24] ++ $d_common.coerce37[24:16] ++ $d_common.coerce37[16:8] ++ $d_common.coerce37[8:0]) ==> p117$2;
    assert {:tag "loopBound"} {:thread 1} p117$1 ==> _b117 ==> BV32_UGE($ei_new.14$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p117$2 ==> _b117 ==> BV32_UGE($ei_new.14$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p117$1 ==> _b116 ==> BV32_ULE($ei_new.14$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p117$2 ==> _b116 ==> BV32_ULE($ei_new.14$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p117$1 ==> _b115 ==> BV32_SGE($ei_new.14$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p117$2 ==> _b115 ==> BV32_SGE($ei_new.14$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p117$1 ==> _b114 ==> BV32_SLE($ei_new.14$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p117$2 ==> _b114 ==> BV32_SLE($ei_new.14$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p117$1 ==> _b113 ==> BV32_SLE(0bv32, $ei_new.14$1);
    assert {:tag "guardNonNeg"} {:thread 2} p117$2 ==> _b113 ==> BV32_SLE(0bv32, $ei_new.14$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p117$1 ==> _b112 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.14$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p117$2 ==> _b112 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.14$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 751} p117$1 ==> true;
    v667$1 := (if p117$1 then $$d_common$148bv32$1 else v667$1);
    v667$2 := (if p117$2 then $$d_common$148bv32$2 else v667$2);
    v668$1 := (if p117$1 then $$d_common$149bv32$1 else v668$1);
    v668$2 := (if p117$2 then $$d_common$149bv32$2 else v668$2);
    v669$1 := (if p117$1 then $$d_common$150bv32$1 else v669$1);
    v669$2 := (if p117$2 then $$d_common$150bv32$2 else v669$2);
    v670$1 := (if p117$1 then $$d_common$151bv32$1 else v670$1);
    v670$2 := (if p117$2 then $$d_common$151bv32$2 else v670$2);
    v671$1 := (if p117$1 then BV32_SLT($ei_new.14$1, v670$1 ++ v669$1 ++ v668$1 ++ v667$1) else v671$1);
    v671$2 := (if p117$2 then BV32_SLT($ei_new.14$2, v670$2 ++ v669$2 ++ v668$2 ++ v667$2) else v671$2);
    p118$1 := false;
    p118$2 := false;
    p119$1 := false;
    p119$2 := false;
    p120$1 := false;
    p120$2 := false;
    p121$1 := false;
    p121$2 := false;
    p122$1 := false;
    p122$2 := false;
    p123$1 := false;
    p123$2 := false;
    p124$1 := false;
    p124$2 := false;
    p125$1 := false;
    p125$2 := false;
    p126$1 := false;
    p126$2 := false;
    p127$1 := false;
    p127$2 := false;
    p128$1 := false;
    p128$2 := false;
    p129$1 := false;
    p129$2 := false;
    p118$1 := (if p117$1 && v671$1 then v671$1 else p118$1);
    p118$2 := (if p117$2 && v671$2 then v671$2 else p118$2);
    p117$1 := (if p117$1 && !v671$1 then v671$1 else p117$1);
    p117$2 := (if p117$2 && !v671$2 then v671$2 else p117$2);
    v672$1 := (if p118$1 then $$d_common$140bv32$1 else v672$1);
    v672$2 := (if p118$2 then $$d_common$140bv32$2 else v672$2);
    v673$1 := (if p118$1 then $$d_common$141bv32$1 else v673$1);
    v673$2 := (if p118$2 then $$d_common$141bv32$2 else v673$2);
    v674$1 := (if p118$1 then $$d_common$142bv32$1 else v674$1);
    v674$2 := (if p118$2 then $$d_common$142bv32$2 else v674$2);
    v675$1 := (if p118$1 then $$d_common$143bv32$1 else v675$1);
    v675$2 := (if p118$2 then $$d_common$143bv32$2 else v675$2);
    v676$1 := (if p118$1 then $$d_common$140bv32$1 else v676$1);
    v676$2 := (if p118$2 then $$d_common$140bv32$2 else v676$2);
    v677$1 := (if p118$1 then $$d_common$141bv32$1 else v677$1);
    v677$2 := (if p118$2 then $$d_common$141bv32$2 else v677$2);
    v678$1 := (if p118$1 then $$d_common$142bv32$1 else v678$1);
    v678$2 := (if p118$2 then $$d_common$142bv32$2 else v678$2);
    v679$1 := (if p118$1 then $$d_common$143bv32$1 else v679$1);
    v679$2 := (if p118$2 then $$d_common$143bv32$2 else v679$2);
    v680$1 := (if p118$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.14$1, 1bv32), v679$1 ++ v678$1 ++ v677$1 ++ v676$1), 1bv32), 1bv32) else v680$1);
    v680$2 := (if p118$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.14$2, 1bv32), v679$2 ++ v678$2 ++ v677$2 ++ v676$2), 1bv32), 1bv32) else v680$2);
    v681$1 := (if p118$1 then $$d_common$140bv32$1 else v681$1);
    v681$2 := (if p118$2 then $$d_common$140bv32$2 else v681$2);
    v682$1 := (if p118$1 then $$d_common$141bv32$1 else v682$1);
    v682$2 := (if p118$2 then $$d_common$141bv32$2 else v682$2);
    v683$1 := (if p118$1 then $$d_common$142bv32$1 else v683$1);
    v683$2 := (if p118$2 then $$d_common$142bv32$2 else v683$2);
    v684$1 := (if p118$1 then $$d_common$143bv32$1 else v684$1);
    v684$2 := (if p118$2 then $$d_common$143bv32$2 else v684$2);
    v685$1 := (if p118$1 then BV32_SREM(BV32_ADD($ei_new.14$1, 1bv32), v684$1 ++ v683$1 ++ v682$1 ++ v681$1) == 0bv32 else v685$1);
    v685$2 := (if p118$2 then BV32_SREM(BV32_ADD($ei_new.14$2, 1bv32), v684$2 ++ v683$2 ++ v682$2 ++ v681$2) == 0bv32 else v685$2);
    p120$1 := (if p118$1 && v685$1 then v685$1 else p120$1);
    p120$2 := (if p118$2 && v685$2 then v685$2 else p120$2);
    p119$1 := (if p118$1 && !v685$1 then !v685$1 else p119$1);
    p119$2 := (if p118$2 && !v685$2 then !v685$2 else p119$2);
    $row.8$1, $col.8$1 := (if p119$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.14$1, 1bv32), v675$1 ++ v674$1 ++ v673$1 ++ v672$1), 1bv32) else $row.8$1), (if p119$1 then v680$1 else $col.8$1);
    $row.8$2, $col.8$2 := (if p119$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.14$2, 1bv32), v675$2 ++ v674$2 ++ v673$2 ++ v672$2), 1bv32) else $row.8$2), (if p119$2 then v680$2 else $col.8$2);
    v686$1 := (if p120$1 then $$d_common$140bv32$1 else v686$1);
    v686$2 := (if p120$2 then $$d_common$140bv32$2 else v686$2);
    v687$1 := (if p120$1 then $$d_common$141bv32$1 else v687$1);
    v687$2 := (if p120$2 then $$d_common$141bv32$2 else v687$2);
    v688$1 := (if p120$1 then $$d_common$142bv32$1 else v688$1);
    v688$2 := (if p120$2 then $$d_common$142bv32$2 else v688$2);
    v689$1 := (if p120$1 then $$d_common$143bv32$1 else v689$1);
    v689$2 := (if p120$2 then $$d_common$143bv32$2 else v689$2);
    $row.8$1, $col.8$1 := (if p120$1 then BV32_SUB(v689$1 ++ v688$1 ++ v687$1 ++ v686$1, 1bv32) else $row.8$1), (if p120$1 then BV32_SUB(v680$1, 1bv32) else $col.8$1);
    $row.8$2, $col.8$2 := (if p120$2 then BV32_SUB(v689$2 ++ v688$2 ++ v687$2 ++ v686$2, 1bv32) else $row.8$2), (if p120$2 then BV32_SUB(v680$2, 1bv32) else $col.8$2);
    v690$1 := (if p118$1 then $$d_common$132bv32$1 else v690$1);
    v690$2 := (if p118$2 then $$d_common$132bv32$2 else v690$2);
    v691$1 := (if p118$1 then $$d_common$133bv32$1 else v691$1);
    v691$2 := (if p118$2 then $$d_common$133bv32$2 else v691$2);
    v692$1 := (if p118$1 then $$d_common$134bv32$1 else v692$1);
    v692$2 := (if p118$2 then $$d_common$134bv32$2 else v692$2);
    v693$1 := (if p118$1 then $$d_common$135bv32$1 else v693$1);
    v693$2 := (if p118$2 then $$d_common$135bv32$2 else v693$2);
    v694$1 := (if p118$1 then BV32_SGT($row.8$1, BV32_SUB(v693$1 ++ v692$1 ++ v691$1 ++ v690$1, 1bv32)) else v694$1);
    v694$2 := (if p118$2 then BV32_SGT($row.8$2, BV32_SUB(v693$2 ++ v692$2 ++ v691$2 ++ v690$2, 1bv32)) else v694$2);
    p121$1 := (if p118$1 && v694$1 then v694$1 else p121$1);
    p121$2 := (if p118$2 && v694$2 then v694$2 else p121$2);
    p129$1 := (if p118$1 && !v694$1 then !v694$1 else p129$1);
    p129$2 := (if p118$2 && !v694$2 then !v694$2 else p129$2);
    v695$1 := (if p121$1 then $$d_common$132bv32$1 else v695$1);
    v695$2 := (if p121$2 then $$d_common$132bv32$2 else v695$2);
    v696$1 := (if p121$1 then $$d_common$133bv32$1 else v696$1);
    v696$2 := (if p121$2 then $$d_common$133bv32$2 else v696$2);
    v697$1 := (if p121$1 then $$d_common$134bv32$1 else v697$1);
    v697$2 := (if p121$2 then $$d_common$134bv32$2 else v697$2);
    v698$1 := (if p121$1 then $$d_common$135bv32$1 else v698$1);
    v698$2 := (if p121$2 then $$d_common$135bv32$2 else v698$2);
    v699$1 := (if p121$1 then $$d_common$284bv32$1 else v699$1);
    v699$2 := (if p121$2 then $$d_common$284bv32$2 else v699$2);
    v700$1 := (if p121$1 then $$d_common$285bv32$1 else v700$1);
    v700$2 := (if p121$2 then $$d_common$285bv32$2 else v700$2);
    v701$1 := (if p121$1 then $$d_common$286bv32$1 else v701$1);
    v701$2 := (if p121$2 then $$d_common$286bv32$2 else v701$2);
    v702$1 := (if p121$1 then $$d_common$287bv32$1 else v702$1);
    v702$2 := (if p121$2 then $$d_common$287bv32$2 else v702$2);
    v703$1 := (if p121$1 then BV32_SLT($row.8$1, BV32_ADD(v698$1 ++ v697$1 ++ v696$1 ++ v695$1, v702$1 ++ v701$1 ++ v700$1 ++ v699$1)) else v703$1);
    v703$2 := (if p121$2 then BV32_SLT($row.8$2, BV32_ADD(v698$2 ++ v697$2 ++ v696$2 ++ v695$2, v702$2 ++ v701$2 ++ v700$2 ++ v699$2)) else v703$2);
    p122$1 := (if p121$1 && v703$1 then v703$1 else p122$1);
    p122$2 := (if p121$2 && v703$2 then v703$2 else p122$2);
    p129$1 := (if p121$1 && !v703$1 then !v703$1 else p129$1);
    p129$2 := (if p121$2 && !v703$2 then !v703$2 else p129$2);
    v704$1 := (if p122$1 then $$d_common$136bv32$1 else v704$1);
    v704$2 := (if p122$2 then $$d_common$136bv32$2 else v704$2);
    v705$1 := (if p122$1 then $$d_common$137bv32$1 else v705$1);
    v705$2 := (if p122$2 then $$d_common$137bv32$2 else v705$2);
    v706$1 := (if p122$1 then $$d_common$138bv32$1 else v706$1);
    v706$2 := (if p122$2 then $$d_common$138bv32$2 else v706$2);
    v707$1 := (if p122$1 then $$d_common$139bv32$1 else v707$1);
    v707$2 := (if p122$2 then $$d_common$139bv32$2 else v707$2);
    v708$1 := (if p122$1 then BV32_SGT($col.8$1, BV32_SUB(v707$1 ++ v706$1 ++ v705$1 ++ v704$1, 1bv32)) else v708$1);
    v708$2 := (if p122$2 then BV32_SGT($col.8$2, BV32_SUB(v707$2 ++ v706$2 ++ v705$2 ++ v704$2, 1bv32)) else v708$2);
    p123$1 := (if p122$1 && v708$1 then v708$1 else p123$1);
    p123$2 := (if p122$2 && v708$2 then v708$2 else p123$2);
    p129$1 := (if p122$1 && !v708$1 then !v708$1 else p129$1);
    p129$2 := (if p122$2 && !v708$2 then !v708$2 else p129$2);
    v709$1 := (if p123$1 then $$d_common$136bv32$1 else v709$1);
    v709$2 := (if p123$2 then $$d_common$136bv32$2 else v709$2);
    v710$1 := (if p123$1 then $$d_common$137bv32$1 else v710$1);
    v710$2 := (if p123$2 then $$d_common$137bv32$2 else v710$2);
    v711$1 := (if p123$1 then $$d_common$138bv32$1 else v711$1);
    v711$2 := (if p123$2 then $$d_common$138bv32$2 else v711$2);
    v712$1 := (if p123$1 then $$d_common$139bv32$1 else v712$1);
    v712$2 := (if p123$2 then $$d_common$139bv32$2 else v712$2);
    v713$1 := (if p123$1 then $$d_common$288bv32$1 else v713$1);
    v713$2 := (if p123$2 then $$d_common$288bv32$2 else v713$2);
    v714$1 := (if p123$1 then $$d_common$289bv32$1 else v714$1);
    v714$2 := (if p123$2 then $$d_common$289bv32$2 else v714$2);
    v715$1 := (if p123$1 then $$d_common$290bv32$1 else v715$1);
    v715$2 := (if p123$2 then $$d_common$290bv32$2 else v715$2);
    v716$1 := (if p123$1 then $$d_common$291bv32$1 else v716$1);
    v716$2 := (if p123$2 then $$d_common$291bv32$2 else v716$2);
    v717$1 := (if p123$1 then BV32_SLT($col.8$1, BV32_ADD(v712$1 ++ v711$1 ++ v710$1 ++ v709$1, v716$1 ++ v715$1 ++ v714$1 ++ v713$1)) else v717$1);
    v717$2 := (if p123$2 then BV32_SLT($col.8$2, BV32_ADD(v712$2 ++ v711$2 ++ v710$2 ++ v709$2, v716$2 ++ v715$2 ++ v714$2 ++ v713$2)) else v717$2);
    p124$1 := (if p123$1 && v717$1 then v717$1 else p124$1);
    p124$2 := (if p123$2 && v717$2 then v717$2 else p124$2);
    p129$1 := (if p123$1 && !v717$1 then !v717$1 else p129$1);
    p129$2 := (if p123$2 && !v717$2 then !v717$2 else p129$2);
    v718$1 := (if p124$1 then $$d_common$132bv32$1 else v718$1);
    v718$2 := (if p124$2 then $$d_common$132bv32$2 else v718$2);
    v719$1 := (if p124$1 then $$d_common$133bv32$1 else v719$1);
    v719$2 := (if p124$2 then $$d_common$133bv32$2 else v719$2);
    v720$1 := (if p124$1 then $$d_common$134bv32$1 else v720$1);
    v720$2 := (if p124$2 then $$d_common$134bv32$2 else v720$2);
    v721$1 := (if p124$1 then $$d_common$135bv32$1 else v721$1);
    v721$2 := (if p124$2 then $$d_common$135bv32$2 else v721$2);
    v722$1 := (if p124$1 then $$d_common$136bv32$1 else v722$1);
    v722$2 := (if p124$2 then $$d_common$136bv32$2 else v722$2);
    v723$1 := (if p124$1 then $$d_common$137bv32$1 else v723$1);
    v723$2 := (if p124$2 then $$d_common$137bv32$2 else v723$2);
    v724$1 := (if p124$1 then $$d_common$138bv32$1 else v724$1);
    v724$2 := (if p124$2 then $$d_common$138bv32$2 else v724$2);
    v725$1 := (if p124$1 then $$d_common$139bv32$1 else v725$1);
    v725$2 := (if p124$2 then $$d_common$139bv32$2 else v725$2);
    v726$1 := (if p124$1 then $$d_common$284bv32$1 else v726$1);
    v726$2 := (if p124$2 then $$d_common$284bv32$2 else v726$2);
    v727$1 := (if p124$1 then $$d_common$285bv32$1 else v727$1);
    v727$2 := (if p124$2 then $$d_common$285bv32$2 else v727$2);
    v728$1 := (if p124$1 then $$d_common$286bv32$1 else v728$1);
    v728$2 := (if p124$2 then $$d_common$286bv32$2 else v728$2);
    v729$1 := (if p124$1 then $$d_common$287bv32$1 else v729$1);
    v729$2 := (if p124$2 then $$d_common$287bv32$2 else v729$2);
    call {:sourceloc} {:sourceloc_num 815} _LOG_READ_$$d_in2_sqr_all(p124$1, BV32_ADD(v159$1, BV32_ADD(BV32_MUL(BV32_SUB($col.8$1, v725$1 ++ v724$1 ++ v723$1 ++ v722$1), v729$1 ++ v728$1 ++ v727$1 ++ v726$1), BV32_SUB($row.8$1, v721$1 ++ v720$1 ++ v719$1 ++ v718$1))), $$d_in2_sqr_all[BV32_ADD(v159$1, BV32_ADD(BV32_MUL(BV32_SUB($col.8$1, v725$1 ++ v724$1 ++ v723$1 ++ v722$1), v729$1 ++ v728$1 ++ v727$1 ++ v726$1), BV32_SUB($row.8$1, v721$1 ++ v720$1 ++ v719$1 ++ v718$1)))]);
    assume {:do_not_predicate} {:check_id "check_state_104"} {:captureState "check_state_104"} {:sourceloc} {:sourceloc_num 815} true;
    call {:check_id "check_state_104"} {:sourceloc} {:sourceloc_num 815} _CHECK_READ_$$d_in2_sqr_all(p124$2, BV32_ADD(v159$2, BV32_ADD(BV32_MUL(BV32_SUB($col.8$2, v725$2 ++ v724$2 ++ v723$2 ++ v722$2), v729$2 ++ v728$2 ++ v727$2 ++ v726$2), BV32_SUB($row.8$2, v721$2 ++ v720$2 ++ v719$2 ++ v718$2))), $$d_in2_sqr_all[BV32_ADD(v159$2, BV32_ADD(BV32_MUL(BV32_SUB($col.8$2, v725$2 ++ v724$2 ++ v723$2 ++ v722$2), v729$2 ++ v728$2 ++ v727$2 ++ v726$2), BV32_SUB($row.8$2, v721$2 ++ v720$2 ++ v719$2 ++ v718$2)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sqr_all"} true;
    v730$1 := (if p124$1 then $$d_in2_sqr_all[BV32_ADD(v159$1, BV32_ADD(BV32_MUL(BV32_SUB($col.8$1, v725$1 ++ v724$1 ++ v723$1 ++ v722$1), v729$1 ++ v728$1 ++ v727$1 ++ v726$1), BV32_SUB($row.8$1, v721$1 ++ v720$1 ++ v719$1 ++ v718$1)))] else v730$1);
    v730$2 := (if p124$2 then $$d_in2_sqr_all[BV32_ADD(v159$2, BV32_ADD(BV32_MUL(BV32_SUB($col.8$2, v725$2 ++ v724$2 ++ v723$2 ++ v722$2), v729$2 ++ v728$2 ++ v727$2 ++ v726$2), BV32_SUB($row.8$2, v721$2 ++ v720$2 ++ v719$2 ++ v718$2)))] else v730$2);
    call {:sourceloc} {:sourceloc_num 816} _LOG_WRITE_$$d_in2_pad_cumv_all(p124$1, BV32_ADD(v134$1, $ei_new.14$1), v730$1, $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.14$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(p124$2, BV32_ADD(v134$2, $ei_new.14$2));
    assume {:do_not_predicate} {:check_id "check_state_105"} {:captureState "check_state_105"} {:sourceloc} {:sourceloc_num 816} true;
    call {:check_id "check_state_105"} {:sourceloc} {:sourceloc_num 816} _CHECK_WRITE_$$d_in2_pad_cumv_all(p124$2, BV32_ADD(v134$2, $ei_new.14$2), v730$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_all"} true;
    $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.14$1)] := (if p124$1 then v730$1 else $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.14$1)]);
    $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.14$2)] := (if p124$2 then v730$2 else $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.14$2)]);
    p129$1 := (if p125$1 then true else p129$1);
    p129$2 := (if p125$2 then true else p129$2);
    p129$1 := (if p126$1 then true else p129$1);
    p129$2 := (if p126$2 then true else p129$2);
    p129$1 := (if p127$1 then true else p129$1);
    p129$2 := (if p127$2 then true else p129$2);
    p129$1 := (if p128$1 then true else p129$1);
    p129$2 := (if p128$2 then true else p129$2);
    call {:sourceloc} {:sourceloc_num 818} _LOG_WRITE_$$d_in2_pad_cumv_all(p129$1, BV32_ADD(v134$1, $ei_new.14$1), 0bv32, $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.14$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(p129$2, BV32_ADD(v134$2, $ei_new.14$2));
    assume {:do_not_predicate} {:check_id "check_state_103"} {:captureState "check_state_103"} {:sourceloc} {:sourceloc_num 818} true;
    call {:check_id "check_state_103"} {:sourceloc} {:sourceloc_num 818} _CHECK_WRITE_$$d_in2_pad_cumv_all(p129$2, BV32_ADD(v134$2, $ei_new.14$2), 0bv32);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_all"} true;
    $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.14$1)] := (if p129$1 then 0bv32 else $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $ei_new.14$1)]);
    $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.14$2)] := (if p129$2 then 0bv32 else $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $ei_new.14$2)]);
    $ei_new.14$1 := (if p118$1 then BV32_ADD($ei_new.14$1, 256bv32) else $ei_new.14$1);
    $ei_new.14$2 := (if p118$2 then BV32_ADD($ei_new.14$2, 256bv32) else $ei_new.14$2);
    p117$1 := (if p118$1 then true else p117$1);
    p117$2 := (if p118$2 then true else p117$2);
    goto $103.backedge, __partitioned_block_$103.tail_0;

  __partitioned_block_$103.tail_0:
    assume !p117$1 && !p117$2;
    goto __partitioned_block_$103.tail_1;

  __partitioned_block_$103.tail_1:
    call {:sourceloc_num 821} $bugle_barrier_duplicated_17(1bv1, 1bv1);
    $ei_new.15$1 := v101$1;
    $ei_new.15$2 := v101$2;
    p130$1 := true;
    p130$2 := true;
    assume {:captureState "loop_entry_state_27_0"} true;
    goto $114;

  $114:
    assume {:captureState "loop_head_state_27"} true;
    assert {:tag "accessBreak"} _b412 ==> _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce37), $d_common.coerce37), $d_common.coerce37), $d_common.coerce37);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p130$1 ==> _b127 ==> p130$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p130$2 ==> _b127 ==> p130$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b126 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.15$1, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) ==> p130$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b126 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.15$2, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) ==> p130$2;
    assert {:tag "loopBound"} {:thread 1} p130$1 ==> _b125 ==> BV32_UGE($ei_new.15$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p130$2 ==> _b125 ==> BV32_UGE($ei_new.15$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p130$1 ==> _b124 ==> BV32_ULE($ei_new.15$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p130$2 ==> _b124 ==> BV32_ULE($ei_new.15$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p130$1 ==> _b123 ==> BV32_SGE($ei_new.15$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p130$2 ==> _b123 ==> BV32_SGE($ei_new.15$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p130$1 ==> _b122 ==> BV32_SLE($ei_new.15$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p130$2 ==> _b122 ==> BV32_SLE($ei_new.15$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p130$1 ==> _b121 ==> BV32_SLE(0bv32, $ei_new.15$1);
    assert {:tag "guardNonNeg"} {:thread 2} p130$2 ==> _b121 ==> BV32_SLE(0bv32, $ei_new.15$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p130$1 ==> _b120 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.15$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p130$2 ==> _b120 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.15$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 822} p130$1 ==> true;
    v731$1 := (if p130$1 then $$d_common$144bv32$1 else v731$1);
    v731$2 := (if p130$2 then $$d_common$144bv32$2 else v731$2);
    v732$1 := (if p130$1 then $$d_common$145bv32$1 else v732$1);
    v732$2 := (if p130$2 then $$d_common$145bv32$2 else v732$2);
    v733$1 := (if p130$1 then $$d_common$146bv32$1 else v733$1);
    v733$2 := (if p130$2 then $$d_common$146bv32$2 else v733$2);
    v734$1 := (if p130$1 then $$d_common$147bv32$1 else v734$1);
    v734$2 := (if p130$2 then $$d_common$147bv32$2 else v734$2);
    v735$1 := (if p130$1 then BV32_SLT($ei_new.15$1, v734$1 ++ v733$1 ++ v732$1 ++ v731$1) else v735$1);
    v735$2 := (if p130$2 then BV32_SLT($ei_new.15$2, v734$2 ++ v733$2 ++ v732$2 ++ v731$2) else v735$2);
    p131$1 := false;
    p131$2 := false;
    p132$1 := false;
    p132$2 := false;
    p131$1 := (if p130$1 && v735$1 then v735$1 else p131$1);
    p131$2 := (if p130$2 && v735$2 then v735$2 else p131$2);
    p130$1 := (if p130$1 && !v735$1 then v735$1 else p130$1);
    p130$2 := (if p130$2 && !v735$2 then v735$2 else p130$2);
    v736$1 := (if p131$1 then $$d_common$140bv32$1 else v736$1);
    v736$2 := (if p131$2 then $$d_common$140bv32$2 else v736$2);
    v737$1 := (if p131$1 then $$d_common$141bv32$1 else v737$1);
    v737$2 := (if p131$2 then $$d_common$141bv32$2 else v737$2);
    v738$1 := (if p131$1 then $$d_common$142bv32$1 else v738$1);
    v738$2 := (if p131$2 then $$d_common$142bv32$2 else v738$2);
    v739$1 := (if p131$1 then $$d_common$143bv32$1 else v739$1);
    v739$2 := (if p131$2 then $$d_common$143bv32$2 else v739$2);
    v740$1 := (if p131$1 then BV32_MUL($ei_new.15$1, v739$1 ++ v738$1 ++ v737$1 ++ v736$1) else v740$1);
    v740$2 := (if p131$2 then BV32_MUL($ei_new.15$2, v739$2 ++ v738$2 ++ v737$2 ++ v736$2) else v740$2);
    $position.2$1, $sum.2$1 := (if p131$1 then v740$1 else $position.2$1), (if p131$1 then 0bv32 else $sum.2$1);
    $position.2$2, $sum.2$2 := (if p131$2 then v740$2 else $position.2$2), (if p131$2 then 0bv32 else $sum.2$2);
    p132$1 := (if p131$1 then true else p132$1);
    p132$2 := (if p131$2 then true else p132$2);
    assume {:captureState "loop_entry_state_28_0"} true;
    goto $116;

  $116:
    assume {:captureState "loop_head_state_28"} true;
    assert {:tag "accessBreak"} _b413 ==> _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce37), $d_common.coerce37), $d_common.coerce37), $d_common.coerce37);
    assert p132$1 ==> p130$1;
    assert p132$2 ==> p130$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p132$1 ==> _b352 ==> p132$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.15$1, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p132$2 ==> _b352 ==> p132$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.15$2, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b351 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.15$1, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) && BV32_SLT($position.2$1, BV32_ADD(BV32_MUL($ei_new.15$1, $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0]), $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0])) ==> p132$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b351 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.15$2, $d_common.coerce36[32:24] ++ $d_common.coerce36[24:16] ++ $d_common.coerce36[16:8] ++ $d_common.coerce36[8:0]) && BV32_SLT($position.2$2, BV32_ADD(BV32_MUL($ei_new.15$2, $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0]), $d_common.coerce35[32:24] ++ $d_common.coerce35[24:16] ++ $d_common.coerce35[16:8] ++ $d_common.coerce35[8:0])) ==> p132$2;
    assert {:tag "loopBound"} {:thread 1} p132$1 ==> _b350 ==> BV32_UGE($position.2$1, v740$1);
    assert {:tag "loopBound"} {:thread 2} p132$2 ==> _b350 ==> BV32_UGE($position.2$2, v740$2);
    assert {:tag "loopBound"} {:thread 1} p132$1 ==> _b349 ==> BV32_ULE($position.2$1, v740$1);
    assert {:tag "loopBound"} {:thread 2} p132$2 ==> _b349 ==> BV32_ULE($position.2$2, v740$2);
    assert {:tag "loopBound"} {:thread 1} p132$1 ==> _b348 ==> BV32_SGE($position.2$1, v740$1);
    assert {:tag "loopBound"} {:thread 2} p132$2 ==> _b348 ==> BV32_SGE($position.2$2, v740$2);
    assert {:tag "loopBound"} {:thread 1} p132$1 ==> _b347 ==> BV32_SLE($position.2$1, v740$1);
    assert {:tag "loopBound"} {:thread 2} p132$2 ==> _b347 ==> BV32_SLE($position.2$2, v740$2);
    assert {:tag "guardNonNeg"} {:thread 1} p132$1 ==> _b346 ==> BV32_SLE(0bv32, $position.2$1);
    assert {:tag "guardNonNeg"} {:thread 2} p132$2 ==> _b346 ==> BV32_SLE(0bv32, $position.2$2);
    assert {:block_sourceloc} {:sourceloc_num 832} p132$1 ==> true;
    v741$1 := (if p132$1 then $$d_common$140bv32$1 else v741$1);
    v741$2 := (if p132$2 then $$d_common$140bv32$2 else v741$2);
    v742$1 := (if p132$1 then $$d_common$141bv32$1 else v742$1);
    v742$2 := (if p132$2 then $$d_common$141bv32$2 else v742$2);
    v743$1 := (if p132$1 then $$d_common$142bv32$1 else v743$1);
    v743$2 := (if p132$2 then $$d_common$142bv32$2 else v743$2);
    v744$1 := (if p132$1 then $$d_common$143bv32$1 else v744$1);
    v744$2 := (if p132$2 then $$d_common$143bv32$2 else v744$2);
    v745$1 := (if p132$1 then BV32_SLT($position.2$1, BV32_ADD(v740$1, v744$1 ++ v743$1 ++ v742$1 ++ v741$1)) else v745$1);
    v745$2 := (if p132$2 then BV32_SLT($position.2$2, BV32_ADD(v740$2, v744$2 ++ v743$2 ++ v742$2 ++ v741$2)) else v745$2);
    p133$1 := false;
    p133$2 := false;
    p133$1 := (if p132$1 && v745$1 then v745$1 else p133$1);
    p133$2 := (if p132$2 && v745$2 then v745$2 else p133$2);
    p132$1 := (if p132$1 && !v745$1 then v745$1 else p132$1);
    p132$2 := (if p132$2 && !v745$2 then v745$2 else p132$2);
    call {:sourceloc} {:sourceloc_num 838} _LOG_READ_$$d_in2_pad_cumv_all(p133$1, BV32_ADD(v134$1, $position.2$1), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.2$1)]);
    assume {:do_not_predicate} {:check_id "check_state_100"} {:captureState "check_state_100"} {:sourceloc} {:sourceloc_num 838} true;
    call {:check_id "check_state_100"} {:sourceloc} {:sourceloc_num 838} _CHECK_READ_$$d_in2_pad_cumv_all(p133$2, BV32_ADD(v134$2, $position.2$2), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.2$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v746$1 := (if p133$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.2$1)] else v746$1);
    v746$2 := (if p133$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.2$2)] else v746$2);
    call {:sourceloc} {:sourceloc_num 839} _LOG_WRITE_$$d_in2_pad_cumv_all(p133$1, BV32_ADD(v134$1, $position.2$1), FADD32(v746$1, $sum.2$1), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.2$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(p133$2, BV32_ADD(v134$2, $position.2$2));
    assume {:do_not_predicate} {:check_id "check_state_101"} {:captureState "check_state_101"} {:sourceloc} {:sourceloc_num 839} true;
    call {:check_id "check_state_101"} {:sourceloc} {:sourceloc_num 839} _CHECK_WRITE_$$d_in2_pad_cumv_all(p133$2, BV32_ADD(v134$2, $position.2$2), FADD32(v746$2, $sum.2$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_all"} true;
    $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.2$1)] := (if p133$1 then FADD32(v746$1, $sum.2$1) else $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.2$1)]);
    $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.2$2)] := (if p133$2 then FADD32(v746$2, $sum.2$2) else $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.2$2)]);
    call {:sourceloc} {:sourceloc_num 840} _LOG_READ_$$d_in2_pad_cumv_all(p133$1, BV32_ADD(v134$1, $position.2$1), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.2$1)]);
    assume {:do_not_predicate} {:check_id "check_state_102"} {:captureState "check_state_102"} {:sourceloc} {:sourceloc_num 840} true;
    call {:check_id "check_state_102"} {:sourceloc} {:sourceloc_num 840} _CHECK_READ_$$d_in2_pad_cumv_all(p133$2, BV32_ADD(v134$2, $position.2$2), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.2$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v747$1 := (if p133$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, $position.2$1)] else v747$1);
    v747$2 := (if p133$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, $position.2$2)] else v747$2);
    $position.2$1, $sum.2$1 := (if p133$1 then BV32_ADD($position.2$1, 1bv32) else $position.2$1), (if p133$1 then v747$1 else $sum.2$1);
    $position.2$2, $sum.2$2 := (if p133$2 then BV32_ADD($position.2$2, 1bv32) else $position.2$2), (if p133$2 then v747$2 else $sum.2$2);
    p132$1 := (if p133$1 then true else p132$1);
    p132$2 := (if p133$2 then true else p132$2);
    goto $116.backedge, $116.tail;

  $116.tail:
    assume !p132$1 && !p132$2;
    $ei_new.15$1 := (if p131$1 then BV32_ADD($ei_new.15$1, 256bv32) else $ei_new.15$1);
    $ei_new.15$2 := (if p131$2 then BV32_ADD($ei_new.15$2, 256bv32) else $ei_new.15$2);
    p130$1 := (if p131$1 then true else p130$1);
    p130$2 := (if p131$2 then true else p130$2);
    goto $114.backedge, __partitioned_block_$114.tail_0;

  __partitioned_block_$114.tail_0:
    assume !p130$1 && !p130$2;
    goto __partitioned_block_$114.tail_1;

  __partitioned_block_$114.tail_1:
    call {:sourceloc_num 844} $bugle_barrier_duplicated_18(1bv1, 1bv1);
    $ei_new.16$1 := v101$1;
    $ei_new.16$2 := v101$2;
    p134$1 := true;
    p134$2 := true;
    assume {:captureState "loop_entry_state_26_0"} true;
    goto $121;

  $121:
    assume {:captureState "loop_head_state_26"} true;
    assert {:tag "accessBreak"} _b414 ==> _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce41), $d_common.coerce41), $d_common.coerce41), $d_common.coerce41);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p134$1 ==> _b135 ==> p134$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p134$2 ==> _b135 ==> p134$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b134 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.16$1, $d_common.coerce41[32:24] ++ $d_common.coerce41[24:16] ++ $d_common.coerce41[16:8] ++ $d_common.coerce41[8:0]) ==> p134$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b134 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.16$2, $d_common.coerce41[32:24] ++ $d_common.coerce41[24:16] ++ $d_common.coerce41[16:8] ++ $d_common.coerce41[8:0]) ==> p134$2;
    assert {:tag "loopBound"} {:thread 1} p134$1 ==> _b133 ==> BV32_UGE($ei_new.16$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p134$2 ==> _b133 ==> BV32_UGE($ei_new.16$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p134$1 ==> _b132 ==> BV32_ULE($ei_new.16$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p134$2 ==> _b132 ==> BV32_ULE($ei_new.16$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p134$1 ==> _b131 ==> BV32_SGE($ei_new.16$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p134$2 ==> _b131 ==> BV32_SGE($ei_new.16$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p134$1 ==> _b130 ==> BV32_SLE($ei_new.16$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p134$2 ==> _b130 ==> BV32_SLE($ei_new.16$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p134$1 ==> _b129 ==> BV32_SLE(0bv32, $ei_new.16$1);
    assert {:tag "guardNonNeg"} {:thread 2} p134$2 ==> _b129 ==> BV32_SLE(0bv32, $ei_new.16$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p134$1 ==> _b128 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.16$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p134$2 ==> _b128 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.16$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 845} p134$1 ==> true;
    v748$1 := (if p134$1 then $$d_common$164bv32$1 else v748$1);
    v748$2 := (if p134$2 then $$d_common$164bv32$2 else v748$2);
    v749$1 := (if p134$1 then $$d_common$165bv32$1 else v749$1);
    v749$2 := (if p134$2 then $$d_common$165bv32$2 else v749$2);
    v750$1 := (if p134$1 then $$d_common$166bv32$1 else v750$1);
    v750$2 := (if p134$2 then $$d_common$166bv32$2 else v750$2);
    v751$1 := (if p134$1 then $$d_common$167bv32$1 else v751$1);
    v751$2 := (if p134$2 then $$d_common$167bv32$2 else v751$2);
    v752$1 := (if p134$1 then BV32_SLT($ei_new.16$1, v751$1 ++ v750$1 ++ v749$1 ++ v748$1) else v752$1);
    v752$2 := (if p134$2 then BV32_SLT($ei_new.16$2, v751$2 ++ v750$2 ++ v749$2 ++ v748$2) else v752$2);
    p135$1 := false;
    p135$2 := false;
    p136$1 := false;
    p136$2 := false;
    p137$1 := false;
    p137$2 := false;
    p135$1 := (if p134$1 && v752$1 then v752$1 else p135$1);
    p135$2 := (if p134$2 && v752$2 then v752$2 else p135$2);
    p134$1 := (if p134$1 && !v752$1 then v752$1 else p134$1);
    p134$2 := (if p134$2 && !v752$2 then v752$2 else p134$2);
    v753$1 := (if p135$1 then $$d_common$156bv32$1 else v753$1);
    v753$2 := (if p135$2 then $$d_common$156bv32$2 else v753$2);
    v754$1 := (if p135$1 then $$d_common$157bv32$1 else v754$1);
    v754$2 := (if p135$2 then $$d_common$157bv32$2 else v754$2);
    v755$1 := (if p135$1 then $$d_common$158bv32$1 else v755$1);
    v755$2 := (if p135$2 then $$d_common$158bv32$2 else v755$2);
    v756$1 := (if p135$1 then $$d_common$159bv32$1 else v756$1);
    v756$2 := (if p135$2 then $$d_common$159bv32$2 else v756$2);
    v757$1 := (if p135$1 then $$d_common$156bv32$1 else v757$1);
    v757$2 := (if p135$2 then $$d_common$156bv32$2 else v757$2);
    v758$1 := (if p135$1 then $$d_common$157bv32$1 else v758$1);
    v758$2 := (if p135$2 then $$d_common$157bv32$2 else v758$2);
    v759$1 := (if p135$1 then $$d_common$158bv32$1 else v759$1);
    v759$2 := (if p135$2 then $$d_common$158bv32$2 else v759$2);
    v760$1 := (if p135$1 then $$d_common$159bv32$1 else v760$1);
    v760$2 := (if p135$2 then $$d_common$159bv32$2 else v760$2);
    v761$1 := (if p135$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.16$1, 1bv32), v760$1 ++ v759$1 ++ v758$1 ++ v757$1), 1bv32), 1bv32) else v761$1);
    v761$2 := (if p135$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.16$2, 1bv32), v760$2 ++ v759$2 ++ v758$2 ++ v757$2), 1bv32), 1bv32) else v761$2);
    v762$1 := (if p135$1 then $$d_common$156bv32$1 else v762$1);
    v762$2 := (if p135$2 then $$d_common$156bv32$2 else v762$2);
    v763$1 := (if p135$1 then $$d_common$157bv32$1 else v763$1);
    v763$2 := (if p135$2 then $$d_common$157bv32$2 else v763$2);
    v764$1 := (if p135$1 then $$d_common$158bv32$1 else v764$1);
    v764$2 := (if p135$2 then $$d_common$158bv32$2 else v764$2);
    v765$1 := (if p135$1 then $$d_common$159bv32$1 else v765$1);
    v765$2 := (if p135$2 then $$d_common$159bv32$2 else v765$2);
    v766$1 := (if p135$1 then BV32_SREM(BV32_ADD($ei_new.16$1, 1bv32), v765$1 ++ v764$1 ++ v763$1 ++ v762$1) == 0bv32 else v766$1);
    v766$2 := (if p135$2 then BV32_SREM(BV32_ADD($ei_new.16$2, 1bv32), v765$2 ++ v764$2 ++ v763$2 ++ v762$2) == 0bv32 else v766$2);
    p137$1 := (if p135$1 && v766$1 then v766$1 else p137$1);
    p137$2 := (if p135$2 && v766$2 then v766$2 else p137$2);
    p136$1 := (if p135$1 && !v766$1 then !v766$1 else p136$1);
    p136$2 := (if p135$2 && !v766$2 then !v766$2 else p136$2);
    $row.9$1, $col.9$1 := (if p136$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.16$1, 1bv32), v756$1 ++ v755$1 ++ v754$1 ++ v753$1), 1bv32) else $row.9$1), (if p136$1 then v761$1 else $col.9$1);
    $row.9$2, $col.9$2 := (if p136$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.16$2, 1bv32), v756$2 ++ v755$2 ++ v754$2 ++ v753$2), 1bv32) else $row.9$2), (if p136$2 then v761$2 else $col.9$2);
    v767$1 := (if p137$1 then $$d_common$156bv32$1 else v767$1);
    v767$2 := (if p137$2 then $$d_common$156bv32$2 else v767$2);
    v768$1 := (if p137$1 then $$d_common$157bv32$1 else v768$1);
    v768$2 := (if p137$2 then $$d_common$157bv32$2 else v768$2);
    v769$1 := (if p137$1 then $$d_common$158bv32$1 else v769$1);
    v769$2 := (if p137$2 then $$d_common$158bv32$2 else v769$2);
    v770$1 := (if p137$1 then $$d_common$159bv32$1 else v770$1);
    v770$2 := (if p137$2 then $$d_common$159bv32$2 else v770$2);
    $row.9$1, $col.9$1 := (if p137$1 then BV32_SUB(v770$1 ++ v769$1 ++ v768$1 ++ v767$1, 1bv32) else $row.9$1), (if p137$1 then BV32_SUB(v761$1, 1bv32) else $col.9$1);
    $row.9$2, $col.9$2 := (if p137$2 then BV32_SUB(v770$2 ++ v769$2 ++ v768$2 ++ v767$2, 1bv32) else $row.9$2), (if p137$2 then BV32_SUB(v761$2, 1bv32) else $col.9$2);
    v771$1 := (if p135$1 then $$d_common$172bv32$1 else v771$1);
    v771$2 := (if p135$2 then $$d_common$172bv32$2 else v771$2);
    v772$1 := (if p135$1 then $$d_common$173bv32$1 else v772$1);
    v772$2 := (if p135$2 then $$d_common$173bv32$2 else v772$2);
    v773$1 := (if p135$1 then $$d_common$174bv32$1 else v773$1);
    v773$2 := (if p135$2 then $$d_common$174bv32$2 else v773$2);
    v774$1 := (if p135$1 then $$d_common$175bv32$1 else v774$1);
    v774$2 := (if p135$2 then $$d_common$175bv32$2 else v774$2);
    v775$1 := (if p135$1 then $$d_common$180bv32$1 else v775$1);
    v775$2 := (if p135$2 then $$d_common$180bv32$2 else v775$2);
    v776$1 := (if p135$1 then $$d_common$181bv32$1 else v776$1);
    v776$2 := (if p135$2 then $$d_common$181bv32$2 else v776$2);
    v777$1 := (if p135$1 then $$d_common$182bv32$1 else v777$1);
    v777$2 := (if p135$2 then $$d_common$182bv32$2 else v777$2);
    v778$1 := (if p135$1 then $$d_common$183bv32$1 else v778$1);
    v778$2 := (if p135$2 then $$d_common$183bv32$2 else v778$2);
    v779$1 := (if p135$1 then $$d_common$140bv32$1 else v779$1);
    v779$2 := (if p135$2 then $$d_common$140bv32$2 else v779$2);
    v780$1 := (if p135$1 then $$d_common$141bv32$1 else v780$1);
    v780$2 := (if p135$2 then $$d_common$141bv32$2 else v780$2);
    v781$1 := (if p135$1 then $$d_common$142bv32$1 else v781$1);
    v781$2 := (if p135$2 then $$d_common$142bv32$2 else v781$2);
    v782$1 := (if p135$1 then $$d_common$143bv32$1 else v782$1);
    v782$2 := (if p135$2 then $$d_common$143bv32$2 else v782$2);
    call {:sourceloc} {:sourceloc_num 881} _LOG_READ_$$d_in2_pad_cumv_all(p135$1, BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.9$1, v778$1 ++ v777$1 ++ v776$1 ++ v775$1), 1bv32), v782$1 ++ v781$1 ++ v780$1 ++ v779$1), BV32_SUB(BV32_ADD($row.9$1, v774$1 ++ v773$1 ++ v772$1 ++ v771$1), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.9$1, v778$1 ++ v777$1 ++ v776$1 ++ v775$1), 1bv32), v782$1 ++ v781$1 ++ v780$1 ++ v779$1), BV32_SUB(BV32_ADD($row.9$1, v774$1 ++ v773$1 ++ v772$1 ++ v771$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_98"} {:captureState "check_state_98"} {:sourceloc} {:sourceloc_num 881} true;
    call {:check_id "check_state_98"} {:sourceloc} {:sourceloc_num 881} _CHECK_READ_$$d_in2_pad_cumv_all(p135$2, BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.9$2, v778$2 ++ v777$2 ++ v776$2 ++ v775$2), 1bv32), v782$2 ++ v781$2 ++ v780$2 ++ v779$2), BV32_SUB(BV32_ADD($row.9$2, v774$2 ++ v773$2 ++ v772$2 ++ v771$2), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.9$2, v778$2 ++ v777$2 ++ v776$2 ++ v775$2), 1bv32), v782$2 ++ v781$2 ++ v780$2 ++ v779$2), BV32_SUB(BV32_ADD($row.9$2, v774$2 ++ v773$2 ++ v772$2 ++ v771$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v783$1 := (if p135$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.9$1, v778$1 ++ v777$1 ++ v776$1 ++ v775$1), 1bv32), v782$1 ++ v781$1 ++ v780$1 ++ v779$1), BV32_SUB(BV32_ADD($row.9$1, v774$1 ++ v773$1 ++ v772$1 ++ v771$1), 1bv32)))] else v783$1);
    v783$2 := (if p135$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.9$2, v778$2 ++ v777$2 ++ v776$2 ++ v775$2), 1bv32), v782$2 ++ v781$2 ++ v780$2 ++ v779$2), BV32_SUB(BV32_ADD($row.9$2, v774$2 ++ v773$2 ++ v772$2 ++ v771$2), 1bv32)))] else v783$2);
    call {:sourceloc} {:sourceloc_num 882} _LOG_WRITE_$$d_in2_pad_cumv_sel_all(p135$1, BV32_ADD(v139$1, $ei_new.16$1), v783$1, $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.16$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all(p135$2, BV32_ADD(v139$2, $ei_new.16$2));
    assume {:do_not_predicate} {:check_id "check_state_99"} {:captureState "check_state_99"} {:sourceloc} {:sourceloc_num 882} true;
    call {:check_id "check_state_99"} {:sourceloc} {:sourceloc_num 882} _CHECK_WRITE_$$d_in2_pad_cumv_sel_all(p135$2, BV32_ADD(v139$2, $ei_new.16$2), v783$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_pad_cumv_sel_all"} true;
    $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.16$1)] := (if p135$1 then v783$1 else $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.16$1)]);
    $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.16$2)] := (if p135$2 then v783$2 else $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.16$2)]);
    $ei_new.16$1 := (if p135$1 then BV32_ADD($ei_new.16$1, 256bv32) else $ei_new.16$1);
    $ei_new.16$2 := (if p135$2 then BV32_ADD($ei_new.16$2, 256bv32) else $ei_new.16$2);
    p134$1 := (if p135$1 then true else p134$1);
    p134$2 := (if p135$2 then true else p134$2);
    goto $121.backedge, __partitioned_block_$121.tail_0;

  __partitioned_block_$121.tail_0:
    assume !p134$1 && !p134$2;
    goto __partitioned_block_$121.tail_1;

  __partitioned_block_$121.tail_1:
    call {:sourceloc_num 884} $bugle_barrier_duplicated_19(1bv1, 1bv1);
    $ei_new.17$1 := v101$1;
    $ei_new.17$2 := v101$2;
    p138$1 := true;
    p138$2 := true;
    assume {:captureState "loop_entry_state_25_0"} true;
    goto $126;

  $126:
    assume {:captureState "loop_head_state_25"} true;
    assert {:tag "accessBreak"} _b415 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p138$1 ==> _b143 ==> p138$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p138$2 ==> _b143 ==> p138$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b142 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.17$1, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p138$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b142 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.17$2, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p138$2;
    assert {:tag "loopBound"} {:thread 1} p138$1 ==> _b141 ==> BV32_UGE($ei_new.17$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p138$2 ==> _b141 ==> BV32_UGE($ei_new.17$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p138$1 ==> _b140 ==> BV32_ULE($ei_new.17$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p138$2 ==> _b140 ==> BV32_ULE($ei_new.17$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p138$1 ==> _b139 ==> BV32_SGE($ei_new.17$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p138$2 ==> _b139 ==> BV32_SGE($ei_new.17$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p138$1 ==> _b138 ==> BV32_SLE($ei_new.17$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p138$2 ==> _b138 ==> BV32_SLE($ei_new.17$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p138$1 ==> _b137 ==> BV32_SLE(0bv32, $ei_new.17$1);
    assert {:tag "guardNonNeg"} {:thread 2} p138$2 ==> _b137 ==> BV32_SLE(0bv32, $ei_new.17$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p138$1 ==> _b136 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.17$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p138$2 ==> _b136 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.17$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 885} p138$1 ==> true;
    v784$1 := (if p138$1 then $$d_common$212bv32$1 else v784$1);
    v784$2 := (if p138$2 then $$d_common$212bv32$2 else v784$2);
    v785$1 := (if p138$1 then $$d_common$213bv32$1 else v785$1);
    v785$2 := (if p138$2 then $$d_common$213bv32$2 else v785$2);
    v786$1 := (if p138$1 then $$d_common$214bv32$1 else v786$1);
    v786$2 := (if p138$2 then $$d_common$214bv32$2 else v786$2);
    v787$1 := (if p138$1 then $$d_common$215bv32$1 else v787$1);
    v787$2 := (if p138$2 then $$d_common$215bv32$2 else v787$2);
    v788$1 := (if p138$1 then BV32_SLT($ei_new.17$1, v787$1 ++ v786$1 ++ v785$1 ++ v784$1) else v788$1);
    v788$2 := (if p138$2 then BV32_SLT($ei_new.17$2, v787$2 ++ v786$2 ++ v785$2 ++ v784$2) else v788$2);
    p139$1 := false;
    p139$2 := false;
    p140$1 := false;
    p140$2 := false;
    p141$1 := false;
    p141$2 := false;
    p139$1 := (if p138$1 && v788$1 then v788$1 else p139$1);
    p139$2 := (if p138$2 && v788$2 then v788$2 else p139$2);
    p138$1 := (if p138$1 && !v788$1 then v788$1 else p138$1);
    p138$2 := (if p138$2 && !v788$2 then v788$2 else p138$2);
    v789$1 := (if p139$1 then $$d_common$204bv32$1 else v789$1);
    v789$2 := (if p139$2 then $$d_common$204bv32$2 else v789$2);
    v790$1 := (if p139$1 then $$d_common$205bv32$1 else v790$1);
    v790$2 := (if p139$2 then $$d_common$205bv32$2 else v790$2);
    v791$1 := (if p139$1 then $$d_common$206bv32$1 else v791$1);
    v791$2 := (if p139$2 then $$d_common$206bv32$2 else v791$2);
    v792$1 := (if p139$1 then $$d_common$207bv32$1 else v792$1);
    v792$2 := (if p139$2 then $$d_common$207bv32$2 else v792$2);
    v793$1 := (if p139$1 then $$d_common$204bv32$1 else v793$1);
    v793$2 := (if p139$2 then $$d_common$204bv32$2 else v793$2);
    v794$1 := (if p139$1 then $$d_common$205bv32$1 else v794$1);
    v794$2 := (if p139$2 then $$d_common$205bv32$2 else v794$2);
    v795$1 := (if p139$1 then $$d_common$206bv32$1 else v795$1);
    v795$2 := (if p139$2 then $$d_common$206bv32$2 else v795$2);
    v796$1 := (if p139$1 then $$d_common$207bv32$1 else v796$1);
    v796$2 := (if p139$2 then $$d_common$207bv32$2 else v796$2);
    v797$1 := (if p139$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.17$1, 1bv32), v796$1 ++ v795$1 ++ v794$1 ++ v793$1), 1bv32), 1bv32) else v797$1);
    v797$2 := (if p139$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.17$2, 1bv32), v796$2 ++ v795$2 ++ v794$2 ++ v793$2), 1bv32), 1bv32) else v797$2);
    v798$1 := (if p139$1 then $$d_common$204bv32$1 else v798$1);
    v798$2 := (if p139$2 then $$d_common$204bv32$2 else v798$2);
    v799$1 := (if p139$1 then $$d_common$205bv32$1 else v799$1);
    v799$2 := (if p139$2 then $$d_common$205bv32$2 else v799$2);
    v800$1 := (if p139$1 then $$d_common$206bv32$1 else v800$1);
    v800$2 := (if p139$2 then $$d_common$206bv32$2 else v800$2);
    v801$1 := (if p139$1 then $$d_common$207bv32$1 else v801$1);
    v801$2 := (if p139$2 then $$d_common$207bv32$2 else v801$2);
    v802$1 := (if p139$1 then BV32_SREM(BV32_ADD($ei_new.17$1, 1bv32), v801$1 ++ v800$1 ++ v799$1 ++ v798$1) == 0bv32 else v802$1);
    v802$2 := (if p139$2 then BV32_SREM(BV32_ADD($ei_new.17$2, 1bv32), v801$2 ++ v800$2 ++ v799$2 ++ v798$2) == 0bv32 else v802$2);
    p141$1 := (if p139$1 && v802$1 then v802$1 else p141$1);
    p141$2 := (if p139$2 && v802$2 then v802$2 else p141$2);
    p140$1 := (if p139$1 && !v802$1 then !v802$1 else p140$1);
    p140$2 := (if p139$2 && !v802$2 then !v802$2 else p140$2);
    $row.10$1, $col.10$1 := (if p140$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.17$1, 1bv32), v792$1 ++ v791$1 ++ v790$1 ++ v789$1), 1bv32) else $row.10$1), (if p140$1 then v797$1 else $col.10$1);
    $row.10$2, $col.10$2 := (if p140$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.17$2, 1bv32), v792$2 ++ v791$2 ++ v790$2 ++ v789$2), 1bv32) else $row.10$2), (if p140$2 then v797$2 else $col.10$2);
    v803$1 := (if p141$1 then $$d_common$204bv32$1 else v803$1);
    v803$2 := (if p141$2 then $$d_common$204bv32$2 else v803$2);
    v804$1 := (if p141$1 then $$d_common$205bv32$1 else v804$1);
    v804$2 := (if p141$2 then $$d_common$205bv32$2 else v804$2);
    v805$1 := (if p141$1 then $$d_common$206bv32$1 else v805$1);
    v805$2 := (if p141$2 then $$d_common$206bv32$2 else v805$2);
    v806$1 := (if p141$1 then $$d_common$207bv32$1 else v806$1);
    v806$2 := (if p141$2 then $$d_common$207bv32$2 else v806$2);
    $row.10$1, $col.10$1 := (if p141$1 then BV32_SUB(v806$1 ++ v805$1 ++ v804$1 ++ v803$1, 1bv32) else $row.10$1), (if p141$1 then BV32_SUB(v797$1, 1bv32) else $col.10$1);
    $row.10$2, $col.10$2 := (if p141$2 then BV32_SUB(v806$2 ++ v805$2 ++ v804$2 ++ v803$2, 1bv32) else $row.10$2), (if p141$2 then BV32_SUB(v797$2, 1bv32) else $col.10$2);
    v807$1 := (if p139$1 then $$d_common$188bv32$1 else v807$1);
    v807$2 := (if p139$2 then $$d_common$188bv32$2 else v807$2);
    v808$1 := (if p139$1 then $$d_common$189bv32$1 else v808$1);
    v808$2 := (if p139$2 then $$d_common$189bv32$2 else v808$2);
    v809$1 := (if p139$1 then $$d_common$190bv32$1 else v809$1);
    v809$2 := (if p139$2 then $$d_common$190bv32$2 else v809$2);
    v810$1 := (if p139$1 then $$d_common$191bv32$1 else v810$1);
    v810$2 := (if p139$2 then $$d_common$191bv32$2 else v810$2);
    v811$1 := (if p139$1 then $$d_common$196bv32$1 else v811$1);
    v811$2 := (if p139$2 then $$d_common$196bv32$2 else v811$2);
    v812$1 := (if p139$1 then $$d_common$197bv32$1 else v812$1);
    v812$2 := (if p139$2 then $$d_common$197bv32$2 else v812$2);
    v813$1 := (if p139$1 then $$d_common$198bv32$1 else v813$1);
    v813$2 := (if p139$2 then $$d_common$198bv32$2 else v813$2);
    v814$1 := (if p139$1 then $$d_common$199bv32$1 else v814$1);
    v814$2 := (if p139$2 then $$d_common$199bv32$2 else v814$2);
    v815$1 := (if p139$1 then $$d_common$140bv32$1 else v815$1);
    v815$2 := (if p139$2 then $$d_common$140bv32$2 else v815$2);
    v816$1 := (if p139$1 then $$d_common$141bv32$1 else v816$1);
    v816$2 := (if p139$2 then $$d_common$141bv32$2 else v816$2);
    v817$1 := (if p139$1 then $$d_common$142bv32$1 else v817$1);
    v817$2 := (if p139$2 then $$d_common$142bv32$2 else v817$2);
    v818$1 := (if p139$1 then $$d_common$143bv32$1 else v818$1);
    v818$2 := (if p139$2 then $$d_common$143bv32$2 else v818$2);
    call {:sourceloc} {:sourceloc_num 921} _LOG_READ_$$d_in2_pad_cumv_all(p139$1, BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.10$1, v814$1 ++ v813$1 ++ v812$1 ++ v811$1), 1bv32), v818$1 ++ v817$1 ++ v816$1 ++ v815$1), BV32_SUB(BV32_ADD($row.10$1, v810$1 ++ v809$1 ++ v808$1 ++ v807$1), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.10$1, v814$1 ++ v813$1 ++ v812$1 ++ v811$1), 1bv32), v818$1 ++ v817$1 ++ v816$1 ++ v815$1), BV32_SUB(BV32_ADD($row.10$1, v810$1 ++ v809$1 ++ v808$1 ++ v807$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_96"} {:captureState "check_state_96"} {:sourceloc} {:sourceloc_num 921} true;
    call {:check_id "check_state_96"} {:sourceloc} {:sourceloc_num 921} _CHECK_READ_$$d_in2_pad_cumv_all(p139$2, BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.10$2, v814$2 ++ v813$2 ++ v812$2 ++ v811$2), 1bv32), v818$2 ++ v817$2 ++ v816$2 ++ v815$2), BV32_SUB(BV32_ADD($row.10$2, v810$2 ++ v809$2 ++ v808$2 ++ v807$2), 1bv32))), $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.10$2, v814$2 ++ v813$2 ++ v812$2 ++ v811$2), 1bv32), v818$2 ++ v817$2 ++ v816$2 ++ v815$2), BV32_SUB(BV32_ADD($row.10$2, v810$2 ++ v809$2 ++ v808$2 ++ v807$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_all"} true;
    v819$1 := (if p139$1 then $$d_in2_pad_cumv_all[BV32_ADD(v134$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.10$1, v814$1 ++ v813$1 ++ v812$1 ++ v811$1), 1bv32), v818$1 ++ v817$1 ++ v816$1 ++ v815$1), BV32_SUB(BV32_ADD($row.10$1, v810$1 ++ v809$1 ++ v808$1 ++ v807$1), 1bv32)))] else v819$1);
    v819$2 := (if p139$2 then $$d_in2_pad_cumv_all[BV32_ADD(v134$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.10$2, v814$2 ++ v813$2 ++ v812$2 ++ v811$2), 1bv32), v818$2 ++ v817$2 ++ v816$2 ++ v815$2), BV32_SUB(BV32_ADD($row.10$2, v810$2 ++ v809$2 ++ v808$2 ++ v807$2), 1bv32)))] else v819$2);
    call {:sourceloc} {:sourceloc_num 922} _LOG_WRITE_$$d_in2_sub_cumh_all(p139$1, BV32_ADD(v144$1, $ei_new.17$1), v819$1, $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.17$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(p139$2, BV32_ADD(v144$2, $ei_new.17$2));
    assume {:do_not_predicate} {:check_id "check_state_97"} {:captureState "check_state_97"} {:sourceloc} {:sourceloc_num 922} true;
    call {:check_id "check_state_97"} {:sourceloc} {:sourceloc_num 922} _CHECK_WRITE_$$d_in2_sub_cumh_all(p139$2, BV32_ADD(v144$2, $ei_new.17$2), v819$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_all"} true;
    $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.17$1)] := (if p139$1 then v819$1 else $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.17$1)]);
    $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.17$2)] := (if p139$2 then v819$2 else $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.17$2)]);
    $ei_new.17$1 := (if p139$1 then BV32_ADD($ei_new.17$1, 256bv32) else $ei_new.17$1);
    $ei_new.17$2 := (if p139$2 then BV32_ADD($ei_new.17$2, 256bv32) else $ei_new.17$2);
    p138$1 := (if p139$1 then true else p138$1);
    p138$2 := (if p139$2 then true else p138$2);
    goto $126.backedge, __partitioned_block_$126.tail_0;

  __partitioned_block_$126.tail_0:
    assume !p138$1 && !p138$2;
    goto __partitioned_block_$126.tail_1;

  __partitioned_block_$126.tail_1:
    call {:sourceloc_num 924} $bugle_barrier_duplicated_20(1bv1, 1bv1);
    $ei_new.18$1 := v101$1;
    $ei_new.18$2 := v101$2;
    p142$1 := true;
    p142$2 := true;
    assume {:captureState "loop_entry_state_24_0"} true;
    goto $131;

  $131:
    assume {:captureState "loop_head_state_24"} true;
    assert {:tag "accessBreak"} _b418 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "accessBreak"} _b417 ==> _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "accessBreak"} _b416 ==> _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce41), $d_common.coerce41), $d_common.coerce41), $d_common.coerce41);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p142$1 ==> _b151 ==> p142$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p142$2 ==> _b151 ==> p142$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b150 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.18$1, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p142$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b150 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.18$2, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0]) ==> p142$2;
    assert {:tag "loopBound"} {:thread 1} p142$1 ==> _b149 ==> BV32_UGE($ei_new.18$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p142$2 ==> _b149 ==> BV32_UGE($ei_new.18$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p142$1 ==> _b148 ==> BV32_ULE($ei_new.18$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p142$2 ==> _b148 ==> BV32_ULE($ei_new.18$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p142$1 ==> _b147 ==> BV32_SGE($ei_new.18$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p142$2 ==> _b147 ==> BV32_SGE($ei_new.18$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p142$1 ==> _b146 ==> BV32_SLE($ei_new.18$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p142$2 ==> _b146 ==> BV32_SLE($ei_new.18$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p142$1 ==> _b145 ==> BV32_SLE(0bv32, $ei_new.18$1);
    assert {:tag "guardNonNeg"} {:thread 2} p142$2 ==> _b145 ==> BV32_SLE(0bv32, $ei_new.18$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p142$1 ==> _b144 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.18$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p142$2 ==> _b144 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.18$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 925} p142$1 ==> true;
    v820$1 := (if p142$1 then $$d_common$212bv32$1 else v820$1);
    v820$2 := (if p142$2 then $$d_common$212bv32$2 else v820$2);
    v821$1 := (if p142$1 then $$d_common$213bv32$1 else v821$1);
    v821$2 := (if p142$2 then $$d_common$213bv32$2 else v821$2);
    v822$1 := (if p142$1 then $$d_common$214bv32$1 else v822$1);
    v822$2 := (if p142$2 then $$d_common$214bv32$2 else v822$2);
    v823$1 := (if p142$1 then $$d_common$215bv32$1 else v823$1);
    v823$2 := (if p142$2 then $$d_common$215bv32$2 else v823$2);
    v824$1 := (if p142$1 then BV32_SLT($ei_new.18$1, v823$1 ++ v822$1 ++ v821$1 ++ v820$1) else v824$1);
    v824$2 := (if p142$2 then BV32_SLT($ei_new.18$2, v823$2 ++ v822$2 ++ v821$2 ++ v820$2) else v824$2);
    p143$1 := false;
    p143$2 := false;
    p143$1 := (if p142$1 && v824$1 then v824$1 else p143$1);
    p143$2 := (if p142$2 && v824$2 then v824$2 else p143$2);
    p142$1 := (if p142$1 && !v824$1 then v824$1 else p142$1);
    p142$2 := (if p142$2 && !v824$2 then v824$2 else p142$2);
    call {:sourceloc} {:sourceloc_num 931} _LOG_READ_$$d_in2_pad_cumv_sel_all(p143$1, BV32_ADD(v139$1, $ei_new.18$1), $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.18$1)]);
    assume {:do_not_predicate} {:check_id "check_state_93"} {:captureState "check_state_93"} {:sourceloc} {:sourceloc_num 931} true;
    call {:check_id "check_state_93"} {:sourceloc} {:sourceloc_num 931} _CHECK_READ_$$d_in2_pad_cumv_sel_all(p143$2, BV32_ADD(v139$2, $ei_new.18$2), $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.18$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_pad_cumv_sel_all"} true;
    v825$1 := (if p143$1 then $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$1, $ei_new.18$1)] else v825$1);
    v825$2 := (if p143$2 then $$d_in2_pad_cumv_sel_all[BV32_ADD(v139$2, $ei_new.18$2)] else v825$2);
    call {:sourceloc} {:sourceloc_num 932} _LOG_READ_$$d_in2_sub_cumh_all(p143$1, BV32_ADD(v144$1, $ei_new.18$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.18$1)]);
    assume {:do_not_predicate} {:check_id "check_state_94"} {:captureState "check_state_94"} {:sourceloc} {:sourceloc_num 932} true;
    call {:check_id "check_state_94"} {:sourceloc} {:sourceloc_num 932} _CHECK_READ_$$d_in2_sub_cumh_all(p143$2, BV32_ADD(v144$2, $ei_new.18$2), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.18$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v826$1 := (if p143$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.18$1)] else v826$1);
    v826$2 := (if p143$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.18$2)] else v826$2);
    call {:sourceloc} {:sourceloc_num 933} _LOG_WRITE_$$d_in2_sub_cumh_all(p143$1, BV32_ADD(v144$1, $ei_new.18$1), FSUB32(v825$1, v826$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.18$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(p143$2, BV32_ADD(v144$2, $ei_new.18$2));
    assume {:do_not_predicate} {:check_id "check_state_95"} {:captureState "check_state_95"} {:sourceloc} {:sourceloc_num 933} true;
    call {:check_id "check_state_95"} {:sourceloc} {:sourceloc_num 933} _CHECK_WRITE_$$d_in2_sub_cumh_all(p143$2, BV32_ADD(v144$2, $ei_new.18$2), FSUB32(v825$2, v826$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_all"} true;
    $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.18$1)] := (if p143$1 then FSUB32(v825$1, v826$1) else $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $ei_new.18$1)]);
    $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.18$2)] := (if p143$2 then FSUB32(v825$2, v826$2) else $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $ei_new.18$2)]);
    $ei_new.18$1 := (if p143$1 then BV32_ADD($ei_new.18$1, 256bv32) else $ei_new.18$1);
    $ei_new.18$2 := (if p143$2 then BV32_ADD($ei_new.18$2, 256bv32) else $ei_new.18$2);
    p142$1 := (if p143$1 then true else p142$1);
    p142$2 := (if p143$2 then true else p142$2);
    goto $131.backedge, __partitioned_block_$131.tail_0;

  __partitioned_block_$131.tail_0:
    assume !p142$1 && !p142$2;
    goto __partitioned_block_$131.tail_1;

  __partitioned_block_$131.tail_1:
    call {:sourceloc_num 935} $bugle_barrier_duplicated_21(1bv1, 1bv1);
    $ei_new.19$1 := v101$1;
    $ei_new.19$2 := v101$2;
    p144$1 := true;
    p144$2 := true;
    assume {:captureState "loop_entry_state_22_0"} true;
    goto $134;

  $134:
    assume {:captureState "loop_head_state_22"} true;
    assert {:tag "accessBreak"} _b419 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p144$1 ==> _b159 ==> p144$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p144$2 ==> _b159 ==> p144$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b158 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.19$1, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) ==> p144$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b158 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.19$2, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) ==> p144$2;
    assert {:tag "loopBound"} {:thread 1} p144$1 ==> _b157 ==> BV32_UGE($ei_new.19$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p144$2 ==> _b157 ==> BV32_UGE($ei_new.19$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p144$1 ==> _b156 ==> BV32_ULE($ei_new.19$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p144$2 ==> _b156 ==> BV32_ULE($ei_new.19$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p144$1 ==> _b155 ==> BV32_SGE($ei_new.19$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p144$2 ==> _b155 ==> BV32_SGE($ei_new.19$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p144$1 ==> _b154 ==> BV32_SLE($ei_new.19$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p144$2 ==> _b154 ==> BV32_SLE($ei_new.19$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p144$1 ==> _b153 ==> BV32_SLE(0bv32, $ei_new.19$1);
    assert {:tag "guardNonNeg"} {:thread 2} p144$2 ==> _b153 ==> BV32_SLE(0bv32, $ei_new.19$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p144$1 ==> _b152 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.19$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p144$2 ==> _b152 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.19$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 936} p144$1 ==> true;
    v827$1 := (if p144$1 then $$d_common$204bv32$1 else v827$1);
    v827$2 := (if p144$2 then $$d_common$204bv32$2 else v827$2);
    v828$1 := (if p144$1 then $$d_common$205bv32$1 else v828$1);
    v828$2 := (if p144$2 then $$d_common$205bv32$2 else v828$2);
    v829$1 := (if p144$1 then $$d_common$206bv32$1 else v829$1);
    v829$2 := (if p144$2 then $$d_common$206bv32$2 else v829$2);
    v830$1 := (if p144$1 then $$d_common$207bv32$1 else v830$1);
    v830$2 := (if p144$2 then $$d_common$207bv32$2 else v830$2);
    v831$1 := (if p144$1 then BV32_SLT($ei_new.19$1, v830$1 ++ v829$1 ++ v828$1 ++ v827$1) else v831$1);
    v831$2 := (if p144$2 then BV32_SLT($ei_new.19$2, v830$2 ++ v829$2 ++ v828$2 ++ v827$2) else v831$2);
    p145$1 := false;
    p145$2 := false;
    p146$1 := false;
    p146$2 := false;
    p145$1 := (if p144$1 && v831$1 then v831$1 else p145$1);
    p145$2 := (if p144$2 && v831$2 then v831$2 else p145$2);
    p144$1 := (if p144$1 && !v831$1 then v831$1 else p144$1);
    p144$2 := (if p144$2 && !v831$2 then v831$2 else p144$2);
    $position.3$1, $sum.3$1 := (if p145$1 then $ei_new.19$1 else $position.3$1), (if p145$1 then 0bv32 else $sum.3$1);
    $position.3$2, $sum.3$2 := (if p145$2 then $ei_new.19$2 else $position.3$2), (if p145$2 then 0bv32 else $sum.3$2);
    p146$1 := (if p145$1 then true else p146$1);
    p146$2 := (if p145$2 then true else p146$2);
    assume {:captureState "loop_entry_state_23_0"} true;
    goto $136;

  $136:
    assume {:captureState "loop_head_state_23"} true;
    assert {:tag "accessBreak"} _b420 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce53), $d_common.coerce53), $d_common.coerce53), $d_common.coerce53);
    assert p146$1 ==> p144$1;
    assert p146$2 ==> p144$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p146$1 ==> _b345 ==> p146$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.19$1, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p146$2 ==> _b345 ==> p146$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.19$2, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b344 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.19$1, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) && BV32_SLT($position.3$1, BV32_ADD($ei_new.19$1, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0])) ==> p146$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b344 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.19$2, $d_common.coerce51[32:24] ++ $d_common.coerce51[24:16] ++ $d_common.coerce51[16:8] ++ $d_common.coerce51[8:0]) && BV32_SLT($position.3$2, BV32_ADD($ei_new.19$2, $d_common.coerce53[32:24] ++ $d_common.coerce53[24:16] ++ $d_common.coerce53[16:8] ++ $d_common.coerce53[8:0])) ==> p146$2;
    assert {:tag "loopBound"} {:thread 1} p146$1 ==> _b343 ==> BV32_UGE($position.3$1, $ei_new.19$1);
    assert {:tag "loopBound"} {:thread 2} p146$2 ==> _b343 ==> BV32_UGE($position.3$2, $ei_new.19$2);
    assert {:tag "loopBound"} {:thread 1} p146$1 ==> _b342 ==> BV32_ULE($position.3$1, $ei_new.19$1);
    assert {:tag "loopBound"} {:thread 2} p146$2 ==> _b342 ==> BV32_ULE($position.3$2, $ei_new.19$2);
    assert {:tag "loopBound"} {:thread 1} p146$1 ==> _b341 ==> BV32_SGE($position.3$1, $ei_new.19$1);
    assert {:tag "loopBound"} {:thread 2} p146$2 ==> _b341 ==> BV32_SGE($position.3$2, $ei_new.19$2);
    assert {:tag "loopBound"} {:thread 1} p146$1 ==> _b340 ==> BV32_SLE($position.3$1, $ei_new.19$1);
    assert {:tag "loopBound"} {:thread 2} p146$2 ==> _b340 ==> BV32_SLE($position.3$2, $ei_new.19$2);
    assert {:tag "guardNonNeg"} {:thread 1} p146$1 ==> _b339 ==> BV32_SLE(0bv32, $position.3$1);
    assert {:tag "guardNonNeg"} {:thread 2} p146$2 ==> _b339 ==> BV32_SLE(0bv32, $position.3$2);
    assert {:block_sourceloc} {:sourceloc_num 942} p146$1 ==> true;
    v832$1 := (if p146$1 then $$d_common$212bv32$1 else v832$1);
    v832$2 := (if p146$2 then $$d_common$212bv32$2 else v832$2);
    v833$1 := (if p146$1 then $$d_common$213bv32$1 else v833$1);
    v833$2 := (if p146$2 then $$d_common$213bv32$2 else v833$2);
    v834$1 := (if p146$1 then $$d_common$214bv32$1 else v834$1);
    v834$2 := (if p146$2 then $$d_common$214bv32$2 else v834$2);
    v835$1 := (if p146$1 then $$d_common$215bv32$1 else v835$1);
    v835$2 := (if p146$2 then $$d_common$215bv32$2 else v835$2);
    v836$1 := (if p146$1 then BV32_SLT($position.3$1, BV32_ADD($ei_new.19$1, v835$1 ++ v834$1 ++ v833$1 ++ v832$1)) else v836$1);
    v836$2 := (if p146$2 then BV32_SLT($position.3$2, BV32_ADD($ei_new.19$2, v835$2 ++ v834$2 ++ v833$2 ++ v832$2)) else v836$2);
    p147$1 := false;
    p147$2 := false;
    p147$1 := (if p146$1 && v836$1 then v836$1 else p147$1);
    p147$2 := (if p146$2 && v836$2 then v836$2 else p147$2);
    p146$1 := (if p146$1 && !v836$1 then v836$1 else p146$1);
    p146$2 := (if p146$2 && !v836$2 then v836$2 else p146$2);
    call {:sourceloc} {:sourceloc_num 948} _LOG_READ_$$d_in2_sub_cumh_all(p147$1, BV32_ADD(v144$1, $position.3$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.3$1)]);
    assume {:do_not_predicate} {:check_id "check_state_90"} {:captureState "check_state_90"} {:sourceloc} {:sourceloc_num 948} true;
    call {:check_id "check_state_90"} {:sourceloc} {:sourceloc_num 948} _CHECK_READ_$$d_in2_sub_cumh_all(p147$2, BV32_ADD(v144$2, $position.3$2), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.3$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v837$1 := (if p147$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.3$1)] else v837$1);
    v837$2 := (if p147$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.3$2)] else v837$2);
    call {:sourceloc} {:sourceloc_num 949} _LOG_WRITE_$$d_in2_sub_cumh_all(p147$1, BV32_ADD(v144$1, $position.3$1), FADD32(v837$1, $sum.3$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.3$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(p147$2, BV32_ADD(v144$2, $position.3$2));
    assume {:do_not_predicate} {:check_id "check_state_91"} {:captureState "check_state_91"} {:sourceloc} {:sourceloc_num 949} true;
    call {:check_id "check_state_91"} {:sourceloc} {:sourceloc_num 949} _CHECK_WRITE_$$d_in2_sub_cumh_all(p147$2, BV32_ADD(v144$2, $position.3$2), FADD32(v837$2, $sum.3$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_all"} true;
    $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.3$1)] := (if p147$1 then FADD32(v837$1, $sum.3$1) else $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.3$1)]);
    $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.3$2)] := (if p147$2 then FADD32(v837$2, $sum.3$2) else $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.3$2)]);
    call {:sourceloc} {:sourceloc_num 950} _LOG_READ_$$d_in2_sub_cumh_all(p147$1, BV32_ADD(v144$1, $position.3$1), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.3$1)]);
    assume {:do_not_predicate} {:check_id "check_state_92"} {:captureState "check_state_92"} {:sourceloc} {:sourceloc_num 950} true;
    call {:check_id "check_state_92"} {:sourceloc} {:sourceloc_num 950} _CHECK_READ_$$d_in2_sub_cumh_all(p147$2, BV32_ADD(v144$2, $position.3$2), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.3$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v838$1 := (if p147$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, $position.3$1)] else v838$1);
    v838$2 := (if p147$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, $position.3$2)] else v838$2);
    v839$1 := (if p147$1 then $$d_common$204bv32$1 else v839$1);
    v839$2 := (if p147$2 then $$d_common$204bv32$2 else v839$2);
    v840$1 := (if p147$1 then $$d_common$205bv32$1 else v840$1);
    v840$2 := (if p147$2 then $$d_common$205bv32$2 else v840$2);
    v841$1 := (if p147$1 then $$d_common$206bv32$1 else v841$1);
    v841$2 := (if p147$2 then $$d_common$206bv32$2 else v841$2);
    v842$1 := (if p147$1 then $$d_common$207bv32$1 else v842$1);
    v842$2 := (if p147$2 then $$d_common$207bv32$2 else v842$2);
    $position.3$1, $sum.3$1 := (if p147$1 then BV32_ADD($position.3$1, v842$1 ++ v841$1 ++ v840$1 ++ v839$1) else $position.3$1), (if p147$1 then v838$1 else $sum.3$1);
    $position.3$2, $sum.3$2 := (if p147$2 then BV32_ADD($position.3$2, v842$2 ++ v841$2 ++ v840$2 ++ v839$2) else $position.3$2), (if p147$2 then v838$2 else $sum.3$2);
    p146$1 := (if p147$1 then true else p146$1);
    p146$2 := (if p147$2 then true else p146$2);
    goto $136.backedge, $136.tail;

  $136.tail:
    assume !p146$1 && !p146$2;
    $ei_new.19$1 := (if p145$1 then BV32_ADD($ei_new.19$1, 256bv32) else $ei_new.19$1);
    $ei_new.19$2 := (if p145$2 then BV32_ADD($ei_new.19$2, 256bv32) else $ei_new.19$2);
    p144$1 := (if p145$1 then true else p144$1);
    p144$2 := (if p145$2 then true else p144$2);
    goto $134.backedge, __partitioned_block_$134.tail_0;

  __partitioned_block_$134.tail_0:
    assume !p144$1 && !p144$2;
    goto __partitioned_block_$134.tail_1;

  __partitioned_block_$134.tail_1:
    call {:sourceloc_num 958} $bugle_barrier_duplicated_22(1bv1, 1bv1);
    $ei_new.20$1 := v101$1;
    $ei_new.20$2 := v101$2;
    p148$1 := true;
    p148$2 := true;
    assume {:captureState "loop_entry_state_21_0"} true;
    goto $141;

  $141:
    assume {:captureState "loop_head_state_21"} true;
    assert {:tag "accessBreak"} _b421 ==> _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce57), $d_common.coerce57), $d_common.coerce57), $d_common.coerce57);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p148$1 ==> _b167 ==> p148$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p148$2 ==> _b167 ==> p148$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b166 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.20$1, $d_common.coerce57[32:24] ++ $d_common.coerce57[24:16] ++ $d_common.coerce57[16:8] ++ $d_common.coerce57[8:0]) ==> p148$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b166 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.20$2, $d_common.coerce57[32:24] ++ $d_common.coerce57[24:16] ++ $d_common.coerce57[16:8] ++ $d_common.coerce57[8:0]) ==> p148$2;
    assert {:tag "loopBound"} {:thread 1} p148$1 ==> _b165 ==> BV32_UGE($ei_new.20$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p148$2 ==> _b165 ==> BV32_UGE($ei_new.20$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p148$1 ==> _b164 ==> BV32_ULE($ei_new.20$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p148$2 ==> _b164 ==> BV32_ULE($ei_new.20$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p148$1 ==> _b163 ==> BV32_SGE($ei_new.20$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p148$2 ==> _b163 ==> BV32_SGE($ei_new.20$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p148$1 ==> _b162 ==> BV32_SLE($ei_new.20$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p148$2 ==> _b162 ==> BV32_SLE($ei_new.20$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p148$1 ==> _b161 ==> BV32_SLE(0bv32, $ei_new.20$1);
    assert {:tag "guardNonNeg"} {:thread 2} p148$2 ==> _b161 ==> BV32_SLE(0bv32, $ei_new.20$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p148$1 ==> _b160 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.20$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p148$2 ==> _b160 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.20$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 959} p148$1 ==> true;
    v843$1 := (if p148$1 then $$d_common$228bv32$1 else v843$1);
    v843$2 := (if p148$2 then $$d_common$228bv32$2 else v843$2);
    v844$1 := (if p148$1 then $$d_common$229bv32$1 else v844$1);
    v844$2 := (if p148$2 then $$d_common$229bv32$2 else v844$2);
    v845$1 := (if p148$1 then $$d_common$230bv32$1 else v845$1);
    v845$2 := (if p148$2 then $$d_common$230bv32$2 else v845$2);
    v846$1 := (if p148$1 then $$d_common$231bv32$1 else v846$1);
    v846$2 := (if p148$2 then $$d_common$231bv32$2 else v846$2);
    v847$1 := (if p148$1 then BV32_SLT($ei_new.20$1, v846$1 ++ v845$1 ++ v844$1 ++ v843$1) else v847$1);
    v847$2 := (if p148$2 then BV32_SLT($ei_new.20$2, v846$2 ++ v845$2 ++ v844$2 ++ v843$2) else v847$2);
    p149$1 := false;
    p149$2 := false;
    p150$1 := false;
    p150$2 := false;
    p151$1 := false;
    p151$2 := false;
    p149$1 := (if p148$1 && v847$1 then v847$1 else p149$1);
    p149$2 := (if p148$2 && v847$2 then v847$2 else p149$2);
    p148$1 := (if p148$1 && !v847$1 then v847$1 else p148$1);
    p148$2 := (if p148$2 && !v847$2 then v847$2 else p148$2);
    v848$1 := (if p149$1 then $$d_common$220bv32$1 else v848$1);
    v848$2 := (if p149$2 then $$d_common$220bv32$2 else v848$2);
    v849$1 := (if p149$1 then $$d_common$221bv32$1 else v849$1);
    v849$2 := (if p149$2 then $$d_common$221bv32$2 else v849$2);
    v850$1 := (if p149$1 then $$d_common$222bv32$1 else v850$1);
    v850$2 := (if p149$2 then $$d_common$222bv32$2 else v850$2);
    v851$1 := (if p149$1 then $$d_common$223bv32$1 else v851$1);
    v851$2 := (if p149$2 then $$d_common$223bv32$2 else v851$2);
    v852$1 := (if p149$1 then $$d_common$220bv32$1 else v852$1);
    v852$2 := (if p149$2 then $$d_common$220bv32$2 else v852$2);
    v853$1 := (if p149$1 then $$d_common$221bv32$1 else v853$1);
    v853$2 := (if p149$2 then $$d_common$221bv32$2 else v853$2);
    v854$1 := (if p149$1 then $$d_common$222bv32$1 else v854$1);
    v854$2 := (if p149$2 then $$d_common$222bv32$2 else v854$2);
    v855$1 := (if p149$1 then $$d_common$223bv32$1 else v855$1);
    v855$2 := (if p149$2 then $$d_common$223bv32$2 else v855$2);
    v856$1 := (if p149$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.20$1, 1bv32), v855$1 ++ v854$1 ++ v853$1 ++ v852$1), 1bv32), 1bv32) else v856$1);
    v856$2 := (if p149$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.20$2, 1bv32), v855$2 ++ v854$2 ++ v853$2 ++ v852$2), 1bv32), 1bv32) else v856$2);
    v857$1 := (if p149$1 then $$d_common$220bv32$1 else v857$1);
    v857$2 := (if p149$2 then $$d_common$220bv32$2 else v857$2);
    v858$1 := (if p149$1 then $$d_common$221bv32$1 else v858$1);
    v858$2 := (if p149$2 then $$d_common$221bv32$2 else v858$2);
    v859$1 := (if p149$1 then $$d_common$222bv32$1 else v859$1);
    v859$2 := (if p149$2 then $$d_common$222bv32$2 else v859$2);
    v860$1 := (if p149$1 then $$d_common$223bv32$1 else v860$1);
    v860$2 := (if p149$2 then $$d_common$223bv32$2 else v860$2);
    v861$1 := (if p149$1 then BV32_SREM(BV32_ADD($ei_new.20$1, 1bv32), v860$1 ++ v859$1 ++ v858$1 ++ v857$1) == 0bv32 else v861$1);
    v861$2 := (if p149$2 then BV32_SREM(BV32_ADD($ei_new.20$2, 1bv32), v860$2 ++ v859$2 ++ v858$2 ++ v857$2) == 0bv32 else v861$2);
    p151$1 := (if p149$1 && v861$1 then v861$1 else p151$1);
    p151$2 := (if p149$2 && v861$2 then v861$2 else p151$2);
    p150$1 := (if p149$1 && !v861$1 then !v861$1 else p150$1);
    p150$2 := (if p149$2 && !v861$2 then !v861$2 else p150$2);
    $row.11$1, $col.11$1 := (if p150$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.20$1, 1bv32), v851$1 ++ v850$1 ++ v849$1 ++ v848$1), 1bv32) else $row.11$1), (if p150$1 then v856$1 else $col.11$1);
    $row.11$2, $col.11$2 := (if p150$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.20$2, 1bv32), v851$2 ++ v850$2 ++ v849$2 ++ v848$2), 1bv32) else $row.11$2), (if p150$2 then v856$2 else $col.11$2);
    v862$1 := (if p151$1 then $$d_common$220bv32$1 else v862$1);
    v862$2 := (if p151$2 then $$d_common$220bv32$2 else v862$2);
    v863$1 := (if p151$1 then $$d_common$221bv32$1 else v863$1);
    v863$2 := (if p151$2 then $$d_common$221bv32$2 else v863$2);
    v864$1 := (if p151$1 then $$d_common$222bv32$1 else v864$1);
    v864$2 := (if p151$2 then $$d_common$222bv32$2 else v864$2);
    v865$1 := (if p151$1 then $$d_common$223bv32$1 else v865$1);
    v865$2 := (if p151$2 then $$d_common$223bv32$2 else v865$2);
    $row.11$1, $col.11$1 := (if p151$1 then BV32_SUB(v865$1 ++ v864$1 ++ v863$1 ++ v862$1, 1bv32) else $row.11$1), (if p151$1 then BV32_SUB(v856$1, 1bv32) else $col.11$1);
    $row.11$2, $col.11$2 := (if p151$2 then BV32_SUB(v865$2 ++ v864$2 ++ v863$2 ++ v862$2, 1bv32) else $row.11$2), (if p151$2 then BV32_SUB(v856$2, 1bv32) else $col.11$2);
    v866$1 := (if p149$1 then $$d_common$236bv32$1 else v866$1);
    v866$2 := (if p149$2 then $$d_common$236bv32$2 else v866$2);
    v867$1 := (if p149$1 then $$d_common$237bv32$1 else v867$1);
    v867$2 := (if p149$2 then $$d_common$237bv32$2 else v867$2);
    v868$1 := (if p149$1 then $$d_common$238bv32$1 else v868$1);
    v868$2 := (if p149$2 then $$d_common$238bv32$2 else v868$2);
    v869$1 := (if p149$1 then $$d_common$239bv32$1 else v869$1);
    v869$2 := (if p149$2 then $$d_common$239bv32$2 else v869$2);
    v870$1 := (if p149$1 then $$d_common$244bv32$1 else v870$1);
    v870$2 := (if p149$2 then $$d_common$244bv32$2 else v870$2);
    v871$1 := (if p149$1 then $$d_common$245bv32$1 else v871$1);
    v871$2 := (if p149$2 then $$d_common$245bv32$2 else v871$2);
    v872$1 := (if p149$1 then $$d_common$246bv32$1 else v872$1);
    v872$2 := (if p149$2 then $$d_common$246bv32$2 else v872$2);
    v873$1 := (if p149$1 then $$d_common$247bv32$1 else v873$1);
    v873$2 := (if p149$2 then $$d_common$247bv32$2 else v873$2);
    v874$1 := (if p149$1 then $$d_common$204bv32$1 else v874$1);
    v874$2 := (if p149$2 then $$d_common$204bv32$2 else v874$2);
    v875$1 := (if p149$1 then $$d_common$205bv32$1 else v875$1);
    v875$2 := (if p149$2 then $$d_common$205bv32$2 else v875$2);
    v876$1 := (if p149$1 then $$d_common$206bv32$1 else v876$1);
    v876$2 := (if p149$2 then $$d_common$206bv32$2 else v876$2);
    v877$1 := (if p149$1 then $$d_common$207bv32$1 else v877$1);
    v877$2 := (if p149$2 then $$d_common$207bv32$2 else v877$2);
    call {:sourceloc} {:sourceloc_num 995} _LOG_READ_$$d_in2_sub_cumh_all(p149$1, BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.11$1, v873$1 ++ v872$1 ++ v871$1 ++ v870$1), 1bv32), v877$1 ++ v876$1 ++ v875$1 ++ v874$1), BV32_SUB(BV32_ADD($row.11$1, v869$1 ++ v868$1 ++ v867$1 ++ v866$1), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.11$1, v873$1 ++ v872$1 ++ v871$1 ++ v870$1), 1bv32), v877$1 ++ v876$1 ++ v875$1 ++ v874$1), BV32_SUB(BV32_ADD($row.11$1, v869$1 ++ v868$1 ++ v867$1 ++ v866$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_88"} {:captureState "check_state_88"} {:sourceloc} {:sourceloc_num 995} true;
    call {:check_id "check_state_88"} {:sourceloc} {:sourceloc_num 995} _CHECK_READ_$$d_in2_sub_cumh_all(p149$2, BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.11$2, v873$2 ++ v872$2 ++ v871$2 ++ v870$2), 1bv32), v877$2 ++ v876$2 ++ v875$2 ++ v874$2), BV32_SUB(BV32_ADD($row.11$2, v869$2 ++ v868$2 ++ v867$2 ++ v866$2), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.11$2, v873$2 ++ v872$2 ++ v871$2 ++ v870$2), 1bv32), v877$2 ++ v876$2 ++ v875$2 ++ v874$2), BV32_SUB(BV32_ADD($row.11$2, v869$2 ++ v868$2 ++ v867$2 ++ v866$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v878$1 := (if p149$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.11$1, v873$1 ++ v872$1 ++ v871$1 ++ v870$1), 1bv32), v877$1 ++ v876$1 ++ v875$1 ++ v874$1), BV32_SUB(BV32_ADD($row.11$1, v869$1 ++ v868$1 ++ v867$1 ++ v866$1), 1bv32)))] else v878$1);
    v878$2 := (if p149$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.11$2, v873$2 ++ v872$2 ++ v871$2 ++ v870$2), 1bv32), v877$2 ++ v876$2 ++ v875$2 ++ v874$2), BV32_SUB(BV32_ADD($row.11$2, v869$2 ++ v868$2 ++ v867$2 ++ v866$2), 1bv32)))] else v878$2);
    call {:sourceloc} {:sourceloc_num 996} _LOG_WRITE_$$d_in2_sub_cumh_sel_all(p149$1, BV32_ADD(v149$1, $ei_new.20$1), v878$1, $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.20$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all(p149$2, BV32_ADD(v149$2, $ei_new.20$2));
    assume {:do_not_predicate} {:check_id "check_state_89"} {:captureState "check_state_89"} {:sourceloc} {:sourceloc_num 996} true;
    call {:check_id "check_state_89"} {:sourceloc} {:sourceloc_num 996} _CHECK_WRITE_$$d_in2_sub_cumh_sel_all(p149$2, BV32_ADD(v149$2, $ei_new.20$2), v878$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sub_cumh_sel_all"} true;
    $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.20$1)] := (if p149$1 then v878$1 else $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.20$1)]);
    $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.20$2)] := (if p149$2 then v878$2 else $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.20$2)]);
    $ei_new.20$1 := (if p149$1 then BV32_ADD($ei_new.20$1, 256bv32) else $ei_new.20$1);
    $ei_new.20$2 := (if p149$2 then BV32_ADD($ei_new.20$2, 256bv32) else $ei_new.20$2);
    p148$1 := (if p149$1 then true else p148$1);
    p148$2 := (if p149$2 then true else p148$2);
    goto $141.backedge, __partitioned_block_$141.tail_0;

  __partitioned_block_$141.tail_0:
    assume !p148$1 && !p148$2;
    goto __partitioned_block_$141.tail_1;

  __partitioned_block_$141.tail_1:
    call {:sourceloc_num 998} $bugle_barrier_duplicated_23(1bv1, 1bv1);
    $ei_new.21$1 := v101$1;
    $ei_new.21$2 := v101$2;
    p152$1 := true;
    p152$2 := true;
    assume {:captureState "loop_entry_state_20_0"} true;
    goto $146;

  $146:
    assume {:captureState "loop_head_state_20"} true;
    assert {:tag "accessBreak"} _b422 ==> _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p152$1 ==> _b175 ==> p152$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p152$2 ==> _b175 ==> p152$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b174 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.21$1, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p152$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b174 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.21$2, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p152$2;
    assert {:tag "loopBound"} {:thread 1} p152$1 ==> _b173 ==> BV32_UGE($ei_new.21$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p152$2 ==> _b173 ==> BV32_UGE($ei_new.21$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p152$1 ==> _b172 ==> BV32_ULE($ei_new.21$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p152$2 ==> _b172 ==> BV32_ULE($ei_new.21$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p152$1 ==> _b171 ==> BV32_SGE($ei_new.21$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p152$2 ==> _b171 ==> BV32_SGE($ei_new.21$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p152$1 ==> _b170 ==> BV32_SLE($ei_new.21$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p152$2 ==> _b170 ==> BV32_SLE($ei_new.21$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p152$1 ==> _b169 ==> BV32_SLE(0bv32, $ei_new.21$1);
    assert {:tag "guardNonNeg"} {:thread 2} p152$2 ==> _b169 ==> BV32_SLE(0bv32, $ei_new.21$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p152$1 ==> _b168 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.21$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p152$2 ==> _b168 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.21$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 999} p152$1 ==> true;
    v879$1 := (if p152$1 then $$d_common$276bv32$1 else v879$1);
    v879$2 := (if p152$2 then $$d_common$276bv32$2 else v879$2);
    v880$1 := (if p152$1 then $$d_common$277bv32$1 else v880$1);
    v880$2 := (if p152$2 then $$d_common$277bv32$2 else v880$2);
    v881$1 := (if p152$1 then $$d_common$278bv32$1 else v881$1);
    v881$2 := (if p152$2 then $$d_common$278bv32$2 else v881$2);
    v882$1 := (if p152$1 then $$d_common$279bv32$1 else v882$1);
    v882$2 := (if p152$2 then $$d_common$279bv32$2 else v882$2);
    v883$1 := (if p152$1 then BV32_SLT($ei_new.21$1, v882$1 ++ v881$1 ++ v880$1 ++ v879$1) else v883$1);
    v883$2 := (if p152$2 then BV32_SLT($ei_new.21$2, v882$2 ++ v881$2 ++ v880$2 ++ v879$2) else v883$2);
    p153$1 := false;
    p153$2 := false;
    p154$1 := false;
    p154$2 := false;
    p155$1 := false;
    p155$2 := false;
    p153$1 := (if p152$1 && v883$1 then v883$1 else p153$1);
    p153$2 := (if p152$2 && v883$2 then v883$2 else p153$2);
    p152$1 := (if p152$1 && !v883$1 then v883$1 else p152$1);
    p152$2 := (if p152$2 && !v883$2 then v883$2 else p152$2);
    v884$1 := (if p153$1 then $$d_common$268bv32$1 else v884$1);
    v884$2 := (if p153$2 then $$d_common$268bv32$2 else v884$2);
    v885$1 := (if p153$1 then $$d_common$269bv32$1 else v885$1);
    v885$2 := (if p153$2 then $$d_common$269bv32$2 else v885$2);
    v886$1 := (if p153$1 then $$d_common$270bv32$1 else v886$1);
    v886$2 := (if p153$2 then $$d_common$270bv32$2 else v886$2);
    v887$1 := (if p153$1 then $$d_common$271bv32$1 else v887$1);
    v887$2 := (if p153$2 then $$d_common$271bv32$2 else v887$2);
    v888$1 := (if p153$1 then $$d_common$268bv32$1 else v888$1);
    v888$2 := (if p153$2 then $$d_common$268bv32$2 else v888$2);
    v889$1 := (if p153$1 then $$d_common$269bv32$1 else v889$1);
    v889$2 := (if p153$2 then $$d_common$269bv32$2 else v889$2);
    v890$1 := (if p153$1 then $$d_common$270bv32$1 else v890$1);
    v890$2 := (if p153$2 then $$d_common$270bv32$2 else v890$2);
    v891$1 := (if p153$1 then $$d_common$271bv32$1 else v891$1);
    v891$2 := (if p153$2 then $$d_common$271bv32$2 else v891$2);
    v892$1 := (if p153$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.21$1, 1bv32), v891$1 ++ v890$1 ++ v889$1 ++ v888$1), 1bv32), 1bv32) else v892$1);
    v892$2 := (if p153$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.21$2, 1bv32), v891$2 ++ v890$2 ++ v889$2 ++ v888$2), 1bv32), 1bv32) else v892$2);
    v893$1 := (if p153$1 then $$d_common$268bv32$1 else v893$1);
    v893$2 := (if p153$2 then $$d_common$268bv32$2 else v893$2);
    v894$1 := (if p153$1 then $$d_common$269bv32$1 else v894$1);
    v894$2 := (if p153$2 then $$d_common$269bv32$2 else v894$2);
    v895$1 := (if p153$1 then $$d_common$270bv32$1 else v895$1);
    v895$2 := (if p153$2 then $$d_common$270bv32$2 else v895$2);
    v896$1 := (if p153$1 then $$d_common$271bv32$1 else v896$1);
    v896$2 := (if p153$2 then $$d_common$271bv32$2 else v896$2);
    v897$1 := (if p153$1 then BV32_SREM(BV32_ADD($ei_new.21$1, 1bv32), v896$1 ++ v895$1 ++ v894$1 ++ v893$1) == 0bv32 else v897$1);
    v897$2 := (if p153$2 then BV32_SREM(BV32_ADD($ei_new.21$2, 1bv32), v896$2 ++ v895$2 ++ v894$2 ++ v893$2) == 0bv32 else v897$2);
    p155$1 := (if p153$1 && v897$1 then v897$1 else p155$1);
    p155$2 := (if p153$2 && v897$2 then v897$2 else p155$2);
    p154$1 := (if p153$1 && !v897$1 then !v897$1 else p154$1);
    p154$2 := (if p153$2 && !v897$2 then !v897$2 else p154$2);
    $row.12$1, $col.12$1 := (if p154$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.21$1, 1bv32), v887$1 ++ v886$1 ++ v885$1 ++ v884$1), 1bv32) else $row.12$1), (if p154$1 then v892$1 else $col.12$1);
    $row.12$2, $col.12$2 := (if p154$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.21$2, 1bv32), v887$2 ++ v886$2 ++ v885$2 ++ v884$2), 1bv32) else $row.12$2), (if p154$2 then v892$2 else $col.12$2);
    v898$1 := (if p155$1 then $$d_common$268bv32$1 else v898$1);
    v898$2 := (if p155$2 then $$d_common$268bv32$2 else v898$2);
    v899$1 := (if p155$1 then $$d_common$269bv32$1 else v899$1);
    v899$2 := (if p155$2 then $$d_common$269bv32$2 else v899$2);
    v900$1 := (if p155$1 then $$d_common$270bv32$1 else v900$1);
    v900$2 := (if p155$2 then $$d_common$270bv32$2 else v900$2);
    v901$1 := (if p155$1 then $$d_common$271bv32$1 else v901$1);
    v901$2 := (if p155$2 then $$d_common$271bv32$2 else v901$2);
    $row.12$1, $col.12$1 := (if p155$1 then BV32_SUB(v901$1 ++ v900$1 ++ v899$1 ++ v898$1, 1bv32) else $row.12$1), (if p155$1 then BV32_SUB(v892$1, 1bv32) else $col.12$1);
    $row.12$2, $col.12$2 := (if p155$2 then BV32_SUB(v901$2 ++ v900$2 ++ v899$2 ++ v898$2, 1bv32) else $row.12$2), (if p155$2 then BV32_SUB(v892$2, 1bv32) else $col.12$2);
    v902$1 := (if p153$1 then $$d_common$252bv32$1 else v902$1);
    v902$2 := (if p153$2 then $$d_common$252bv32$2 else v902$2);
    v903$1 := (if p153$1 then $$d_common$253bv32$1 else v903$1);
    v903$2 := (if p153$2 then $$d_common$253bv32$2 else v903$2);
    v904$1 := (if p153$1 then $$d_common$254bv32$1 else v904$1);
    v904$2 := (if p153$2 then $$d_common$254bv32$2 else v904$2);
    v905$1 := (if p153$1 then $$d_common$255bv32$1 else v905$1);
    v905$2 := (if p153$2 then $$d_common$255bv32$2 else v905$2);
    v906$1 := (if p153$1 then $$d_common$260bv32$1 else v906$1);
    v906$2 := (if p153$2 then $$d_common$260bv32$2 else v906$2);
    v907$1 := (if p153$1 then $$d_common$261bv32$1 else v907$1);
    v907$2 := (if p153$2 then $$d_common$261bv32$2 else v907$2);
    v908$1 := (if p153$1 then $$d_common$262bv32$1 else v908$1);
    v908$2 := (if p153$2 then $$d_common$262bv32$2 else v908$2);
    v909$1 := (if p153$1 then $$d_common$263bv32$1 else v909$1);
    v909$2 := (if p153$2 then $$d_common$263bv32$2 else v909$2);
    v910$1 := (if p153$1 then $$d_common$204bv32$1 else v910$1);
    v910$2 := (if p153$2 then $$d_common$204bv32$2 else v910$2);
    v911$1 := (if p153$1 then $$d_common$205bv32$1 else v911$1);
    v911$2 := (if p153$2 then $$d_common$205bv32$2 else v911$2);
    v912$1 := (if p153$1 then $$d_common$206bv32$1 else v912$1);
    v912$2 := (if p153$2 then $$d_common$206bv32$2 else v912$2);
    v913$1 := (if p153$1 then $$d_common$207bv32$1 else v913$1);
    v913$2 := (if p153$2 then $$d_common$207bv32$2 else v913$2);
    call {:sourceloc} {:sourceloc_num 1035} _LOG_READ_$$d_in2_sub_cumh_all(p153$1, BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.12$1, v909$1 ++ v908$1 ++ v907$1 ++ v906$1), 1bv32), v913$1 ++ v912$1 ++ v911$1 ++ v910$1), BV32_SUB(BV32_ADD($row.12$1, v905$1 ++ v904$1 ++ v903$1 ++ v902$1), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.12$1, v909$1 ++ v908$1 ++ v907$1 ++ v906$1), 1bv32), v913$1 ++ v912$1 ++ v911$1 ++ v910$1), BV32_SUB(BV32_ADD($row.12$1, v905$1 ++ v904$1 ++ v903$1 ++ v902$1), 1bv32)))]);
    assume {:do_not_predicate} {:check_id "check_state_86"} {:captureState "check_state_86"} {:sourceloc} {:sourceloc_num 1035} true;
    call {:check_id "check_state_86"} {:sourceloc} {:sourceloc_num 1035} _CHECK_READ_$$d_in2_sub_cumh_all(p153$2, BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.12$2, v909$2 ++ v908$2 ++ v907$2 ++ v906$2), 1bv32), v913$2 ++ v912$2 ++ v911$2 ++ v910$2), BV32_SUB(BV32_ADD($row.12$2, v905$2 ++ v904$2 ++ v903$2 ++ v902$2), 1bv32))), $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.12$2, v909$2 ++ v908$2 ++ v907$2 ++ v906$2), 1bv32), v913$2 ++ v912$2 ++ v911$2 ++ v910$2), BV32_SUB(BV32_ADD($row.12$2, v905$2 ++ v904$2 ++ v903$2 ++ v902$2), 1bv32)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_all"} true;
    v914$1 := (if p153$1 then $$d_in2_sub_cumh_all[BV32_ADD(v144$1, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.12$1, v909$1 ++ v908$1 ++ v907$1 ++ v906$1), 1bv32), v913$1 ++ v912$1 ++ v911$1 ++ v910$1), BV32_SUB(BV32_ADD($row.12$1, v905$1 ++ v904$1 ++ v903$1 ++ v902$1), 1bv32)))] else v914$1);
    v914$2 := (if p153$2 then $$d_in2_sub_cumh_all[BV32_ADD(v144$2, BV32_ADD(BV32_MUL(BV32_SUB(BV32_ADD($col.12$2, v909$2 ++ v908$2 ++ v907$2 ++ v906$2), 1bv32), v913$2 ++ v912$2 ++ v911$2 ++ v910$2), BV32_SUB(BV32_ADD($row.12$2, v905$2 ++ v904$2 ++ v903$2 ++ v902$2), 1bv32)))] else v914$2);
    call {:sourceloc} {:sourceloc_num 1036} _LOG_WRITE_$$d_in2_sqr_sub2_all(p153$1, BV32_ADD(v164$1, $ei_new.21$1), v914$1, $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.21$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all(p153$2, BV32_ADD(v164$2, $ei_new.21$2));
    assume {:do_not_predicate} {:check_id "check_state_87"} {:captureState "check_state_87"} {:sourceloc} {:sourceloc_num 1036} true;
    call {:check_id "check_state_87"} {:sourceloc} {:sourceloc_num 1036} _CHECK_WRITE_$$d_in2_sqr_sub2_all(p153$2, BV32_ADD(v164$2, $ei_new.21$2), v914$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sqr_sub2_all"} true;
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.21$1)] := (if p153$1 then v914$1 else $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.21$1)]);
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.21$2)] := (if p153$2 then v914$2 else $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.21$2)]);
    $ei_new.21$1 := (if p153$1 then BV32_ADD($ei_new.21$1, 256bv32) else $ei_new.21$1);
    $ei_new.21$2 := (if p153$2 then BV32_ADD($ei_new.21$2, 256bv32) else $ei_new.21$2);
    p152$1 := (if p153$1 then true else p152$1);
    p152$2 := (if p153$2 then true else p152$2);
    goto $146.backedge, __partitioned_block_$146.tail_0;

  __partitioned_block_$146.tail_0:
    assume !p152$1 && !p152$2;
    goto __partitioned_block_$146.tail_1;

  __partitioned_block_$146.tail_1:
    call {:sourceloc_num 1038} $bugle_barrier_duplicated_24(1bv1, 1bv1);
    $ei_new.22$1 := v101$1;
    $ei_new.22$2 := v101$2;
    p156$1 := true;
    p156$2 := true;
    assume {:captureState "loop_entry_state_19_0"} true;
    goto $151;

  $151:
    assume {:captureState "loop_head_state_19"} true;
    assert {:tag "accessBreak"} _b425 ==> _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "accessBreak"} _b424 ==> _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "accessBreak"} _b423 ==> _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce57), $d_common.coerce57), $d_common.coerce57), $d_common.coerce57);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p156$1 ==> _b183 ==> p156$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p156$2 ==> _b183 ==> p156$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b182 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.22$1, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p156$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b182 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.22$2, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p156$2;
    assert {:tag "loopBound"} {:thread 1} p156$1 ==> _b181 ==> BV32_UGE($ei_new.22$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p156$2 ==> _b181 ==> BV32_UGE($ei_new.22$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p156$1 ==> _b180 ==> BV32_ULE($ei_new.22$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p156$2 ==> _b180 ==> BV32_ULE($ei_new.22$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p156$1 ==> _b179 ==> BV32_SGE($ei_new.22$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p156$2 ==> _b179 ==> BV32_SGE($ei_new.22$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p156$1 ==> _b178 ==> BV32_SLE($ei_new.22$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p156$2 ==> _b178 ==> BV32_SLE($ei_new.22$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p156$1 ==> _b177 ==> BV32_SLE(0bv32, $ei_new.22$1);
    assert {:tag "guardNonNeg"} {:thread 2} p156$2 ==> _b177 ==> BV32_SLE(0bv32, $ei_new.22$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p156$1 ==> _b176 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.22$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p156$2 ==> _b176 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.22$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1039} p156$1 ==> true;
    v915$1 := (if p156$1 then $$d_common$276bv32$1 else v915$1);
    v915$2 := (if p156$2 then $$d_common$276bv32$2 else v915$2);
    v916$1 := (if p156$1 then $$d_common$277bv32$1 else v916$1);
    v916$2 := (if p156$2 then $$d_common$277bv32$2 else v916$2);
    v917$1 := (if p156$1 then $$d_common$278bv32$1 else v917$1);
    v917$2 := (if p156$2 then $$d_common$278bv32$2 else v917$2);
    v918$1 := (if p156$1 then $$d_common$279bv32$1 else v918$1);
    v918$2 := (if p156$2 then $$d_common$279bv32$2 else v918$2);
    v919$1 := (if p156$1 then BV32_SLT($ei_new.22$1, v918$1 ++ v917$1 ++ v916$1 ++ v915$1) else v919$1);
    v919$2 := (if p156$2 then BV32_SLT($ei_new.22$2, v918$2 ++ v917$2 ++ v916$2 ++ v915$2) else v919$2);
    p157$1 := false;
    p157$2 := false;
    p157$1 := (if p156$1 && v919$1 then v919$1 else p157$1);
    p157$2 := (if p156$2 && v919$2 then v919$2 else p157$2);
    p156$1 := (if p156$1 && !v919$1 then v919$1 else p156$1);
    p156$2 := (if p156$2 && !v919$2 then v919$2 else p156$2);
    call {:sourceloc} {:sourceloc_num 1045} _LOG_READ_$$d_in2_sub_cumh_sel_all(p157$1, BV32_ADD(v149$1, $ei_new.22$1), $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.22$1)]);
    assume {:do_not_predicate} {:check_id "check_state_83"} {:captureState "check_state_83"} {:sourceloc} {:sourceloc_num 1045} true;
    call {:check_id "check_state_83"} {:sourceloc} {:sourceloc_num 1045} _CHECK_READ_$$d_in2_sub_cumh_sel_all(p157$2, BV32_ADD(v149$2, $ei_new.22$2), $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.22$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub_cumh_sel_all"} true;
    v920$1 := (if p157$1 then $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$1, $ei_new.22$1)] else v920$1);
    v920$2 := (if p157$2 then $$d_in2_sub_cumh_sel_all[BV32_ADD(v149$2, $ei_new.22$2)] else v920$2);
    call {:sourceloc} {:sourceloc_num 1046} _LOG_READ_$$d_in2_sqr_sub2_all(p157$1, BV32_ADD(v164$1, $ei_new.22$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.22$1)]);
    assume {:do_not_predicate} {:check_id "check_state_84"} {:captureState "check_state_84"} {:sourceloc} {:sourceloc_num 1046} true;
    call {:check_id "check_state_84"} {:sourceloc} {:sourceloc_num 1046} _CHECK_READ_$$d_in2_sqr_sub2_all(p157$2, BV32_ADD(v164$2, $ei_new.22$2), $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.22$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sqr_sub2_all"} true;
    v921$1 := (if p157$1 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.22$1)] else v921$1);
    v921$2 := (if p157$2 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.22$2)] else v921$2);
    call {:sourceloc} {:sourceloc_num 1047} _LOG_WRITE_$$d_in2_sqr_sub2_all(p157$1, BV32_ADD(v164$1, $ei_new.22$1), FSUB32(v920$1, v921$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.22$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all(p157$2, BV32_ADD(v164$2, $ei_new.22$2));
    assume {:do_not_predicate} {:check_id "check_state_85"} {:captureState "check_state_85"} {:sourceloc} {:sourceloc_num 1047} true;
    call {:check_id "check_state_85"} {:sourceloc} {:sourceloc_num 1047} _CHECK_WRITE_$$d_in2_sqr_sub2_all(p157$2, BV32_ADD(v164$2, $ei_new.22$2), FSUB32(v920$2, v921$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sqr_sub2_all"} true;
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.22$1)] := (if p157$1 then FSUB32(v920$1, v921$1) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.22$1)]);
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.22$2)] := (if p157$2 then FSUB32(v920$2, v921$2) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.22$2)]);
    $ei_new.22$1 := (if p157$1 then BV32_ADD($ei_new.22$1, 256bv32) else $ei_new.22$1);
    $ei_new.22$2 := (if p157$2 then BV32_ADD($ei_new.22$2, 256bv32) else $ei_new.22$2);
    p156$1 := (if p157$1 then true else p156$1);
    p156$2 := (if p157$2 then true else p156$2);
    goto $151.backedge, __partitioned_block_$151.tail_0;

  __partitioned_block_$151.tail_0:
    assume !p156$1 && !p156$2;
    goto __partitioned_block_$151.tail_1;

  __partitioned_block_$151.tail_1:
    call {:sourceloc_num 1049} $bugle_barrier_duplicated_25(1bv1, 1bv1);
    $ei_new.23$1 := v101$1;
    $ei_new.23$2 := v101$2;
    p158$1 := true;
    p158$2 := true;
    assume {:captureState "loop_entry_state_18_0"} true;
    goto $154;

  $154:
    assume {:captureState "loop_head_state_18"} true;
    assert {:tag "accessBreak"} _b428 ==> _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "accessBreak"} _b427 ==> _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "accessBreak"} _b426 ==> _READ_HAS_OCCURRED_$$d_in2_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce69), $d_common.coerce69), $d_common.coerce69), $d_common.coerce69);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p158$1 ==> _b191 ==> p158$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p158$2 ==> _b191 ==> p158$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b190 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.23$1, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p158$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b190 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.23$2, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p158$2;
    assert {:tag "loopBound"} {:thread 1} p158$1 ==> _b189 ==> BV32_UGE($ei_new.23$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p158$2 ==> _b189 ==> BV32_UGE($ei_new.23$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p158$1 ==> _b188 ==> BV32_ULE($ei_new.23$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p158$2 ==> _b188 ==> BV32_ULE($ei_new.23$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p158$1 ==> _b187 ==> BV32_SGE($ei_new.23$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p158$2 ==> _b187 ==> BV32_SGE($ei_new.23$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p158$1 ==> _b186 ==> BV32_SLE($ei_new.23$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p158$2 ==> _b186 ==> BV32_SLE($ei_new.23$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p158$1 ==> _b185 ==> BV32_SLE(0bv32, $ei_new.23$1);
    assert {:tag "guardNonNeg"} {:thread 2} p158$2 ==> _b185 ==> BV32_SLE(0bv32, $ei_new.23$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p158$1 ==> _b184 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.23$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p158$2 ==> _b184 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.23$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1050} p158$1 ==> true;
    v922$1 := (if p158$1 then $$d_common$276bv32$1 else v922$1);
    v922$2 := (if p158$2 then $$d_common$276bv32$2 else v922$2);
    v923$1 := (if p158$1 then $$d_common$277bv32$1 else v923$1);
    v923$2 := (if p158$2 then $$d_common$277bv32$2 else v923$2);
    v924$1 := (if p158$1 then $$d_common$278bv32$1 else v924$1);
    v924$2 := (if p158$2 then $$d_common$278bv32$2 else v924$2);
    v925$1 := (if p158$1 then $$d_common$279bv32$1 else v925$1);
    v925$2 := (if p158$2 then $$d_common$279bv32$2 else v925$2);
    v926$1 := (if p158$1 then BV32_SLT($ei_new.23$1, v925$1 ++ v924$1 ++ v923$1 ++ v922$1) else v926$1);
    v926$2 := (if p158$2 then BV32_SLT($ei_new.23$2, v925$2 ++ v924$2 ++ v923$2 ++ v922$2) else v926$2);
    p159$1 := false;
    p159$2 := false;
    p160$1 := false;
    p160$2 := false;
    p161$1 := false;
    p161$2 := false;
    p159$1 := (if p158$1 && v926$1 then v926$1 else p159$1);
    p159$2 := (if p158$2 && v926$2 then v926$2 else p159$2);
    p158$1 := (if p158$1 && !v926$1 then v926$1 else p158$1);
    p158$2 := (if p158$2 && !v926$2 then v926$2 else p158$2);
    call {:sourceloc} {:sourceloc_num 1056} _LOG_READ_$$d_in2_sub2_all(p159$1, BV32_ADD(v154$1, $ei_new.23$1), $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.23$1)]);
    assume {:do_not_predicate} {:check_id "check_state_80"} {:captureState "check_state_80"} {:sourceloc} {:sourceloc_num 1056} true;
    call {:check_id "check_state_80"} {:sourceloc} {:sourceloc_num 1056} _CHECK_READ_$$d_in2_sub2_all(p159$2, BV32_ADD(v154$2, $ei_new.23$2), $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.23$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub2_all"} true;
    v927$1 := (if p159$1 then $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.23$1)] else v927$1);
    v927$2 := (if p159$2 then $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.23$2)] else v927$2);
    call {:sourceloc} {:sourceloc_num 1057} _LOG_READ_$$d_in2_sqr_sub2_all(p159$1, BV32_ADD(v164$1, $ei_new.23$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.23$1)]);
    assume {:do_not_predicate} {:check_id "check_state_81"} {:captureState "check_state_81"} {:sourceloc} {:sourceloc_num 1057} true;
    call {:check_id "check_state_81"} {:sourceloc} {:sourceloc_num 1057} _CHECK_READ_$$d_in2_sqr_sub2_all(p159$2, BV32_ADD(v164$2, $ei_new.23$2), $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.23$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sqr_sub2_all"} true;
    v928$1 := (if p159$1 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.23$1)] else v928$1);
    v928$2 := (if p159$2 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.23$2)] else v928$2);
    v929$1 := (if p159$1 then $$d_common$80bv32$1 else v929$1);
    v929$2 := (if p159$2 then $$d_common$80bv32$2 else v929$2);
    v930$1 := (if p159$1 then $$d_common$81bv32$1 else v930$1);
    v930$2 := (if p159$2 then $$d_common$81bv32$2 else v930$2);
    v931$1 := (if p159$1 then $$d_common$82bv32$1 else v931$1);
    v931$2 := (if p159$2 then $$d_common$82bv32$2 else v931$2);
    v932$1 := (if p159$1 then $$d_common$83bv32$1 else v932$1);
    v932$2 := (if p159$2 then $$d_common$83bv32$2 else v932$2);
    v933$1 := (if p159$1 then FSUB32(v928$1, FDIV32(FMUL32(v927$1, v927$1), SI32_TO_FP32(v932$1 ++ v931$1 ++ v930$1 ++ v929$1))) else v933$1);
    v933$2 := (if p159$2 then FSUB32(v928$2, FDIV32(FMUL32(v927$2, v927$2), SI32_TO_FP32(v932$2 ++ v931$2 ++ v930$2 ++ v929$2))) else v933$2);
    v934$1 := (if p159$1 then FLT32(v933$1, 0bv32) else v934$1);
    v934$2 := (if p159$2 then FLT32(v933$2, 0bv32) else v934$2);
    p161$1 := (if p159$1 && v934$1 then v934$1 else p161$1);
    p161$2 := (if p159$2 && v934$2 then v934$2 else p161$2);
    p160$1 := (if p159$1 && !v934$1 then !v934$1 else p160$1);
    p160$2 := (if p159$2 && !v934$2 then !v934$2 else p160$2);
    $temp2.0$1 := (if p160$1 then v933$1 else $temp2.0$1);
    $temp2.0$2 := (if p160$2 then v933$2 else $temp2.0$2);
    $temp2.0$1 := (if p161$1 then 0bv32 else $temp2.0$1);
    $temp2.0$2 := (if p161$2 then 0bv32 else $temp2.0$2);
    call {:sourceloc} {:sourceloc_num 1064} _LOG_WRITE_$$d_in2_sqr_sub2_all(p159$1, BV32_ADD(v164$1, $ei_new.23$1), FSQRT32($temp2.0$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.23$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all(p159$2, BV32_ADD(v164$2, $ei_new.23$2));
    assume {:do_not_predicate} {:check_id "check_state_82"} {:captureState "check_state_82"} {:sourceloc} {:sourceloc_num 1064} true;
    call {:check_id "check_state_82"} {:sourceloc} {:sourceloc_num 1064} _CHECK_WRITE_$$d_in2_sqr_sub2_all(p159$2, BV32_ADD(v164$2, $ei_new.23$2), FSQRT32($temp2.0$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sqr_sub2_all"} true;
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.23$1)] := (if p159$1 then FSQRT32($temp2.0$1) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.23$1)]);
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.23$2)] := (if p159$2 then FSQRT32($temp2.0$2) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.23$2)]);
    $ei_new.23$1 := (if p159$1 then BV32_ADD($ei_new.23$1, 256bv32) else $ei_new.23$1);
    $ei_new.23$2 := (if p159$2 then BV32_ADD($ei_new.23$2, 256bv32) else $ei_new.23$2);
    p158$1 := (if p159$1 then true else p158$1);
    p158$2 := (if p159$2 then true else p158$2);
    goto $154.backedge, __partitioned_block_$154.tail_0;

  __partitioned_block_$154.tail_0:
    assume !p158$1 && !p158$2;
    goto __partitioned_block_$154.tail_1;

  __partitioned_block_$154.tail_1:
    call {:sourceloc_num 1066} $bugle_barrier_duplicated_26(1bv1, 1bv1);
    $ei_new.24$1 := v101$1;
    $ei_new.24$2 := v101$2;
    p162$1 := true;
    p162$2 := true;
    assume {:captureState "loop_entry_state_17_0"} true;
    goto $159;

  $159:
    assume {:captureState "loop_head_state_17"} true;
    assert {:tag "accessBreak"} _b431 ==> _WRITE_HAS_OCCURRED_$$d_in_sqr_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce81), $d_common.coerce81), $d_common.coerce81), $d_common.coerce81);
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b430 ==> _READ_HAS_OCCURRED_$$d_epiT ==> BV32_AND(BV32_SUB(256bv32, 1bv32), _WATCHED_OFFSET) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b429 ==> _READ_HAS_OCCURRED_$$d_endoT ==> BV32_AND(BV32_SUB(256bv32, 1bv32), _WATCHED_OFFSET) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p162$1 ==> _b199 ==> p162$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p162$2 ==> _b199 ==> p162$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b198 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.24$1, $d_common.coerce81[32:24] ++ $d_common.coerce81[24:16] ++ $d_common.coerce81[16:8] ++ $d_common.coerce81[8:0]) ==> p162$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b198 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.24$2, $d_common.coerce81[32:24] ++ $d_common.coerce81[24:16] ++ $d_common.coerce81[16:8] ++ $d_common.coerce81[8:0]) ==> p162$2;
    assert {:tag "loopBound"} {:thread 1} p162$1 ==> _b197 ==> BV32_UGE($ei_new.24$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p162$2 ==> _b197 ==> BV32_UGE($ei_new.24$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p162$1 ==> _b196 ==> BV32_ULE($ei_new.24$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p162$2 ==> _b196 ==> BV32_ULE($ei_new.24$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p162$1 ==> _b195 ==> BV32_SGE($ei_new.24$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p162$2 ==> _b195 ==> BV32_SGE($ei_new.24$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p162$1 ==> _b194 ==> BV32_SLE($ei_new.24$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p162$2 ==> _b194 ==> BV32_SLE($ei_new.24$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p162$1 ==> _b193 ==> BV32_SLE(0bv32, $ei_new.24$1);
    assert {:tag "guardNonNeg"} {:thread 2} p162$2 ==> _b193 ==> BV32_SLE(0bv32, $ei_new.24$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p162$1 ==> _b192 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.24$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p162$2 ==> _b192 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.24$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1067} p162$1 ==> true;
    v935$1 := (if p162$1 then $$d_common$324bv32$1 else v935$1);
    v935$2 := (if p162$2 then $$d_common$324bv32$2 else v935$2);
    v936$1 := (if p162$1 then $$d_common$325bv32$1 else v936$1);
    v936$2 := (if p162$2 then $$d_common$325bv32$2 else v936$2);
    v937$1 := (if p162$1 then $$d_common$326bv32$1 else v937$1);
    v937$2 := (if p162$2 then $$d_common$326bv32$2 else v937$2);
    v938$1 := (if p162$1 then $$d_common$327bv32$1 else v938$1);
    v938$2 := (if p162$2 then $$d_common$327bv32$2 else v938$2);
    v939$1 := (if p162$1 then BV32_SLT($ei_new.24$1, v938$1 ++ v937$1 ++ v936$1 ++ v935$1) else v939$1);
    v939$2 := (if p162$2 then BV32_SLT($ei_new.24$2, v938$2 ++ v937$2 ++ v936$2 ++ v935$2) else v939$2);
    p163$1 := false;
    p163$2 := false;
    p164$1 := false;
    p164$2 := false;
    p165$1 := false;
    p165$2 := false;
    p166$1 := false;
    p166$2 := false;
    p167$1 := false;
    p167$2 := false;
    p163$1 := (if p162$1 && v939$1 then v939$1 else p163$1);
    p163$2 := (if p162$2 && v939$2 then v939$2 else p163$2);
    p162$1 := (if p162$1 && !v939$1 then v939$1 else p162$1);
    p162$2 := (if p162$2 && !v939$2 then v939$2 else p162$2);
    p164$1 := (if p163$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_endoT then base#MKPTR($d_in.0$1) == $arrayId$$d_endoT else p164$1);
    p164$2 := (if p163$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_endoT then base#MKPTR($d_in.0$2) == $arrayId$$d_endoT else p164$2);
    p165$1 := (if p163$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_endoT then base#MKPTR($d_in.0$1) != $arrayId$$d_endoT else p165$1);
    p165$2 := (if p163$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_endoT then base#MKPTR($d_in.0$2) != $arrayId$$d_endoT else p165$2);
    call {:sourceloc} {:sourceloc_num 1073} _LOG_READ_$$d_endoT(p164$1, BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.24$1), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.24$1)]);
    assume {:do_not_predicate} {:check_id "check_state_79"} {:captureState "check_state_79"} {:sourceloc} {:sourceloc_num 1073} true;
    call {:check_id "check_state_79"} {:sourceloc} {:sourceloc_num 1073} _CHECK_READ_$$d_endoT(p164$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.24$2), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.24$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoT"} true;
    v940$1 := (if p164$1 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.24$1)] else v940$1);
    v940$2 := (if p164$2 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.24$2)] else v940$2);
    p167$1 := (if p165$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_epiT then base#MKPTR($d_in.0$1) == $arrayId$$d_epiT else p167$1);
    p167$2 := (if p165$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_epiT then base#MKPTR($d_in.0$2) == $arrayId$$d_epiT else p167$2);
    p166$1 := (if p165$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_epiT then base#MKPTR($d_in.0$1) != $arrayId$$d_epiT else p166$1);
    p166$2 := (if p165$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_epiT then base#MKPTR($d_in.0$2) != $arrayId$$d_epiT else p166$2);
    assert {:bad_pointer_access} {:sourceloc_num 1075} {:thread 1} p166$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1075} {:thread 2} p166$2 ==> false;
    call {:sourceloc} {:sourceloc_num 1074} _LOG_READ_$$d_epiT(p167$1, BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.24$1), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.24$1)]);
    assume {:do_not_predicate} {:check_id "check_state_78"} {:captureState "check_state_78"} {:sourceloc} {:sourceloc_num 1074} true;
    call {:check_id "check_state_78"} {:sourceloc} {:sourceloc_num 1074} _CHECK_READ_$$d_epiT(p167$2, BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.24$2), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.24$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiT"} true;
    v940$1 := (if p167$1 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), $ei_new.24$1)] else v940$1);
    v940$2 := (if p167$2 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), $ei_new.24$2)] else v940$2);
    call {:sourceloc} {:sourceloc_num 1076} _LOG_WRITE_$$d_in_sqr_all(p163$1, BV32_ADD(v169$1, $ei_new.24$1), FMUL32(v940$1, v940$1), $$d_in_sqr_all[BV32_ADD(v169$1, $ei_new.24$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all(p163$2, BV32_ADD(v169$2, $ei_new.24$2));
    assume {:do_not_predicate} {:check_id "check_state_77"} {:captureState "check_state_77"} {:sourceloc} {:sourceloc_num 1076} true;
    call {:check_id "check_state_77"} {:sourceloc} {:sourceloc_num 1076} _CHECK_WRITE_$$d_in_sqr_all(p163$2, BV32_ADD(v169$2, $ei_new.24$2), FMUL32(v940$2, v940$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in_sqr_all"} true;
    $$d_in_sqr_all[BV32_ADD(v169$1, $ei_new.24$1)] := (if p163$1 then FMUL32(v940$1, v940$1) else $$d_in_sqr_all[BV32_ADD(v169$1, $ei_new.24$1)]);
    $$d_in_sqr_all[BV32_ADD(v169$2, $ei_new.24$2)] := (if p163$2 then FMUL32(v940$2, v940$2) else $$d_in_sqr_all[BV32_ADD(v169$2, $ei_new.24$2)]);
    $ei_new.24$1 := (if p163$1 then BV32_ADD($ei_new.24$1, 256bv32) else $ei_new.24$1);
    $ei_new.24$2 := (if p163$2 then BV32_ADD($ei_new.24$2, 256bv32) else $ei_new.24$2);
    p162$1 := (if p163$1 then true else p162$1);
    p162$2 := (if p163$2 then true else p162$2);
    goto $159.backedge, __partitioned_block_$159.tail_0;

  __partitioned_block_$159.tail_0:
    assume !p162$1 && !p162$2;
    goto __partitioned_block_$159.tail_1;

  __partitioned_block_$159.tail_1:
    call {:sourceloc_num 1078} $bugle_barrier_duplicated_27(1bv1, 1bv1);
    $ei_new.25$1 := v101$1;
    $ei_new.25$2 := v101$2;
    p168$1 := true;
    p168$2 := true;
    assume {:captureState "loop_entry_state_15_0"} true;
    goto $162;

  $162:
    assume {:captureState "loop_head_state_15"} true;
    assert {:tag "accessBreak"} _b432 ==> _WRITE_HAS_OCCURRED_$$in_partial_sum_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce19), $d_common.coerce19), $d_common.coerce19), $d_common.coerce19);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p168$1 ==> _b207 ==> p168$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p168$2 ==> _b207 ==> p168$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b206 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.25$1, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]) ==> p168$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b206 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.25$2, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]) ==> p168$2;
    assert {:tag "loopBound"} {:thread 1} p168$1 ==> _b205 ==> BV32_UGE($ei_new.25$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p168$2 ==> _b205 ==> BV32_UGE($ei_new.25$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p168$1 ==> _b204 ==> BV32_ULE($ei_new.25$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p168$2 ==> _b204 ==> BV32_ULE($ei_new.25$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p168$1 ==> _b203 ==> BV32_SGE($ei_new.25$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p168$2 ==> _b203 ==> BV32_SGE($ei_new.25$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p168$1 ==> _b202 ==> BV32_SLE($ei_new.25$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p168$2 ==> _b202 ==> BV32_SLE($ei_new.25$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p168$1 ==> _b201 ==> BV32_SLE(0bv32, $ei_new.25$1);
    assert {:tag "guardNonNeg"} {:thread 2} p168$2 ==> _b201 ==> BV32_SLE(0bv32, $ei_new.25$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p168$1 ==> _b200 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.25$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p168$2 ==> _b200 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.25$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1079} p168$1 ==> true;
    v941$1 := (if p168$1 then $$d_common$76bv32$1 else v941$1);
    v941$2 := (if p168$2 then $$d_common$76bv32$2 else v941$2);
    v942$1 := (if p168$1 then $$d_common$77bv32$1 else v942$1);
    v942$2 := (if p168$2 then $$d_common$77bv32$2 else v942$2);
    v943$1 := (if p168$1 then $$d_common$78bv32$1 else v943$1);
    v943$2 := (if p168$2 then $$d_common$78bv32$2 else v943$2);
    v944$1 := (if p168$1 then $$d_common$79bv32$1 else v944$1);
    v944$2 := (if p168$2 then $$d_common$79bv32$2 else v944$2);
    v945$1 := (if p168$1 then BV32_SLT($ei_new.25$1, v944$1 ++ v943$1 ++ v942$1 ++ v941$1) else v945$1);
    v945$2 := (if p168$2 then BV32_SLT($ei_new.25$2, v944$2 ++ v943$2 ++ v942$2 ++ v941$2) else v945$2);
    p169$1 := false;
    p169$2 := false;
    p170$1 := false;
    p170$2 := false;
    p169$1 := (if p168$1 && v945$1 then v945$1 else p169$1);
    p169$2 := (if p168$2 && v945$2 then v945$2 else p169$2);
    p168$1 := (if p168$1 && !v945$1 then v945$1 else p168$1);
    p168$2 := (if p168$2 && !v945$2 then v945$2 else p168$2);
    $i.0$1, $sum.4$1 := (if p169$1 then 0bv32 else $i.0$1), (if p169$1 then 0bv32 else $sum.4$1);
    $i.0$2, $sum.4$2 := (if p169$2 then 0bv32 else $i.0$2), (if p169$2 then 0bv32 else $sum.4$2);
    p170$1 := (if p169$1 then true else p170$1);
    p170$2 := (if p169$2 then true else p170$2);
    assume {:captureState "loop_entry_state_16_0"} true;
    goto $164;

  $164:
    assume {:captureState "loop_head_state_16"} true;
    assert p170$1 ==> p168$1;
    assert p170$2 ==> p168$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p170$1 ==> _b338 ==> p170$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.25$1, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p170$2 ==> _b338 ==> p170$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.25$2, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b337 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.25$1, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]) && BV32_SLT($i.0$1, $d_common.coerce18[32:24] ++ $d_common.coerce18[24:16] ++ $d_common.coerce18[16:8] ++ $d_common.coerce18[8:0]) ==> p170$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b337 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.25$2, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]) && BV32_SLT($i.0$2, $d_common.coerce18[32:24] ++ $d_common.coerce18[24:16] ++ $d_common.coerce18[16:8] ++ $d_common.coerce18[8:0]) ==> p170$2;
    assert {:tag "loopBound"} {:thread 1} p170$1 ==> _b336 ==> BV32_UGE($i.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p170$2 ==> _b336 ==> BV32_UGE($i.0$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p170$1 ==> _b335 ==> BV32_ULE($i.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p170$2 ==> _b335 ==> BV32_ULE($i.0$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p170$1 ==> _b334 ==> BV32_SGE($i.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p170$2 ==> _b334 ==> BV32_SGE($i.0$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p170$1 ==> _b333 ==> BV32_SLE($i.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p170$2 ==> _b333 ==> BV32_SLE($i.0$2, 0bv32);
    assert {:tag "guardNonNeg"} {:thread 1} p170$1 ==> _b332 ==> BV32_SLE(0bv32, $i.0$1);
    assert {:tag "guardNonNeg"} {:thread 2} p170$2 ==> _b332 ==> BV32_SLE(0bv32, $i.0$2);
    assert {:block_sourceloc} {:sourceloc_num 1085} p170$1 ==> true;
    v946$1 := (if p170$1 then $$d_common$72bv32$1 else v946$1);
    v946$2 := (if p170$2 then $$d_common$72bv32$2 else v946$2);
    v947$1 := (if p170$1 then $$d_common$73bv32$1 else v947$1);
    v947$2 := (if p170$2 then $$d_common$73bv32$2 else v947$2);
    v948$1 := (if p170$1 then $$d_common$74bv32$1 else v948$1);
    v948$2 := (if p170$2 then $$d_common$74bv32$2 else v948$2);
    v949$1 := (if p170$1 then $$d_common$75bv32$1 else v949$1);
    v949$2 := (if p170$2 then $$d_common$75bv32$2 else v949$2);
    v950$1 := (if p170$1 then BV32_SLT($i.0$1, v949$1 ++ v948$1 ++ v947$1 ++ v946$1) else v950$1);
    v950$2 := (if p170$2 then BV32_SLT($i.0$2, v949$2 ++ v948$2 ++ v947$2 ++ v946$2) else v950$2);
    p171$1 := false;
    p171$2 := false;
    p172$1 := false;
    p172$2 := false;
    p173$1 := false;
    p173$2 := false;
    p174$1 := false;
    p174$2 := false;
    p175$1 := false;
    p175$2 := false;
    p171$1 := (if p170$1 && v950$1 then v950$1 else p171$1);
    p171$2 := (if p170$2 && v950$2 then v950$2 else p171$2);
    p170$1 := (if p170$1 && !v950$1 then v950$1 else p170$1);
    p170$2 := (if p170$2 && !v950$2 then v950$2 else p170$2);
    v951$1 := (if p171$1 then $$d_common$72bv32$1 else v951$1);
    v951$2 := (if p171$2 then $$d_common$72bv32$2 else v951$2);
    v952$1 := (if p171$1 then $$d_common$73bv32$1 else v952$1);
    v952$2 := (if p171$2 then $$d_common$73bv32$2 else v952$2);
    v953$1 := (if p171$1 then $$d_common$74bv32$1 else v953$1);
    v953$2 := (if p171$2 then $$d_common$74bv32$2 else v953$2);
    v954$1 := (if p171$1 then $$d_common$75bv32$1 else v954$1);
    v954$2 := (if p171$2 then $$d_common$75bv32$2 else v954$2);
    p172$1 := (if p171$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_endoT then base#MKPTR($d_in.0$1) == $arrayId$$d_endoT else p172$1);
    p172$2 := (if p171$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_endoT then base#MKPTR($d_in.0$2) == $arrayId$$d_endoT else p172$2);
    p173$1 := (if p171$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_endoT then base#MKPTR($d_in.0$1) != $arrayId$$d_endoT else p173$1);
    p173$2 := (if p171$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_endoT then base#MKPTR($d_in.0$2) != $arrayId$$d_endoT else p173$2);
    call {:sourceloc} {:sourceloc_num 1095} _LOG_READ_$$d_endoT(p172$1, BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($ei_new.25$1, v954$1 ++ v953$1 ++ v952$1 ++ v951$1), $i.0$1)), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($ei_new.25$1, v954$1 ++ v953$1 ++ v952$1 ++ v951$1), $i.0$1))]);
    assume {:do_not_predicate} {:check_id "check_state_76"} {:captureState "check_state_76"} {:sourceloc} {:sourceloc_num 1095} true;
    call {:check_id "check_state_76"} {:sourceloc} {:sourceloc_num 1095} _CHECK_READ_$$d_endoT(p172$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($ei_new.25$2, v954$2 ++ v953$2 ++ v952$2 ++ v951$2), $i.0$2)), $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($ei_new.25$2, v954$2 ++ v953$2 ++ v952$2 ++ v951$2), $i.0$2))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoT"} true;
    v955$1 := (if p172$1 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($ei_new.25$1, v954$1 ++ v953$1 ++ v952$1 ++ v951$1), $i.0$1))] else v955$1);
    v955$2 := (if p172$2 then $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($ei_new.25$2, v954$2 ++ v953$2 ++ v952$2 ++ v951$2), $i.0$2))] else v955$2);
    p175$1 := (if p173$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_epiT then base#MKPTR($d_in.0$1) == $arrayId$$d_epiT else p175$1);
    p175$2 := (if p173$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_epiT then base#MKPTR($d_in.0$2) == $arrayId$$d_epiT else p175$2);
    p174$1 := (if p173$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_epiT then base#MKPTR($d_in.0$1) != $arrayId$$d_epiT else p174$1);
    p174$2 := (if p173$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_epiT then base#MKPTR($d_in.0$2) != $arrayId$$d_epiT else p174$2);
    assert {:bad_pointer_access} {:sourceloc_num 1097} {:thread 1} p174$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1097} {:thread 2} p174$2 ==> false;
    call {:sourceloc} {:sourceloc_num 1096} _LOG_READ_$$d_epiT(p175$1, BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($ei_new.25$1, v954$1 ++ v953$1 ++ v952$1 ++ v951$1), $i.0$1)), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($ei_new.25$1, v954$1 ++ v953$1 ++ v952$1 ++ v951$1), $i.0$1))]);
    assume {:do_not_predicate} {:check_id "check_state_75"} {:captureState "check_state_75"} {:sourceloc} {:sourceloc_num 1096} true;
    call {:check_id "check_state_75"} {:sourceloc} {:sourceloc_num 1096} _CHECK_READ_$$d_epiT(p175$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($ei_new.25$2, v954$2 ++ v953$2 ++ v952$2 ++ v951$2), $i.0$2)), $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($ei_new.25$2, v954$2 ++ v953$2 ++ v952$2 ++ v951$2), $i.0$2))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiT"} true;
    v955$1 := (if p175$1 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($ei_new.25$1, v954$1 ++ v953$1 ++ v952$1 ++ v951$1), $i.0$1))] else v955$1);
    v955$2 := (if p175$2 then $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($ei_new.25$2, v954$2 ++ v953$2 ++ v952$2 ++ v951$2), $i.0$2))] else v955$2);
    $i.0$1, $sum.4$1 := (if p171$1 then BV32_ADD($i.0$1, 1bv32) else $i.0$1), (if p171$1 then FADD32($sum.4$1, v955$1) else $sum.4$1);
    $i.0$2, $sum.4$2 := (if p171$2 then BV32_ADD($i.0$2, 1bv32) else $i.0$2), (if p171$2 then FADD32($sum.4$2, v955$2) else $sum.4$2);
    p170$1 := (if p171$1 then true else p170$1);
    p170$2 := (if p171$2 then true else p170$2);
    goto $164.backedge, $164.tail;

  $164.tail:
    assume !p170$1 && !p170$2;
    call {:sourceloc} {:sourceloc_num 1100} _LOG_WRITE_$$in_partial_sum_all(p169$1, BV32_ADD(v189$1, $ei_new.25$1), $sum.4$1, $$in_partial_sum_all[BV32_ADD(v189$1, $ei_new.25$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all(p169$2, BV32_ADD(v189$2, $ei_new.25$2));
    assume {:do_not_predicate} {:check_id "check_state_74"} {:captureState "check_state_74"} {:sourceloc} {:sourceloc_num 1100} true;
    call {:check_id "check_state_74"} {:sourceloc} {:sourceloc_num 1100} _CHECK_WRITE_$$in_partial_sum_all(p169$2, BV32_ADD(v189$2, $ei_new.25$2), $sum.4$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$in_partial_sum_all"} true;
    $$in_partial_sum_all[BV32_ADD(v189$1, $ei_new.25$1)] := (if p169$1 then $sum.4$1 else $$in_partial_sum_all[BV32_ADD(v189$1, $ei_new.25$1)]);
    $$in_partial_sum_all[BV32_ADD(v189$2, $ei_new.25$2)] := (if p169$2 then $sum.4$2 else $$in_partial_sum_all[BV32_ADD(v189$2, $ei_new.25$2)]);
    $ei_new.25$1 := (if p169$1 then BV32_ADD($ei_new.25$1, 256bv32) else $ei_new.25$1);
    $ei_new.25$2 := (if p169$2 then BV32_ADD($ei_new.25$2, 256bv32) else $ei_new.25$2);
    p168$1 := (if p169$1 then true else p168$1);
    p168$2 := (if p169$2 then true else p168$2);
    goto $162.backedge, __partitioned_block_$162.tail_0;

  __partitioned_block_$162.tail_0:
    assume !p168$1 && !p168$2;
    goto __partitioned_block_$162.tail_1;

  __partitioned_block_$162.tail_1:
    call {:sourceloc_num 1102} $bugle_barrier_duplicated_28(1bv1, 1bv1);
    $ei_new.26$1 := v101$1;
    $ei_new.26$2 := v101$2;
    p176$1 := true;
    p176$2 := true;
    assume {:captureState "loop_entry_state_13_0"} true;
    goto $169;

  $169:
    assume {:captureState "loop_head_state_13"} true;
    assert {:tag "accessBreak"} _b434 ==> _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce79), $d_common.coerce79), $d_common.coerce79), $d_common.coerce79);
    assert {:tag "accessBreak"} _b433 ==> _READ_HAS_OCCURRED_$$d_in_sqr_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce81), $d_common.coerce81), $d_common.coerce81), $d_common.coerce81);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p176$1 ==> _b215 ==> p176$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p176$2 ==> _b215 ==> p176$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b214 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.26$1, $d_common.coerce79[32:24] ++ $d_common.coerce79[24:16] ++ $d_common.coerce79[16:8] ++ $d_common.coerce79[8:0]) ==> p176$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b214 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.26$2, $d_common.coerce79[32:24] ++ $d_common.coerce79[24:16] ++ $d_common.coerce79[16:8] ++ $d_common.coerce79[8:0]) ==> p176$2;
    assert {:tag "loopBound"} {:thread 1} p176$1 ==> _b213 ==> BV32_UGE($ei_new.26$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p176$2 ==> _b213 ==> BV32_UGE($ei_new.26$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p176$1 ==> _b212 ==> BV32_ULE($ei_new.26$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p176$2 ==> _b212 ==> BV32_ULE($ei_new.26$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p176$1 ==> _b211 ==> BV32_SGE($ei_new.26$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p176$2 ==> _b211 ==> BV32_SGE($ei_new.26$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p176$1 ==> _b210 ==> BV32_SLE($ei_new.26$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p176$2 ==> _b210 ==> BV32_SLE($ei_new.26$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p176$1 ==> _b209 ==> BV32_SLE(0bv32, $ei_new.26$1);
    assert {:tag "guardNonNeg"} {:thread 2} p176$2 ==> _b209 ==> BV32_SLE(0bv32, $ei_new.26$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p176$1 ==> _b208 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.26$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p176$2 ==> _b208 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.26$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1103} p176$1 ==> true;
    v956$1 := (if p176$1 then $$d_common$316bv32$1 else v956$1);
    v956$2 := (if p176$2 then $$d_common$316bv32$2 else v956$2);
    v957$1 := (if p176$1 then $$d_common$317bv32$1 else v957$1);
    v957$2 := (if p176$2 then $$d_common$317bv32$2 else v957$2);
    v958$1 := (if p176$1 then $$d_common$318bv32$1 else v958$1);
    v958$2 := (if p176$2 then $$d_common$318bv32$2 else v958$2);
    v959$1 := (if p176$1 then $$d_common$319bv32$1 else v959$1);
    v959$2 := (if p176$2 then $$d_common$319bv32$2 else v959$2);
    v960$1 := (if p176$1 then BV32_SLT($ei_new.26$1, v959$1 ++ v958$1 ++ v957$1 ++ v956$1) else v960$1);
    v960$2 := (if p176$2 then BV32_SLT($ei_new.26$2, v959$2 ++ v958$2 ++ v957$2 ++ v956$2) else v960$2);
    p177$1 := false;
    p177$2 := false;
    p178$1 := false;
    p178$2 := false;
    p180$1 := false;
    p180$2 := false;
    p183$1 := false;
    p183$2 := false;
    p184$1 := false;
    p184$2 := false;
    p187$1 := false;
    p187$2 := false;
    p188$1 := false;
    p188$2 := false;
    p189$1 := false;
    p189$2 := false;
    p177$1 := (if p176$1 && v960$1 then v960$1 else p177$1);
    p177$2 := (if p176$2 && v960$2 then v960$2 else p177$2);
    p176$1 := (if p176$1 && !v960$1 then v960$1 else p176$1);
    p176$2 := (if p176$2 && !v960$2 then v960$2 else p176$2);
    $i.1$1, $sum.5$1 := (if p177$1 then 0bv32 else $i.1$1), (if p177$1 then 0bv32 else $sum.5$1);
    $i.1$2, $sum.5$2 := (if p177$2 then 0bv32 else $i.1$2), (if p177$2 then 0bv32 else $sum.5$2);
    p178$1 := (if p177$1 then true else p178$1);
    p178$2 := (if p177$2 then true else p178$2);
    assume {:captureState "loop_entry_state_14_0"} true;
    goto $171;

  $171:
    assume {:captureState "loop_head_state_14"} true;
    assert {:tag "accessBreak"} _b435 ==> _READ_HAS_OCCURRED_$$d_in_sqr_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce81), $d_common.coerce81), $d_common.coerce81), $d_common.coerce81);
    assert p178$1 ==> p176$1;
    assert p178$2 ==> p176$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p178$1 ==> _b331 ==> p178$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.26$1, $d_common.coerce79[32:24] ++ $d_common.coerce79[24:16] ++ $d_common.coerce79[16:8] ++ $d_common.coerce79[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p178$2 ==> _b331 ==> p178$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.26$2, $d_common.coerce79[32:24] ++ $d_common.coerce79[24:16] ++ $d_common.coerce79[16:8] ++ $d_common.coerce79[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b330 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.26$1, $d_common.coerce79[32:24] ++ $d_common.coerce79[24:16] ++ $d_common.coerce79[16:8] ++ $d_common.coerce79[8:0]) && BV32_SLT($i.1$1, $d_common.coerce80[32:24] ++ $d_common.coerce80[24:16] ++ $d_common.coerce80[16:8] ++ $d_common.coerce80[8:0]) ==> p178$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b330 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.26$2, $d_common.coerce79[32:24] ++ $d_common.coerce79[24:16] ++ $d_common.coerce79[16:8] ++ $d_common.coerce79[8:0]) && BV32_SLT($i.1$2, $d_common.coerce80[32:24] ++ $d_common.coerce80[24:16] ++ $d_common.coerce80[16:8] ++ $d_common.coerce80[8:0]) ==> p178$2;
    assert {:tag "loopBound"} {:thread 1} p178$1 ==> _b329 ==> BV32_UGE($i.1$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p178$2 ==> _b329 ==> BV32_UGE($i.1$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p178$1 ==> _b328 ==> BV32_ULE($i.1$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p178$2 ==> _b328 ==> BV32_ULE($i.1$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p178$1 ==> _b327 ==> BV32_SGE($i.1$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p178$2 ==> _b327 ==> BV32_SGE($i.1$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p178$1 ==> _b326 ==> BV32_SLE($i.1$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p178$2 ==> _b326 ==> BV32_SLE($i.1$2, 0bv32);
    assert {:tag "guardNonNeg"} {:thread 1} p178$1 ==> _b325 ==> BV32_SLE(0bv32, $i.1$1);
    assert {:tag "guardNonNeg"} {:thread 2} p178$2 ==> _b325 ==> BV32_SLE(0bv32, $i.1$2);
    assert {:block_sourceloc} {:sourceloc_num 1109} p178$1 ==> true;
    v961$1 := (if p178$1 then $$d_common$320bv32$1 else v961$1);
    v961$2 := (if p178$2 then $$d_common$320bv32$2 else v961$2);
    v962$1 := (if p178$1 then $$d_common$321bv32$1 else v962$1);
    v962$2 := (if p178$2 then $$d_common$321bv32$2 else v962$2);
    v963$1 := (if p178$1 then $$d_common$322bv32$1 else v963$1);
    v963$2 := (if p178$2 then $$d_common$322bv32$2 else v963$2);
    v964$1 := (if p178$1 then $$d_common$323bv32$1 else v964$1);
    v964$2 := (if p178$2 then $$d_common$323bv32$2 else v964$2);
    v965$1 := (if p178$1 then BV32_SLT($i.1$1, v964$1 ++ v963$1 ++ v962$1 ++ v961$1) else v965$1);
    v965$2 := (if p178$2 then BV32_SLT($i.1$2, v964$2 ++ v963$2 ++ v962$2 ++ v961$2) else v965$2);
    p179$1 := false;
    p179$2 := false;
    p179$1 := (if p178$1 && v965$1 then v965$1 else p179$1);
    p179$2 := (if p178$2 && v965$2 then v965$2 else p179$2);
    p178$1 := (if p178$1 && !v965$1 then v965$1 else p178$1);
    p178$2 := (if p178$2 && !v965$2 then v965$2 else p178$2);
    v966$1 := (if p179$1 then $$d_common$316bv32$1 else v966$1);
    v966$2 := (if p179$2 then $$d_common$316bv32$2 else v966$2);
    v967$1 := (if p179$1 then $$d_common$317bv32$1 else v967$1);
    v967$2 := (if p179$2 then $$d_common$317bv32$2 else v967$2);
    v968$1 := (if p179$1 then $$d_common$318bv32$1 else v968$1);
    v968$2 := (if p179$2 then $$d_common$318bv32$2 else v968$2);
    v969$1 := (if p179$1 then $$d_common$319bv32$1 else v969$1);
    v969$2 := (if p179$2 then $$d_common$319bv32$2 else v969$2);
    call {:sourceloc} {:sourceloc_num 1119} _LOG_READ_$$d_in_sqr_all(p179$1, BV32_ADD(v169$1, BV32_ADD($ei_new.26$1, BV32_MUL(v969$1 ++ v968$1 ++ v967$1 ++ v966$1, $i.1$1))), $$d_in_sqr_all[BV32_ADD(v169$1, BV32_ADD($ei_new.26$1, BV32_MUL(v969$1 ++ v968$1 ++ v967$1 ++ v966$1, $i.1$1)))]);
    assume {:do_not_predicate} {:check_id "check_state_73"} {:captureState "check_state_73"} {:sourceloc} {:sourceloc_num 1119} true;
    call {:check_id "check_state_73"} {:sourceloc} {:sourceloc_num 1119} _CHECK_READ_$$d_in_sqr_all(p179$2, BV32_ADD(v169$2, BV32_ADD($ei_new.26$2, BV32_MUL(v969$2 ++ v968$2 ++ v967$2 ++ v966$2, $i.1$2))), $$d_in_sqr_all[BV32_ADD(v169$2, BV32_ADD($ei_new.26$2, BV32_MUL(v969$2 ++ v968$2 ++ v967$2 ++ v966$2, $i.1$2)))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in_sqr_all"} true;
    v970$1 := (if p179$1 then $$d_in_sqr_all[BV32_ADD(v169$1, BV32_ADD($ei_new.26$1, BV32_MUL(v969$1 ++ v968$1 ++ v967$1 ++ v966$1, $i.1$1)))] else v970$1);
    v970$2 := (if p179$2 then $$d_in_sqr_all[BV32_ADD(v169$2, BV32_ADD($ei_new.26$2, BV32_MUL(v969$2 ++ v968$2 ++ v967$2 ++ v966$2, $i.1$2)))] else v970$2);
    $i.1$1, $sum.5$1 := (if p179$1 then BV32_ADD($i.1$1, 1bv32) else $i.1$1), (if p179$1 then FADD32($sum.5$1, v970$1) else $sum.5$1);
    $i.1$2, $sum.5$2 := (if p179$2 then BV32_ADD($i.1$2, 1bv32) else $i.1$2), (if p179$2 then FADD32($sum.5$2, v970$2) else $sum.5$2);
    p178$1 := (if p179$1 then true else p178$1);
    p178$2 := (if p179$2 then true else p178$2);
    goto $171.backedge, $171.tail;

  $171.tail:
    assume !p178$1 && !p178$2;
    call {:sourceloc} {:sourceloc_num 1122} _LOG_WRITE_$$in_sqr_partial_sum_all(p177$1, BV32_ADD(v194$1, $ei_new.26$1), $sum.5$1, $$in_sqr_partial_sum_all[BV32_ADD(v194$1, $ei_new.26$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all(p177$2, BV32_ADD(v194$2, $ei_new.26$2));
    assume {:do_not_predicate} {:check_id "check_state_72"} {:captureState "check_state_72"} {:sourceloc} {:sourceloc_num 1122} true;
    call {:check_id "check_state_72"} {:sourceloc} {:sourceloc_num 1122} _CHECK_WRITE_$$in_sqr_partial_sum_all(p177$2, BV32_ADD(v194$2, $ei_new.26$2), $sum.5$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$in_sqr_partial_sum_all"} true;
    $$in_sqr_partial_sum_all[BV32_ADD(v194$1, $ei_new.26$1)] := (if p177$1 then $sum.5$1 else $$in_sqr_partial_sum_all[BV32_ADD(v194$1, $ei_new.26$1)]);
    $$in_sqr_partial_sum_all[BV32_ADD(v194$2, $ei_new.26$2)] := (if p177$2 then $sum.5$2 else $$in_sqr_partial_sum_all[BV32_ADD(v194$2, $ei_new.26$2)]);
    $ei_new.26$1 := (if p177$1 then BV32_ADD($ei_new.26$1, 256bv32) else $ei_new.26$1);
    $ei_new.26$2 := (if p177$2 then BV32_ADD($ei_new.26$2, 256bv32) else $ei_new.26$2);
    p176$1 := (if p177$1 then true else p176$1);
    p176$2 := (if p177$2 then true else p176$2);
    goto $169.backedge, __partitioned_block_$169.tail_0;

  __partitioned_block_$169.tail_0:
    assume !p176$1 && !p176$2;
    goto __partitioned_block_$169.tail_1;

  __partitioned_block_$169.tail_1:
    call {:sourceloc_num 1124} $bugle_barrier_duplicated_29(1bv1, 1bv1);
    v971$1 := v101$1 == 0bv32;
    v971$2 := v101$2 == 0bv32;
    p180$1 := (if v971$1 then v971$1 else p180$1);
    p180$2 := (if v971$2 then v971$2 else p180$2);
    p183$1 := (if !v971$1 then !v971$1 else p183$1);
    p183$2 := (if !v971$2 then !v971$2 else p183$2);
    call {:sourceloc} {:sourceloc_num 1126} _LOG_WRITE_$$in_final_sum_all(p180$1, v100$1, 0bv32, $$in_final_sum_all[v100$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_final_sum_all(p180$2, v100$2);
    assume {:do_not_predicate} {:check_id "check_state_68"} {:captureState "check_state_68"} {:sourceloc} {:sourceloc_num 1126} true;
    call {:check_id "check_state_68"} {:sourceloc} {:sourceloc_num 1126} _CHECK_WRITE_$$in_final_sum_all(p180$2, v100$2, 0bv32);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$in_final_sum_all"} true;
    $$in_final_sum_all[v100$1] := (if p180$1 then 0bv32 else $$in_final_sum_all[v100$1]);
    $$in_final_sum_all[v100$2] := (if p180$2 then 0bv32 else $$in_final_sum_all[v100$2]);
    $i.2$1 := (if p180$1 then 0bv32 else $i.2$1);
    $i.2$2 := (if p180$2 then 0bv32 else $i.2$2);
    p181$1 := (if p180$1 then true else p181$1);
    p181$2 := (if p180$2 then true else p181$2);
    assume {:captureState "loop_entry_state_12_0"} true;
    goto $177;

  $177:
    assume {:captureState "loop_head_state_12"} true;
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b438 ==> _WRITE_HAS_OCCURRED_$$in_final_sum_all ==> _WATCHED_OFFSET == group_id_x$1;
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b437 ==> _READ_HAS_OCCURRED_$$in_final_sum_all ==> _WATCHED_OFFSET == group_id_x$1;
    assert {:tag "accessBreak"} _b436 ==> _READ_HAS_OCCURRED_$$in_partial_sum_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce19), $d_common.coerce19), $d_common.coerce19), $d_common.coerce19);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p181$1 ==> _b324 ==> p181$1 ==> $d_frame_no != 0bv32 && local_id_x$1 == 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p181$2 ==> _b324 ==> p181$2 ==> $d_frame_no != 0bv32 && local_id_x$2 == 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b323 ==> $d_frame_no != 0bv32 && local_id_x$1 == 0bv32 && BV32_SLT($i.2$1, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]) ==> p181$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b323 ==> $d_frame_no != 0bv32 && local_id_x$2 == 0bv32 && BV32_SLT($i.2$2, $d_common.coerce19[32:24] ++ $d_common.coerce19[24:16] ++ $d_common.coerce19[16:8] ++ $d_common.coerce19[8:0]) ==> p181$2;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b322 ==> v101$1 != 0bv32 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b321 ==> v101$1 != 0bv32 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b320 ==> v101$1 != 0bv32 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b319 ==> v101$1 != 0bv32 ==> !p181$1;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 2} _b319 ==> v101$2 != 0bv32 ==> !p181$2;
    assert {:tag "loopBound"} {:thread 1} p181$1 ==> _b318 ==> BV32_UGE($i.2$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p181$2 ==> _b318 ==> BV32_UGE($i.2$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p181$1 ==> _b317 ==> BV32_ULE($i.2$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p181$2 ==> _b317 ==> BV32_ULE($i.2$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p181$1 ==> _b316 ==> BV32_SGE($i.2$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p181$2 ==> _b316 ==> BV32_SGE($i.2$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p181$1 ==> _b315 ==> BV32_SLE($i.2$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p181$2 ==> _b315 ==> BV32_SLE($i.2$2, 0bv32);
    assert {:tag "guardNonNeg"} {:thread 1} p181$1 ==> _b314 ==> BV32_SLE(0bv32, $i.2$1);
    assert {:tag "guardNonNeg"} {:thread 2} p181$2 ==> _b314 ==> BV32_SLE(0bv32, $i.2$2);
    assert {:block_sourceloc} {:sourceloc_num 1127} p181$1 ==> true;
    v972$1 := (if p181$1 then $$d_common$76bv32$1 else v972$1);
    v972$2 := (if p181$2 then $$d_common$76bv32$2 else v972$2);
    v973$1 := (if p181$1 then $$d_common$77bv32$1 else v973$1);
    v973$2 := (if p181$2 then $$d_common$77bv32$2 else v973$2);
    v974$1 := (if p181$1 then $$d_common$78bv32$1 else v974$1);
    v974$2 := (if p181$2 then $$d_common$78bv32$2 else v974$2);
    v975$1 := (if p181$1 then $$d_common$79bv32$1 else v975$1);
    v975$2 := (if p181$2 then $$d_common$79bv32$2 else v975$2);
    v976$1 := (if p181$1 then BV32_SLT($i.2$1, v975$1 ++ v974$1 ++ v973$1 ++ v972$1) else v976$1);
    v976$2 := (if p181$2 then BV32_SLT($i.2$2, v975$2 ++ v974$2 ++ v973$2 ++ v972$2) else v976$2);
    p182$1 := false;
    p182$2 := false;
    p182$1 := (if p181$1 && v976$1 then v976$1 else p182$1);
    p182$2 := (if p181$2 && v976$2 then v976$2 else p182$2);
    p181$1 := (if p181$1 && !v976$1 then v976$1 else p181$1);
    p181$2 := (if p181$2 && !v976$2 then v976$2 else p181$2);
    call {:sourceloc} {:sourceloc_num 1133} _LOG_READ_$$in_final_sum_all(p182$1, v100$1, $$in_final_sum_all[v100$1]);
    assume {:do_not_predicate} {:check_id "check_state_69"} {:captureState "check_state_69"} {:sourceloc} {:sourceloc_num 1133} true;
    call {:check_id "check_state_69"} {:sourceloc} {:sourceloc_num 1133} _CHECK_READ_$$in_final_sum_all(p182$2, v100$2, $$in_final_sum_all[v100$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$in_final_sum_all"} true;
    v977$1 := (if p182$1 then $$in_final_sum_all[v100$1] else v977$1);
    v977$2 := (if p182$2 then $$in_final_sum_all[v100$2] else v977$2);
    call {:sourceloc} {:sourceloc_num 1134} _LOG_READ_$$in_partial_sum_all(p182$1, BV32_ADD(v189$1, $i.2$1), $$in_partial_sum_all[BV32_ADD(v189$1, $i.2$1)]);
    assume {:do_not_predicate} {:check_id "check_state_70"} {:captureState "check_state_70"} {:sourceloc} {:sourceloc_num 1134} true;
    call {:check_id "check_state_70"} {:sourceloc} {:sourceloc_num 1134} _CHECK_READ_$$in_partial_sum_all(p182$2, BV32_ADD(v189$2, $i.2$2), $$in_partial_sum_all[BV32_ADD(v189$2, $i.2$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$in_partial_sum_all"} true;
    v978$1 := (if p182$1 then $$in_partial_sum_all[BV32_ADD(v189$1, $i.2$1)] else v978$1);
    v978$2 := (if p182$2 then $$in_partial_sum_all[BV32_ADD(v189$2, $i.2$2)] else v978$2);
    call {:sourceloc} {:sourceloc_num 1135} _LOG_WRITE_$$in_final_sum_all(p182$1, v100$1, FADD32(v977$1, v978$1), $$in_final_sum_all[v100$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_final_sum_all(p182$2, v100$2);
    assume {:do_not_predicate} {:check_id "check_state_71"} {:captureState "check_state_71"} {:sourceloc} {:sourceloc_num 1135} true;
    call {:check_id "check_state_71"} {:sourceloc} {:sourceloc_num 1135} _CHECK_WRITE_$$in_final_sum_all(p182$2, v100$2, FADD32(v977$2, v978$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$in_final_sum_all"} true;
    $$in_final_sum_all[v100$1] := (if p182$1 then FADD32(v977$1, v978$1) else $$in_final_sum_all[v100$1]);
    $$in_final_sum_all[v100$2] := (if p182$2 then FADD32(v977$2, v978$2) else $$in_final_sum_all[v100$2]);
    $i.2$1 := (if p182$1 then BV32_ADD($i.2$1, 1bv32) else $i.2$1);
    $i.2$2 := (if p182$2 then BV32_ADD($i.2$2, 1bv32) else $i.2$2);
    p181$1 := (if p182$1 then true else p181$1);
    p181$2 := (if p182$2 then true else p181$2);
    goto $177.backedge, $177.tail;

  $177.tail:
    assume !p181$1 && !p181$2;
    v979$1 := (if p183$1 then v101$1 == 1bv32 else v979$1);
    v979$2 := (if p183$2 then v101$2 == 1bv32 else v979$2);
    p184$1 := (if p183$1 && v979$1 then v979$1 else p184$1);
    p184$2 := (if p183$2 && v979$2 then v979$2 else p184$2);
    call {:sourceloc} {:sourceloc_num 1140} _LOG_WRITE_$$in_sqr_final_sum_all(p184$1, v100$1, 0bv32, $$in_sqr_final_sum_all[v100$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all(p184$2, v100$2);
    assume {:do_not_predicate} {:check_id "check_state_64"} {:captureState "check_state_64"} {:sourceloc} {:sourceloc_num 1140} true;
    call {:check_id "check_state_64"} {:sourceloc} {:sourceloc_num 1140} _CHECK_WRITE_$$in_sqr_final_sum_all(p184$2, v100$2, 0bv32);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$in_sqr_final_sum_all"} true;
    $$in_sqr_final_sum_all[v100$1] := (if p184$1 then 0bv32 else $$in_sqr_final_sum_all[v100$1]);
    $$in_sqr_final_sum_all[v100$2] := (if p184$2 then 0bv32 else $$in_sqr_final_sum_all[v100$2]);
    $i.3$1 := (if p184$1 then 0bv32 else $i.3$1);
    $i.3$2 := (if p184$2 then 0bv32 else $i.3$2);
    p185$1 := (if p184$1 then true else p185$1);
    p185$2 := (if p184$2 then true else p185$2);
    assume {:captureState "loop_entry_state_11_0"} true;
    goto $183;

  $183:
    assume {:captureState "loop_head_state_11"} true;
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b441 ==> _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all ==> _WATCHED_OFFSET == group_id_x$1;
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b440 ==> _READ_HAS_OCCURRED_$$in_sqr_final_sum_all ==> _WATCHED_OFFSET == group_id_x$1;
    assert {:tag "accessBreak"} _b439 ==> _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce79), $d_common.coerce79), $d_common.coerce79), $d_common.coerce79);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p185$1 ==> _b313 ==> p185$1 ==> $d_frame_no != 0bv32 && local_id_x$1 == 1bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p185$2 ==> _b313 ==> p185$2 ==> $d_frame_no != 0bv32 && local_id_x$2 == 1bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b312 ==> $d_frame_no != 0bv32 && local_id_x$1 == 1bv32 && BV32_SLT($i.3$1, $d_common.coerce80[32:24] ++ $d_common.coerce80[24:16] ++ $d_common.coerce80[16:8] ++ $d_common.coerce80[8:0]) ==> p185$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b312 ==> $d_frame_no != 0bv32 && local_id_x$2 == 1bv32 && BV32_SLT($i.3$2, $d_common.coerce80[32:24] ++ $d_common.coerce80[24:16] ++ $d_common.coerce80[16:8] ++ $d_common.coerce80[8:0]) ==> p185$2;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b311 ==> v101$1 == 0bv32 || v101$1 != 1bv32 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b310 ==> v101$1 == 0bv32 || v101$1 != 1bv32 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b309 ==> v101$1 == 0bv32 || v101$1 != 1bv32 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b308 ==> v101$1 == 0bv32 || v101$1 != 1bv32 ==> !p185$1;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 2} _b308 ==> v101$2 == 0bv32 || v101$2 != 1bv32 ==> !p185$2;
    assert {:tag "loopBound"} {:thread 1} p185$1 ==> _b307 ==> BV32_UGE($i.3$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p185$2 ==> _b307 ==> BV32_UGE($i.3$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p185$1 ==> _b306 ==> BV32_ULE($i.3$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p185$2 ==> _b306 ==> BV32_ULE($i.3$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p185$1 ==> _b305 ==> BV32_SGE($i.3$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p185$2 ==> _b305 ==> BV32_SGE($i.3$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p185$1 ==> _b304 ==> BV32_SLE($i.3$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p185$2 ==> _b304 ==> BV32_SLE($i.3$2, 0bv32);
    assert {:tag "guardNonNeg"} {:thread 1} p185$1 ==> _b303 ==> BV32_SLE(0bv32, $i.3$1);
    assert {:tag "guardNonNeg"} {:thread 2} p185$2 ==> _b303 ==> BV32_SLE(0bv32, $i.3$2);
    assert {:block_sourceloc} {:sourceloc_num 1141} p185$1 ==> true;
    v980$1 := (if p185$1 then $$d_common$320bv32$1 else v980$1);
    v980$2 := (if p185$2 then $$d_common$320bv32$2 else v980$2);
    v981$1 := (if p185$1 then $$d_common$321bv32$1 else v981$1);
    v981$2 := (if p185$2 then $$d_common$321bv32$2 else v981$2);
    v982$1 := (if p185$1 then $$d_common$322bv32$1 else v982$1);
    v982$2 := (if p185$2 then $$d_common$322bv32$2 else v982$2);
    v983$1 := (if p185$1 then $$d_common$323bv32$1 else v983$1);
    v983$2 := (if p185$2 then $$d_common$323bv32$2 else v983$2);
    v984$1 := (if p185$1 then BV32_SLT($i.3$1, v983$1 ++ v982$1 ++ v981$1 ++ v980$1) else v984$1);
    v984$2 := (if p185$2 then BV32_SLT($i.3$2, v983$2 ++ v982$2 ++ v981$2 ++ v980$2) else v984$2);
    p186$1 := false;
    p186$2 := false;
    p186$1 := (if p185$1 && v984$1 then v984$1 else p186$1);
    p186$2 := (if p185$2 && v984$2 then v984$2 else p186$2);
    p185$1 := (if p185$1 && !v984$1 then v984$1 else p185$1);
    p185$2 := (if p185$2 && !v984$2 then v984$2 else p185$2);
    call {:sourceloc} {:sourceloc_num 1147} _LOG_READ_$$in_sqr_final_sum_all(p186$1, v100$1, $$in_sqr_final_sum_all[v100$1]);
    assume {:do_not_predicate} {:check_id "check_state_65"} {:captureState "check_state_65"} {:sourceloc} {:sourceloc_num 1147} true;
    call {:check_id "check_state_65"} {:sourceloc} {:sourceloc_num 1147} _CHECK_READ_$$in_sqr_final_sum_all(p186$2, v100$2, $$in_sqr_final_sum_all[v100$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$in_sqr_final_sum_all"} true;
    v985$1 := (if p186$1 then $$in_sqr_final_sum_all[v100$1] else v985$1);
    v985$2 := (if p186$2 then $$in_sqr_final_sum_all[v100$2] else v985$2);
    call {:sourceloc} {:sourceloc_num 1148} _LOG_READ_$$in_sqr_partial_sum_all(p186$1, BV32_ADD(v194$1, $i.3$1), $$in_sqr_partial_sum_all[BV32_ADD(v194$1, $i.3$1)]);
    assume {:do_not_predicate} {:check_id "check_state_66"} {:captureState "check_state_66"} {:sourceloc} {:sourceloc_num 1148} true;
    call {:check_id "check_state_66"} {:sourceloc} {:sourceloc_num 1148} _CHECK_READ_$$in_sqr_partial_sum_all(p186$2, BV32_ADD(v194$2, $i.3$2), $$in_sqr_partial_sum_all[BV32_ADD(v194$2, $i.3$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$in_sqr_partial_sum_all"} true;
    v986$1 := (if p186$1 then $$in_sqr_partial_sum_all[BV32_ADD(v194$1, $i.3$1)] else v986$1);
    v986$2 := (if p186$2 then $$in_sqr_partial_sum_all[BV32_ADD(v194$2, $i.3$2)] else v986$2);
    call {:sourceloc} {:sourceloc_num 1149} _LOG_WRITE_$$in_sqr_final_sum_all(p186$1, v100$1, FADD32(v985$1, v986$1), $$in_sqr_final_sum_all[v100$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all(p186$2, v100$2);
    assume {:do_not_predicate} {:check_id "check_state_67"} {:captureState "check_state_67"} {:sourceloc} {:sourceloc_num 1149} true;
    call {:check_id "check_state_67"} {:sourceloc} {:sourceloc_num 1149} _CHECK_WRITE_$$in_sqr_final_sum_all(p186$2, v100$2, FADD32(v985$2, v986$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$in_sqr_final_sum_all"} true;
    $$in_sqr_final_sum_all[v100$1] := (if p186$1 then FADD32(v985$1, v986$1) else $$in_sqr_final_sum_all[v100$1]);
    $$in_sqr_final_sum_all[v100$2] := (if p186$2 then FADD32(v985$2, v986$2) else $$in_sqr_final_sum_all[v100$2]);
    $i.3$1 := (if p186$1 then BV32_ADD($i.3$1, 1bv32) else $i.3$1);
    $i.3$2 := (if p186$2 then BV32_ADD($i.3$2, 1bv32) else $i.3$2);
    p185$1 := (if p186$1 then true else p185$1);
    p185$2 := (if p186$2 then true else p185$2);
    goto $183.backedge, __partitioned_block_$183.tail_0;

  __partitioned_block_$183.tail_0:
    assume !p185$1 && !p185$2;
    goto __partitioned_block_$183.tail_1;

  __partitioned_block_$183.tail_1:
    call {:sourceloc_num 1153} $bugle_barrier_duplicated_30(1bv1, 1bv1);
    v987$1 := v101$1 == 0bv32;
    v987$2 := v101$2 == 0bv32;
    p188$1 := (if v987$1 then v987$1 else p188$1);
    p188$2 := (if v987$2 then v987$2 else p188$2);
    call {:sourceloc} {:sourceloc_num 1155} _LOG_READ_$$in_final_sum_all(p188$1, v100$1, $$in_final_sum_all[v100$1]);
    assume {:do_not_predicate} {:check_id "check_state_61"} {:captureState "check_state_61"} {:sourceloc} {:sourceloc_num 1155} true;
    call {:check_id "check_state_61"} {:sourceloc} {:sourceloc_num 1155} _CHECK_READ_$$in_final_sum_all(p188$2, v100$2, $$in_final_sum_all[v100$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$in_final_sum_all"} true;
    v988$1 := (if p188$1 then $$in_final_sum_all[v100$1] else v988$1);
    v988$2 := (if p188$2 then $$in_final_sum_all[v100$2] else v988$2);
    v989$1 := (if p188$1 then $$d_common$80bv32$1 else v989$1);
    v989$2 := (if p188$2 then $$d_common$80bv32$2 else v989$2);
    v990$1 := (if p188$1 then $$d_common$81bv32$1 else v990$1);
    v990$2 := (if p188$2 then $$d_common$81bv32$2 else v990$2);
    v991$1 := (if p188$1 then $$d_common$82bv32$1 else v991$1);
    v991$2 := (if p188$2 then $$d_common$82bv32$2 else v991$2);
    v992$1 := (if p188$1 then $$d_common$83bv32$1 else v992$1);
    v992$2 := (if p188$2 then $$d_common$83bv32$2 else v992$2);
    v993$1 := (if p188$1 then FDIV32(v988$1, SI32_TO_FP32(v992$1 ++ v991$1 ++ v990$1 ++ v989$1)) else v993$1);
    v993$2 := (if p188$2 then FDIV32(v988$2, SI32_TO_FP32(v992$2 ++ v991$2 ++ v990$2 ++ v989$2)) else v993$2);
    call {:sourceloc} {:sourceloc_num 1160} _LOG_READ_$$in_sqr_final_sum_all(p188$1, v100$1, $$in_sqr_final_sum_all[v100$1]);
    assume {:do_not_predicate} {:check_id "check_state_62"} {:captureState "check_state_62"} {:sourceloc} {:sourceloc_num 1160} true;
    call {:check_id "check_state_62"} {:sourceloc} {:sourceloc_num 1160} _CHECK_READ_$$in_sqr_final_sum_all(p188$2, v100$2, $$in_sqr_final_sum_all[v100$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$in_sqr_final_sum_all"} true;
    v994$1 := (if p188$1 then $$in_sqr_final_sum_all[v100$1] else v994$1);
    v994$2 := (if p188$2 then $$in_sqr_final_sum_all[v100$2] else v994$2);
    v995$1 := (if p188$1 then $$d_common$80bv32$1 else v995$1);
    v995$2 := (if p188$2 then $$d_common$80bv32$2 else v995$2);
    v996$1 := (if p188$1 then $$d_common$81bv32$1 else v996$1);
    v996$2 := (if p188$2 then $$d_common$81bv32$2 else v996$2);
    v997$1 := (if p188$1 then $$d_common$82bv32$1 else v997$1);
    v997$2 := (if p188$2 then $$d_common$82bv32$2 else v997$2);
    v998$1 := (if p188$1 then $$d_common$83bv32$1 else v998$1);
    v998$2 := (if p188$2 then $$d_common$83bv32$2 else v998$2);
    v999$1 := (if p188$1 then $$d_common$80bv32$1 else v999$1);
    v999$2 := (if p188$2 then $$d_common$80bv32$2 else v999$2);
    v1000$1 := (if p188$1 then $$d_common$81bv32$1 else v1000$1);
    v1000$2 := (if p188$2 then $$d_common$81bv32$2 else v1000$2);
    v1001$1 := (if p188$1 then $$d_common$82bv32$1 else v1001$1);
    v1001$2 := (if p188$2 then $$d_common$82bv32$2 else v1001$2);
    v1002$1 := (if p188$1 then $$d_common$83bv32$1 else v1002$1);
    v1002$2 := (if p188$2 then $$d_common$83bv32$2 else v1002$2);
    call {:sourceloc} {:sourceloc_num 1169} _LOG_WRITE_$$denomT_all(p188$1, v100$1, FMUL32(FSQRT32(SI32_TO_FP32(BV32_SUB(v1002$1 ++ v1001$1 ++ v1000$1 ++ v999$1, 1bv32))), FSQRT32(FSUB32(FDIV32(v994$1, SI32_TO_FP32(v998$1 ++ v997$1 ++ v996$1 ++ v995$1)), FMUL32(v993$1, v993$1)))), $$denomT_all[v100$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$denomT_all(p188$2, v100$2);
    assume {:do_not_predicate} {:check_id "check_state_63"} {:captureState "check_state_63"} {:sourceloc} {:sourceloc_num 1169} true;
    call {:check_id "check_state_63"} {:sourceloc} {:sourceloc_num 1169} _CHECK_WRITE_$$denomT_all(p188$2, v100$2, FMUL32(FSQRT32(SI32_TO_FP32(BV32_SUB(v1002$2 ++ v1001$2 ++ v1000$2 ++ v999$2, 1bv32))), FSQRT32(FSUB32(FDIV32(v994$2, SI32_TO_FP32(v998$2 ++ v997$2 ++ v996$2 ++ v995$2)), FMUL32(v993$2, v993$2)))));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$denomT_all"} true;
    $$denomT_all[v100$1] := (if p188$1 then FMUL32(FSQRT32(SI32_TO_FP32(BV32_SUB(v1002$1 ++ v1001$1 ++ v1000$1 ++ v999$1, 1bv32))), FSQRT32(FSUB32(FDIV32(v994$1, SI32_TO_FP32(v998$1 ++ v997$1 ++ v996$1 ++ v995$1)), FMUL32(v993$1, v993$1)))) else $$denomT_all[v100$1]);
    $$denomT_all[v100$2] := (if p188$2 then FMUL32(FSQRT32(SI32_TO_FP32(BV32_SUB(v1002$2 ++ v1001$2 ++ v1000$2 ++ v999$2, 1bv32))), FSQRT32(FSUB32(FDIV32(v994$2, SI32_TO_FP32(v998$2 ++ v997$2 ++ v996$2 ++ v995$2)), FMUL32(v993$2, v993$2)))) else $$denomT_all[v100$2]);
    goto __partitioned_block_$183.tail_2;

  __partitioned_block_$183.tail_2:
    call {:sourceloc_num 1171} $bugle_barrier_duplicated_31(1bv1, 1bv1);
    $ei_new.27$1 := v101$1;
    $ei_new.27$2 := v101$2;
    p190$1 := true;
    p190$2 := true;
    assume {:captureState "loop_entry_state_10_0"} true;
    goto $191;

  $191:
    assume {:captureState "loop_head_state_10"} true;
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b444 ==> _READ_HAS_OCCURRED_$$denomT_all ==> _WATCHED_OFFSET == group_id_x$1;
    assert {:tag "accessBreak"} _b443 ==> _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "accessBreak"} _b442 ==> _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p190$1 ==> _b223 ==> p190$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p190$2 ==> _b223 ==> p190$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b222 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.27$1, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p190$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b222 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.27$2, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p190$2;
    assert {:tag "loopBound"} {:thread 1} p190$1 ==> _b221 ==> BV32_UGE($ei_new.27$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p190$2 ==> _b221 ==> BV32_UGE($ei_new.27$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p190$1 ==> _b220 ==> BV32_ULE($ei_new.27$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p190$2 ==> _b220 ==> BV32_ULE($ei_new.27$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p190$1 ==> _b219 ==> BV32_SGE($ei_new.27$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p190$2 ==> _b219 ==> BV32_SGE($ei_new.27$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p190$1 ==> _b218 ==> BV32_SLE($ei_new.27$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p190$2 ==> _b218 ==> BV32_SLE($ei_new.27$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p190$1 ==> _b217 ==> BV32_SLE(0bv32, $ei_new.27$1);
    assert {:tag "guardNonNeg"} {:thread 2} p190$2 ==> _b217 ==> BV32_SLE(0bv32, $ei_new.27$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p190$1 ==> _b216 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.27$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p190$2 ==> _b216 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.27$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1172} p190$1 ==> true;
    v1003$1 := (if p190$1 then $$d_common$276bv32$1 else v1003$1);
    v1003$2 := (if p190$2 then $$d_common$276bv32$2 else v1003$2);
    v1004$1 := (if p190$1 then $$d_common$277bv32$1 else v1004$1);
    v1004$2 := (if p190$2 then $$d_common$277bv32$2 else v1004$2);
    v1005$1 := (if p190$1 then $$d_common$278bv32$1 else v1005$1);
    v1005$2 := (if p190$2 then $$d_common$278bv32$2 else v1005$2);
    v1006$1 := (if p190$1 then $$d_common$279bv32$1 else v1006$1);
    v1006$2 := (if p190$2 then $$d_common$279bv32$2 else v1006$2);
    v1007$1 := (if p190$1 then BV32_SLT($ei_new.27$1, v1006$1 ++ v1005$1 ++ v1004$1 ++ v1003$1) else v1007$1);
    v1007$2 := (if p190$2 then BV32_SLT($ei_new.27$2, v1006$2 ++ v1005$2 ++ v1004$2 ++ v1003$2) else v1007$2);
    p191$1 := false;
    p191$2 := false;
    p191$1 := (if p190$1 && v1007$1 then v1007$1 else p191$1);
    p191$2 := (if p190$2 && v1007$2 then v1007$2 else p191$2);
    p190$1 := (if p190$1 && !v1007$1 then v1007$1 else p190$1);
    p190$2 := (if p190$2 && !v1007$2 then v1007$2 else p190$2);
    call {:sourceloc} {:sourceloc_num 1178} _LOG_READ_$$d_in2_sqr_sub2_all(p191$1, BV32_ADD(v164$1, $ei_new.27$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.27$1)]);
    assume {:do_not_predicate} {:check_id "check_state_58"} {:captureState "check_state_58"} {:sourceloc} {:sourceloc_num 1178} true;
    call {:check_id "check_state_58"} {:sourceloc} {:sourceloc_num 1178} _CHECK_READ_$$d_in2_sqr_sub2_all(p191$2, BV32_ADD(v164$2, $ei_new.27$2), $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.27$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sqr_sub2_all"} true;
    v1008$1 := (if p191$1 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.27$1)] else v1008$1);
    v1008$2 := (if p191$2 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.27$2)] else v1008$2);
    call {:sourceloc} {:sourceloc_num 1179} _LOG_READ_$$denomT_all(p191$1, v100$1, $$denomT_all[v100$1]);
    assume {:do_not_predicate} {:check_id "check_state_59"} {:captureState "check_state_59"} {:sourceloc} {:sourceloc_num 1179} true;
    call {:check_id "check_state_59"} {:sourceloc} {:sourceloc_num 1179} _CHECK_READ_$$denomT_all(p191$2, v100$2, $$denomT_all[v100$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$denomT_all"} true;
    v1009$1 := (if p191$1 then $$denomT_all[v100$1] else v1009$1);
    v1009$2 := (if p191$2 then $$denomT_all[v100$2] else v1009$2);
    call {:sourceloc} {:sourceloc_num 1180} _LOG_WRITE_$$d_in2_sqr_sub2_all(p191$1, BV32_ADD(v164$1, $ei_new.27$1), FMUL32(v1008$1, v1009$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.27$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all(p191$2, BV32_ADD(v164$2, $ei_new.27$2));
    assume {:do_not_predicate} {:check_id "check_state_60"} {:captureState "check_state_60"} {:sourceloc} {:sourceloc_num 1180} true;
    call {:check_id "check_state_60"} {:sourceloc} {:sourceloc_num 1180} _CHECK_WRITE_$$d_in2_sqr_sub2_all(p191$2, BV32_ADD(v164$2, $ei_new.27$2), FMUL32(v1008$2, v1009$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sqr_sub2_all"} true;
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.27$1)] := (if p191$1 then FMUL32(v1008$1, v1009$1) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.27$1)]);
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.27$2)] := (if p191$2 then FMUL32(v1008$2, v1009$2) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.27$2)]);
    $ei_new.27$1 := (if p191$1 then BV32_ADD($ei_new.27$1, 256bv32) else $ei_new.27$1);
    $ei_new.27$2 := (if p191$2 then BV32_ADD($ei_new.27$2, 256bv32) else $ei_new.27$2);
    p190$1 := (if p191$1 then true else p190$1);
    p190$2 := (if p191$2 then true else p190$2);
    goto $191.backedge, __partitioned_block_$191.tail_0;

  __partitioned_block_$191.tail_0:
    assume !p190$1 && !p190$2;
    goto __partitioned_block_$191.tail_1;

  __partitioned_block_$191.tail_1:
    call {:sourceloc_num 1182} $bugle_barrier_duplicated_32(1bv1, 1bv1);
    $ei_new.28$1 := v101$1;
    $ei_new.28$2 := v101$2;
    p192$1 := true;
    p192$2 := true;
    assume {:captureState "loop_entry_state_9_0"} true;
    goto $194;

  $194:
    assume {:captureState "loop_head_state_9"} true;
    assert {:tag "accessedOffsetsSatisfyPredicates"} _b448 ==> _READ_HAS_OCCURRED_$$in_final_sum_all ==> _WATCHED_OFFSET == group_id_x$1;
    assert {:tag "accessBreak"} _b447 ==> _READ_HAS_OCCURRED_$$d_in2_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce69), $d_common.coerce69), $d_common.coerce69), $d_common.coerce69);
    assert {:tag "accessBreak"} _b446 ==> _WRITE_HAS_OCCURRED_$$d_conv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce29), $d_common.coerce29), $d_common.coerce29), $d_common.coerce29);
    assert {:tag "accessBreak"} _b445 ==> _READ_HAS_OCCURRED_$$d_conv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce29), $d_common.coerce29), $d_common.coerce29), $d_common.coerce29);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p192$1 ==> _b231 ==> p192$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p192$2 ==> _b231 ==> p192$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b230 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.28$1, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) ==> p192$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b230 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.28$2, $d_common.coerce29[32:24] ++ $d_common.coerce29[24:16] ++ $d_common.coerce29[16:8] ++ $d_common.coerce29[8:0]) ==> p192$2;
    assert {:tag "loopBound"} {:thread 1} p192$1 ==> _b229 ==> BV32_UGE($ei_new.28$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p192$2 ==> _b229 ==> BV32_UGE($ei_new.28$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p192$1 ==> _b228 ==> BV32_ULE($ei_new.28$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p192$2 ==> _b228 ==> BV32_ULE($ei_new.28$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p192$1 ==> _b227 ==> BV32_SGE($ei_new.28$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p192$2 ==> _b227 ==> BV32_SGE($ei_new.28$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p192$1 ==> _b226 ==> BV32_SLE($ei_new.28$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p192$2 ==> _b226 ==> BV32_SLE($ei_new.28$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p192$1 ==> _b225 ==> BV32_SLE(0bv32, $ei_new.28$1);
    assert {:tag "guardNonNeg"} {:thread 2} p192$2 ==> _b225 ==> BV32_SLE(0bv32, $ei_new.28$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p192$1 ==> _b224 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.28$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p192$2 ==> _b224 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.28$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1183} p192$1 ==> true;
    v1010$1 := (if p192$1 then $$d_common$116bv32$1 else v1010$1);
    v1010$2 := (if p192$2 then $$d_common$116bv32$2 else v1010$2);
    v1011$1 := (if p192$1 then $$d_common$117bv32$1 else v1011$1);
    v1011$2 := (if p192$2 then $$d_common$117bv32$2 else v1011$2);
    v1012$1 := (if p192$1 then $$d_common$118bv32$1 else v1012$1);
    v1012$2 := (if p192$2 then $$d_common$118bv32$2 else v1012$2);
    v1013$1 := (if p192$1 then $$d_common$119bv32$1 else v1013$1);
    v1013$2 := (if p192$2 then $$d_common$119bv32$2 else v1013$2);
    v1014$1 := (if p192$1 then BV32_SLT($ei_new.28$1, v1013$1 ++ v1012$1 ++ v1011$1 ++ v1010$1) else v1014$1);
    v1014$2 := (if p192$2 then BV32_SLT($ei_new.28$2, v1013$2 ++ v1012$2 ++ v1011$2 ++ v1010$2) else v1014$2);
    p193$1 := false;
    p193$2 := false;
    p193$1 := (if p192$1 && v1014$1 then v1014$1 else p193$1);
    p193$2 := (if p192$2 && v1014$2 then v1014$2 else p193$2);
    p192$1 := (if p192$1 && !v1014$1 then v1014$1 else p192$1);
    p192$2 := (if p192$2 && !v1014$2 then v1014$2 else p192$2);
    call {:sourceloc} {:sourceloc_num 1189} _LOG_READ_$$d_conv_all(p193$1, BV32_ADD(v129$1, $ei_new.28$1), $$d_conv_all[BV32_ADD(v129$1, $ei_new.28$1)]);
    assume {:do_not_predicate} {:check_id "check_state_54"} {:captureState "check_state_54"} {:sourceloc} {:sourceloc_num 1189} true;
    call {:check_id "check_state_54"} {:sourceloc} {:sourceloc_num 1189} _CHECK_READ_$$d_conv_all(p193$2, BV32_ADD(v129$2, $ei_new.28$2), $$d_conv_all[BV32_ADD(v129$2, $ei_new.28$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_conv_all"} true;
    v1015$1 := (if p193$1 then $$d_conv_all[BV32_ADD(v129$1, $ei_new.28$1)] else v1015$1);
    v1015$2 := (if p193$2 then $$d_conv_all[BV32_ADD(v129$2, $ei_new.28$2)] else v1015$2);
    call {:sourceloc} {:sourceloc_num 1190} _LOG_READ_$$d_in2_sub2_all(p193$1, BV32_ADD(v154$1, $ei_new.28$1), $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.28$1)]);
    assume {:do_not_predicate} {:check_id "check_state_55"} {:captureState "check_state_55"} {:sourceloc} {:sourceloc_num 1190} true;
    call {:check_id "check_state_55"} {:sourceloc} {:sourceloc_num 1190} _CHECK_READ_$$d_in2_sub2_all(p193$2, BV32_ADD(v154$2, $ei_new.28$2), $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.28$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sub2_all"} true;
    v1016$1 := (if p193$1 then $$d_in2_sub2_all[BV32_ADD(v154$1, $ei_new.28$1)] else v1016$1);
    v1016$2 := (if p193$2 then $$d_in2_sub2_all[BV32_ADD(v154$2, $ei_new.28$2)] else v1016$2);
    call {:sourceloc} {:sourceloc_num 1191} _LOG_READ_$$in_final_sum_all(p193$1, v100$1, $$in_final_sum_all[v100$1]);
    assume {:do_not_predicate} {:check_id "check_state_56"} {:captureState "check_state_56"} {:sourceloc} {:sourceloc_num 1191} true;
    call {:check_id "check_state_56"} {:sourceloc} {:sourceloc_num 1191} _CHECK_READ_$$in_final_sum_all(p193$2, v100$2, $$in_final_sum_all[v100$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$in_final_sum_all"} true;
    v1017$1 := (if p193$1 then $$in_final_sum_all[v100$1] else v1017$1);
    v1017$2 := (if p193$2 then $$in_final_sum_all[v100$2] else v1017$2);
    v1018$1 := (if p193$1 then $$d_common$80bv32$1 else v1018$1);
    v1018$2 := (if p193$2 then $$d_common$80bv32$2 else v1018$2);
    v1019$1 := (if p193$1 then $$d_common$81bv32$1 else v1019$1);
    v1019$2 := (if p193$2 then $$d_common$81bv32$2 else v1019$2);
    v1020$1 := (if p193$1 then $$d_common$82bv32$1 else v1020$1);
    v1020$2 := (if p193$2 then $$d_common$82bv32$2 else v1020$2);
    v1021$1 := (if p193$1 then $$d_common$83bv32$1 else v1021$1);
    v1021$2 := (if p193$2 then $$d_common$83bv32$2 else v1021$2);
    call {:sourceloc} {:sourceloc_num 1196} _LOG_WRITE_$$d_conv_all(p193$1, BV32_ADD(v129$1, $ei_new.28$1), FSUB32(v1015$1, FDIV32(FMUL32(v1016$1, v1017$1), SI32_TO_FP32(v1021$1 ++ v1020$1 ++ v1019$1 ++ v1018$1))), $$d_conv_all[BV32_ADD(v129$1, $ei_new.28$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_conv_all(p193$2, BV32_ADD(v129$2, $ei_new.28$2));
    assume {:do_not_predicate} {:check_id "check_state_57"} {:captureState "check_state_57"} {:sourceloc} {:sourceloc_num 1196} true;
    call {:check_id "check_state_57"} {:sourceloc} {:sourceloc_num 1196} _CHECK_WRITE_$$d_conv_all(p193$2, BV32_ADD(v129$2, $ei_new.28$2), FSUB32(v1015$2, FDIV32(FMUL32(v1016$2, v1017$2), SI32_TO_FP32(v1021$2 ++ v1020$2 ++ v1019$2 ++ v1018$2))));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_conv_all"} true;
    $$d_conv_all[BV32_ADD(v129$1, $ei_new.28$1)] := (if p193$1 then FSUB32(v1015$1, FDIV32(FMUL32(v1016$1, v1017$1), SI32_TO_FP32(v1021$1 ++ v1020$1 ++ v1019$1 ++ v1018$1))) else $$d_conv_all[BV32_ADD(v129$1, $ei_new.28$1)]);
    $$d_conv_all[BV32_ADD(v129$2, $ei_new.28$2)] := (if p193$2 then FSUB32(v1015$2, FDIV32(FMUL32(v1016$2, v1017$2), SI32_TO_FP32(v1021$2 ++ v1020$2 ++ v1019$2 ++ v1018$2))) else $$d_conv_all[BV32_ADD(v129$2, $ei_new.28$2)]);
    $ei_new.28$1 := (if p193$1 then BV32_ADD($ei_new.28$1, 256bv32) else $ei_new.28$1);
    $ei_new.28$2 := (if p193$2 then BV32_ADD($ei_new.28$2, 256bv32) else $ei_new.28$2);
    p192$1 := (if p193$1 then true else p192$1);
    p192$2 := (if p193$2 then true else p192$2);
    goto $194.backedge, __partitioned_block_$194.tail_0;

  __partitioned_block_$194.tail_0:
    assume !p192$1 && !p192$2;
    goto __partitioned_block_$194.tail_1;

  __partitioned_block_$194.tail_1:
    call {:sourceloc_num 1198} $bugle_barrier_duplicated_33(1bv1, 1bv1);
    $ei_new.29$1 := v101$1;
    $ei_new.29$2 := v101$2;
    p194$1 := true;
    p194$2 := true;
    assume {:captureState "loop_entry_state_8_0"} true;
    goto $197;

  $197:
    assume {:captureState "loop_head_state_8"} true;
    assert {:tag "accessBreak"} _b451 ==> _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "accessBreak"} _b450 ==> _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "accessBreak"} _b449 ==> _READ_HAS_OCCURRED_$$d_conv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce29), $d_common.coerce29), $d_common.coerce29), $d_common.coerce29);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p194$1 ==> _b239 ==> p194$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p194$2 ==> _b239 ==> p194$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b238 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.29$1, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p194$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b238 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.29$2, $d_common.coerce69[32:24] ++ $d_common.coerce69[24:16] ++ $d_common.coerce69[16:8] ++ $d_common.coerce69[8:0]) ==> p194$2;
    assert {:tag "loopBound"} {:thread 1} p194$1 ==> _b237 ==> BV32_UGE($ei_new.29$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p194$2 ==> _b237 ==> BV32_UGE($ei_new.29$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p194$1 ==> _b236 ==> BV32_ULE($ei_new.29$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p194$2 ==> _b236 ==> BV32_ULE($ei_new.29$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p194$1 ==> _b235 ==> BV32_SGE($ei_new.29$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p194$2 ==> _b235 ==> BV32_SGE($ei_new.29$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p194$1 ==> _b234 ==> BV32_SLE($ei_new.29$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p194$2 ==> _b234 ==> BV32_SLE($ei_new.29$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p194$1 ==> _b233 ==> BV32_SLE(0bv32, $ei_new.29$1);
    assert {:tag "guardNonNeg"} {:thread 2} p194$2 ==> _b233 ==> BV32_SLE(0bv32, $ei_new.29$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p194$1 ==> _b232 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.29$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p194$2 ==> _b232 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.29$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1199} p194$1 ==> true;
    v1022$1 := (if p194$1 then $$d_common$276bv32$1 else v1022$1);
    v1022$2 := (if p194$2 then $$d_common$276bv32$2 else v1022$2);
    v1023$1 := (if p194$1 then $$d_common$277bv32$1 else v1023$1);
    v1023$2 := (if p194$2 then $$d_common$277bv32$2 else v1023$2);
    v1024$1 := (if p194$1 then $$d_common$278bv32$1 else v1024$1);
    v1024$2 := (if p194$2 then $$d_common$278bv32$2 else v1024$2);
    v1025$1 := (if p194$1 then $$d_common$279bv32$1 else v1025$1);
    v1025$2 := (if p194$2 then $$d_common$279bv32$2 else v1025$2);
    v1026$1 := (if p194$1 then BV32_SLT($ei_new.29$1, v1025$1 ++ v1024$1 ++ v1023$1 ++ v1022$1) else v1026$1);
    v1026$2 := (if p194$2 then BV32_SLT($ei_new.29$2, v1025$2 ++ v1024$2 ++ v1023$2 ++ v1022$2) else v1026$2);
    p195$1 := false;
    p195$2 := false;
    p196$1 := false;
    p196$2 := false;
    p197$1 := false;
    p197$2 := false;
    p198$1 := false;
    p198$2 := false;
    p199$1 := false;
    p199$2 := false;
    p200$1 := false;
    p200$2 := false;
    p201$1 := false;
    p201$2 := false;
    p202$1 := false;
    p202$2 := false;
    p203$1 := false;
    p203$2 := false;
    p204$1 := false;
    p204$2 := false;
    p205$1 := false;
    p205$2 := false;
    p206$1 := false;
    p206$2 := false;
    p207$1 := false;
    p207$2 := false;
    p208$1 := false;
    p208$2 := false;
    p209$1 := false;
    p209$2 := false;
    p210$1 := false;
    p210$2 := false;
    p211$1 := false;
    p211$2 := false;
    p212$1 := false;
    p212$2 := false;
    p213$1 := false;
    p213$2 := false;
    p214$1 := false;
    p214$2 := false;
    p215$1 := false;
    p215$2 := false;
    p216$1 := false;
    p216$2 := false;
    p217$1 := false;
    p217$2 := false;
    p218$1 := false;
    p218$2 := false;
    p219$1 := false;
    p219$2 := false;
    p220$1 := false;
    p220$2 := false;
    p221$1 := false;
    p221$2 := false;
    p222$1 := false;
    p222$2 := false;
    p223$1 := false;
    p223$2 := false;
    p224$1 := false;
    p224$2 := false;
    p225$1 := false;
    p225$2 := false;
    p226$1 := false;
    p226$2 := false;
    p227$1 := false;
    p227$2 := false;
    p195$1 := (if p194$1 && v1026$1 then v1026$1 else p195$1);
    p195$2 := (if p194$2 && v1026$2 then v1026$2 else p195$2);
    p194$1 := (if p194$1 && !v1026$1 then v1026$1 else p194$1);
    p194$2 := (if p194$2 && !v1026$2 then v1026$2 else p194$2);
    call {:sourceloc} {:sourceloc_num 1205} _LOG_READ_$$d_conv_all(p195$1, BV32_ADD(v129$1, $ei_new.29$1), $$d_conv_all[BV32_ADD(v129$1, $ei_new.29$1)]);
    assume {:do_not_predicate} {:check_id "check_state_51"} {:captureState "check_state_51"} {:sourceloc} {:sourceloc_num 1205} true;
    call {:check_id "check_state_51"} {:sourceloc} {:sourceloc_num 1205} _CHECK_READ_$$d_conv_all(p195$2, BV32_ADD(v129$2, $ei_new.29$2), $$d_conv_all[BV32_ADD(v129$2, $ei_new.29$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_conv_all"} true;
    v1027$1 := (if p195$1 then $$d_conv_all[BV32_ADD(v129$1, $ei_new.29$1)] else v1027$1);
    v1027$2 := (if p195$2 then $$d_conv_all[BV32_ADD(v129$2, $ei_new.29$2)] else v1027$2);
    call {:sourceloc} {:sourceloc_num 1206} _LOG_READ_$$d_in2_sqr_sub2_all(p195$1, BV32_ADD(v164$1, $ei_new.29$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.29$1)]);
    assume {:do_not_predicate} {:check_id "check_state_52"} {:captureState "check_state_52"} {:sourceloc} {:sourceloc_num 1206} true;
    call {:check_id "check_state_52"} {:sourceloc} {:sourceloc_num 1206} _CHECK_READ_$$d_in2_sqr_sub2_all(p195$2, BV32_ADD(v164$2, $ei_new.29$2), $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.29$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sqr_sub2_all"} true;
    v1028$1 := (if p195$1 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.29$1)] else v1028$1);
    v1028$2 := (if p195$2 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.29$2)] else v1028$2);
    call {:sourceloc} {:sourceloc_num 1207} _LOG_WRITE_$$d_in2_sqr_sub2_all(p195$1, BV32_ADD(v164$1, $ei_new.29$1), FDIV32(v1027$1, v1028$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.29$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all(p195$2, BV32_ADD(v164$2, $ei_new.29$2));
    assume {:do_not_predicate} {:check_id "check_state_53"} {:captureState "check_state_53"} {:sourceloc} {:sourceloc_num 1207} true;
    call {:check_id "check_state_53"} {:sourceloc} {:sourceloc_num 1207} _CHECK_WRITE_$$d_in2_sqr_sub2_all(p195$2, BV32_ADD(v164$2, $ei_new.29$2), FDIV32(v1027$2, v1028$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_in2_sqr_sub2_all"} true;
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.29$1)] := (if p195$1 then FDIV32(v1027$1, v1028$1) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.29$1)]);
    $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.29$2)] := (if p195$2 then FDIV32(v1027$2, v1028$2) else $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.29$2)]);
    $ei_new.29$1 := (if p195$1 then BV32_ADD($ei_new.29$1, 256bv32) else $ei_new.29$1);
    $ei_new.29$2 := (if p195$2 then BV32_ADD($ei_new.29$2, 256bv32) else $ei_new.29$2);
    p194$1 := (if p195$1 then true else p194$1);
    p194$2 := (if p195$2 then true else p194$2);
    goto $197.backedge, __partitioned_block_$197.tail_0;

  __partitioned_block_$197.tail_0:
    assume !p194$1 && !p194$2;
    goto __partitioned_block_$197.tail_1;

  __partitioned_block_$197.tail_1:
    call {:sourceloc_num 1209} $bugle_barrier_duplicated_34(1bv1, 1bv1);
    v1029$1 := $$d_common$16bv32$1;
    v1029$2 := $$d_common$16bv32$2;
    v1030$1 := $$d_common$17bv32$1;
    v1030$2 := $$d_common$17bv32$2;
    v1031$1 := $$d_common$18bv32$1;
    v1031$2 := $$d_common$18bv32$2;
    v1032$1 := $$d_common$19bv32$1;
    v1032$2 := $$d_common$19bv32$2;
    v1033$1 := $$d_common$20bv32$1;
    v1033$2 := $$d_common$20bv32$2;
    v1034$1 := $$d_common$21bv32$1;
    v1034$2 := $$d_common$21bv32$2;
    v1035$1 := $$d_common$22bv32$1;
    v1035$2 := $$d_common$22bv32$2;
    v1036$1 := $$d_common$23bv32$1;
    v1036$2 := $$d_common$23bv32$2;
    v1037$1 := BV32_ADD(BV32_ADD(v1032$1 ++ v1031$1 ++ v1030$1 ++ v1029$1, v1036$1 ++ v1035$1 ++ v1034$1 ++ v1033$1), 1bv32);
    v1037$2 := BV32_ADD(BV32_ADD(v1032$2 ++ v1031$2 ++ v1030$2 ++ v1029$2, v1036$2 ++ v1035$2 ++ v1034$2 ++ v1033$2), 1bv32);
    v1038 := $d_frame_no == 0bv32;
    goto $truebb73, $falsebb73;

  $falsebb73:
    assume {:partition} !v1038 && !v1038;
    v1043$1 := $$d_common$32bv32$1;
    v1043$2 := $$d_common$32bv32$2;
    v1044$1 := $$d_common$33bv32$1;
    v1044$2 := $$d_common$33bv32$2;
    v1045$1 := $$d_common$34bv32$1;
    v1045$2 := $$d_common$34bv32$2;
    v1046$1 := $$d_common$35bv32$1;
    v1046$2 := $$d_common$35bv32$2;
    v1047$1 := BV32_SUB(BV32_ADD(BV32_MUL($d_unique_point_no.0$1, v1046$1 ++ v1045$1 ++ v1044$1 ++ v1043$1), $d_frame_no), 1bv32);
    v1047$2 := BV32_SUB(BV32_ADD(BV32_MUL($d_unique_point_no.0$2, v1046$2 ++ v1045$2 ++ v1044$2 ++ v1043$2), $d_frame_no), 1bv32);
    p212$1 := (if base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc else p212$1);
    p212$2 := (if base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc else p212$2);
    p213$1 := (if base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc else p213$1);
    p213$2 := (if base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc else p213$2);
    call {:sourceloc} {:sourceloc_num 1236} _LOG_READ_$$d_tEpiRowLoc(p212$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1047$1), $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1047$1)]);
    assume {:do_not_predicate} {:check_id "check_state_42"} {:captureState "check_state_42"} {:sourceloc} {:sourceloc_num 1236} true;
    call {:check_id "check_state_42"} {:sourceloc} {:sourceloc_num 1236} _CHECK_READ_$$d_tEpiRowLoc(p212$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1047$2), $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1047$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEpiRowLoc"} true;
    v1048$1 := (if p212$1 then $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1047$1)] else v1048$1);
    v1048$2 := (if p212$2 then $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1047$2)] else v1048$2);
    p214$1 := (if p213$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc else p214$1);
    p214$2 := (if p213$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc else p214$2);
    p215$1 := (if p213$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc else p215$1);
    p215$2 := (if p213$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc else p215$2);
    call {:sourceloc} {:sourceloc_num 1237} _LOG_READ_$$d_tEndoRowLoc(p214$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1047$1), $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1047$1)]);
    assume {:do_not_predicate} {:check_id "check_state_41"} {:captureState "check_state_41"} {:sourceloc} {:sourceloc_num 1237} true;
    call {:check_id "check_state_41"} {:sourceloc} {:sourceloc_num 1237} _CHECK_READ_$$d_tEndoRowLoc(p214$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1047$2), $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1047$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEndoRowLoc"} true;
    v1048$1 := (if p214$1 then $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1047$1)] else v1048$1);
    v1048$2 := (if p214$2 then $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1047$2)] else v1048$2);
    assert {:bad_pointer_access} {:sourceloc_num 1238} {:thread 1} p215$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1238} {:thread 2} p215$2 ==> false;
    p216$1 := (if base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p216$1);
    p216$2 := (if base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p216$2);
    p217$1 := (if base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p217$1);
    p217$2 := (if base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p217$2);
    call {:sourceloc} {:sourceloc_num 1239} _LOG_READ_$$d_epiRow(p216$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_40"} {:captureState "check_state_40"} {:sourceloc} {:sourceloc_num 1239} true;
    call {:check_id "check_state_40"} {:sourceloc} {:sourceloc_num 1239} _CHECK_READ_$$d_epiRow(p216$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v1049$1 := (if p216$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1049$1);
    v1049$2 := (if p216$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1049$2);
    p218$1 := (if p217$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p218$1);
    p218$2 := (if p217$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p218$2);
    p219$1 := (if p217$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p219$1);
    p219$2 := (if p217$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p219$2);
    call {:sourceloc} {:sourceloc_num 1240} _LOG_READ_$$d_endoRow(p218$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_39"} {:captureState "check_state_39"} {:sourceloc} {:sourceloc_num 1240} true;
    call {:check_id "check_state_39"} {:sourceloc} {:sourceloc_num 1240} _CHECK_READ_$$d_endoRow(p218$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v1049$1 := (if p218$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1049$1);
    v1049$2 := (if p218$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1049$2);
    assert {:bad_pointer_access} {:sourceloc_num 1241} {:thread 1} p219$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1241} {:thread 2} p219$2 ==> false;
    p220$1 := (if base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc else p220$1);
    p220$2 := (if base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc else p220$2);
    p221$1 := (if base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc else p221$1);
    p221$2 := (if base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc else p221$2);
    call {:sourceloc} {:sourceloc_num 1242} _LOG_READ_$$d_tEndoColLoc(p220$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1047$1), $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1047$1)]);
    assume {:do_not_predicate} {:check_id "check_state_38"} {:captureState "check_state_38"} {:sourceloc} {:sourceloc_num 1242} true;
    call {:check_id "check_state_38"} {:sourceloc} {:sourceloc_num 1242} _CHECK_READ_$$d_tEndoColLoc(p220$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1047$2), $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1047$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEndoColLoc"} true;
    v1050$1 := (if p220$1 then $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1047$1)] else v1050$1);
    v1050$2 := (if p220$2 then $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1047$2)] else v1050$2);
    p222$1 := (if p221$1 && base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc else p222$1);
    p222$2 := (if p221$2 && base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc else p222$2);
    p223$1 := (if p221$1 && base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc else p223$1);
    p223$2 := (if p221$2 && base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc else p223$2);
    call {:sourceloc} {:sourceloc_num 1243} _LOG_READ_$$d_tEpiColLoc(p222$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1047$1), $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1047$1)]);
    assume {:do_not_predicate} {:check_id "check_state_37"} {:captureState "check_state_37"} {:sourceloc} {:sourceloc_num 1243} true;
    call {:check_id "check_state_37"} {:sourceloc} {:sourceloc_num 1243} _CHECK_READ_$$d_tEpiColLoc(p222$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1047$2), $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1047$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tEpiColLoc"} true;
    v1050$1 := (if p222$1 then $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1047$1)] else v1050$1);
    v1050$2 := (if p222$2 then $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1047$2)] else v1050$2);
    assert {:bad_pointer_access} {:sourceloc_num 1244} {:thread 1} p223$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1244} {:thread 2} p223$2 ==> false;
    p224$1 := (if base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p224$1);
    p224$2 := (if base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p224$2);
    p225$1 := (if base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p225$1);
    p225$2 := (if base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p225$2);
    call {:sourceloc} {:sourceloc_num 1245} _LOG_READ_$$d_endoCol(p224$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_36"} {:captureState "check_state_36"} {:sourceloc} {:sourceloc_num 1245} true;
    call {:check_id "check_state_36"} {:sourceloc} {:sourceloc_num 1245} _CHECK_READ_$$d_endoCol(p224$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v1051$1 := (if p224$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1051$1);
    v1051$2 := (if p224$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1051$2);
    p226$1 := (if p225$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p226$1);
    p226$2 := (if p225$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p226$2);
    p227$1 := (if p225$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p227$1);
    p227$2 := (if p225$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p227$2);
    call {:sourceloc} {:sourceloc_num 1246} _LOG_READ_$$d_epiCol(p226$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_35"} {:captureState "check_state_35"} {:sourceloc} {:sourceloc_num 1246} true;
    call {:check_id "check_state_35"} {:sourceloc} {:sourceloc_num 1246} _CHECK_READ_$$d_epiCol(p226$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v1051$1 := (if p226$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1051$1);
    v1051$2 := (if p226$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1051$2);
    assert {:bad_pointer_access} {:sourceloc_num 1247} {:thread 1} p227$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1247} {:thread 2} p227$2 ==> false;
    $tMask_row.0$1, $tMask_col.0$1 := BV32_SUB(BV32_SUB(BV32_ADD(v1037$1, v1048$1), v1049$1), 1bv32), BV32_SUB(BV32_SUB(BV32_ADD(v1037$1, v1050$1), v1051$1), 1bv32);
    $tMask_row.0$2, $tMask_col.0$2 := BV32_SUB(BV32_SUB(BV32_ADD(v1037$2, v1048$2), v1049$2), 1bv32), BV32_SUB(BV32_SUB(BV32_ADD(v1037$2, v1050$2), v1051$2), 1bv32);
    goto $202;

  $202:
    $ei_new.30$1 := v101$1;
    $ei_new.30$2 := v101$2;
    p228$1 := true;
    p228$2 := true;
    assume {:captureState "loop_entry_state_7_0"} true;
    goto $203;

  $203:
    assume {:captureState "loop_head_state_7"} true;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p228$1 ==> _b247 ==> p228$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p228$2 ==> _b247 ==> p228$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b246 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.30$1, $d_common.coerce85[32:24] ++ $d_common.coerce85[24:16] ++ $d_common.coerce85[16:8] ++ $d_common.coerce85[8:0]) ==> p228$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b246 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.30$2, $d_common.coerce85[32:24] ++ $d_common.coerce85[24:16] ++ $d_common.coerce85[16:8] ++ $d_common.coerce85[8:0]) ==> p228$2;
    assert {:tag "loopBound"} {:thread 1} p228$1 ==> _b245 ==> BV32_UGE($ei_new.30$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p228$2 ==> _b245 ==> BV32_UGE($ei_new.30$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p228$1 ==> _b244 ==> BV32_ULE($ei_new.30$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p228$2 ==> _b244 ==> BV32_ULE($ei_new.30$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p228$1 ==> _b243 ==> BV32_SGE($ei_new.30$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p228$2 ==> _b243 ==> BV32_SGE($ei_new.30$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p228$1 ==> _b242 ==> BV32_SLE($ei_new.30$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p228$2 ==> _b242 ==> BV32_SLE($ei_new.30$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p228$1 ==> _b241 ==> BV32_SLE(0bv32, $ei_new.30$1);
    assert {:tag "guardNonNeg"} {:thread 2} p228$2 ==> _b241 ==> BV32_SLE(0bv32, $ei_new.30$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p228$1 ==> _b240 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.30$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p228$2 ==> _b240 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.30$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1249} p228$1 ==> true;
    v1052$1 := (if p228$1 then $$d_common$340bv32$1 else v1052$1);
    v1052$2 := (if p228$2 then $$d_common$340bv32$2 else v1052$2);
    v1053$1 := (if p228$1 then $$d_common$341bv32$1 else v1053$1);
    v1053$2 := (if p228$2 then $$d_common$341bv32$2 else v1053$2);
    v1054$1 := (if p228$1 then $$d_common$342bv32$1 else v1054$1);
    v1054$2 := (if p228$2 then $$d_common$342bv32$2 else v1054$2);
    v1055$1 := (if p228$1 then $$d_common$343bv32$1 else v1055$1);
    v1055$2 := (if p228$2 then $$d_common$343bv32$2 else v1055$2);
    v1056$1 := (if p228$1 then BV32_SLT($ei_new.30$1, v1055$1 ++ v1054$1 ++ v1053$1 ++ v1052$1) else v1056$1);
    v1056$2 := (if p228$2 then BV32_SLT($ei_new.30$2, v1055$2 ++ v1054$2 ++ v1053$2 ++ v1052$2) else v1056$2);
    p229$1 := false;
    p229$2 := false;
    p230$1 := false;
    p230$2 := false;
    p231$1 := false;
    p231$2 := false;
    p229$1 := (if p228$1 && v1056$1 then v1056$1 else p229$1);
    p229$2 := (if p228$2 && v1056$2 then v1056$2 else p229$2);
    p228$1 := (if p228$1 && !v1056$1 then v1056$1 else p228$1);
    p228$2 := (if p228$2 && !v1056$2 then v1056$2 else p228$2);
    v1057$1 := (if p229$1 then $$d_common$332bv32$1 else v1057$1);
    v1057$2 := (if p229$2 then $$d_common$332bv32$2 else v1057$2);
    v1058$1 := (if p229$1 then $$d_common$333bv32$1 else v1058$1);
    v1058$2 := (if p229$2 then $$d_common$333bv32$2 else v1058$2);
    v1059$1 := (if p229$1 then $$d_common$334bv32$1 else v1059$1);
    v1059$2 := (if p229$2 then $$d_common$334bv32$2 else v1059$2);
    v1060$1 := (if p229$1 then $$d_common$335bv32$1 else v1060$1);
    v1060$2 := (if p229$2 then $$d_common$335bv32$2 else v1060$2);
    v1061$1 := (if p229$1 then $ei_new.30$1 == BV32_ADD(BV32_MUL($tMask_col.0$1, v1060$1 ++ v1059$1 ++ v1058$1 ++ v1057$1), $tMask_row.0$1) else v1061$1);
    v1061$2 := (if p229$2 then $ei_new.30$2 == BV32_ADD(BV32_MUL($tMask_col.0$2, v1060$2 ++ v1059$2 ++ v1058$2 ++ v1057$2), $tMask_row.0$2) else v1061$2);
    p231$1 := (if p229$1 && v1061$1 then v1061$1 else p231$1);
    p231$2 := (if p229$2 && v1061$2 then v1061$2 else p231$2);
    p230$1 := (if p229$1 && !v1061$1 then !v1061$1 else p230$1);
    p230$2 := (if p229$2 && !v1061$2 then !v1061$2 else p230$2);
    call {:sourceloc} {:sourceloc_num 1262} _LOG_WRITE_$$d_tMask_all(p230$1, BV32_ADD(v174$1, $ei_new.30$1), 0bv32, $$d_tMask_all[BV32_ADD(v174$1, $ei_new.30$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tMask_all(p230$2, BV32_ADD(v174$2, $ei_new.30$2));
    assume {:do_not_predicate} {:check_id "check_state_33"} {:captureState "check_state_33"} {:sourceloc} {:sourceloc_num 1262} true;
    call {:check_id "check_state_33"} {:sourceloc} {:sourceloc_num 1262} _CHECK_WRITE_$$d_tMask_all(p230$2, BV32_ADD(v174$2, $ei_new.30$2), 0bv32);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tMask_all"} true;
    $$d_tMask_all[BV32_ADD(v174$1, $ei_new.30$1)] := (if p230$1 then 0bv32 else $$d_tMask_all[BV32_ADD(v174$1, $ei_new.30$1)]);
    $$d_tMask_all[BV32_ADD(v174$2, $ei_new.30$2)] := (if p230$2 then 0bv32 else $$d_tMask_all[BV32_ADD(v174$2, $ei_new.30$2)]);
    call {:sourceloc} {:sourceloc_num 1260} _LOG_WRITE_$$d_tMask_all(p231$1, BV32_ADD(v174$1, $ei_new.30$1), 1065353216bv32, $$d_tMask_all[BV32_ADD(v174$1, $ei_new.30$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tMask_all(p231$2, BV32_ADD(v174$2, $ei_new.30$2));
    assume {:do_not_predicate} {:check_id "check_state_34"} {:captureState "check_state_34"} {:sourceloc} {:sourceloc_num 1260} true;
    call {:check_id "check_state_34"} {:sourceloc} {:sourceloc_num 1260} _CHECK_WRITE_$$d_tMask_all(p231$2, BV32_ADD(v174$2, $ei_new.30$2), 1065353216bv32);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tMask_all"} true;
    $$d_tMask_all[BV32_ADD(v174$1, $ei_new.30$1)] := (if p231$1 then 1065353216bv32 else $$d_tMask_all[BV32_ADD(v174$1, $ei_new.30$1)]);
    $$d_tMask_all[BV32_ADD(v174$2, $ei_new.30$2)] := (if p231$2 then 1065353216bv32 else $$d_tMask_all[BV32_ADD(v174$2, $ei_new.30$2)]);
    $ei_new.30$1 := (if p229$1 then BV32_ADD($ei_new.30$1, 256bv32) else $ei_new.30$1);
    $ei_new.30$2 := (if p229$2 then BV32_ADD($ei_new.30$2, 256bv32) else $ei_new.30$2);
    p228$1 := (if p229$1 then true else p228$1);
    p228$2 := (if p229$2 then true else p228$2);
    goto $203.backedge, __partitioned_block_$203.tail_0;

  __partitioned_block_$203.tail_0:
    assume !p228$1 && !p228$2;
    goto __partitioned_block_$203.tail_1;

  __partitioned_block_$203.tail_1:
    call {:sourceloc_num 1265} $bugle_barrier_duplicated_35(1bv1, 1bv1);
    $ei_new.31$1 := v101$1;
    $ei_new.31$2 := v101$2;
    p232$1 := true;
    p232$2 := true;
    assume {:captureState "loop_entry_state_4_0"} true;
    goto $209;

  $209:
    assume {:captureState "loop_head_state_4"} true;
    assert {:tag "accessBreak"} _b453 ==> _WRITE_HAS_OCCURRED_$$d_mask_conv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce93), $d_common.coerce93), $d_common.coerce93), $d_common.coerce93);
    assert {:tag "accessBreak"} _b452 ==> _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce77), $d_common.coerce77), $d_common.coerce77), $d_common.coerce77);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p232$1 ==> _b255 ==> p232$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p232$2 ==> _b255 ==> p232$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b254 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$1, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) ==> p232$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b254 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$2, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) ==> p232$2;
    assert {:tag "loopBound"} {:thread 1} p232$1 ==> _b253 ==> BV32_UGE($ei_new.31$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p232$2 ==> _b253 ==> BV32_UGE($ei_new.31$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p232$1 ==> _b252 ==> BV32_ULE($ei_new.31$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p232$2 ==> _b252 ==> BV32_ULE($ei_new.31$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p232$1 ==> _b251 ==> BV32_SGE($ei_new.31$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p232$2 ==> _b251 ==> BV32_SGE($ei_new.31$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p232$1 ==> _b250 ==> BV32_SLE($ei_new.31$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p232$2 ==> _b250 ==> BV32_SLE($ei_new.31$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p232$1 ==> _b249 ==> BV32_SLE(0bv32, $ei_new.31$1);
    assert {:tag "guardNonNeg"} {:thread 2} p232$2 ==> _b249 ==> BV32_SLE(0bv32, $ei_new.31$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p232$1 ==> _b248 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.31$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p232$2 ==> _b248 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.31$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1266} p232$1 ==> true;
    v1062$1 := (if p232$1 then $$d_common$372bv32$1 else v1062$1);
    v1062$2 := (if p232$2 then $$d_common$372bv32$2 else v1062$2);
    v1063$1 := (if p232$1 then $$d_common$373bv32$1 else v1063$1);
    v1063$2 := (if p232$2 then $$d_common$373bv32$2 else v1063$2);
    v1064$1 := (if p232$1 then $$d_common$374bv32$1 else v1064$1);
    v1064$2 := (if p232$2 then $$d_common$374bv32$2 else v1064$2);
    v1065$1 := (if p232$1 then $$d_common$375bv32$1 else v1065$1);
    v1065$2 := (if p232$2 then $$d_common$375bv32$2 else v1065$2);
    v1066$1 := (if p232$1 then BV32_SLT($ei_new.31$1, v1065$1 ++ v1064$1 ++ v1063$1 ++ v1062$1) else v1066$1);
    v1066$2 := (if p232$2 then BV32_SLT($ei_new.31$2, v1065$2 ++ v1064$2 ++ v1063$2 ++ v1062$2) else v1066$2);
    p233$1 := false;
    p233$2 := false;
    p234$1 := false;
    p234$2 := false;
    p235$1 := false;
    p235$2 := false;
    p236$1 := false;
    p236$2 := false;
    p237$1 := false;
    p237$2 := false;
    p238$1 := false;
    p238$2 := false;
    p239$1 := false;
    p239$2 := false;
    p240$1 := false;
    p240$2 := false;
    p241$1 := false;
    p241$2 := false;
    p242$1 := false;
    p242$2 := false;
    p243$1 := false;
    p243$2 := false;
    p244$1 := false;
    p244$2 := false;
    p233$1 := (if p232$1 && v1066$1 then v1066$1 else p233$1);
    p233$2 := (if p232$2 && v1066$2 then v1066$2 else p233$2);
    p232$1 := (if p232$1 && !v1066$1 then v1066$1 else p232$1);
    p232$2 := (if p232$2 && !v1066$2 then v1066$2 else p232$2);
    v1067$1 := (if p233$1 then $$d_common$364bv32$1 else v1067$1);
    v1067$2 := (if p233$2 then $$d_common$364bv32$2 else v1067$2);
    v1068$1 := (if p233$1 then $$d_common$365bv32$1 else v1068$1);
    v1068$2 := (if p233$2 then $$d_common$365bv32$2 else v1068$2);
    v1069$1 := (if p233$1 then $$d_common$366bv32$1 else v1069$1);
    v1069$2 := (if p233$2 then $$d_common$366bv32$2 else v1069$2);
    v1070$1 := (if p233$1 then $$d_common$367bv32$1 else v1070$1);
    v1070$2 := (if p233$2 then $$d_common$367bv32$2 else v1070$2);
    v1071$1 := (if p233$1 then $$d_common$364bv32$1 else v1071$1);
    v1071$2 := (if p233$2 then $$d_common$364bv32$2 else v1071$2);
    v1072$1 := (if p233$1 then $$d_common$365bv32$1 else v1072$1);
    v1072$2 := (if p233$2 then $$d_common$365bv32$2 else v1072$2);
    v1073$1 := (if p233$1 then $$d_common$366bv32$1 else v1073$1);
    v1073$2 := (if p233$2 then $$d_common$366bv32$2 else v1073$2);
    v1074$1 := (if p233$1 then $$d_common$367bv32$1 else v1074$1);
    v1074$2 := (if p233$2 then $$d_common$367bv32$2 else v1074$2);
    v1075$1 := (if p233$1 then BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.31$1, 1bv32), v1074$1 ++ v1073$1 ++ v1072$1 ++ v1071$1), 1bv32) else v1075$1);
    v1075$2 := (if p233$2 then BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.31$2, 1bv32), v1074$2 ++ v1073$2 ++ v1072$2 ++ v1071$2), 1bv32) else v1075$2);
    v1076$1 := (if p233$1 then $$d_common$364bv32$1 else v1076$1);
    v1076$2 := (if p233$2 then $$d_common$364bv32$2 else v1076$2);
    v1077$1 := (if p233$1 then $$d_common$365bv32$1 else v1077$1);
    v1077$2 := (if p233$2 then $$d_common$365bv32$2 else v1077$2);
    v1078$1 := (if p233$1 then $$d_common$366bv32$1 else v1078$1);
    v1078$2 := (if p233$2 then $$d_common$366bv32$2 else v1078$2);
    v1079$1 := (if p233$1 then $$d_common$367bv32$1 else v1079$1);
    v1079$2 := (if p233$2 then $$d_common$367bv32$2 else v1079$2);
    v1080$1 := (if p233$1 then BV32_SREM(BV32_ADD($ei_new.31$1, 1bv32), v1079$1 ++ v1078$1 ++ v1077$1 ++ v1076$1) == 0bv32 else v1080$1);
    v1080$2 := (if p233$2 then BV32_SREM(BV32_ADD($ei_new.31$2, 1bv32), v1079$2 ++ v1078$2 ++ v1077$2 ++ v1076$2) == 0bv32 else v1080$2);
    p235$1 := (if p233$1 && v1080$1 then v1080$1 else p235$1);
    p235$2 := (if p233$2 && v1080$2 then v1080$2 else p235$2);
    p234$1 := (if p233$1 && !v1080$1 then !v1080$1 else p234$1);
    p234$2 := (if p233$2 && !v1080$2 then !v1080$2 else p234$2);
    $jc.1$1, $ic.1$1 := (if p234$1 then v1075$1 else $jc.1$1), (if p234$1 then BV32_SREM(BV32_ADD($ei_new.31$1, 1bv32), v1070$1 ++ v1069$1 ++ v1068$1 ++ v1067$1) else $ic.1$1);
    $jc.1$2, $ic.1$2 := (if p234$2 then v1075$2 else $jc.1$2), (if p234$2 then BV32_SREM(BV32_ADD($ei_new.31$2, 1bv32), v1070$2 ++ v1069$2 ++ v1068$2 ++ v1067$2) else $ic.1$2);
    v1081$1 := (if p235$1 then $$d_common$364bv32$1 else v1081$1);
    v1081$2 := (if p235$2 then $$d_common$364bv32$2 else v1081$2);
    v1082$1 := (if p235$1 then $$d_common$365bv32$1 else v1082$1);
    v1082$2 := (if p235$2 then $$d_common$365bv32$2 else v1082$2);
    v1083$1 := (if p235$1 then $$d_common$366bv32$1 else v1083$1);
    v1083$2 := (if p235$2 then $$d_common$366bv32$2 else v1083$2);
    v1084$1 := (if p235$1 then $$d_common$367bv32$1 else v1084$1);
    v1084$2 := (if p235$2 then $$d_common$367bv32$2 else v1084$2);
    $jc.1$1, $ic.1$1 := (if p235$1 then BV32_SUB(v1075$1, 1bv32) else $jc.1$1), (if p235$1 then v1084$1 ++ v1083$1 ++ v1082$1 ++ v1081$1 else $ic.1$1);
    $jc.1$2, $ic.1$2 := (if p235$2 then BV32_SUB(v1075$2, 1bv32) else $jc.1$2), (if p235$2 then v1084$2 ++ v1083$2 ++ v1082$2 ++ v1081$2 else $ic.1$2);
    v1085$1 := (if p233$1 then $$d_common$384bv32$1 else v1085$1);
    v1085$2 := (if p233$2 then $$d_common$384bv32$2 else v1085$2);
    v1086$1 := (if p233$1 then $$d_common$385bv32$1 else v1086$1);
    v1086$2 := (if p233$2 then $$d_common$385bv32$2 else v1086$2);
    v1087$1 := (if p233$1 then $$d_common$386bv32$1 else v1087$1);
    v1087$2 := (if p233$2 then $$d_common$386bv32$2 else v1087$2);
    v1088$1 := (if p233$1 then $$d_common$387bv32$1 else v1088$1);
    v1088$2 := (if p233$2 then $$d_common$387bv32$2 else v1088$2);
    v1089$1 := (if p233$1 then BV32_ADD($jc.1$1, v1088$1 ++ v1087$1 ++ v1086$1 ++ v1085$1) else v1089$1);
    v1089$2 := (if p233$2 then BV32_ADD($jc.1$2, v1088$2 ++ v1087$2 ++ v1086$2 ++ v1085$2) else v1089$2);
    v1090$1 := (if p233$1 then BV32_ADD(v1089$1, 1bv32) else v1090$1);
    v1090$2 := (if p233$2 then BV32_ADD(v1089$2, 1bv32) else v1090$2);
    v1091$1 := (if p233$1 then $$d_common$352bv32$1 else v1091$1);
    v1091$2 := (if p233$2 then $$d_common$352bv32$2 else v1091$2);
    v1092$1 := (if p233$1 then $$d_common$353bv32$1 else v1092$1);
    v1092$2 := (if p233$2 then $$d_common$353bv32$2 else v1092$2);
    v1093$1 := (if p233$1 then $$d_common$354bv32$1 else v1093$1);
    v1093$2 := (if p233$2 then $$d_common$354bv32$2 else v1093$2);
    v1094$1 := (if p233$1 then $$d_common$355bv32$1 else v1094$1);
    v1094$2 := (if p233$2 then $$d_common$355bv32$2 else v1094$2);
    v1095$1 := (if p233$1 then BV32_SLT(v1094$1 ++ v1093$1 ++ v1092$1 ++ v1091$1, v1090$1) else v1095$1);
    v1095$2 := (if p233$2 then BV32_SLT(v1094$2 ++ v1093$2 ++ v1092$2 ++ v1091$2, v1090$2) else v1095$2);
    p237$1 := (if p233$1 && v1095$1 then v1095$1 else p237$1);
    p237$2 := (if p233$2 && v1095$2 then v1095$2 else p237$2);
    p236$1 := (if p233$1 && !v1095$1 then !v1095$1 else p236$1);
    p236$2 := (if p233$2 && !v1095$2 then !v1095$2 else p236$2);
    $ja1.1$1 := (if p236$1 then 1bv32 else $ja1.1$1);
    $ja1.1$2 := (if p236$2 then 1bv32 else $ja1.1$2);
    v1096$1 := (if p237$1 then $$d_common$352bv32$1 else v1096$1);
    v1096$2 := (if p237$2 then $$d_common$352bv32$2 else v1096$2);
    v1097$1 := (if p237$1 then $$d_common$353bv32$1 else v1097$1);
    v1097$2 := (if p237$2 then $$d_common$353bv32$2 else v1097$2);
    v1098$1 := (if p237$1 then $$d_common$354bv32$1 else v1098$1);
    v1098$2 := (if p237$2 then $$d_common$354bv32$2 else v1098$2);
    v1099$1 := (if p237$1 then $$d_common$355bv32$1 else v1099$1);
    v1099$2 := (if p237$2 then $$d_common$355bv32$2 else v1099$2);
    $ja1.1$1 := (if p237$1 then BV32_SUB(v1090$1, v1099$1 ++ v1098$1 ++ v1097$1 ++ v1096$1) else $ja1.1$1);
    $ja1.1$2 := (if p237$2 then BV32_SUB(v1090$2, v1099$2 ++ v1098$2 ++ v1097$2 ++ v1096$2) else $ja1.1$2);
    v1100$1 := (if p233$1 then $$d_common$336bv32$1 else v1100$1);
    v1100$2 := (if p233$2 then $$d_common$336bv32$2 else v1100$2);
    v1101$1 := (if p233$1 then $$d_common$337bv32$1 else v1101$1);
    v1101$2 := (if p233$2 then $$d_common$337bv32$2 else v1101$2);
    v1102$1 := (if p233$1 then $$d_common$338bv32$1 else v1102$1);
    v1102$2 := (if p233$2 then $$d_common$338bv32$2 else v1102$2);
    v1103$1 := (if p233$1 then $$d_common$339bv32$1 else v1103$1);
    v1103$2 := (if p233$2 then $$d_common$339bv32$2 else v1103$2);
    v1104$1 := (if p233$1 then BV32_SLT(v1103$1 ++ v1102$1 ++ v1101$1 ++ v1100$1, v1089$1) else v1104$1);
    v1104$2 := (if p233$2 then BV32_SLT(v1103$2 ++ v1102$2 ++ v1101$2 ++ v1100$2, v1089$2) else v1104$2);
    p239$1 := (if p233$1 && v1104$1 then v1104$1 else p239$1);
    p239$2 := (if p233$2 && v1104$2 then v1104$2 else p239$2);
    p238$1 := (if p233$1 && !v1104$1 then !v1104$1 else p238$1);
    p238$2 := (if p233$2 && !v1104$2 then !v1104$2 else p238$2);
    $ja2.1$1 := (if p238$1 then v1089$1 else $ja2.1$1);
    $ja2.1$2 := (if p238$2 then v1089$2 else $ja2.1$2);
    v1105$1 := (if p239$1 then $$d_common$336bv32$1 else v1105$1);
    v1105$2 := (if p239$2 then $$d_common$336bv32$2 else v1105$2);
    v1106$1 := (if p239$1 then $$d_common$337bv32$1 else v1106$1);
    v1106$2 := (if p239$2 then $$d_common$337bv32$2 else v1106$2);
    v1107$1 := (if p239$1 then $$d_common$338bv32$1 else v1107$1);
    v1107$2 := (if p239$2 then $$d_common$338bv32$2 else v1107$2);
    v1108$1 := (if p239$1 then $$d_common$339bv32$1 else v1108$1);
    v1108$2 := (if p239$2 then $$d_common$339bv32$2 else v1108$2);
    $ja2.1$1 := (if p239$1 then v1108$1 ++ v1107$1 ++ v1106$1 ++ v1105$1 else $ja2.1$1);
    $ja2.1$2 := (if p239$2 then v1108$2 ++ v1107$2 ++ v1106$2 ++ v1105$2 else $ja2.1$2);
    v1109$1 := (if p233$1 then $$d_common$380bv32$1 else v1109$1);
    v1109$2 := (if p233$2 then $$d_common$380bv32$2 else v1109$2);
    v1110$1 := (if p233$1 then $$d_common$381bv32$1 else v1110$1);
    v1110$2 := (if p233$2 then $$d_common$381bv32$2 else v1110$2);
    v1111$1 := (if p233$1 then $$d_common$382bv32$1 else v1111$1);
    v1111$2 := (if p233$2 then $$d_common$382bv32$2 else v1111$2);
    v1112$1 := (if p233$1 then $$d_common$383bv32$1 else v1112$1);
    v1112$2 := (if p233$2 then $$d_common$383bv32$2 else v1112$2);
    v1113$1 := (if p233$1 then BV32_ADD($ic.1$1, v1112$1 ++ v1111$1 ++ v1110$1 ++ v1109$1) else v1113$1);
    v1113$2 := (if p233$2 then BV32_ADD($ic.1$2, v1112$2 ++ v1111$2 ++ v1110$2 ++ v1109$2) else v1113$2);
    v1114$1 := (if p233$1 then BV32_ADD(v1113$1, 1bv32) else v1114$1);
    v1114$2 := (if p233$2 then BV32_ADD(v1113$2, 1bv32) else v1114$2);
    v1115$1 := (if p233$1 then $$d_common$348bv32$1 else v1115$1);
    v1115$2 := (if p233$2 then $$d_common$348bv32$2 else v1115$2);
    v1116$1 := (if p233$1 then $$d_common$349bv32$1 else v1116$1);
    v1116$2 := (if p233$2 then $$d_common$349bv32$2 else v1116$2);
    v1117$1 := (if p233$1 then $$d_common$350bv32$1 else v1117$1);
    v1117$2 := (if p233$2 then $$d_common$350bv32$2 else v1117$2);
    v1118$1 := (if p233$1 then $$d_common$351bv32$1 else v1118$1);
    v1118$2 := (if p233$2 then $$d_common$351bv32$2 else v1118$2);
    v1119$1 := (if p233$1 then BV32_SLT(v1118$1 ++ v1117$1 ++ v1116$1 ++ v1115$1, v1114$1) else v1119$1);
    v1119$2 := (if p233$2 then BV32_SLT(v1118$2 ++ v1117$2 ++ v1116$2 ++ v1115$2, v1114$2) else v1119$2);
    p241$1 := (if p233$1 && v1119$1 then v1119$1 else p241$1);
    p241$2 := (if p233$2 && v1119$2 then v1119$2 else p241$2);
    p240$1 := (if p233$1 && !v1119$1 then !v1119$1 else p240$1);
    p240$2 := (if p233$2 && !v1119$2 then !v1119$2 else p240$2);
    $ia1.1$1 := (if p240$1 then 1bv32 else $ia1.1$1);
    $ia1.1$2 := (if p240$2 then 1bv32 else $ia1.1$2);
    v1120$1 := (if p241$1 then $$d_common$348bv32$1 else v1120$1);
    v1120$2 := (if p241$2 then $$d_common$348bv32$2 else v1120$2);
    v1121$1 := (if p241$1 then $$d_common$349bv32$1 else v1121$1);
    v1121$2 := (if p241$2 then $$d_common$349bv32$2 else v1121$2);
    v1122$1 := (if p241$1 then $$d_common$350bv32$1 else v1122$1);
    v1122$2 := (if p241$2 then $$d_common$350bv32$2 else v1122$2);
    v1123$1 := (if p241$1 then $$d_common$351bv32$1 else v1123$1);
    v1123$2 := (if p241$2 then $$d_common$351bv32$2 else v1123$2);
    $ia1.1$1 := (if p241$1 then BV32_SUB(v1114$1, v1123$1 ++ v1122$1 ++ v1121$1 ++ v1120$1) else $ia1.1$1);
    $ia1.1$2 := (if p241$2 then BV32_SUB(v1114$2, v1123$2 ++ v1122$2 ++ v1121$2 ++ v1120$2) else $ia1.1$2);
    v1124$1 := (if p233$1 then $$d_common$332bv32$1 else v1124$1);
    v1124$2 := (if p233$2 then $$d_common$332bv32$2 else v1124$2);
    v1125$1 := (if p233$1 then $$d_common$333bv32$1 else v1125$1);
    v1125$2 := (if p233$2 then $$d_common$333bv32$2 else v1125$2);
    v1126$1 := (if p233$1 then $$d_common$334bv32$1 else v1126$1);
    v1126$2 := (if p233$2 then $$d_common$334bv32$2 else v1126$2);
    v1127$1 := (if p233$1 then $$d_common$335bv32$1 else v1127$1);
    v1127$2 := (if p233$2 then $$d_common$335bv32$2 else v1127$2);
    v1128$1 := (if p233$1 then BV32_SLT(v1127$1 ++ v1126$1 ++ v1125$1 ++ v1124$1, v1113$1) else v1128$1);
    v1128$2 := (if p233$2 then BV32_SLT(v1127$2 ++ v1126$2 ++ v1125$2 ++ v1124$2, v1113$2) else v1128$2);
    p243$1 := (if p233$1 && v1128$1 then v1128$1 else p243$1);
    p243$2 := (if p233$2 && v1128$2 then v1128$2 else p243$2);
    p242$1 := (if p233$1 && !v1128$1 then !v1128$1 else p242$1);
    p242$2 := (if p233$2 && !v1128$2 then !v1128$2 else p242$2);
    $ia2.1$1 := (if p242$1 then v1113$1 else $ia2.1$1);
    $ia2.1$2 := (if p242$2 then v1113$2 else $ia2.1$2);
    v1129$1 := (if p243$1 then $$d_common$332bv32$1 else v1129$1);
    v1129$2 := (if p243$2 then $$d_common$332bv32$2 else v1129$2);
    v1130$1 := (if p243$1 then $$d_common$333bv32$1 else v1130$1);
    v1130$2 := (if p243$2 then $$d_common$333bv32$2 else v1130$2);
    v1131$1 := (if p243$1 then $$d_common$334bv32$1 else v1131$1);
    v1131$2 := (if p243$2 then $$d_common$334bv32$2 else v1131$2);
    v1132$1 := (if p243$1 then $$d_common$335bv32$1 else v1132$1);
    v1132$2 := (if p243$2 then $$d_common$335bv32$2 else v1132$2);
    $ia2.1$1 := (if p243$1 then v1132$1 ++ v1131$1 ++ v1130$1 ++ v1129$1 else $ia2.1$1);
    $ia2.1$2 := (if p243$2 then v1132$2 ++ v1131$2 ++ v1130$2 ++ v1129$2 else $ia2.1$2);
    $ja.1$1, $s.2$1 := (if p233$1 then $ja1.1$1 else $ja.1$1), (if p233$1 then 0bv32 else $s.2$1);
    $ja.1$2, $s.2$2 := (if p233$2 then $ja1.1$2 else $ja.1$2), (if p233$2 then 0bv32 else $s.2$2);
    p244$1 := (if p233$1 then true else p244$1);
    p244$2 := (if p233$2 then true else p244$2);
    assume {:captureState "loop_entry_state_5_0"} true;
    goto $225;

  $225:
    assume {:captureState "loop_head_state_5"} true;
    assert p244$1 ==> p232$1;
    assert p244$2 ==> p232$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p244$1 ==> _b295 ==> p244$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$1, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p244$2 ==> _b295 ==> p244$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$2, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b294 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$1, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) && BV32_SLE($ja.1$1, $ja2.1$1) ==> p244$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b294 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$2, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) && BV32_SLE($ja.1$2, $ja2.1$2) ==> p244$2;
    assert {:tag "loopBound"} {:thread 1} p244$1 ==> _b293 ==> BV32_UGE($ja.1$1, $ja1.1$1);
    assert {:tag "loopBound"} {:thread 2} p244$2 ==> _b293 ==> BV32_UGE($ja.1$2, $ja1.1$2);
    assert {:tag "loopBound"} {:thread 1} p244$1 ==> _b292 ==> BV32_ULE($ja.1$1, $ja1.1$1);
    assert {:tag "loopBound"} {:thread 2} p244$2 ==> _b292 ==> BV32_ULE($ja.1$2, $ja1.1$2);
    assert {:tag "loopBound"} {:thread 1} p244$1 ==> _b291 ==> BV32_SGE($ja.1$1, $ja1.1$1);
    assert {:tag "loopBound"} {:thread 2} p244$2 ==> _b291 ==> BV32_SGE($ja.1$2, $ja1.1$2);
    assert {:tag "loopBound"} {:thread 1} p244$1 ==> _b290 ==> BV32_SLE($ja.1$1, $ja1.1$1);
    assert {:tag "loopBound"} {:thread 2} p244$2 ==> _b290 ==> BV32_SLE($ja.1$2, $ja1.1$2);
    assert {:tag "guardNonNeg"} {:thread 1} p244$1 ==> _b289 ==> BV32_SLE(0bv32, $ja.1$1);
    assert {:tag "guardNonNeg"} {:thread 2} p244$2 ==> _b289 ==> BV32_SLE(0bv32, $ja.1$2);
    assert {:block_sourceloc} {:sourceloc_num 1342} p244$1 ==> true;
    v1133$1 := (if p244$1 then BV32_SLE($ja.1$1, $ja2.1$1) else v1133$1);
    v1133$2 := (if p244$2 then BV32_SLE($ja.1$2, $ja2.1$2) else v1133$2);
    p245$1 := false;
    p245$2 := false;
    p246$1 := false;
    p246$2 := false;
    p245$1 := (if p244$1 && v1133$1 then v1133$1 else p245$1);
    p245$2 := (if p244$2 && v1133$2 then v1133$2 else p245$2);
    p244$1 := (if p244$1 && !v1133$1 then v1133$1 else p244$1);
    p244$2 := (if p244$2 && !v1133$2 then v1133$2 else p244$2);
    $ia.1$1, $s.3$1 := (if p245$1 then $ia1.1$1 else $ia.1$1), (if p245$1 then $s.2$1 else $s.3$1);
    $ia.1$2, $s.3$2 := (if p245$2 then $ia1.1$2 else $ia.1$2), (if p245$2 then $s.2$2 else $s.3$2);
    p246$1 := (if p245$1 then true else p246$1);
    p246$2 := (if p245$2 then true else p246$2);
    assume {:captureState "loop_entry_state_6_0"} true;
    goto $227;

  $227:
    assume {:captureState "loop_head_state_6"} true;
    assert p246$1 ==> p244$1;
    assert p246$2 ==> p244$2;
    assert p244$1 ==> p232$1;
    assert p244$2 ==> p232$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p246$1 ==> _b302 ==> p246$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$1, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) && BV32_SLE($ja.1$1, $ja2.1$1);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p246$2 ==> _b302 ==> p246$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$2, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) && BV32_SLE($ja.1$2, $ja2.1$2);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b301 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$1, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) && BV32_SLE($ja.1$1, $ja2.1$1) && BV32_SLE($ia.1$1, $ia2.1$1) ==> p246$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b301 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.31$2, $d_common.coerce93[32:24] ++ $d_common.coerce93[24:16] ++ $d_common.coerce93[16:8] ++ $d_common.coerce93[8:0]) && BV32_SLE($ja.1$2, $ja2.1$2) && BV32_SLE($ia.1$2, $ia2.1$2) ==> p246$2;
    assert {:tag "loopBound"} {:thread 1} p246$1 ==> _b300 ==> BV32_UGE($ia.1$1, $ia1.1$1);
    assert {:tag "loopBound"} {:thread 2} p246$2 ==> _b300 ==> BV32_UGE($ia.1$2, $ia1.1$2);
    assert {:tag "loopBound"} {:thread 1} p246$1 ==> _b299 ==> BV32_ULE($ia.1$1, $ia1.1$1);
    assert {:tag "loopBound"} {:thread 2} p246$2 ==> _b299 ==> BV32_ULE($ia.1$2, $ia1.1$2);
    assert {:tag "loopBound"} {:thread 1} p246$1 ==> _b298 ==> BV32_SGE($ia.1$1, $ia1.1$1);
    assert {:tag "loopBound"} {:thread 2} p246$2 ==> _b298 ==> BV32_SGE($ia.1$2, $ia1.1$2);
    assert {:tag "loopBound"} {:thread 1} p246$1 ==> _b297 ==> BV32_SLE($ia.1$1, $ia1.1$1);
    assert {:tag "loopBound"} {:thread 2} p246$2 ==> _b297 ==> BV32_SLE($ia.1$2, $ia1.1$2);
    assert {:tag "guardNonNeg"} {:thread 1} p246$1 ==> _b296 ==> BV32_SLE(0bv32, $ia.1$1);
    assert {:tag "guardNonNeg"} {:thread 2} p246$2 ==> _b296 ==> BV32_SLE(0bv32, $ia.1$2);
    assert {:block_sourceloc} {:sourceloc_num 1344} p246$1 ==> true;
    v1134$1 := (if p246$1 then BV32_SLE($ia.1$1, $ia2.1$1) else v1134$1);
    v1134$2 := (if p246$2 then BV32_SLE($ia.1$2, $ia2.1$2) else v1134$2);
    p247$1 := false;
    p247$2 := false;
    p247$1 := (if p246$1 && v1134$1 then v1134$1 else p247$1);
    p247$2 := (if p246$2 && v1134$2 then v1134$2 else p247$2);
    p246$1 := (if p246$1 && !v1134$1 then v1134$1 else p246$1);
    p246$2 := (if p246$2 && !v1134$2 then v1134$2 else p246$2);
    v1135$1 := (if p247$1 then $$d_common$332bv32$1 else v1135$1);
    v1135$2 := (if p247$2 then $$d_common$332bv32$2 else v1135$2);
    v1136$1 := (if p247$1 then $$d_common$333bv32$1 else v1136$1);
    v1136$2 := (if p247$2 then $$d_common$333bv32$2 else v1136$2);
    v1137$1 := (if p247$1 then $$d_common$334bv32$1 else v1137$1);
    v1137$2 := (if p247$2 then $$d_common$334bv32$2 else v1137$2);
    v1138$1 := (if p247$1 then $$d_common$335bv32$1 else v1138$1);
    v1138$2 := (if p247$2 then $$d_common$335bv32$2 else v1138$2);
    call {:sourceloc} {:sourceloc_num 1350} _LOG_READ_$$d_tMask_all(p247$1, BV32_ADD(v174$1, BV32_SUB(BV32_ADD(BV32_MUL(v1138$1 ++ v1137$1 ++ v1136$1 ++ v1135$1, BV32_SUB($ja.1$1, 1bv32)), $ia.1$1), 1bv32)), $$d_tMask_all[BV32_ADD(v174$1, BV32_SUB(BV32_ADD(BV32_MUL(v1138$1 ++ v1137$1 ++ v1136$1 ++ v1135$1, BV32_SUB($ja.1$1, 1bv32)), $ia.1$1), 1bv32))]);
    assume {:do_not_predicate} {:check_id "check_state_32"} {:captureState "check_state_32"} {:sourceloc} {:sourceloc_num 1350} true;
    call {:check_id "check_state_32"} {:sourceloc} {:sourceloc_num 1350} _CHECK_READ_$$d_tMask_all(p247$2, BV32_ADD(v174$2, BV32_SUB(BV32_ADD(BV32_MUL(v1138$2 ++ v1137$2 ++ v1136$2 ++ v1135$2, BV32_SUB($ja.1$2, 1bv32)), $ia.1$2), 1bv32)), $$d_tMask_all[BV32_ADD(v174$2, BV32_SUB(BV32_ADD(BV32_MUL(v1138$2 ++ v1137$2 ++ v1136$2 ++ v1135$2, BV32_SUB($ja.1$2, 1bv32)), $ia.1$2), 1bv32))]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_tMask_all"} true;
    v1139$1 := (if p247$1 then $$d_tMask_all[BV32_ADD(v174$1, BV32_SUB(BV32_ADD(BV32_MUL(v1138$1 ++ v1137$1 ++ v1136$1 ++ v1135$1, BV32_SUB($ja.1$1, 1bv32)), $ia.1$1), 1bv32))] else v1139$1);
    v1139$2 := (if p247$2 then $$d_tMask_all[BV32_ADD(v174$2, BV32_SUB(BV32_ADD(BV32_MUL(v1138$2 ++ v1137$2 ++ v1136$2 ++ v1135$2, BV32_SUB($ja.1$2, 1bv32)), $ia.1$2), 1bv32))] else v1139$2);
    $ia.1$1, $s.3$1 := (if p247$1 then BV32_ADD($ia.1$1, 1bv32) else $ia.1$1), (if p247$1 then FADD32(FMUL32(v1139$1, 1065353216bv32), $s.3$1) else $s.3$1);
    $ia.1$2, $s.3$2 := (if p247$2 then BV32_ADD($ia.1$2, 1bv32) else $ia.1$2), (if p247$2 then FADD32(FMUL32(v1139$2, 1065353216bv32), $s.3$2) else $s.3$2);
    p246$1 := (if p247$1 then true else p246$1);
    p246$2 := (if p247$2 then true else p246$2);
    goto $227.backedge, $227.tail;

  $227.tail:
    assume !p246$1 && !p246$2;
    $ja.1$1, $s.2$1 := (if p245$1 then BV32_ADD($ja.1$1, 1bv32) else $ja.1$1), (if p245$1 then $s.3$1 else $s.2$1);
    $ja.1$2, $s.2$2 := (if p245$2 then BV32_ADD($ja.1$2, 1bv32) else $ja.1$2), (if p245$2 then $s.3$2 else $s.2$2);
    p244$1 := (if p245$1 then true else p244$1);
    p244$2 := (if p245$2 then true else p244$2);
    goto $225.backedge, $225.tail;

  $225.tail:
    assume !p244$1 && !p244$2;
    call {:sourceloc} {:sourceloc_num 1355} _LOG_READ_$$d_in2_sqr_sub2_all(p233$1, BV32_ADD(v164$1, $ei_new.31$1), $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.31$1)]);
    assume {:do_not_predicate} {:check_id "check_state_30"} {:captureState "check_state_30"} {:sourceloc} {:sourceloc_num 1355} true;
    call {:check_id "check_state_30"} {:sourceloc} {:sourceloc_num 1355} _CHECK_READ_$$d_in2_sqr_sub2_all(p233$2, BV32_ADD(v164$2, $ei_new.31$2), $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.31$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_in2_sqr_sub2_all"} true;
    v1140$1 := (if p233$1 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$1, $ei_new.31$1)] else v1140$1);
    v1140$2 := (if p233$2 then $$d_in2_sqr_sub2_all[BV32_ADD(v164$2, $ei_new.31$2)] else v1140$2);
    call {:sourceloc} {:sourceloc_num 1356} _LOG_WRITE_$$d_mask_conv_all(p233$1, BV32_ADD(v179$1, $ei_new.31$1), FMUL32(v1140$1, $s.2$1), $$d_mask_conv_all[BV32_ADD(v179$1, $ei_new.31$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all(p233$2, BV32_ADD(v179$2, $ei_new.31$2));
    assume {:do_not_predicate} {:check_id "check_state_31"} {:captureState "check_state_31"} {:sourceloc} {:sourceloc_num 1356} true;
    call {:check_id "check_state_31"} {:sourceloc} {:sourceloc_num 1356} _CHECK_WRITE_$$d_mask_conv_all(p233$2, BV32_ADD(v179$2, $ei_new.31$2), FMUL32(v1140$2, $s.2$2));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_mask_conv_all"} true;
    $$d_mask_conv_all[BV32_ADD(v179$1, $ei_new.31$1)] := (if p233$1 then FMUL32(v1140$1, $s.2$1) else $$d_mask_conv_all[BV32_ADD(v179$1, $ei_new.31$1)]);
    $$d_mask_conv_all[BV32_ADD(v179$2, $ei_new.31$2)] := (if p233$2 then FMUL32(v1140$2, $s.2$2) else $$d_mask_conv_all[BV32_ADD(v179$2, $ei_new.31$2)]);
    $ei_new.31$1 := (if p233$1 then BV32_ADD($ei_new.31$1, 256bv32) else $ei_new.31$1);
    $ei_new.31$2 := (if p233$2 then BV32_ADD($ei_new.31$2, 256bv32) else $ei_new.31$2);
    p232$1 := (if p233$1 then true else p232$1);
    p232$2 := (if p233$2 then true else p232$2);
    goto $209.backedge, __partitioned_block_$209.tail_0;

  __partitioned_block_$209.tail_0:
    assume !p232$1 && !p232$2;
    goto __partitioned_block_$209.tail_1;

  __partitioned_block_$209.tail_1:
    call {:sourceloc_num 1358} $bugle_barrier_duplicated_36(1bv1, 1bv1);
    $largest_value.0$1, $largest_coordinate.0$1, $ei_new.32$1 := 0bv32, 0bv32, v101$1;
    $largest_value.0$2, $largest_coordinate.0$2, $ei_new.32$2 := 0bv32, 0bv32, v101$2;
    p248$1 := true;
    p248$2 := true;
    assume {:captureState "loop_entry_state_2_0"} true;
    goto $234;

  $234:
    assume {:captureState "loop_head_state_2"} true;
    assert {:tag "accessBreak"} _b456 ==> _WRITE_HAS_OCCURRED_$$par_max_coo_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce91), $d_common.coerce91), $d_common.coerce91), $d_common.coerce91);
    assert {:tag "accessBreak"} _b455 ==> _WRITE_HAS_OCCURRED_$$par_max_val_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce91), $d_common.coerce91), $d_common.coerce91), $d_common.coerce91);
    assert {:tag "accessBreak"} _b454 ==> _READ_HAS_OCCURRED_$$d_mask_conv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce93), $d_common.coerce93), $d_common.coerce93), $d_common.coerce93);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p248$1 ==> _b263 ==> p248$1 ==> $d_frame_no != 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p248$2 ==> _b263 ==> p248$2 ==> $d_frame_no != 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b262 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.32$1, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]) ==> p248$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b262 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.32$2, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]) ==> p248$2;
    assert {:tag "loopBound"} {:thread 1} p248$1 ==> _b261 ==> BV32_UGE($ei_new.32$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p248$2 ==> _b261 ==> BV32_UGE($ei_new.32$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p248$1 ==> _b260 ==> BV32_ULE($ei_new.32$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p248$2 ==> _b260 ==> BV32_ULE($ei_new.32$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p248$1 ==> _b259 ==> BV32_SGE($ei_new.32$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p248$2 ==> _b259 ==> BV32_SGE($ei_new.32$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p248$1 ==> _b258 ==> BV32_SLE($ei_new.32$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p248$2 ==> _b258 ==> BV32_SLE($ei_new.32$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p248$1 ==> _b257 ==> BV32_SLE(0bv32, $ei_new.32$1);
    assert {:tag "guardNonNeg"} {:thread 2} p248$2 ==> _b257 ==> BV32_SLE(0bv32, $ei_new.32$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p248$1 ==> _b256 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.32$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p248$2 ==> _b256 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.32$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 1359} p248$1 ==> true;
    v1141$1 := (if p248$1 then $$d_common$364bv32$1 else v1141$1);
    v1141$2 := (if p248$2 then $$d_common$364bv32$2 else v1141$2);
    v1142$1 := (if p248$1 then $$d_common$365bv32$1 else v1142$1);
    v1142$2 := (if p248$2 then $$d_common$365bv32$2 else v1142$2);
    v1143$1 := (if p248$1 then $$d_common$366bv32$1 else v1143$1);
    v1143$2 := (if p248$2 then $$d_common$366bv32$2 else v1143$2);
    v1144$1 := (if p248$1 then $$d_common$367bv32$1 else v1144$1);
    v1144$2 := (if p248$2 then $$d_common$367bv32$2 else v1144$2);
    v1145$1 := (if p248$1 then BV32_SLT($ei_new.32$1, v1144$1 ++ v1143$1 ++ v1142$1 ++ v1141$1) else v1145$1);
    v1145$2 := (if p248$2 then BV32_SLT($ei_new.32$2, v1144$2 ++ v1143$2 ++ v1142$2 ++ v1141$2) else v1145$2);
    p249$1 := false;
    p249$2 := false;
    p250$1 := false;
    p250$2 := false;
    p254$1 := false;
    p254$2 := false;
    p277$1 := false;
    p277$2 := false;
    p249$1 := (if p248$1 && v1145$1 then v1145$1 else p249$1);
    p249$2 := (if p248$2 && v1145$2 then v1145$2 else p249$2);
    p248$1 := (if p248$1 && !v1145$1 then v1145$1 else p248$1);
    p248$2 := (if p248$2 && !v1145$2 then v1145$2 else p248$2);
    $i.4$1, $largest_value.1$1, $largest_coordinate.1$1 := (if p249$1 then 0bv32 else $i.4$1), (if p249$1 then $largest_value.0$1 else $largest_value.1$1), (if p249$1 then $largest_coordinate.0$1 else $largest_coordinate.1$1);
    $i.4$2, $largest_value.1$2, $largest_coordinate.1$2 := (if p249$2 then 0bv32 else $i.4$2), (if p249$2 then $largest_value.0$2 else $largest_value.1$2), (if p249$2 then $largest_coordinate.0$2 else $largest_coordinate.1$2);
    p250$1 := (if p249$1 then true else p250$1);
    p250$2 := (if p249$2 then true else p250$2);
    assume {:captureState "loop_entry_state_3_0"} true;
    goto $236;

  $236:
    assume {:captureState "loop_head_state_3"} true;
    assert {:tag "accessBreak"} _b457 ==> _READ_HAS_OCCURRED_$$d_mask_conv_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce93), $d_common.coerce93), $d_common.coerce93), $d_common.coerce93);
    assert p250$1 ==> p248$1;
    assert p250$2 ==> p248$2;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p250$1 ==> _b288 ==> p250$1 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.32$1, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p250$2 ==> _b288 ==> p250$2 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.32$2, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]);
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b287 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.32$1, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]) && BV32_SLT($i.4$1, $d_common.coerce92[32:24] ++ $d_common.coerce92[24:16] ++ $d_common.coerce92[16:8] ++ $d_common.coerce92[8:0]) ==> p250$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b287 ==> $d_frame_no != 0bv32 && BV32_SLT($ei_new.32$2, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]) && BV32_SLT($i.4$2, $d_common.coerce92[32:24] ++ $d_common.coerce92[24:16] ++ $d_common.coerce92[16:8] ++ $d_common.coerce92[8:0]) ==> p250$2;
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b286 ==> BV32_UGE($largest_value.1$1, $largest_value.0$1);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b286 ==> BV32_UGE($largest_value.1$2, $largest_value.0$2);
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b285 ==> BV32_ULE($largest_value.1$1, $largest_value.0$1);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b285 ==> BV32_ULE($largest_value.1$2, $largest_value.0$2);
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b284 ==> BV32_SGE($largest_value.1$1, $largest_value.0$1);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b284 ==> BV32_SGE($largest_value.1$2, $largest_value.0$2);
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b283 ==> BV32_SLE($largest_value.1$1, $largest_value.0$1);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b283 ==> BV32_SLE($largest_value.1$2, $largest_value.0$2);
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b282 ==> BV32_UGE($i.4$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b282 ==> BV32_UGE($i.4$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b281 ==> BV32_ULE($i.4$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b281 ==> BV32_ULE($i.4$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b280 ==> BV32_SGE($i.4$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b280 ==> BV32_SGE($i.4$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p250$1 ==> _b279 ==> BV32_SLE($i.4$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p250$2 ==> _b279 ==> BV32_SLE($i.4$2, 0bv32);
    assert {:tag "guardNonNeg"} {:thread 1} p250$1 ==> _b278 ==> BV32_SLE(0bv32, $i.4$1);
    assert {:tag "guardNonNeg"} {:thread 2} p250$2 ==> _b278 ==> BV32_SLE(0bv32, $i.4$2);
    assert {:block_sourceloc} {:sourceloc_num 1365} p250$1 ==> true;
    v1146$1 := (if p250$1 then $$d_common$368bv32$1 else v1146$1);
    v1146$2 := (if p250$2 then $$d_common$368bv32$2 else v1146$2);
    v1147$1 := (if p250$1 then $$d_common$369bv32$1 else v1147$1);
    v1147$2 := (if p250$2 then $$d_common$369bv32$2 else v1147$2);
    v1148$1 := (if p250$1 then $$d_common$370bv32$1 else v1148$1);
    v1148$2 := (if p250$2 then $$d_common$370bv32$2 else v1148$2);
    v1149$1 := (if p250$1 then $$d_common$371bv32$1 else v1149$1);
    v1149$2 := (if p250$2 then $$d_common$371bv32$2 else v1149$2);
    v1150$1 := (if p250$1 then BV32_SLT($i.4$1, v1149$1 ++ v1148$1 ++ v1147$1 ++ v1146$1) else v1150$1);
    v1150$2 := (if p250$2 then BV32_SLT($i.4$2, v1149$2 ++ v1148$2 ++ v1147$2 ++ v1146$2) else v1150$2);
    p251$1 := false;
    p251$2 := false;
    p252$1 := false;
    p252$2 := false;
    p253$1 := false;
    p253$2 := false;
    p251$1 := (if p250$1 && v1150$1 then v1150$1 else p251$1);
    p251$2 := (if p250$2 && v1150$2 then v1150$2 else p251$2);
    p250$1 := (if p250$1 && !v1150$1 then v1150$1 else p250$1);
    p250$2 := (if p250$2 && !v1150$2 then v1150$2 else p250$2);
    v1151$1 := (if p251$1 then $$d_common$364bv32$1 else v1151$1);
    v1151$2 := (if p251$2 then $$d_common$364bv32$2 else v1151$2);
    v1152$1 := (if p251$1 then $$d_common$365bv32$1 else v1152$1);
    v1152$2 := (if p251$2 then $$d_common$365bv32$2 else v1152$2);
    v1153$1 := (if p251$1 then $$d_common$366bv32$1 else v1153$1);
    v1153$2 := (if p251$2 then $$d_common$366bv32$2 else v1153$2);
    v1154$1 := (if p251$1 then $$d_common$367bv32$1 else v1154$1);
    v1154$2 := (if p251$2 then $$d_common$367bv32$2 else v1154$2);
    v1155$1 := (if p251$1 then BV32_ADD(BV32_MUL($ei_new.32$1, v1154$1 ++ v1153$1 ++ v1152$1 ++ v1151$1), $i.4$1) else v1155$1);
    v1155$2 := (if p251$2 then BV32_ADD(BV32_MUL($ei_new.32$2, v1154$2 ++ v1153$2 ++ v1152$2 ++ v1151$2), $i.4$2) else v1155$2);
    call {:sourceloc} {:sourceloc_num 1375} _LOG_READ_$$d_mask_conv_all(p251$1, BV32_ADD(v179$1, v1155$1), $$d_mask_conv_all[BV32_ADD(v179$1, v1155$1)]);
    assume {:do_not_predicate} {:check_id "check_state_29"} {:captureState "check_state_29"} {:sourceloc} {:sourceloc_num 1375} true;
    call {:check_id "check_state_29"} {:sourceloc} {:sourceloc_num 1375} _CHECK_READ_$$d_mask_conv_all(p251$2, BV32_ADD(v179$2, v1155$2), $$d_mask_conv_all[BV32_ADD(v179$2, v1155$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_mask_conv_all"} true;
    v1156$1 := (if p251$1 then $$d_mask_conv_all[BV32_ADD(v179$1, v1155$1)] else v1156$1);
    v1156$2 := (if p251$2 then $$d_mask_conv_all[BV32_ADD(v179$2, v1155$2)] else v1156$2);
    v1157$1 := (if p251$1 then FABS32(v1156$1) else v1157$1);
    v1157$2 := (if p251$2 then FABS32(v1156$2) else v1157$2);
    v1158$1 := (if p251$1 then FLT32($largest_value.1$1, v1157$1) else v1158$1);
    v1158$2 := (if p251$2 then FLT32($largest_value.1$2, v1157$2) else v1158$2);
    p253$1 := (if p251$1 && v1158$1 then v1158$1 else p253$1);
    p253$2 := (if p251$2 && v1158$2 then v1158$2 else p253$2);
    p252$1 := (if p251$1 && !v1158$1 then !v1158$1 else p252$1);
    p252$2 := (if p251$2 && !v1158$2 then !v1158$2 else p252$2);
    $largest_value.2$1, $largest_coordinate.2$1 := (if p252$1 then $largest_value.1$1 else $largest_value.2$1), (if p252$1 then $largest_coordinate.1$1 else $largest_coordinate.2$1);
    $largest_value.2$2, $largest_coordinate.2$2 := (if p252$2 then $largest_value.1$2 else $largest_value.2$2), (if p252$2 then $largest_coordinate.1$2 else $largest_coordinate.2$2);
    $largest_value.2$1, $largest_coordinate.2$1 := (if p253$1 then v1157$1 else $largest_value.2$1), (if p253$1 then v1155$1 else $largest_coordinate.2$1);
    $largest_value.2$2, $largest_coordinate.2$2 := (if p253$2 then v1157$2 else $largest_value.2$2), (if p253$2 then v1155$2 else $largest_coordinate.2$2);
    $i.4$1, $largest_value.1$1, $largest_coordinate.1$1 := (if p251$1 then BV32_ADD($i.4$1, 1bv32) else $i.4$1), (if p251$1 then $largest_value.2$1 else $largest_value.1$1), (if p251$1 then $largest_coordinate.2$1 else $largest_coordinate.1$1);
    $i.4$2, $largest_value.1$2, $largest_coordinate.1$2 := (if p251$2 then BV32_ADD($i.4$2, 1bv32) else $i.4$2), (if p251$2 then $largest_value.2$2 else $largest_value.1$2), (if p251$2 then $largest_coordinate.2$2 else $largest_coordinate.1$2);
    p250$1 := (if p251$1 then true else p250$1);
    p250$2 := (if p251$2 then true else p250$2);
    goto $236.backedge, $236.tail;

  $236.tail:
    assume !p250$1 && !p250$2;
    call {:sourceloc} {:sourceloc_num 1380} _LOG_WRITE_$$par_max_coo_all(p249$1, BV32_ADD(v204$1, $ei_new.32$1), $largest_coordinate.1$1, $$par_max_coo_all[BV32_ADD(v204$1, $ei_new.32$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$par_max_coo_all(p249$2, BV32_ADD(v204$2, $ei_new.32$2));
    assume {:do_not_predicate} {:check_id "check_state_27"} {:captureState "check_state_27"} {:sourceloc} {:sourceloc_num 1380} true;
    call {:check_id "check_state_27"} {:sourceloc} {:sourceloc_num 1380} _CHECK_WRITE_$$par_max_coo_all(p249$2, BV32_ADD(v204$2, $ei_new.32$2), $largest_coordinate.1$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$par_max_coo_all"} true;
    $$par_max_coo_all[BV32_ADD(v204$1, $ei_new.32$1)] := (if p249$1 then $largest_coordinate.1$1 else $$par_max_coo_all[BV32_ADD(v204$1, $ei_new.32$1)]);
    $$par_max_coo_all[BV32_ADD(v204$2, $ei_new.32$2)] := (if p249$2 then $largest_coordinate.1$2 else $$par_max_coo_all[BV32_ADD(v204$2, $ei_new.32$2)]);
    call {:sourceloc} {:sourceloc_num 1381} _LOG_WRITE_$$par_max_val_all(p249$1, BV32_ADD(v199$1, $ei_new.32$1), $largest_value.1$1, $$par_max_val_all[BV32_ADD(v199$1, $ei_new.32$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$par_max_val_all(p249$2, BV32_ADD(v199$2, $ei_new.32$2));
    assume {:do_not_predicate} {:check_id "check_state_28"} {:captureState "check_state_28"} {:sourceloc} {:sourceloc_num 1381} true;
    call {:check_id "check_state_28"} {:sourceloc} {:sourceloc_num 1381} _CHECK_WRITE_$$par_max_val_all(p249$2, BV32_ADD(v199$2, $ei_new.32$2), $largest_value.1$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$par_max_val_all"} true;
    $$par_max_val_all[BV32_ADD(v199$1, $ei_new.32$1)] := (if p249$1 then $largest_value.1$1 else $$par_max_val_all[BV32_ADD(v199$1, $ei_new.32$1)]);
    $$par_max_val_all[BV32_ADD(v199$2, $ei_new.32$2)] := (if p249$2 then $largest_value.1$2 else $$par_max_val_all[BV32_ADD(v199$2, $ei_new.32$2)]);
    $largest_value.0$1, $largest_coordinate.0$1, $ei_new.32$1 := (if p249$1 then $largest_value.1$1 else $largest_value.0$1), (if p249$1 then $largest_coordinate.1$1 else $largest_coordinate.0$1), (if p249$1 then BV32_ADD($ei_new.32$1, 256bv32) else $ei_new.32$1);
    $largest_value.0$2, $largest_coordinate.0$2, $ei_new.32$2 := (if p249$2 then $largest_value.1$2 else $largest_value.0$2), (if p249$2 then $largest_coordinate.1$2 else $largest_coordinate.0$2), (if p249$2 then BV32_ADD($ei_new.32$2, 256bv32) else $ei_new.32$2);
    p248$1 := (if p249$1 then true else p248$1);
    p248$2 := (if p249$2 then true else p248$2);
    goto $234.backedge, __partitioned_block_$234.tail_0;

  __partitioned_block_$234.tail_0:
    assume !p248$1 && !p248$2;
    goto __partitioned_block_$234.tail_1;

  __partitioned_block_$234.tail_1:
    call {:sourceloc_num 1383} $bugle_barrier_duplicated_37(1bv1, 1bv1);
    v1159$1 := v101$1 == 0bv32;
    v1159$2 := v101$2 == 0bv32;
    p254$1 := (if v1159$1 then v1159$1 else p254$1);
    p254$2 := (if v1159$2 then v1159$2 else p254$2);
    $i.5$1, $fin_max_val.0$1, $fin_max_coo.0$1 := (if p254$1 then 0bv32 else $i.5$1), (if p254$1 then 0bv32 else $fin_max_val.0$1), (if p254$1 then 0bv32 else $fin_max_coo.0$1);
    $i.5$2, $fin_max_val.0$2, $fin_max_coo.0$2 := (if p254$2 then 0bv32 else $i.5$2), (if p254$2 then 0bv32 else $fin_max_val.0$2), (if p254$2 then 0bv32 else $fin_max_coo.0$2);
    p255$1 := (if p254$1 then true else p255$1);
    p255$2 := (if p254$2 then true else p255$2);
    assume {:captureState "loop_entry_state_1_0"} true;
    goto $244;

  $244:
    assume {:captureState "loop_head_state_1"} true;
    assert {:tag "accessBreak"} _b458 ==> _READ_HAS_OCCURRED_$$par_max_coo_all ==> group_id_x$1 == BV32_DIV(BV32_DIV(BV32_DIV(BV32_DIV(_WATCHED_OFFSET, $d_common.coerce91), $d_common.coerce91), $d_common.coerce91), $d_common.coerce91);
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p255$1 ==> _b277 ==> p255$1 ==> $d_frame_no != 0bv32 && local_id_x$1 == 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p255$2 ==> _b277 ==> p255$2 ==> $d_frame_no != 0bv32 && local_id_x$2 == 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b276 ==> $d_frame_no != 0bv32 && local_id_x$1 == 0bv32 && BV32_SLT($i.5$1, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]) ==> p255$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b276 ==> $d_frame_no != 0bv32 && local_id_x$2 == 0bv32 && BV32_SLT($i.5$2, $d_common.coerce91[32:24] ++ $d_common.coerce91[24:16] ++ $d_common.coerce91[16:8] ++ $d_common.coerce91[8:0]) ==> p255$2;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b275 ==> v101$1 != 0bv32 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b274 ==> v101$1 != 0bv32 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 1} _b273 ==> v101$1 != 0bv32 ==> !p255$1;
    assert {:do_not_predicate} {:tag "conditionalLoopExecution"} {:thread 2} _b273 ==> v101$2 != 0bv32 ==> !p255$2;
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b272 ==> BV32_UGE($fin_max_val.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b272 ==> BV32_UGE($fin_max_val.0$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b271 ==> BV32_ULE($fin_max_val.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b271 ==> BV32_ULE($fin_max_val.0$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b270 ==> BV32_SGE($fin_max_val.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b270 ==> BV32_SGE($fin_max_val.0$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b269 ==> BV32_SLE($fin_max_val.0$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b269 ==> BV32_SLE($fin_max_val.0$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b268 ==> BV32_UGE($i.5$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b268 ==> BV32_UGE($i.5$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b267 ==> BV32_ULE($i.5$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b267 ==> BV32_ULE($i.5$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b266 ==> BV32_SGE($i.5$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b266 ==> BV32_SGE($i.5$2, 0bv32);
    assert {:tag "loopBound"} {:thread 1} p255$1 ==> _b265 ==> BV32_SLE($i.5$1, 0bv32);
    assert {:tag "loopBound"} {:thread 2} p255$2 ==> _b265 ==> BV32_SLE($i.5$2, 0bv32);
    assert {:tag "guardNonNeg"} {:thread 1} p255$1 ==> _b264 ==> BV32_SLE(0bv32, $i.5$1);
    assert {:tag "guardNonNeg"} {:thread 2} p255$2 ==> _b264 ==> BV32_SLE(0bv32, $i.5$2);
    assert {:block_sourceloc} {:sourceloc_num 1385} p255$1 ==> true;
    v1160$1 := (if p255$1 then $$d_common$364bv32$1 else v1160$1);
    v1160$2 := (if p255$2 then $$d_common$364bv32$2 else v1160$2);
    v1161$1 := (if p255$1 then $$d_common$365bv32$1 else v1161$1);
    v1161$2 := (if p255$2 then $$d_common$365bv32$2 else v1161$2);
    v1162$1 := (if p255$1 then $$d_common$366bv32$1 else v1162$1);
    v1162$2 := (if p255$2 then $$d_common$366bv32$2 else v1162$2);
    v1163$1 := (if p255$1 then $$d_common$367bv32$1 else v1163$1);
    v1163$2 := (if p255$2 then $$d_common$367bv32$2 else v1163$2);
    v1164$1 := (if p255$1 then BV32_SLT($i.5$1, v1163$1 ++ v1162$1 ++ v1161$1 ++ v1160$1) else v1164$1);
    v1164$2 := (if p255$2 then BV32_SLT($i.5$2, v1163$2 ++ v1162$2 ++ v1161$2 ++ v1160$2) else v1164$2);
    p256$1 := false;
    p256$2 := false;
    p257$1 := false;
    p257$2 := false;
    p258$1 := false;
    p258$2 := false;
    p259$1 := false;
    p259$2 := false;
    p260$1 := false;
    p260$2 := false;
    p261$1 := false;
    p261$2 := false;
    p262$1 := false;
    p262$2 := false;
    p263$1 := false;
    p263$2 := false;
    p264$1 := false;
    p264$2 := false;
    p265$1 := false;
    p265$2 := false;
    p266$1 := false;
    p266$2 := false;
    p267$1 := false;
    p267$2 := false;
    p268$1 := false;
    p268$2 := false;
    p269$1 := false;
    p269$2 := false;
    p270$1 := false;
    p270$2 := false;
    p271$1 := false;
    p271$2 := false;
    p272$1 := false;
    p272$2 := false;
    p273$1 := false;
    p273$2 := false;
    p274$1 := false;
    p274$2 := false;
    p275$1 := false;
    p275$2 := false;
    p276$1 := false;
    p276$2 := false;
    p256$1 := (if p255$1 && v1164$1 then v1164$1 else p256$1);
    p256$2 := (if p255$2 && v1164$2 then v1164$2 else p256$2);
    p255$1 := (if p255$1 && !v1164$1 then v1164$1 else p255$1);
    p255$2 := (if p255$2 && !v1164$2 then v1164$2 else p255$2);
    call {:sourceloc} {:sourceloc_num 1391} _LOG_READ_$$par_max_val_all(p256$1, BV32_ADD(v199$1, $i.5$1), $$par_max_val_all[BV32_ADD(v199$1, $i.5$1)]);
    assume {:do_not_predicate} {:check_id "check_state_24"} {:captureState "check_state_24"} {:sourceloc} {:sourceloc_num 1391} true;
    call {:check_id "check_state_24"} {:sourceloc} {:sourceloc_num 1391} _CHECK_READ_$$par_max_val_all(p256$2, BV32_ADD(v199$2, $i.5$2), $$par_max_val_all[BV32_ADD(v199$2, $i.5$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$par_max_val_all"} true;
    v1165$1 := (if p256$1 then $$par_max_val_all[BV32_ADD(v199$1, $i.5$1)] else v1165$1);
    v1165$2 := (if p256$2 then $$par_max_val_all[BV32_ADD(v199$2, $i.5$2)] else v1165$2);
    v1166$1 := (if p256$1 then FLT32($fin_max_val.0$1, v1165$1) else v1166$1);
    v1166$2 := (if p256$2 then FLT32($fin_max_val.0$2, v1165$2) else v1166$2);
    p258$1 := (if p256$1 && v1166$1 then v1166$1 else p258$1);
    p258$2 := (if p256$2 && v1166$2 then v1166$2 else p258$2);
    p257$1 := (if p256$1 && !v1166$1 then !v1166$1 else p257$1);
    p257$2 := (if p256$2 && !v1166$2 then !v1166$2 else p257$2);
    $fin_max_val.1$1, $fin_max_coo.1$1 := (if p257$1 then $fin_max_val.0$1 else $fin_max_val.1$1), (if p257$1 then $fin_max_coo.0$1 else $fin_max_coo.1$1);
    $fin_max_val.1$2, $fin_max_coo.1$2 := (if p257$2 then $fin_max_val.0$2 else $fin_max_val.1$2), (if p257$2 then $fin_max_coo.0$2 else $fin_max_coo.1$2);
    call {:sourceloc} {:sourceloc_num 1393} _LOG_READ_$$par_max_val_all(p258$1, BV32_ADD(v199$1, $i.5$1), $$par_max_val_all[BV32_ADD(v199$1, $i.5$1)]);
    assume {:do_not_predicate} {:check_id "check_state_25"} {:captureState "check_state_25"} {:sourceloc} {:sourceloc_num 1393} true;
    call {:check_id "check_state_25"} {:sourceloc} {:sourceloc_num 1393} _CHECK_READ_$$par_max_val_all(p258$2, BV32_ADD(v199$2, $i.5$2), $$par_max_val_all[BV32_ADD(v199$2, $i.5$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$par_max_val_all"} true;
    v1167$1 := (if p258$1 then $$par_max_val_all[BV32_ADD(v199$1, $i.5$1)] else v1167$1);
    v1167$2 := (if p258$2 then $$par_max_val_all[BV32_ADD(v199$2, $i.5$2)] else v1167$2);
    call {:sourceloc} {:sourceloc_num 1394} _LOG_READ_$$par_max_coo_all(p258$1, BV32_ADD(v204$1, $i.5$1), $$par_max_coo_all[BV32_ADD(v204$1, $i.5$1)]);
    assume {:do_not_predicate} {:check_id "check_state_26"} {:captureState "check_state_26"} {:sourceloc} {:sourceloc_num 1394} true;
    call {:check_id "check_state_26"} {:sourceloc} {:sourceloc_num 1394} _CHECK_READ_$$par_max_coo_all(p258$2, BV32_ADD(v204$2, $i.5$2), $$par_max_coo_all[BV32_ADD(v204$2, $i.5$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$par_max_coo_all"} true;
    v1168$1 := (if p258$1 then $$par_max_coo_all[BV32_ADD(v204$1, $i.5$1)] else v1168$1);
    v1168$2 := (if p258$2 then $$par_max_coo_all[BV32_ADD(v204$2, $i.5$2)] else v1168$2);
    $fin_max_val.1$1, $fin_max_coo.1$1 := (if p258$1 then v1167$1 else $fin_max_val.1$1), (if p258$1 then v1168$1 else $fin_max_coo.1$1);
    $fin_max_val.1$2, $fin_max_coo.1$2 := (if p258$2 then v1167$2 else $fin_max_val.1$2), (if p258$2 then v1168$2 else $fin_max_coo.1$2);
    $i.5$1, $fin_max_val.0$1, $fin_max_coo.0$1 := (if p256$1 then BV32_ADD($i.5$1, 1bv32) else $i.5$1), (if p256$1 then $fin_max_val.1$1 else $fin_max_val.0$1), (if p256$1 then $fin_max_coo.1$1 else $fin_max_coo.0$1);
    $i.5$2, $fin_max_val.0$2, $fin_max_coo.0$2 := (if p256$2 then BV32_ADD($i.5$2, 1bv32) else $i.5$2), (if p256$2 then $fin_max_val.1$2 else $fin_max_val.0$2), (if p256$2 then $fin_max_coo.1$2 else $fin_max_coo.0$2);
    p255$1 := (if p256$1 then true else p255$1);
    p255$2 := (if p256$2 then true else p255$2);
    goto $244.backedge, __partitioned_block_$244.tail_0;

  __partitioned_block_$244.tail_0:
    assume !p255$1 && !p255$2;
    v1169$1 := (if p254$1 then $$d_common$364bv32$1 else v1169$1);
    v1169$2 := (if p254$2 then $$d_common$364bv32$2 else v1169$2);
    v1170$1 := (if p254$1 then $$d_common$365bv32$1 else v1170$1);
    v1170$2 := (if p254$2 then $$d_common$365bv32$2 else v1170$2);
    v1171$1 := (if p254$1 then $$d_common$366bv32$1 else v1171$1);
    v1171$2 := (if p254$2 then $$d_common$366bv32$2 else v1171$2);
    v1172$1 := (if p254$1 then $$d_common$367bv32$1 else v1172$1);
    v1172$2 := (if p254$2 then $$d_common$367bv32$2 else v1172$2);
    v1173$1 := (if p254$1 then $$d_common$364bv32$1 else v1173$1);
    v1173$2 := (if p254$2 then $$d_common$364bv32$2 else v1173$2);
    v1174$1 := (if p254$1 then $$d_common$365bv32$1 else v1174$1);
    v1174$2 := (if p254$2 then $$d_common$365bv32$2 else v1174$2);
    v1175$1 := (if p254$1 then $$d_common$366bv32$1 else v1175$1);
    v1175$2 := (if p254$2 then $$d_common$366bv32$2 else v1175$2);
    v1176$1 := (if p254$1 then $$d_common$367bv32$1 else v1176$1);
    v1176$2 := (if p254$2 then $$d_common$367bv32$2 else v1176$2);
    v1177$1 := (if p254$1 then BV32_SDIV(BV32_ADD($fin_max_coo.0$1, 1bv32), v1176$1 ++ v1175$1 ++ v1174$1 ++ v1173$1) else v1177$1);
    v1177$2 := (if p254$2 then BV32_SDIV(BV32_ADD($fin_max_coo.0$2, 1bv32), v1176$2 ++ v1175$2 ++ v1174$2 ++ v1173$2) else v1177$2);
    v1178$1 := (if p254$1 then $$d_common$364bv32$1 else v1178$1);
    v1178$2 := (if p254$2 then $$d_common$364bv32$2 else v1178$2);
    v1179$1 := (if p254$1 then $$d_common$365bv32$1 else v1179$1);
    v1179$2 := (if p254$2 then $$d_common$365bv32$2 else v1179$2);
    v1180$1 := (if p254$1 then $$d_common$366bv32$1 else v1180$1);
    v1180$2 := (if p254$2 then $$d_common$366bv32$2 else v1180$2);
    v1181$1 := (if p254$1 then $$d_common$367bv32$1 else v1181$1);
    v1181$2 := (if p254$2 then $$d_common$367bv32$2 else v1181$2);
    v1182$1 := (if p254$1 then BV32_SREM(BV32_ADD($fin_max_coo.0$1, 1bv32), v1181$1 ++ v1180$1 ++ v1179$1 ++ v1178$1) == 0bv32 else v1182$1);
    v1182$2 := (if p254$2 then BV32_SREM(BV32_ADD($fin_max_coo.0$2, 1bv32), v1181$2 ++ v1180$2 ++ v1179$2 ++ v1178$2) == 0bv32 else v1182$2);
    p259$1 := (if p254$1 && v1182$1 then v1182$1 else p259$1);
    p259$2 := (if p254$2 && v1182$2 then v1182$2 else p259$2);
    p260$1 := (if p254$1 && !v1182$1 then !v1182$1 else p260$1);
    p260$2 := (if p254$2 && !v1182$2 then !v1182$2 else p260$2);
    v1183$1 := (if p259$1 then $$d_common$364bv32$1 else v1183$1);
    v1183$2 := (if p259$2 then $$d_common$364bv32$2 else v1183$2);
    v1184$1 := (if p259$1 then $$d_common$365bv32$1 else v1184$1);
    v1184$2 := (if p259$2 then $$d_common$365bv32$2 else v1184$2);
    v1185$1 := (if p259$1 then $$d_common$366bv32$1 else v1185$1);
    v1185$2 := (if p259$2 then $$d_common$366bv32$2 else v1185$2);
    v1186$1 := (if p259$1 then $$d_common$367bv32$1 else v1186$1);
    v1186$2 := (if p259$2 then $$d_common$367bv32$2 else v1186$2);
    $largest_row.0$1, $largest_col.0$1 := (if p259$1 then BV32_SUB(v1186$1 ++ v1185$1 ++ v1184$1 ++ v1183$1, 1bv32) else $largest_row.0$1), (if p259$1 then BV32_SUB(v1177$1, 1bv32) else $largest_col.0$1);
    $largest_row.0$2, $largest_col.0$2 := (if p259$2 then BV32_SUB(v1186$2 ++ v1185$2 ++ v1184$2 ++ v1183$2, 1bv32) else $largest_row.0$2), (if p259$2 then BV32_SUB(v1177$2, 1bv32) else $largest_col.0$2);
    $largest_row.0$1, $largest_col.0$1 := (if p260$1 then BV32_SUB(BV32_SREM(BV32_ADD($fin_max_coo.0$1, 1bv32), v1172$1 ++ v1171$1 ++ v1170$1 ++ v1169$1), 1bv32) else $largest_row.0$1), (if p260$1 then v1177$1 else $largest_col.0$1);
    $largest_row.0$2, $largest_col.0$2 := (if p260$2 then BV32_SUB(BV32_SREM(BV32_ADD($fin_max_coo.0$2, 1bv32), v1172$2 ++ v1171$2 ++ v1170$2 ++ v1169$2), 1bv32) else $largest_row.0$2), (if p260$2 then v1177$2 else $largest_col.0$2);
    v1187$1 := (if p254$1 then $$d_common$72bv32$1 else v1187$1);
    v1187$2 := (if p254$2 then $$d_common$72bv32$2 else v1187$2);
    v1188$1 := (if p254$1 then $$d_common$73bv32$1 else v1188$1);
    v1188$2 := (if p254$2 then $$d_common$73bv32$2 else v1188$2);
    v1189$1 := (if p254$1 then $$d_common$74bv32$1 else v1189$1);
    v1189$2 := (if p254$2 then $$d_common$74bv32$2 else v1189$2);
    v1190$1 := (if p254$1 then $$d_common$75bv32$1 else v1190$1);
    v1190$2 := (if p254$2 then $$d_common$75bv32$2 else v1190$2);
    v1191$1 := (if p254$1 then $$d_common$16bv32$1 else v1191$1);
    v1191$2 := (if p254$2 then $$d_common$16bv32$2 else v1191$2);
    v1192$1 := (if p254$1 then $$d_common$17bv32$1 else v1192$1);
    v1192$2 := (if p254$2 then $$d_common$17bv32$2 else v1192$2);
    v1193$1 := (if p254$1 then $$d_common$18bv32$1 else v1193$1);
    v1193$2 := (if p254$2 then $$d_common$18bv32$2 else v1193$2);
    v1194$1 := (if p254$1 then $$d_common$19bv32$1 else v1194$1);
    v1194$2 := (if p254$2 then $$d_common$19bv32$2 else v1194$2);
    v1195$1 := (if p254$1 then $$d_common$20bv32$1 else v1195$1);
    v1195$2 := (if p254$2 then $$d_common$20bv32$2 else v1195$2);
    v1196$1 := (if p254$1 then $$d_common$21bv32$1 else v1196$1);
    v1196$2 := (if p254$2 then $$d_common$21bv32$2 else v1196$2);
    v1197$1 := (if p254$1 then $$d_common$22bv32$1 else v1197$1);
    v1197$2 := (if p254$2 then $$d_common$22bv32$2 else v1197$2);
    v1198$1 := (if p254$1 then $$d_common$23bv32$1 else v1198$1);
    v1198$2 := (if p254$2 then $$d_common$23bv32$2 else v1198$2);
    v1199$1 := (if p254$1 then $$d_common$76bv32$1 else v1199$1);
    v1199$2 := (if p254$2 then $$d_common$76bv32$2 else v1199$2);
    v1200$1 := (if p254$1 then $$d_common$77bv32$1 else v1200$1);
    v1200$2 := (if p254$2 then $$d_common$77bv32$2 else v1200$2);
    v1201$1 := (if p254$1 then $$d_common$78bv32$1 else v1201$1);
    v1201$2 := (if p254$2 then $$d_common$78bv32$2 else v1201$2);
    v1202$1 := (if p254$1 then $$d_common$79bv32$1 else v1202$1);
    v1202$2 := (if p254$2 then $$d_common$79bv32$2 else v1202$2);
    v1203$1 := (if p254$1 then $$d_common$16bv32$1 else v1203$1);
    v1203$2 := (if p254$2 then $$d_common$16bv32$2 else v1203$2);
    v1204$1 := (if p254$1 then $$d_common$17bv32$1 else v1204$1);
    v1204$2 := (if p254$2 then $$d_common$17bv32$2 else v1204$2);
    v1205$1 := (if p254$1 then $$d_common$18bv32$1 else v1205$1);
    v1205$2 := (if p254$2 then $$d_common$18bv32$2 else v1205$2);
    v1206$1 := (if p254$1 then $$d_common$19bv32$1 else v1206$1);
    v1206$2 := (if p254$2 then $$d_common$19bv32$2 else v1206$2);
    v1207$1 := (if p254$1 then $$d_common$20bv32$1 else v1207$1);
    v1207$2 := (if p254$2 then $$d_common$20bv32$2 else v1207$2);
    v1208$1 := (if p254$1 then $$d_common$21bv32$1 else v1208$1);
    v1208$2 := (if p254$2 then $$d_common$21bv32$2 else v1208$2);
    v1209$1 := (if p254$1 then $$d_common$22bv32$1 else v1209$1);
    v1209$2 := (if p254$2 then $$d_common$22bv32$2 else v1209$2);
    v1210$1 := (if p254$1 then $$d_common$23bv32$1 else v1210$1);
    v1210$2 := (if p254$2 then $$d_common$23bv32$2 else v1210$2);
    v1211$1 := (if p254$1 then $$d_common$32bv32$1 else v1211$1);
    v1211$2 := (if p254$2 then $$d_common$32bv32$2 else v1211$2);
    v1212$1 := (if p254$1 then $$d_common$33bv32$1 else v1212$1);
    v1212$2 := (if p254$2 then $$d_common$33bv32$2 else v1212$2);
    v1213$1 := (if p254$1 then $$d_common$34bv32$1 else v1213$1);
    v1213$2 := (if p254$2 then $$d_common$34bv32$2 else v1213$2);
    v1214$1 := (if p254$1 then $$d_common$35bv32$1 else v1214$1);
    v1214$2 := (if p254$2 then $$d_common$35bv32$2 else v1214$2);
    v1215$1 := (if p254$1 then BV32_ADD(BV32_MUL($d_unique_point_no.0$1, v1214$1 ++ v1213$1 ++ v1212$1 ++ v1211$1), $d_frame_no) else v1215$1);
    v1215$2 := (if p254$2 then BV32_ADD(BV32_MUL($d_unique_point_no.0$2, v1214$2 ++ v1213$2 ++ v1212$2 ++ v1211$2), $d_frame_no) else v1215$2);
    p261$1 := (if p254$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p261$1);
    p261$2 := (if p254$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p261$2);
    p262$1 := (if p254$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p262$1);
    p262$2 := (if p254$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p262$2);
    call {:sourceloc} {:sourceloc_num 1444} _LOG_READ_$$d_epiRow(p261$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_23"} {:captureState "check_state_23"} {:sourceloc} {:sourceloc_num 1444} true;
    call {:check_id "check_state_23"} {:sourceloc} {:sourceloc_num 1444} _CHECK_READ_$$d_epiRow(p261$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v1216$1 := (if p261$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1216$1);
    v1216$2 := (if p261$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1216$2);
    p263$1 := (if p262$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p263$1);
    p263$2 := (if p262$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p263$2);
    p264$1 := (if p262$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p264$1);
    p264$2 := (if p262$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p264$2);
    call {:sourceloc} {:sourceloc_num 1445} _LOG_READ_$$d_endoRow(p263$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_22"} {:captureState "check_state_22"} {:sourceloc} {:sourceloc_num 1445} true;
    call {:check_id "check_state_22"} {:sourceloc} {:sourceloc_num 1445} _CHECK_READ_$$d_endoRow(p263$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v1216$1 := (if p263$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1216$1);
    v1216$2 := (if p263$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1216$2);
    assert {:bad_pointer_access} {:sourceloc_num 1446} {:thread 1} p264$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1446} {:thread 2} p264$2 ==> false;
    p265$1 := (if p254$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc else p265$1);
    p265$2 := (if p254$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc else p265$2);
    p266$1 := (if p254$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc else p266$1);
    p266$2 := (if p254$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc else p266$2);
    call {:sourceloc} {:sourceloc_num 1447} _LOG_WRITE_$$d_tEpiRowLoc(p265$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1), BV32_ADD(v1216$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$1, 1bv32), v1190$1 ++ v1189$1 ++ v1188$1 ++ v1187$1), BV32_SUB(v1194$1 ++ v1193$1 ++ v1192$1 ++ v1191$1, v1198$1 ++ v1197$1 ++ v1196$1 ++ v1195$1))), $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc(p265$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2));
    assume {:do_not_predicate} {:check_id "check_state_21"} {:captureState "check_state_21"} {:sourceloc} {:sourceloc_num 1447} true;
    call {:check_id "check_state_21"} {:sourceloc} {:sourceloc_num 1447} _CHECK_WRITE_$$d_tEpiRowLoc(p265$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2), BV32_ADD(v1216$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$2, 1bv32), v1190$2 ++ v1189$2 ++ v1188$2 ++ v1187$2), BV32_SUB(v1194$2 ++ v1193$2 ++ v1192$2 ++ v1191$2, v1198$2 ++ v1197$2 ++ v1196$2 ++ v1195$2))));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEpiRowLoc"} true;
    $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1)] := (if p265$1 then BV32_ADD(v1216$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$1, 1bv32), v1190$1 ++ v1189$1 ++ v1188$1 ++ v1187$1), BV32_SUB(v1194$1 ++ v1193$1 ++ v1192$1 ++ v1191$1, v1198$1 ++ v1197$1 ++ v1196$1 ++ v1195$1))) else $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1)]);
    $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2)] := (if p265$2 then BV32_ADD(v1216$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$2, 1bv32), v1190$2 ++ v1189$2 ++ v1188$2 ++ v1187$2), BV32_SUB(v1194$2 ++ v1193$2 ++ v1192$2 ++ v1191$2, v1198$2 ++ v1197$2 ++ v1196$2 ++ v1195$2))) else $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2)]);
    p267$1 := (if p266$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc else p267$1);
    p267$2 := (if p266$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc else p267$2);
    p268$1 := (if p266$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc else p268$1);
    p268$2 := (if p266$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc else p268$2);
    call {:sourceloc} {:sourceloc_num 1448} _LOG_WRITE_$$d_tEndoRowLoc(p267$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1), BV32_ADD(v1216$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$1, 1bv32), v1190$1 ++ v1189$1 ++ v1188$1 ++ v1187$1), BV32_SUB(v1194$1 ++ v1193$1 ++ v1192$1 ++ v1191$1, v1198$1 ++ v1197$1 ++ v1196$1 ++ v1195$1))), $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc(p267$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2));
    assume {:do_not_predicate} {:check_id "check_state_20"} {:captureState "check_state_20"} {:sourceloc} {:sourceloc_num 1448} true;
    call {:check_id "check_state_20"} {:sourceloc} {:sourceloc_num 1448} _CHECK_WRITE_$$d_tEndoRowLoc(p267$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2), BV32_ADD(v1216$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$2, 1bv32), v1190$2 ++ v1189$2 ++ v1188$2 ++ v1187$2), BV32_SUB(v1194$2 ++ v1193$2 ++ v1192$2 ++ v1191$2, v1198$2 ++ v1197$2 ++ v1196$2 ++ v1195$2))));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEndoRowLoc"} true;
    $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1)] := (if p267$1 then BV32_ADD(v1216$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$1, 1bv32), v1190$1 ++ v1189$1 ++ v1188$1 ++ v1187$1), BV32_SUB(v1194$1 ++ v1193$1 ++ v1192$1 ++ v1191$1, v1198$1 ++ v1197$1 ++ v1196$1 ++ v1195$1))) else $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v1215$1)]);
    $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2)] := (if p267$2 then BV32_ADD(v1216$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_row.0$2, 1bv32), v1190$2 ++ v1189$2 ++ v1188$2 ++ v1187$2), BV32_SUB(v1194$2 ++ v1193$2 ++ v1192$2 ++ v1191$2, v1198$2 ++ v1197$2 ++ v1196$2 ++ v1195$2))) else $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v1215$2)]);
    assert {:bad_pointer_access} {:sourceloc_num 1449} {:thread 1} p268$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1449} {:thread 2} p268$2 ==> false;
    p269$1 := (if p254$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p269$1);
    p269$2 := (if p254$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p269$2);
    p270$1 := (if p254$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p270$1);
    p270$2 := (if p254$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p270$2);
    call {:sourceloc} {:sourceloc_num 1450} _LOG_READ_$$d_endoCol(p269$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_19"} {:captureState "check_state_19"} {:sourceloc} {:sourceloc_num 1450} true;
    call {:check_id "check_state_19"} {:sourceloc} {:sourceloc_num 1450} _CHECK_READ_$$d_endoCol(p269$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v1217$1 := (if p269$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1217$1);
    v1217$2 := (if p269$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1217$2);
    p271$1 := (if p270$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p271$1);
    p271$2 := (if p270$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p271$2);
    p272$1 := (if p270$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p272$1);
    p272$2 := (if p270$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p272$2);
    call {:sourceloc} {:sourceloc_num 1451} _LOG_READ_$$d_epiCol(p271$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_18"} {:captureState "check_state_18"} {:sourceloc} {:sourceloc_num 1451} true;
    call {:check_id "check_state_18"} {:sourceloc} {:sourceloc_num 1451} _CHECK_READ_$$d_epiCol(p271$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v1217$1 := (if p271$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1217$1);
    v1217$2 := (if p271$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1217$2);
    assert {:bad_pointer_access} {:sourceloc_num 1452} {:thread 1} p272$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1452} {:thread 2} p272$2 ==> false;
    p273$1 := (if p254$1 && base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc else p273$1);
    p273$2 := (if p254$2 && base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc else p273$2);
    p274$1 := (if p254$1 && base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc else p274$1);
    p274$2 := (if p254$2 && base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc else p274$2);
    call {:sourceloc} {:sourceloc_num 1453} _LOG_WRITE_$$d_tEndoColLoc(p273$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1), BV32_ADD(v1217$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$1, 1bv32), v1202$1 ++ v1201$1 ++ v1200$1 ++ v1199$1), BV32_SUB(v1206$1 ++ v1205$1 ++ v1204$1 ++ v1203$1, v1210$1 ++ v1209$1 ++ v1208$1 ++ v1207$1))), $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc(p273$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2));
    assume {:do_not_predicate} {:check_id "check_state_17"} {:captureState "check_state_17"} {:sourceloc} {:sourceloc_num 1453} true;
    call {:check_id "check_state_17"} {:sourceloc} {:sourceloc_num 1453} _CHECK_WRITE_$$d_tEndoColLoc(p273$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2), BV32_ADD(v1217$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$2, 1bv32), v1202$2 ++ v1201$2 ++ v1200$2 ++ v1199$2), BV32_SUB(v1206$2 ++ v1205$2 ++ v1204$2 ++ v1203$2, v1210$2 ++ v1209$2 ++ v1208$2 ++ v1207$2))));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEndoColLoc"} true;
    $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1)] := (if p273$1 then BV32_ADD(v1217$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$1, 1bv32), v1202$1 ++ v1201$1 ++ v1200$1 ++ v1199$1), BV32_SUB(v1206$1 ++ v1205$1 ++ v1204$1 ++ v1203$1, v1210$1 ++ v1209$1 ++ v1208$1 ++ v1207$1))) else $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1)]);
    $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2)] := (if p273$2 then BV32_ADD(v1217$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$2, 1bv32), v1202$2 ++ v1201$2 ++ v1200$2 ++ v1199$2), BV32_SUB(v1206$2 ++ v1205$2 ++ v1204$2 ++ v1203$2, v1210$2 ++ v1209$2 ++ v1208$2 ++ v1207$2))) else $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2)]);
    p275$1 := (if p274$1 && base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc else p275$1);
    p275$2 := (if p274$2 && base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc else p275$2);
    p276$1 := (if p274$1 && base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc else p276$1);
    p276$2 := (if p274$2 && base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc else p276$2);
    call {:sourceloc} {:sourceloc_num 1454} _LOG_WRITE_$$d_tEpiColLoc(p275$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1), BV32_ADD(v1217$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$1, 1bv32), v1202$1 ++ v1201$1 ++ v1200$1 ++ v1199$1), BV32_SUB(v1206$1 ++ v1205$1 ++ v1204$1 ++ v1203$1, v1210$1 ++ v1209$1 ++ v1208$1 ++ v1207$1))), $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc(p275$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2));
    assume {:do_not_predicate} {:check_id "check_state_16"} {:captureState "check_state_16"} {:sourceloc} {:sourceloc_num 1454} true;
    call {:check_id "check_state_16"} {:sourceloc} {:sourceloc_num 1454} _CHECK_WRITE_$$d_tEpiColLoc(p275$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2), BV32_ADD(v1217$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$2, 1bv32), v1202$2 ++ v1201$2 ++ v1200$2 ++ v1199$2), BV32_SUB(v1206$2 ++ v1205$2 ++ v1204$2 ++ v1203$2, v1210$2 ++ v1209$2 ++ v1208$2 ++ v1207$2))));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEpiColLoc"} true;
    $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1)] := (if p275$1 then BV32_ADD(v1217$1, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$1, 1bv32), v1202$1 ++ v1201$1 ++ v1200$1 ++ v1199$1), BV32_SUB(v1206$1 ++ v1205$1 ++ v1204$1 ++ v1203$1, v1210$1 ++ v1209$1 ++ v1208$1 ++ v1207$1))) else $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v1215$1)]);
    $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2)] := (if p275$2 then BV32_ADD(v1217$2, BV32_SUB(BV32_SUB(BV32_ADD($largest_col.0$2, 1bv32), v1202$2 ++ v1201$2 ++ v1200$2 ++ v1199$2), BV32_SUB(v1206$2 ++ v1205$2 ++ v1204$2 ++ v1203$2, v1210$2 ++ v1209$2 ++ v1208$2 ++ v1207$2))) else $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v1215$2)]);
    assert {:bad_pointer_access} {:sourceloc_num 1455} {:thread 1} p276$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1455} {:thread 2} p276$2 ==> false;
    goto __partitioned_block_$244.tail_1;

  __partitioned_block_$244.tail_1:
    call {:sourceloc_num 1457} $bugle_barrier_duplicated_38(1bv1, 1bv1);
    goto $253;

  $244.backedge:
    assume {:backedge} p255$1 || p255$2;
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto $244;

  $234.backedge:
    assume {:backedge} p248$1 || p248$2;
    assume {:captureState "loop_back_edge_state_2_0"} true;
    goto $234;

  $236.backedge:
    assume {:backedge} p250$1 || p250$2;
    assume {:captureState "loop_back_edge_state_3_0"} true;
    goto $236;

  $209.backedge:
    assume {:backedge} p232$1 || p232$2;
    assume {:captureState "loop_back_edge_state_4_0"} true;
    goto $209;

  $225.backedge:
    assume {:backedge} p244$1 || p244$2;
    assume {:captureState "loop_back_edge_state_5_0"} true;
    goto $225;

  $227.backedge:
    assume {:backedge} p246$1 || p246$2;
    assume {:captureState "loop_back_edge_state_6_0"} true;
    goto $227;

  $203.backedge:
    assume {:backedge} p228$1 || p228$2;
    assume {:captureState "loop_back_edge_state_7_0"} true;
    goto $203;

  $truebb73:
    assume {:partition} v1038 && v1038;
    p196$1 := (if base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p196$1);
    p196$2 := (if base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p196$2);
    p197$1 := (if base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p197$1);
    p197$2 := (if base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p197$2);
    call {:sourceloc} {:sourceloc_num 1219} _LOG_READ_$$d_epiRow(p196$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_50"} {:captureState "check_state_50"} {:sourceloc} {:sourceloc_num 1219} true;
    call {:check_id "check_state_50"} {:sourceloc} {:sourceloc_num 1219} _CHECK_READ_$$d_epiRow(p196$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v1039$1 := (if p196$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1039$1);
    v1039$2 := (if p196$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1039$2);
    p198$1 := (if p197$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p198$1);
    p198$2 := (if p197$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p198$2);
    p199$1 := (if p197$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p199$1);
    p199$2 := (if p197$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p199$2);
    call {:sourceloc} {:sourceloc_num 1220} _LOG_READ_$$d_endoRow(p198$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_49"} {:captureState "check_state_49"} {:sourceloc} {:sourceloc_num 1220} true;
    call {:check_id "check_state_49"} {:sourceloc} {:sourceloc_num 1220} _CHECK_READ_$$d_endoRow(p198$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v1039$1 := (if p198$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1039$1);
    v1039$2 := (if p198$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1039$2);
    assert {:bad_pointer_access} {:sourceloc_num 1221} {:thread 1} p199$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1221} {:thread 2} p199$2 ==> false;
    p200$1 := (if base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p200$1);
    p200$2 := (if base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p200$2);
    p201$1 := (if base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p201$1);
    p201$2 := (if base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p201$2);
    call {:sourceloc} {:sourceloc_num 1222} _LOG_READ_$$d_epiRow(p200$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_48"} {:captureState "check_state_48"} {:sourceloc} {:sourceloc_num 1222} true;
    call {:check_id "check_state_48"} {:sourceloc} {:sourceloc_num 1222} _CHECK_READ_$$d_epiRow(p200$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v1040$1 := (if p200$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1040$1);
    v1040$2 := (if p200$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1040$2);
    p202$1 := (if p201$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p202$1);
    p202$2 := (if p201$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p202$2);
    p203$1 := (if p201$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p203$1);
    p203$2 := (if p201$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p203$2);
    call {:sourceloc} {:sourceloc_num 1223} _LOG_READ_$$d_endoRow(p202$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_47"} {:captureState "check_state_47"} {:sourceloc} {:sourceloc_num 1223} true;
    call {:check_id "check_state_47"} {:sourceloc} {:sourceloc_num 1223} _CHECK_READ_$$d_endoRow(p202$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v1040$1 := (if p202$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v1040$1);
    v1040$2 := (if p202$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v1040$2);
    assert {:bad_pointer_access} {:sourceloc_num 1224} {:thread 1} p203$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1224} {:thread 2} p203$2 ==> false;
    p204$1 := (if base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p204$1);
    p204$2 := (if base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p204$2);
    p205$1 := (if base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p205$1);
    p205$2 := (if base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p205$2);
    call {:sourceloc} {:sourceloc_num 1225} _LOG_READ_$$d_endoCol(p204$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_46"} {:captureState "check_state_46"} {:sourceloc} {:sourceloc_num 1225} true;
    call {:check_id "check_state_46"} {:sourceloc} {:sourceloc_num 1225} _CHECK_READ_$$d_endoCol(p204$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v1041$1 := (if p204$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1041$1);
    v1041$2 := (if p204$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1041$2);
    p206$1 := (if p205$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p206$1);
    p206$2 := (if p205$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p206$2);
    p207$1 := (if p205$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p207$1);
    p207$2 := (if p205$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p207$2);
    call {:sourceloc} {:sourceloc_num 1226} _LOG_READ_$$d_epiCol(p206$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_45"} {:captureState "check_state_45"} {:sourceloc} {:sourceloc_num 1226} true;
    call {:check_id "check_state_45"} {:sourceloc} {:sourceloc_num 1226} _CHECK_READ_$$d_epiCol(p206$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v1041$1 := (if p206$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1041$1);
    v1041$2 := (if p206$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1041$2);
    assert {:bad_pointer_access} {:sourceloc_num 1227} {:thread 1} p207$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1227} {:thread 2} p207$2 ==> false;
    p208$1 := (if base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p208$1);
    p208$2 := (if base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p208$2);
    p209$1 := (if base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p209$1);
    p209$2 := (if base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p209$2);
    call {:sourceloc} {:sourceloc_num 1228} _LOG_READ_$$d_endoCol(p208$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_44"} {:captureState "check_state_44"} {:sourceloc} {:sourceloc_num 1228} true;
    call {:check_id "check_state_44"} {:sourceloc} {:sourceloc_num 1228} _CHECK_READ_$$d_endoCol(p208$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v1042$1 := (if p208$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1042$1);
    v1042$2 := (if p208$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1042$2);
    p210$1 := (if p209$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p210$1);
    p210$2 := (if p209$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p210$2);
    p211$1 := (if p209$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p211$1);
    p211$2 := (if p209$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p211$2);
    call {:sourceloc} {:sourceloc_num 1229} _LOG_READ_$$d_epiCol(p210$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_43"} {:captureState "check_state_43"} {:sourceloc} {:sourceloc_num 1229} true;
    call {:check_id "check_state_43"} {:sourceloc} {:sourceloc_num 1229} _CHECK_READ_$$d_epiCol(p210$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v1042$1 := (if p210$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v1042$1);
    v1042$2 := (if p210$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v1042$2);
    assert {:bad_pointer_access} {:sourceloc_num 1230} {:thread 1} p211$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 1230} {:thread 2} p211$2 ==> false;
    $tMask_row.0$1, $tMask_col.0$1 := BV32_SUB(BV32_SUB(BV32_ADD(v1037$1, v1039$1), v1040$1), 1bv32), BV32_SUB(BV32_SUB(BV32_ADD(v1037$1, v1041$1), v1042$1), 1bv32);
    $tMask_row.0$2, $tMask_col.0$2 := BV32_SUB(BV32_SUB(BV32_ADD(v1037$2, v1039$2), v1040$2), 1bv32), BV32_SUB(BV32_SUB(BV32_ADD(v1037$2, v1041$2), v1042$2), 1bv32);
    goto $202;

  $197.backedge:
    assume {:backedge} p194$1 || p194$2;
    assume {:captureState "loop_back_edge_state_8_0"} true;
    goto $197;

  $194.backedge:
    assume {:backedge} p192$1 || p192$2;
    assume {:captureState "loop_back_edge_state_9_0"} true;
    goto $194;

  $191.backedge:
    assume {:backedge} p190$1 || p190$2;
    assume {:captureState "loop_back_edge_state_10_0"} true;
    goto $191;

  $183.backedge:
    assume {:backedge} p185$1 || p185$2;
    assume {:captureState "loop_back_edge_state_11_0"} true;
    goto $183;

  $177.backedge:
    assume {:backedge} p181$1 || p181$2;
    assume {:captureState "loop_back_edge_state_12_0"} true;
    goto $177;

  $169.backedge:
    assume {:backedge} p176$1 || p176$2;
    assume {:captureState "loop_back_edge_state_13_0"} true;
    goto $169;

  $171.backedge:
    assume {:backedge} p178$1 || p178$2;
    assume {:captureState "loop_back_edge_state_14_0"} true;
    goto $171;

  $162.backedge:
    assume {:backedge} p168$1 || p168$2;
    assume {:captureState "loop_back_edge_state_15_0"} true;
    goto $162;

  $164.backedge:
    assume {:backedge} p170$1 || p170$2;
    assume {:captureState "loop_back_edge_state_16_0"} true;
    goto $164;

  $159.backedge:
    assume {:backedge} p162$1 || p162$2;
    assume {:captureState "loop_back_edge_state_17_0"} true;
    goto $159;

  $154.backedge:
    assume {:backedge} p158$1 || p158$2;
    assume {:captureState "loop_back_edge_state_18_0"} true;
    goto $154;

  $151.backedge:
    assume {:backedge} p156$1 || p156$2;
    assume {:captureState "loop_back_edge_state_19_0"} true;
    goto $151;

  $146.backedge:
    assume {:backedge} p152$1 || p152$2;
    assume {:captureState "loop_back_edge_state_20_0"} true;
    goto $146;

  $141.backedge:
    assume {:backedge} p148$1 || p148$2;
    assume {:captureState "loop_back_edge_state_21_0"} true;
    goto $141;

  $134.backedge:
    assume {:backedge} p144$1 || p144$2;
    assume {:captureState "loop_back_edge_state_22_0"} true;
    goto $134;

  $136.backedge:
    assume {:backedge} p146$1 || p146$2;
    assume {:captureState "loop_back_edge_state_23_0"} true;
    goto $136;

  $131.backedge:
    assume {:backedge} p142$1 || p142$2;
    assume {:captureState "loop_back_edge_state_24_0"} true;
    goto $131;

  $126.backedge:
    assume {:backedge} p138$1 || p138$2;
    assume {:captureState "loop_back_edge_state_25_0"} true;
    goto $126;

  $121.backedge:
    assume {:backedge} p134$1 || p134$2;
    assume {:captureState "loop_back_edge_state_26_0"} true;
    goto $121;

  $114.backedge:
    assume {:backedge} p130$1 || p130$2;
    assume {:captureState "loop_back_edge_state_27_0"} true;
    goto $114;

  $116.backedge:
    assume {:backedge} p132$1 || p132$2;
    assume {:captureState "loop_back_edge_state_28_0"} true;
    goto $116;

  $103.backedge:
    assume {:backedge} p117$1 || p117$2;
    assume {:captureState "loop_back_edge_state_29_0"} true;
    goto $103;

  $100.backedge:
    assume {:backedge} p115$1 || p115$2;
    assume {:captureState "loop_back_edge_state_30_0"} true;
    goto $100;

  $97.backedge:
    assume {:backedge} p113$1 || p113$2;
    assume {:captureState "loop_back_edge_state_31_0"} true;
    goto $97;

  $92.backedge:
    assume {:backedge} p109$1 || p109$2;
    assume {:captureState "loop_back_edge_state_32_0"} true;
    goto $92;

  $87.backedge:
    assume {:backedge} p105$1 || p105$2;
    assume {:captureState "loop_back_edge_state_33_0"} true;
    goto $87;

  $80.backedge:
    assume {:backedge} p101$1 || p101$2;
    assume {:captureState "loop_back_edge_state_34_0"} true;
    goto $80;

  $82.backedge:
    assume {:backedge} p103$1 || p103$2;
    assume {:captureState "loop_back_edge_state_35_0"} true;
    goto $82;

  $77.backedge:
    assume {:backedge} p99$1 || p99$2;
    assume {:captureState "loop_back_edge_state_36_0"} true;
    goto $77;

  $72.backedge:
    assume {:backedge} p95$1 || p95$2;
    assume {:captureState "loop_back_edge_state_37_0"} true;
    goto $72;

  $67.backedge:
    assume {:backedge} p91$1 || p91$2;
    assume {:captureState "loop_back_edge_state_38_0"} true;
    goto $67;

  $60.backedge:
    assume {:backedge} p87$1 || p87$2;
    assume {:captureState "loop_back_edge_state_39_0"} true;
    goto $60;

  $62.backedge:
    assume {:backedge} p89$1 || p89$2;
    assume {:captureState "loop_back_edge_state_40_0"} true;
    goto $62;

  $49.backedge:
    assume {:backedge} p74$1 || p74$2;
    assume {:captureState "loop_back_edge_state_41_0"} true;
    goto $49;

  $24.backedge:
    assume {:backedge} p58$1 || p58$2;
    assume {:captureState "loop_back_edge_state_42_0"} true;
    goto $24;

  $40.backedge:
    assume {:backedge} p70$1 || p70$2;
    assume {:captureState "loop_back_edge_state_43_0"} true;
    goto $40;

  $42.backedge:
    assume {:backedge} p72$1 || p72$2;
    assume {:captureState "loop_back_edge_state_44_0"} true;
    goto $42;

  $19.backedge:
    assume {:backedge} p50$1 || p50$2;
    assume {:captureState "loop_back_edge_state_45_0"} true;
    goto $19;

  $14.backedge:
    assume {:backedge} p45$1 || p45$2;
    assume {:captureState "loop_back_edge_state_46_0"} true;
    goto $14;

  __partitioned_block_$truebb0_0:
    assume {:partition} v205 && v205;
    goto __partitioned_block_$truebb0_1;

  __partitioned_block_$truebb0_1:
    call {:sourceloc_num 190} $bugle_barrier_duplicated_39(1bv1, 1bv1);
    v206$1 := v101$1 == 0bv32;
    v206$2 := v101$2 == 0bv32;
    p2$1 := (if v206$1 then v206$1 else p2$1);
    p2$2 := (if v206$2 then v206$2 else p2$2);
    v207$1 := (if p2$1 then $$d_common$32bv32$1 else v207$1);
    v207$2 := (if p2$2 then $$d_common$32bv32$2 else v207$2);
    v208$1 := (if p2$1 then $$d_common$33bv32$1 else v208$1);
    v208$2 := (if p2$2 then $$d_common$33bv32$2 else v208$2);
    v209$1 := (if p2$1 then $$d_common$34bv32$1 else v209$1);
    v209$2 := (if p2$2 then $$d_common$34bv32$2 else v209$2);
    v210$1 := (if p2$1 then $$d_common$35bv32$1 else v210$1);
    v210$2 := (if p2$2 then $$d_common$35bv32$2 else v210$2);
    v211$1 := (if p2$1 then BV32_ADD(BV32_MUL($d_unique_point_no.0$1, v210$1 ++ v209$1 ++ v208$1 ++ v207$1), $d_frame_no) else v211$1);
    v211$2 := (if p2$2 then BV32_ADD(BV32_MUL($d_unique_point_no.0$2, v210$2 ++ v209$2 ++ v208$2 ++ v207$2), $d_frame_no) else v211$2);
    p3$1 := (if p2$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p3$1);
    p3$2 := (if p2$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p3$2);
    p4$1 := (if p2$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p4$1);
    p4$2 := (if p2$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p4$2);
    call {:sourceloc} {:sourceloc_num 196} _LOG_READ_$$d_epiRow(p3$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_155"} {:captureState "check_state_155"} {:sourceloc} {:sourceloc_num 196} true;
    call {:check_id "check_state_155"} {:sourceloc} {:sourceloc_num 196} _CHECK_READ_$$d_epiRow(p3$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v212$1 := (if p3$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v212$1);
    v212$2 := (if p3$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v212$2);
    p5$1 := (if p4$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p5$1);
    p5$2 := (if p4$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p5$2);
    p6$1 := (if p4$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p6$1);
    p6$2 := (if p4$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p6$2);
    call {:sourceloc} {:sourceloc_num 197} _LOG_READ_$$d_endoRow(p5$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_154"} {:captureState "check_state_154"} {:sourceloc} {:sourceloc_num 197} true;
    call {:check_id "check_state_154"} {:sourceloc} {:sourceloc_num 197} _CHECK_READ_$$d_endoRow(p5$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v212$1 := (if p5$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v212$1);
    v212$2 := (if p5$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v212$2);
    assert {:bad_pointer_access} {:sourceloc_num 198} {:thread 1} p6$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 198} {:thread 2} p6$2 ==> false;
    p7$1 := (if p2$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEpiRowLoc else p7$1);
    p7$2 := (if p2$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEpiRowLoc else p7$2);
    p8$1 := (if p2$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEpiRowLoc else p8$1);
    p8$2 := (if p2$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEpiRowLoc else p8$2);
    call {:sourceloc} {:sourceloc_num 199} _LOG_WRITE_$$d_tEpiRowLoc(p7$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1), v212$1, $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc(p7$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2));
    assume {:do_not_predicate} {:check_id "check_state_153"} {:captureState "check_state_153"} {:sourceloc} {:sourceloc_num 199} true;
    call {:check_id "check_state_153"} {:sourceloc} {:sourceloc_num 199} _CHECK_WRITE_$$d_tEpiRowLoc(p7$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2), v212$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEpiRowLoc"} true;
    $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1)] := (if p7$1 then v212$1 else $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1)]);
    $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2)] := (if p7$2 then v212$2 else $$d_tEpiRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2)]);
    p9$1 := (if p8$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) == $arrayId$$d_tEndoRowLoc else p9$1);
    p9$2 := (if p8$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) == $arrayId$$d_tEndoRowLoc else p9$2);
    p10$1 := (if p8$1 && base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$1) != $arrayId$$d_tEndoRowLoc else p10$1);
    p10$2 := (if p8$2 && base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc then base#MKPTR($d_unique_d_tRowLoc.0$2) != $arrayId$$d_tEndoRowLoc else p10$2);
    call {:sourceloc} {:sourceloc_num 200} _LOG_WRITE_$$d_tEndoRowLoc(p9$1, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1), v212$1, $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc(p9$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2));
    assume {:do_not_predicate} {:check_id "check_state_152"} {:captureState "check_state_152"} {:sourceloc} {:sourceloc_num 200} true;
    call {:check_id "check_state_152"} {:sourceloc} {:sourceloc_num 200} _CHECK_WRITE_$$d_tEndoRowLoc(p9$2, BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2), v212$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEndoRowLoc"} true;
    $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1)] := (if p9$1 then v212$1 else $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$1), v211$1)]);
    $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2)] := (if p9$2 then v212$2 else $$d_tEndoRowLoc[BV32_ADD(offset#MKPTR($d_unique_d_tRowLoc.0$2), v211$2)]);
    assert {:bad_pointer_access} {:sourceloc_num 201} {:thread 1} p10$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 201} {:thread 2} p10$2 ==> false;
    p11$1 := (if p2$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p11$1);
    p11$2 := (if p2$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p11$2);
    p12$1 := (if p2$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p12$1);
    p12$2 := (if p2$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p12$2);
    call {:sourceloc} {:sourceloc_num 202} _LOG_READ_$$d_endoCol(p11$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_151"} {:captureState "check_state_151"} {:sourceloc} {:sourceloc_num 202} true;
    call {:check_id "check_state_151"} {:sourceloc} {:sourceloc_num 202} _CHECK_READ_$$d_endoCol(p11$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v213$1 := (if p11$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v213$1);
    v213$2 := (if p11$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v213$2);
    p13$1 := (if p12$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p13$1);
    p13$2 := (if p12$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p13$2);
    p14$1 := (if p12$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p14$1);
    p14$2 := (if p12$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p14$2);
    call {:sourceloc} {:sourceloc_num 203} _LOG_READ_$$d_epiCol(p13$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_150"} {:captureState "check_state_150"} {:sourceloc} {:sourceloc_num 203} true;
    call {:check_id "check_state_150"} {:sourceloc} {:sourceloc_num 203} _CHECK_READ_$$d_epiCol(p13$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v213$1 := (if p13$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v213$1);
    v213$2 := (if p13$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v213$2);
    assert {:bad_pointer_access} {:sourceloc_num 204} {:thread 1} p14$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 204} {:thread 2} p14$2 ==> false;
    p15$1 := (if p2$1 && base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEndoColLoc else p15$1);
    p15$2 := (if p2$2 && base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEndoColLoc else p15$2);
    p16$1 := (if p2$1 && base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEndoColLoc else p16$1);
    p16$2 := (if p2$2 && base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEndoColLoc else p16$2);
    call {:sourceloc} {:sourceloc_num 205} _LOG_WRITE_$$d_tEndoColLoc(p15$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1), v213$1, $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc(p15$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2));
    assume {:do_not_predicate} {:check_id "check_state_149"} {:captureState "check_state_149"} {:sourceloc} {:sourceloc_num 205} true;
    call {:check_id "check_state_149"} {:sourceloc} {:sourceloc_num 205} _CHECK_WRITE_$$d_tEndoColLoc(p15$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2), v213$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEndoColLoc"} true;
    $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1)] := (if p15$1 then v213$1 else $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1)]);
    $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2)] := (if p15$2 then v213$2 else $$d_tEndoColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2)]);
    p17$1 := (if p16$1 && base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) == $arrayId$$d_tEpiColLoc else p17$1);
    p17$2 := (if p16$2 && base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) == $arrayId$$d_tEpiColLoc else p17$2);
    p18$1 := (if p16$1 && base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$1) != $arrayId$$d_tEpiColLoc else p18$1);
    p18$2 := (if p16$2 && base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc then base#MKPTR($d_unique_d_tColLoc.0$2) != $arrayId$$d_tEpiColLoc else p18$2);
    call {:sourceloc} {:sourceloc_num 206} _LOG_WRITE_$$d_tEpiColLoc(p17$1, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1), v213$1, $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc(p17$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2));
    assume {:do_not_predicate} {:check_id "check_state_148"} {:captureState "check_state_148"} {:sourceloc} {:sourceloc_num 206} true;
    call {:check_id "check_state_148"} {:sourceloc} {:sourceloc_num 206} _CHECK_WRITE_$$d_tEpiColLoc(p17$2, BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2), v213$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_tEpiColLoc"} true;
    $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1)] := (if p17$1 then v213$1 else $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$1), v211$1)]);
    $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2)] := (if p17$2 then v213$2 else $$d_tEpiColLoc[BV32_ADD(offset#MKPTR($d_unique_d_tColLoc.0$2), v211$2)]);
    assert {:bad_pointer_access} {:sourceloc_num 207} {:thread 1} p18$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 207} {:thread 2} p18$2 ==> false;
    $ei_new.0$1 := v101$1;
    $ei_new.0$2 := v101$2;
    p20$1 := true;
    p20$2 := true;
    assume {:captureState "loop_entry_state_47_0"} true;
    goto $7;

  $7:
    assume {:captureState "loop_head_state_47"} true;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 1} p20$1 ==> _b388 ==> p20$1 ==> $d_frame_no == 0bv32;
    assert {:tag "conditionsImpliedByEnabledness"} {:thread 2} p20$2 ==> _b388 ==> p20$2 ==> $d_frame_no == 0bv32;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 1} _b387 ==> $d_frame_no == 0bv32 && BV32_SLT($ei_new.0$1, $d_common.coerce20[32:24] ++ $d_common.coerce20[24:16] ++ $d_common.coerce20[16:8] ++ $d_common.coerce20[8:0]) ==> p20$1;
    assert {:do_not_predicate} {:tag "conditionsImplyingEnabledness"} {:thread 2} _b387 ==> $d_frame_no == 0bv32 && BV32_SLT($ei_new.0$2, $d_common.coerce20[32:24] ++ $d_common.coerce20[24:16] ++ $d_common.coerce20[16:8] ++ $d_common.coerce20[8:0]) ==> p20$2;
    assert {:tag "loopBound"} {:thread 1} p20$1 ==> _b386 ==> BV32_UGE($ei_new.0$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p20$2 ==> _b386 ==> BV32_UGE($ei_new.0$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p20$1 ==> _b385 ==> BV32_ULE($ei_new.0$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p20$2 ==> _b385 ==> BV32_ULE($ei_new.0$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p20$1 ==> _b384 ==> BV32_SGE($ei_new.0$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p20$2 ==> _b384 ==> BV32_SGE($ei_new.0$2, v101$2);
    assert {:tag "loopBound"} {:thread 1} p20$1 ==> _b383 ==> BV32_SLE($ei_new.0$1, v101$1);
    assert {:tag "loopBound"} {:thread 2} p20$2 ==> _b383 ==> BV32_SLE($ei_new.0$2, v101$2);
    assert {:tag "guardNonNeg"} {:thread 1} p20$1 ==> _b382 ==> BV32_SLE(0bv32, $ei_new.0$1);
    assert {:tag "guardNonNeg"} {:thread 2} p20$2 ==> _b382 ==> BV32_SLE(0bv32, $ei_new.0$2);
    assert {:tag "loopCounterIsStrided"} {:thread 1} p20$1 ==> _b381 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.0$1) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$1);
    assert {:tag "loopCounterIsStrided"} {:thread 2} p20$2 ==> _b381 ==> BV32_AND(BV32_SUB(256bv32, 1bv32), $ei_new.0$2) == BV32_AND(BV32_SUB(256bv32, 1bv32), local_id_x$2);
    assert {:block_sourceloc} {:sourceloc_num 209} p20$1 ==> true;
    v214$1 := (if p20$1 then $$d_common$80bv32$1 else v214$1);
    v214$2 := (if p20$2 then $$d_common$80bv32$2 else v214$2);
    v215$1 := (if p20$1 then $$d_common$81bv32$1 else v215$1);
    v215$2 := (if p20$2 then $$d_common$81bv32$2 else v215$2);
    v216$1 := (if p20$1 then $$d_common$82bv32$1 else v216$1);
    v216$2 := (if p20$2 then $$d_common$82bv32$2 else v216$2);
    v217$1 := (if p20$1 then $$d_common$83bv32$1 else v217$1);
    v217$2 := (if p20$2 then $$d_common$83bv32$2 else v217$2);
    v218$1 := (if p20$1 then BV32_SLT($ei_new.0$1, v217$1 ++ v216$1 ++ v215$1 ++ v214$1) else v218$1);
    v218$2 := (if p20$2 then BV32_SLT($ei_new.0$2, v217$2 ++ v216$2 ++ v215$2 ++ v214$2) else v218$2);
    p21$1 := false;
    p21$2 := false;
    p22$1 := false;
    p22$2 := false;
    p23$1 := false;
    p23$2 := false;
    p24$1 := false;
    p24$2 := false;
    p25$1 := false;
    p25$2 := false;
    p26$1 := false;
    p26$2 := false;
    p27$1 := false;
    p27$2 := false;
    p28$1 := false;
    p28$2 := false;
    p29$1 := false;
    p29$2 := false;
    p30$1 := false;
    p30$2 := false;
    p31$1 := false;
    p31$2 := false;
    p32$1 := false;
    p32$2 := false;
    p33$1 := false;
    p33$2 := false;
    p34$1 := false;
    p34$2 := false;
    p35$1 := false;
    p35$2 := false;
    p36$1 := false;
    p36$2 := false;
    p21$1 := (if p20$1 && v218$1 then v218$1 else p21$1);
    p21$2 := (if p20$2 && v218$2 then v218$2 else p21$2);
    p20$1 := (if p20$1 && !v218$1 then v218$1 else p20$1);
    p20$2 := (if p20$2 && !v218$2 then v218$2 else p20$2);
    v219$1 := (if p21$1 then $$d_common$72bv32$1 else v219$1);
    v219$2 := (if p21$2 then $$d_common$72bv32$2 else v219$2);
    v220$1 := (if p21$1 then $$d_common$73bv32$1 else v220$1);
    v220$2 := (if p21$2 then $$d_common$73bv32$2 else v220$2);
    v221$1 := (if p21$1 then $$d_common$74bv32$1 else v221$1);
    v221$2 := (if p21$2 then $$d_common$74bv32$2 else v221$2);
    v222$1 := (if p21$1 then $$d_common$75bv32$1 else v222$1);
    v222$2 := (if p21$2 then $$d_common$75bv32$2 else v222$2);
    v223$1 := (if p21$1 then $$d_common$72bv32$1 else v223$1);
    v223$2 := (if p21$2 then $$d_common$72bv32$2 else v223$2);
    v224$1 := (if p21$1 then $$d_common$73bv32$1 else v224$1);
    v224$2 := (if p21$2 then $$d_common$73bv32$2 else v224$2);
    v225$1 := (if p21$1 then $$d_common$74bv32$1 else v225$1);
    v225$2 := (if p21$2 then $$d_common$74bv32$2 else v225$2);
    v226$1 := (if p21$1 then $$d_common$75bv32$1 else v226$1);
    v226$2 := (if p21$2 then $$d_common$75bv32$2 else v226$2);
    v227$1 := (if p21$1 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.0$1, 1bv32), v226$1 ++ v225$1 ++ v224$1 ++ v223$1), 1bv32), 1bv32) else v227$1);
    v227$2 := (if p21$2 then BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD($ei_new.0$2, 1bv32), v226$2 ++ v225$2 ++ v224$2 ++ v223$2), 1bv32), 1bv32) else v227$2);
    v228$1 := (if p21$1 then $$d_common$72bv32$1 else v228$1);
    v228$2 := (if p21$2 then $$d_common$72bv32$2 else v228$2);
    v229$1 := (if p21$1 then $$d_common$73bv32$1 else v229$1);
    v229$2 := (if p21$2 then $$d_common$73bv32$2 else v229$2);
    v230$1 := (if p21$1 then $$d_common$74bv32$1 else v230$1);
    v230$2 := (if p21$2 then $$d_common$74bv32$2 else v230$2);
    v231$1 := (if p21$1 then $$d_common$75bv32$1 else v231$1);
    v231$2 := (if p21$2 then $$d_common$75bv32$2 else v231$2);
    v232$1 := (if p21$1 then BV32_SREM(BV32_ADD($ei_new.0$1, 1bv32), v231$1 ++ v230$1 ++ v229$1 ++ v228$1) == 0bv32 else v232$1);
    v232$2 := (if p21$2 then BV32_SREM(BV32_ADD($ei_new.0$2, 1bv32), v231$2 ++ v230$2 ++ v229$2 ++ v228$2) == 0bv32 else v232$2);
    p23$1 := (if p21$1 && v232$1 then v232$1 else p23$1);
    p23$2 := (if p21$2 && v232$2 then v232$2 else p23$2);
    p22$1 := (if p21$1 && !v232$1 then !v232$1 else p22$1);
    p22$2 := (if p21$2 && !v232$2 then !v232$2 else p22$2);
    $row.0$1, $col.0$1 := (if p22$1 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.0$1, 1bv32), v222$1 ++ v221$1 ++ v220$1 ++ v219$1), 1bv32) else $row.0$1), (if p22$1 then v227$1 else $col.0$1);
    $row.0$2, $col.0$2 := (if p22$2 then BV32_SUB(BV32_SREM(BV32_ADD($ei_new.0$2, 1bv32), v222$2 ++ v221$2 ++ v220$2 ++ v219$2), 1bv32) else $row.0$2), (if p22$2 then v227$2 else $col.0$2);
    v233$1 := (if p23$1 then $$d_common$72bv32$1 else v233$1);
    v233$2 := (if p23$2 then $$d_common$72bv32$2 else v233$2);
    v234$1 := (if p23$1 then $$d_common$73bv32$1 else v234$1);
    v234$2 := (if p23$2 then $$d_common$73bv32$2 else v234$2);
    v235$1 := (if p23$1 then $$d_common$74bv32$1 else v235$1);
    v235$2 := (if p23$2 then $$d_common$74bv32$2 else v235$2);
    v236$1 := (if p23$1 then $$d_common$75bv32$1 else v236$1);
    v236$2 := (if p23$2 then $$d_common$75bv32$2 else v236$2);
    $row.0$1, $col.0$1 := (if p23$1 then BV32_SUB(v236$1 ++ v235$1 ++ v234$1 ++ v233$1, 1bv32) else $row.0$1), (if p23$1 then BV32_SUB(v227$1, 1bv32) else $col.0$1);
    $row.0$2, $col.0$2 := (if p23$2 then BV32_SUB(v236$2 ++ v235$2 ++ v234$2 ++ v233$2, 1bv32) else $row.0$2), (if p23$2 then BV32_SUB(v227$2, 1bv32) else $col.0$2);
    p24$1 := (if p21$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_epiRow else p24$1);
    p24$2 := (if p21$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_epiRow else p24$2);
    p25$1 := (if p21$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_epiRow else p25$1);
    p25$2 := (if p21$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_epiRow else p25$2);
    call {:sourceloc} {:sourceloc_num 233} _LOG_READ_$$d_epiRow(p24$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_147"} {:captureState "check_state_147"} {:sourceloc} {:sourceloc_num 233} true;
    call {:check_id "check_state_147"} {:sourceloc} {:sourceloc_num 233} _CHECK_READ_$$d_epiRow(p24$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiRow"} true;
    v237$1 := (if p24$1 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v237$1);
    v237$2 := (if p24$2 then $$d_epiRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v237$2);
    p27$1 := (if p25$1 && base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) == $arrayId$$d_endoRow else p27$1);
    p27$2 := (if p25$2 && base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) == $arrayId$$d_endoRow else p27$2);
    p26$1 := (if p25$1 && base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$1) != $arrayId$$d_endoRow else p26$1);
    p26$2 := (if p25$2 && base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow then base#MKPTR($d_unique_d_Row.0$2) != $arrayId$$d_endoRow else p26$2);
    assert {:bad_pointer_access} {:sourceloc_num 235} {:thread 1} p26$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 235} {:thread 2} p26$2 ==> false;
    call {:sourceloc} {:sourceloc_num 234} _LOG_READ_$$d_endoRow(p27$1, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_146"} {:captureState "check_state_146"} {:sourceloc} {:sourceloc_num 234} true;
    call {:check_id "check_state_146"} {:sourceloc} {:sourceloc_num 234} _CHECK_READ_$$d_endoRow(p27$2, BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2), $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoRow"} true;
    v237$1 := (if p27$1 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$1), $d_unique_point_no.0$1)] else v237$1);
    v237$2 := (if p27$2 then $$d_endoRow[BV32_ADD(offset#MKPTR($d_unique_d_Row.0$2), $d_unique_point_no.0$2)] else v237$2);
    p28$1 := (if p21$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_endoCol else p28$1);
    p28$2 := (if p21$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_endoCol else p28$2);
    p29$1 := (if p21$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_endoCol else p29$1);
    p29$2 := (if p21$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_endoCol else p29$2);
    call {:sourceloc} {:sourceloc_num 236} _LOG_READ_$$d_endoCol(p28$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_145"} {:captureState "check_state_145"} {:sourceloc} {:sourceloc_num 236} true;
    call {:check_id "check_state_145"} {:sourceloc} {:sourceloc_num 236} _CHECK_READ_$$d_endoCol(p28$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_endoCol"} true;
    v238$1 := (if p28$1 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v238$1);
    v238$2 := (if p28$2 then $$d_endoCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v238$2);
    p31$1 := (if p29$1 && base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) == $arrayId$$d_epiCol else p31$1);
    p31$2 := (if p29$2 && base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) == $arrayId$$d_epiCol else p31$2);
    p30$1 := (if p29$1 && base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$1) != $arrayId$$d_epiCol else p30$1);
    p30$2 := (if p29$2 && base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol then base#MKPTR($d_unique_d_Col.0$2) != $arrayId$$d_epiCol else p30$2);
    assert {:bad_pointer_access} {:sourceloc_num 238} {:thread 1} p30$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 238} {:thread 2} p30$2 ==> false;
    call {:sourceloc} {:sourceloc_num 237} _LOG_READ_$$d_epiCol(p31$1, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)]);
    assume {:do_not_predicate} {:check_id "check_state_144"} {:captureState "check_state_144"} {:sourceloc} {:sourceloc_num 237} true;
    call {:check_id "check_state_144"} {:sourceloc} {:sourceloc_num 237} _CHECK_READ_$$d_epiCol(p31$2, BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2), $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$d_epiCol"} true;
    v238$1 := (if p31$1 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$1), $d_unique_point_no.0$1)] else v238$1);
    v238$2 := (if p31$2 then $$d_epiCol[BV32_ADD(offset#MKPTR($d_unique_d_Col.0$2), $d_unique_point_no.0$2)] else v238$2);
    v239$1 := (if p21$1 then $$d_common$36bv32$1 else v239$1);
    v239$2 := (if p21$2 then $$d_common$36bv32$2 else v239$2);
    v240$1 := (if p21$1 then $$d_common$37bv32$1 else v240$1);
    v240$2 := (if p21$2 then $$d_common$37bv32$2 else v240$2);
    v241$1 := (if p21$1 then $$d_common$38bv32$1 else v241$1);
    v241$2 := (if p21$2 then $$d_common$38bv32$2 else v241$2);
    v242$1 := (if p21$1 then $$d_common$39bv32$1 else v242$1);
    v242$2 := (if p21$2 then $$d_common$39bv32$2 else v242$2);
    havoc _HAVOC_bv32$1, _HAVOC_bv32$2;
    v243$1 := (if p21$1 then _HAVOC_bv32$1 else v243$1);
    v243$2 := (if p21$2 then _HAVOC_bv32$2 else v243$2);
    v244$1 := (if p21$1 then $$d_common$72bv32$1 else v244$1);
    v244$2 := (if p21$2 then $$d_common$72bv32$2 else v244$2);
    v245$1 := (if p21$1 then $$d_common$73bv32$1 else v245$1);
    v245$2 := (if p21$2 then $$d_common$73bv32$2 else v245$2);
    v246$1 := (if p21$1 then $$d_common$74bv32$1 else v246$1);
    v246$2 := (if p21$2 then $$d_common$74bv32$2 else v246$2);
    v247$1 := (if p21$1 then $$d_common$75bv32$1 else v247$1);
    v247$2 := (if p21$2 then $$d_common$75bv32$2 else v247$2);
    p32$1 := (if p21$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_endoT then base#MKPTR($d_in.0$1) == $arrayId$$d_endoT else p32$1);
    p32$2 := (if p21$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_endoT then base#MKPTR($d_in.0$2) == $arrayId$$d_endoT else p32$2);
    p33$1 := (if p21$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_endoT then base#MKPTR($d_in.0$1) != $arrayId$$d_endoT else p33$1);
    p33$2 := (if p21$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_endoT then base#MKPTR($d_in.0$2) != $arrayId$$d_endoT else p33$2);
    call {:sourceloc} {:sourceloc_num 248} _LOG_WRITE_$$d_endoT(p32$1, BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1)), v243$1, $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoT(p32$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2)));
    assume {:do_not_predicate} {:check_id "check_state_143"} {:captureState "check_state_143"} {:sourceloc} {:sourceloc_num 248} true;
    call {:check_id "check_state_143"} {:sourceloc} {:sourceloc_num 248} _CHECK_WRITE_$$d_endoT(p32$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2)), v243$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_endoT"} true;
    $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1))] := (if p32$1 then v243$1 else $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1))]);
    $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2))] := (if p32$2 then v243$2 else $$d_endoT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2))]);
    p35$1 := (if p33$1 && base#MKPTR($d_in.0$1) == $arrayId$$d_epiT then base#MKPTR($d_in.0$1) == $arrayId$$d_epiT else p35$1);
    p35$2 := (if p33$2 && base#MKPTR($d_in.0$2) == $arrayId$$d_epiT then base#MKPTR($d_in.0$2) == $arrayId$$d_epiT else p35$2);
    p34$1 := (if p33$1 && base#MKPTR($d_in.0$1) != $arrayId$$d_epiT then base#MKPTR($d_in.0$1) != $arrayId$$d_epiT else p34$1);
    p34$2 := (if p33$2 && base#MKPTR($d_in.0$2) != $arrayId$$d_epiT then base#MKPTR($d_in.0$2) != $arrayId$$d_epiT else p34$2);
    assert {:bad_pointer_access} {:sourceloc_num 250} {:thread 1} p34$1 ==> false;
    assert {:bad_pointer_access} {:sourceloc_num 250} {:thread 2} p34$2 ==> false;
    call {:sourceloc} {:sourceloc_num 249} _LOG_WRITE_$$d_epiT(p35$1, BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1)), v243$1, $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiT(p35$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2)));
    assume {:do_not_predicate} {:check_id "check_state_142"} {:captureState "check_state_142"} {:sourceloc} {:sourceloc_num 249} true;
    call {:check_id "check_state_142"} {:sourceloc} {:sourceloc_num 249} _CHECK_WRITE_$$d_epiT(p35$2, BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2)), v243$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$d_epiT"} true;
    $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1))] := (if p35$1 then v243$1 else $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$1), BV32_ADD(BV32_MUL($col.0$1, v247$1 ++ v246$1 ++ v245$1 ++ v244$1), $row.0$1))]);
    $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2))] := (if p35$2 then v243$2 else $$d_epiT[BV32_ADD(offset#MKPTR($d_in.0$2), BV32_ADD(BV32_MUL($col.0$2, v247$2 ++ v246$2 ++ v245$2 ++ v244$2), $row.0$2))]);
    $ei_new.0$1 := (if p21$1 then BV32_ADD($ei_new.0$1, 256bv32) else $ei_new.0$1);
    $ei_new.0$2 := (if p21$2 then BV32_ADD($ei_new.0$2, 256bv32) else $ei_new.0$2);
    p20$1 := (if p21$1 then true else p20$1);
    p20$2 := (if p21$2 then true else p20$2);
    goto $7.backedge, __partitioned_block_$7.tail_0;

  __partitioned_block_$7.tail_0:
    assume !p20$1 && !p20$2;
    goto __partitioned_block_$7.tail_1;

  __partitioned_block_$7.tail_1:
    call {:sourceloc_num 252} $bugle_barrier_duplicated_40(1bv1, 1bv1);
    goto $12;

  $7.backedge:
    assume {:backedge} p20$1 || p20$2;
    assume {:captureState "loop_back_edge_state_47_0"} true;
    goto $7;
}



axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 51bv32 then 1bv1 else 0bv1) != 0bv1;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_0($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_1($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_2($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_3($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_4($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_5($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_6($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_7($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_8($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_9($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_10($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_11($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_12($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_13($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_14($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_15($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_16($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_17($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_18($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_19($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_20($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_21($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_22($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_23($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_24($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_25($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_26($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_27($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_28($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_29($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_30($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_31($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_32($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_33($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_34($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_35($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_36($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_37($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_38($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_39($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_40($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 1bv1;
  modifies $$d_endoRow, $$d_endoCol, $$d_tEndoRowLoc, $$d_tEndoColLoc, $$d_epiRow, $$d_epiCol, $$d_tEpiRowLoc, $$d_tEpiColLoc, $$d_endoT, $$d_epiT, $$d_in2_all, $$d_conv_all, $$d_in2_pad_cumv_all, $$d_in2_pad_cumv_sel_all, $$d_in2_sub_cumh_all, $$d_in2_sub_cumh_sel_all, $$d_in2_sub2_all, $$d_in2_sqr_all, $$d_in2_sqr_sub2_all, $$d_in_sqr_all, $$d_tMask_all, $$d_mask_conv_all, $$d_in_mod_temp_all, $$in_partial_sum_all, $$in_sqr_partial_sum_all, $$par_max_val_all, $$par_max_coo_all, $$in_final_sum_all, $$in_sqr_final_sum_all, $$denomT_all, _TRACKING;



var $$d_common$0bv32$1: bv8;

var $$d_common$0bv32$2: bv8;

var $$d_common$1bv32$1: bv8;

var $$d_common$1bv32$2: bv8;

var $$d_common$2bv32$1: bv8;

var $$d_common$2bv32$2: bv8;

var $$d_common$3bv32$1: bv8;

var $$d_common$3bv32$2: bv8;

var $$d_common$4bv32$1: bv8;

var $$d_common$4bv32$2: bv8;

var $$d_common$5bv32$1: bv8;

var $$d_common$5bv32$2: bv8;

var $$d_common$6bv32$1: bv8;

var $$d_common$6bv32$2: bv8;

var $$d_common$7bv32$1: bv8;

var $$d_common$7bv32$2: bv8;

var $$d_common$8bv32$1: bv8;

var $$d_common$8bv32$2: bv8;

var $$d_common$9bv32$1: bv8;

var $$d_common$9bv32$2: bv8;

var $$d_common$10bv32$1: bv8;

var $$d_common$10bv32$2: bv8;

var $$d_common$11bv32$1: bv8;

var $$d_common$11bv32$2: bv8;

var $$d_common$12bv32$1: bv8;

var $$d_common$12bv32$2: bv8;

var $$d_common$13bv32$1: bv8;

var $$d_common$13bv32$2: bv8;

var $$d_common$14bv32$1: bv8;

var $$d_common$14bv32$2: bv8;

var $$d_common$15bv32$1: bv8;

var $$d_common$15bv32$2: bv8;

var $$d_common$16bv32$1: bv8;

var $$d_common$16bv32$2: bv8;

var $$d_common$17bv32$1: bv8;

var $$d_common$17bv32$2: bv8;

var $$d_common$18bv32$1: bv8;

var $$d_common$18bv32$2: bv8;

var $$d_common$19bv32$1: bv8;

var $$d_common$19bv32$2: bv8;

var $$d_common$20bv32$1: bv8;

var $$d_common$20bv32$2: bv8;

var $$d_common$21bv32$1: bv8;

var $$d_common$21bv32$2: bv8;

var $$d_common$22bv32$1: bv8;

var $$d_common$22bv32$2: bv8;

var $$d_common$23bv32$1: bv8;

var $$d_common$23bv32$2: bv8;

var $$d_common$24bv32$1: bv8;

var $$d_common$24bv32$2: bv8;

var $$d_common$25bv32$1: bv8;

var $$d_common$25bv32$2: bv8;

var $$d_common$26bv32$1: bv8;

var $$d_common$26bv32$2: bv8;

var $$d_common$27bv32$1: bv8;

var $$d_common$27bv32$2: bv8;

var $$d_common$28bv32$1: bv8;

var $$d_common$28bv32$2: bv8;

var $$d_common$29bv32$1: bv8;

var $$d_common$29bv32$2: bv8;

var $$d_common$30bv32$1: bv8;

var $$d_common$30bv32$2: bv8;

var $$d_common$31bv32$1: bv8;

var $$d_common$31bv32$2: bv8;

var $$d_common$32bv32$1: bv8;

var $$d_common$32bv32$2: bv8;

var $$d_common$33bv32$1: bv8;

var $$d_common$33bv32$2: bv8;

var $$d_common$34bv32$1: bv8;

var $$d_common$34bv32$2: bv8;

var $$d_common$35bv32$1: bv8;

var $$d_common$35bv32$2: bv8;

var $$d_common$36bv32$1: bv8;

var $$d_common$36bv32$2: bv8;

var $$d_common$37bv32$1: bv8;

var $$d_common$37bv32$2: bv8;

var $$d_common$38bv32$1: bv8;

var $$d_common$38bv32$2: bv8;

var $$d_common$39bv32$1: bv8;

var $$d_common$39bv32$2: bv8;

var $$d_common$40bv32$1: bv8;

var $$d_common$40bv32$2: bv8;

var $$d_common$41bv32$1: bv8;

var $$d_common$41bv32$2: bv8;

var $$d_common$42bv32$1: bv8;

var $$d_common$42bv32$2: bv8;

var $$d_common$43bv32$1: bv8;

var $$d_common$43bv32$2: bv8;

var $$d_common$44bv32$1: bv8;

var $$d_common$44bv32$2: bv8;

var $$d_common$45bv32$1: bv8;

var $$d_common$45bv32$2: bv8;

var $$d_common$46bv32$1: bv8;

var $$d_common$46bv32$2: bv8;

var $$d_common$47bv32$1: bv8;

var $$d_common$47bv32$2: bv8;

var $$d_common$48bv32$1: bv8;

var $$d_common$48bv32$2: bv8;

var $$d_common$49bv32$1: bv8;

var $$d_common$49bv32$2: bv8;

var $$d_common$50bv32$1: bv8;

var $$d_common$50bv32$2: bv8;

var $$d_common$51bv32$1: bv8;

var $$d_common$51bv32$2: bv8;

var $$d_common$52bv32$1: bv8;

var $$d_common$52bv32$2: bv8;

var $$d_common$53bv32$1: bv8;

var $$d_common$53bv32$2: bv8;

var $$d_common$54bv32$1: bv8;

var $$d_common$54bv32$2: bv8;

var $$d_common$55bv32$1: bv8;

var $$d_common$55bv32$2: bv8;

var $$d_common$56bv32$1: bv8;

var $$d_common$56bv32$2: bv8;

var $$d_common$57bv32$1: bv8;

var $$d_common$57bv32$2: bv8;

var $$d_common$58bv32$1: bv8;

var $$d_common$58bv32$2: bv8;

var $$d_common$59bv32$1: bv8;

var $$d_common$59bv32$2: bv8;

var $$d_common$60bv32$1: bv8;

var $$d_common$60bv32$2: bv8;

var $$d_common$61bv32$1: bv8;

var $$d_common$61bv32$2: bv8;

var $$d_common$62bv32$1: bv8;

var $$d_common$62bv32$2: bv8;

var $$d_common$63bv32$1: bv8;

var $$d_common$63bv32$2: bv8;

var $$d_common$64bv32$1: bv8;

var $$d_common$64bv32$2: bv8;

var $$d_common$65bv32$1: bv8;

var $$d_common$65bv32$2: bv8;

var $$d_common$66bv32$1: bv8;

var $$d_common$66bv32$2: bv8;

var $$d_common$67bv32$1: bv8;

var $$d_common$67bv32$2: bv8;

var $$d_common$68bv32$1: bv8;

var $$d_common$68bv32$2: bv8;

var $$d_common$69bv32$1: bv8;

var $$d_common$69bv32$2: bv8;

var $$d_common$70bv32$1: bv8;

var $$d_common$70bv32$2: bv8;

var $$d_common$71bv32$1: bv8;

var $$d_common$71bv32$2: bv8;

var $$d_common$72bv32$1: bv8;

var $$d_common$72bv32$2: bv8;

var $$d_common$73bv32$1: bv8;

var $$d_common$73bv32$2: bv8;

var $$d_common$74bv32$1: bv8;

var $$d_common$74bv32$2: bv8;

var $$d_common$75bv32$1: bv8;

var $$d_common$75bv32$2: bv8;

var $$d_common$76bv32$1: bv8;

var $$d_common$76bv32$2: bv8;

var $$d_common$77bv32$1: bv8;

var $$d_common$77bv32$2: bv8;

var $$d_common$78bv32$1: bv8;

var $$d_common$78bv32$2: bv8;

var $$d_common$79bv32$1: bv8;

var $$d_common$79bv32$2: bv8;

var $$d_common$80bv32$1: bv8;

var $$d_common$80bv32$2: bv8;

var $$d_common$81bv32$1: bv8;

var $$d_common$81bv32$2: bv8;

var $$d_common$82bv32$1: bv8;

var $$d_common$82bv32$2: bv8;

var $$d_common$83bv32$1: bv8;

var $$d_common$83bv32$2: bv8;

var $$d_common$84bv32$1: bv8;

var $$d_common$84bv32$2: bv8;

var $$d_common$85bv32$1: bv8;

var $$d_common$85bv32$2: bv8;

var $$d_common$86bv32$1: bv8;

var $$d_common$86bv32$2: bv8;

var $$d_common$87bv32$1: bv8;

var $$d_common$87bv32$2: bv8;

var $$d_common$88bv32$1: bv8;

var $$d_common$88bv32$2: bv8;

var $$d_common$89bv32$1: bv8;

var $$d_common$89bv32$2: bv8;

var $$d_common$90bv32$1: bv8;

var $$d_common$90bv32$2: bv8;

var $$d_common$91bv32$1: bv8;

var $$d_common$91bv32$2: bv8;

var $$d_common$92bv32$1: bv8;

var $$d_common$92bv32$2: bv8;

var $$d_common$93bv32$1: bv8;

var $$d_common$93bv32$2: bv8;

var $$d_common$94bv32$1: bv8;

var $$d_common$94bv32$2: bv8;

var $$d_common$95bv32$1: bv8;

var $$d_common$95bv32$2: bv8;

var $$d_common$96bv32$1: bv8;

var $$d_common$96bv32$2: bv8;

var $$d_common$97bv32$1: bv8;

var $$d_common$97bv32$2: bv8;

var $$d_common$98bv32$1: bv8;

var $$d_common$98bv32$2: bv8;

var $$d_common$99bv32$1: bv8;

var $$d_common$99bv32$2: bv8;

var $$d_common$100bv32$1: bv8;

var $$d_common$100bv32$2: bv8;

var $$d_common$101bv32$1: bv8;

var $$d_common$101bv32$2: bv8;

var $$d_common$102bv32$1: bv8;

var $$d_common$102bv32$2: bv8;

var $$d_common$103bv32$1: bv8;

var $$d_common$103bv32$2: bv8;

var $$d_common$104bv32$1: bv8;

var $$d_common$104bv32$2: bv8;

var $$d_common$105bv32$1: bv8;

var $$d_common$105bv32$2: bv8;

var $$d_common$106bv32$1: bv8;

var $$d_common$106bv32$2: bv8;

var $$d_common$107bv32$1: bv8;

var $$d_common$107bv32$2: bv8;

var $$d_common$108bv32$1: bv8;

var $$d_common$108bv32$2: bv8;

var $$d_common$109bv32$1: bv8;

var $$d_common$109bv32$2: bv8;

var $$d_common$110bv32$1: bv8;

var $$d_common$110bv32$2: bv8;

var $$d_common$111bv32$1: bv8;

var $$d_common$111bv32$2: bv8;

var $$d_common$112bv32$1: bv8;

var $$d_common$112bv32$2: bv8;

var $$d_common$113bv32$1: bv8;

var $$d_common$113bv32$2: bv8;

var $$d_common$114bv32$1: bv8;

var $$d_common$114bv32$2: bv8;

var $$d_common$115bv32$1: bv8;

var $$d_common$115bv32$2: bv8;

var $$d_common$116bv32$1: bv8;

var $$d_common$116bv32$2: bv8;

var $$d_common$117bv32$1: bv8;

var $$d_common$117bv32$2: bv8;

var $$d_common$118bv32$1: bv8;

var $$d_common$118bv32$2: bv8;

var $$d_common$119bv32$1: bv8;

var $$d_common$119bv32$2: bv8;

var $$d_common$120bv32$1: bv8;

var $$d_common$120bv32$2: bv8;

var $$d_common$121bv32$1: bv8;

var $$d_common$121bv32$2: bv8;

var $$d_common$122bv32$1: bv8;

var $$d_common$122bv32$2: bv8;

var $$d_common$123bv32$1: bv8;

var $$d_common$123bv32$2: bv8;

var $$d_common$124bv32$1: bv8;

var $$d_common$124bv32$2: bv8;

var $$d_common$125bv32$1: bv8;

var $$d_common$125bv32$2: bv8;

var $$d_common$126bv32$1: bv8;

var $$d_common$126bv32$2: bv8;

var $$d_common$127bv32$1: bv8;

var $$d_common$127bv32$2: bv8;

var $$d_common$128bv32$1: bv8;

var $$d_common$128bv32$2: bv8;

var $$d_common$129bv32$1: bv8;

var $$d_common$129bv32$2: bv8;

var $$d_common$130bv32$1: bv8;

var $$d_common$130bv32$2: bv8;

var $$d_common$131bv32$1: bv8;

var $$d_common$131bv32$2: bv8;

var $$d_common$132bv32$1: bv8;

var $$d_common$132bv32$2: bv8;

var $$d_common$133bv32$1: bv8;

var $$d_common$133bv32$2: bv8;

var $$d_common$134bv32$1: bv8;

var $$d_common$134bv32$2: bv8;

var $$d_common$135bv32$1: bv8;

var $$d_common$135bv32$2: bv8;

var $$d_common$136bv32$1: bv8;

var $$d_common$136bv32$2: bv8;

var $$d_common$137bv32$1: bv8;

var $$d_common$137bv32$2: bv8;

var $$d_common$138bv32$1: bv8;

var $$d_common$138bv32$2: bv8;

var $$d_common$139bv32$1: bv8;

var $$d_common$139bv32$2: bv8;

var $$d_common$140bv32$1: bv8;

var $$d_common$140bv32$2: bv8;

var $$d_common$141bv32$1: bv8;

var $$d_common$141bv32$2: bv8;

var $$d_common$142bv32$1: bv8;

var $$d_common$142bv32$2: bv8;

var $$d_common$143bv32$1: bv8;

var $$d_common$143bv32$2: bv8;

var $$d_common$144bv32$1: bv8;

var $$d_common$144bv32$2: bv8;

var $$d_common$145bv32$1: bv8;

var $$d_common$145bv32$2: bv8;

var $$d_common$146bv32$1: bv8;

var $$d_common$146bv32$2: bv8;

var $$d_common$147bv32$1: bv8;

var $$d_common$147bv32$2: bv8;

var $$d_common$148bv32$1: bv8;

var $$d_common$148bv32$2: bv8;

var $$d_common$149bv32$1: bv8;

var $$d_common$149bv32$2: bv8;

var $$d_common$150bv32$1: bv8;

var $$d_common$150bv32$2: bv8;

var $$d_common$151bv32$1: bv8;

var $$d_common$151bv32$2: bv8;

var $$d_common$152bv32$1: bv8;

var $$d_common$152bv32$2: bv8;

var $$d_common$153bv32$1: bv8;

var $$d_common$153bv32$2: bv8;

var $$d_common$154bv32$1: bv8;

var $$d_common$154bv32$2: bv8;

var $$d_common$155bv32$1: bv8;

var $$d_common$155bv32$2: bv8;

var $$d_common$156bv32$1: bv8;

var $$d_common$156bv32$2: bv8;

var $$d_common$157bv32$1: bv8;

var $$d_common$157bv32$2: bv8;

var $$d_common$158bv32$1: bv8;

var $$d_common$158bv32$2: bv8;

var $$d_common$159bv32$1: bv8;

var $$d_common$159bv32$2: bv8;

var $$d_common$160bv32$1: bv8;

var $$d_common$160bv32$2: bv8;

var $$d_common$161bv32$1: bv8;

var $$d_common$161bv32$2: bv8;

var $$d_common$162bv32$1: bv8;

var $$d_common$162bv32$2: bv8;

var $$d_common$163bv32$1: bv8;

var $$d_common$163bv32$2: bv8;

var $$d_common$164bv32$1: bv8;

var $$d_common$164bv32$2: bv8;

var $$d_common$165bv32$1: bv8;

var $$d_common$165bv32$2: bv8;

var $$d_common$166bv32$1: bv8;

var $$d_common$166bv32$2: bv8;

var $$d_common$167bv32$1: bv8;

var $$d_common$167bv32$2: bv8;

var $$d_common$168bv32$1: bv8;

var $$d_common$168bv32$2: bv8;

var $$d_common$169bv32$1: bv8;

var $$d_common$169bv32$2: bv8;

var $$d_common$170bv32$1: bv8;

var $$d_common$170bv32$2: bv8;

var $$d_common$171bv32$1: bv8;

var $$d_common$171bv32$2: bv8;

var $$d_common$172bv32$1: bv8;

var $$d_common$172bv32$2: bv8;

var $$d_common$173bv32$1: bv8;

var $$d_common$173bv32$2: bv8;

var $$d_common$174bv32$1: bv8;

var $$d_common$174bv32$2: bv8;

var $$d_common$175bv32$1: bv8;

var $$d_common$175bv32$2: bv8;

var $$d_common$176bv32$1: bv8;

var $$d_common$176bv32$2: bv8;

var $$d_common$177bv32$1: bv8;

var $$d_common$177bv32$2: bv8;

var $$d_common$178bv32$1: bv8;

var $$d_common$178bv32$2: bv8;

var $$d_common$179bv32$1: bv8;

var $$d_common$179bv32$2: bv8;

var $$d_common$180bv32$1: bv8;

var $$d_common$180bv32$2: bv8;

var $$d_common$181bv32$1: bv8;

var $$d_common$181bv32$2: bv8;

var $$d_common$182bv32$1: bv8;

var $$d_common$182bv32$2: bv8;

var $$d_common$183bv32$1: bv8;

var $$d_common$183bv32$2: bv8;

var $$d_common$184bv32$1: bv8;

var $$d_common$184bv32$2: bv8;

var $$d_common$185bv32$1: bv8;

var $$d_common$185bv32$2: bv8;

var $$d_common$186bv32$1: bv8;

var $$d_common$186bv32$2: bv8;

var $$d_common$187bv32$1: bv8;

var $$d_common$187bv32$2: bv8;

var $$d_common$188bv32$1: bv8;

var $$d_common$188bv32$2: bv8;

var $$d_common$189bv32$1: bv8;

var $$d_common$189bv32$2: bv8;

var $$d_common$190bv32$1: bv8;

var $$d_common$190bv32$2: bv8;

var $$d_common$191bv32$1: bv8;

var $$d_common$191bv32$2: bv8;

var $$d_common$192bv32$1: bv8;

var $$d_common$192bv32$2: bv8;

var $$d_common$193bv32$1: bv8;

var $$d_common$193bv32$2: bv8;

var $$d_common$194bv32$1: bv8;

var $$d_common$194bv32$2: bv8;

var $$d_common$195bv32$1: bv8;

var $$d_common$195bv32$2: bv8;

var $$d_common$196bv32$1: bv8;

var $$d_common$196bv32$2: bv8;

var $$d_common$197bv32$1: bv8;

var $$d_common$197bv32$2: bv8;

var $$d_common$198bv32$1: bv8;

var $$d_common$198bv32$2: bv8;

var $$d_common$199bv32$1: bv8;

var $$d_common$199bv32$2: bv8;

var $$d_common$200bv32$1: bv8;

var $$d_common$200bv32$2: bv8;

var $$d_common$201bv32$1: bv8;

var $$d_common$201bv32$2: bv8;

var $$d_common$202bv32$1: bv8;

var $$d_common$202bv32$2: bv8;

var $$d_common$203bv32$1: bv8;

var $$d_common$203bv32$2: bv8;

var $$d_common$204bv32$1: bv8;

var $$d_common$204bv32$2: bv8;

var $$d_common$205bv32$1: bv8;

var $$d_common$205bv32$2: bv8;

var $$d_common$206bv32$1: bv8;

var $$d_common$206bv32$2: bv8;

var $$d_common$207bv32$1: bv8;

var $$d_common$207bv32$2: bv8;

var $$d_common$208bv32$1: bv8;

var $$d_common$208bv32$2: bv8;

var $$d_common$209bv32$1: bv8;

var $$d_common$209bv32$2: bv8;

var $$d_common$210bv32$1: bv8;

var $$d_common$210bv32$2: bv8;

var $$d_common$211bv32$1: bv8;

var $$d_common$211bv32$2: bv8;

var $$d_common$212bv32$1: bv8;

var $$d_common$212bv32$2: bv8;

var $$d_common$213bv32$1: bv8;

var $$d_common$213bv32$2: bv8;

var $$d_common$214bv32$1: bv8;

var $$d_common$214bv32$2: bv8;

var $$d_common$215bv32$1: bv8;

var $$d_common$215bv32$2: bv8;

var $$d_common$216bv32$1: bv8;

var $$d_common$216bv32$2: bv8;

var $$d_common$217bv32$1: bv8;

var $$d_common$217bv32$2: bv8;

var $$d_common$218bv32$1: bv8;

var $$d_common$218bv32$2: bv8;

var $$d_common$219bv32$1: bv8;

var $$d_common$219bv32$2: bv8;

var $$d_common$220bv32$1: bv8;

var $$d_common$220bv32$2: bv8;

var $$d_common$221bv32$1: bv8;

var $$d_common$221bv32$2: bv8;

var $$d_common$222bv32$1: bv8;

var $$d_common$222bv32$2: bv8;

var $$d_common$223bv32$1: bv8;

var $$d_common$223bv32$2: bv8;

var $$d_common$224bv32$1: bv8;

var $$d_common$224bv32$2: bv8;

var $$d_common$225bv32$1: bv8;

var $$d_common$225bv32$2: bv8;

var $$d_common$226bv32$1: bv8;

var $$d_common$226bv32$2: bv8;

var $$d_common$227bv32$1: bv8;

var $$d_common$227bv32$2: bv8;

var $$d_common$228bv32$1: bv8;

var $$d_common$228bv32$2: bv8;

var $$d_common$229bv32$1: bv8;

var $$d_common$229bv32$2: bv8;

var $$d_common$230bv32$1: bv8;

var $$d_common$230bv32$2: bv8;

var $$d_common$231bv32$1: bv8;

var $$d_common$231bv32$2: bv8;

var $$d_common$232bv32$1: bv8;

var $$d_common$232bv32$2: bv8;

var $$d_common$233bv32$1: bv8;

var $$d_common$233bv32$2: bv8;

var $$d_common$234bv32$1: bv8;

var $$d_common$234bv32$2: bv8;

var $$d_common$235bv32$1: bv8;

var $$d_common$235bv32$2: bv8;

var $$d_common$236bv32$1: bv8;

var $$d_common$236bv32$2: bv8;

var $$d_common$237bv32$1: bv8;

var $$d_common$237bv32$2: bv8;

var $$d_common$238bv32$1: bv8;

var $$d_common$238bv32$2: bv8;

var $$d_common$239bv32$1: bv8;

var $$d_common$239bv32$2: bv8;

var $$d_common$240bv32$1: bv8;

var $$d_common$240bv32$2: bv8;

var $$d_common$241bv32$1: bv8;

var $$d_common$241bv32$2: bv8;

var $$d_common$242bv32$1: bv8;

var $$d_common$242bv32$2: bv8;

var $$d_common$243bv32$1: bv8;

var $$d_common$243bv32$2: bv8;

var $$d_common$244bv32$1: bv8;

var $$d_common$244bv32$2: bv8;

var $$d_common$245bv32$1: bv8;

var $$d_common$245bv32$2: bv8;

var $$d_common$246bv32$1: bv8;

var $$d_common$246bv32$2: bv8;

var $$d_common$247bv32$1: bv8;

var $$d_common$247bv32$2: bv8;

var $$d_common$248bv32$1: bv8;

var $$d_common$248bv32$2: bv8;

var $$d_common$249bv32$1: bv8;

var $$d_common$249bv32$2: bv8;

var $$d_common$250bv32$1: bv8;

var $$d_common$250bv32$2: bv8;

var $$d_common$251bv32$1: bv8;

var $$d_common$251bv32$2: bv8;

var $$d_common$252bv32$1: bv8;

var $$d_common$252bv32$2: bv8;

var $$d_common$253bv32$1: bv8;

var $$d_common$253bv32$2: bv8;

var $$d_common$254bv32$1: bv8;

var $$d_common$254bv32$2: bv8;

var $$d_common$255bv32$1: bv8;

var $$d_common$255bv32$2: bv8;

var $$d_common$256bv32$1: bv8;

var $$d_common$256bv32$2: bv8;

var $$d_common$257bv32$1: bv8;

var $$d_common$257bv32$2: bv8;

var $$d_common$258bv32$1: bv8;

var $$d_common$258bv32$2: bv8;

var $$d_common$259bv32$1: bv8;

var $$d_common$259bv32$2: bv8;

var $$d_common$260bv32$1: bv8;

var $$d_common$260bv32$2: bv8;

var $$d_common$261bv32$1: bv8;

var $$d_common$261bv32$2: bv8;

var $$d_common$262bv32$1: bv8;

var $$d_common$262bv32$2: bv8;

var $$d_common$263bv32$1: bv8;

var $$d_common$263bv32$2: bv8;

var $$d_common$264bv32$1: bv8;

var $$d_common$264bv32$2: bv8;

var $$d_common$265bv32$1: bv8;

var $$d_common$265bv32$2: bv8;

var $$d_common$266bv32$1: bv8;

var $$d_common$266bv32$2: bv8;

var $$d_common$267bv32$1: bv8;

var $$d_common$267bv32$2: bv8;

var $$d_common$268bv32$1: bv8;

var $$d_common$268bv32$2: bv8;

var $$d_common$269bv32$1: bv8;

var $$d_common$269bv32$2: bv8;

var $$d_common$270bv32$1: bv8;

var $$d_common$270bv32$2: bv8;

var $$d_common$271bv32$1: bv8;

var $$d_common$271bv32$2: bv8;

var $$d_common$272bv32$1: bv8;

var $$d_common$272bv32$2: bv8;

var $$d_common$273bv32$1: bv8;

var $$d_common$273bv32$2: bv8;

var $$d_common$274bv32$1: bv8;

var $$d_common$274bv32$2: bv8;

var $$d_common$275bv32$1: bv8;

var $$d_common$275bv32$2: bv8;

var $$d_common$276bv32$1: bv8;

var $$d_common$276bv32$2: bv8;

var $$d_common$277bv32$1: bv8;

var $$d_common$277bv32$2: bv8;

var $$d_common$278bv32$1: bv8;

var $$d_common$278bv32$2: bv8;

var $$d_common$279bv32$1: bv8;

var $$d_common$279bv32$2: bv8;

var $$d_common$280bv32$1: bv8;

var $$d_common$280bv32$2: bv8;

var $$d_common$281bv32$1: bv8;

var $$d_common$281bv32$2: bv8;

var $$d_common$282bv32$1: bv8;

var $$d_common$282bv32$2: bv8;

var $$d_common$283bv32$1: bv8;

var $$d_common$283bv32$2: bv8;

var $$d_common$284bv32$1: bv8;

var $$d_common$284bv32$2: bv8;

var $$d_common$285bv32$1: bv8;

var $$d_common$285bv32$2: bv8;

var $$d_common$286bv32$1: bv8;

var $$d_common$286bv32$2: bv8;

var $$d_common$287bv32$1: bv8;

var $$d_common$287bv32$2: bv8;

var $$d_common$288bv32$1: bv8;

var $$d_common$288bv32$2: bv8;

var $$d_common$289bv32$1: bv8;

var $$d_common$289bv32$2: bv8;

var $$d_common$290bv32$1: bv8;

var $$d_common$290bv32$2: bv8;

var $$d_common$291bv32$1: bv8;

var $$d_common$291bv32$2: bv8;

var $$d_common$292bv32$1: bv8;

var $$d_common$292bv32$2: bv8;

var $$d_common$293bv32$1: bv8;

var $$d_common$293bv32$2: bv8;

var $$d_common$294bv32$1: bv8;

var $$d_common$294bv32$2: bv8;

var $$d_common$295bv32$1: bv8;

var $$d_common$295bv32$2: bv8;

var $$d_common$296bv32$1: bv8;

var $$d_common$296bv32$2: bv8;

var $$d_common$297bv32$1: bv8;

var $$d_common$297bv32$2: bv8;

var $$d_common$298bv32$1: bv8;

var $$d_common$298bv32$2: bv8;

var $$d_common$299bv32$1: bv8;

var $$d_common$299bv32$2: bv8;

var $$d_common$300bv32$1: bv8;

var $$d_common$300bv32$2: bv8;

var $$d_common$301bv32$1: bv8;

var $$d_common$301bv32$2: bv8;

var $$d_common$302bv32$1: bv8;

var $$d_common$302bv32$2: bv8;

var $$d_common$303bv32$1: bv8;

var $$d_common$303bv32$2: bv8;

var $$d_common$304bv32$1: bv8;

var $$d_common$304bv32$2: bv8;

var $$d_common$305bv32$1: bv8;

var $$d_common$305bv32$2: bv8;

var $$d_common$306bv32$1: bv8;

var $$d_common$306bv32$2: bv8;

var $$d_common$307bv32$1: bv8;

var $$d_common$307bv32$2: bv8;

var $$d_common$308bv32$1: bv8;

var $$d_common$308bv32$2: bv8;

var $$d_common$309bv32$1: bv8;

var $$d_common$309bv32$2: bv8;

var $$d_common$310bv32$1: bv8;

var $$d_common$310bv32$2: bv8;

var $$d_common$311bv32$1: bv8;

var $$d_common$311bv32$2: bv8;

var $$d_common$312bv32$1: bv8;

var $$d_common$312bv32$2: bv8;

var $$d_common$313bv32$1: bv8;

var $$d_common$313bv32$2: bv8;

var $$d_common$314bv32$1: bv8;

var $$d_common$314bv32$2: bv8;

var $$d_common$315bv32$1: bv8;

var $$d_common$315bv32$2: bv8;

var $$d_common$316bv32$1: bv8;

var $$d_common$316bv32$2: bv8;

var $$d_common$317bv32$1: bv8;

var $$d_common$317bv32$2: bv8;

var $$d_common$318bv32$1: bv8;

var $$d_common$318bv32$2: bv8;

var $$d_common$319bv32$1: bv8;

var $$d_common$319bv32$2: bv8;

var $$d_common$320bv32$1: bv8;

var $$d_common$320bv32$2: bv8;

var $$d_common$321bv32$1: bv8;

var $$d_common$321bv32$2: bv8;

var $$d_common$322bv32$1: bv8;

var $$d_common$322bv32$2: bv8;

var $$d_common$323bv32$1: bv8;

var $$d_common$323bv32$2: bv8;

var $$d_common$324bv32$1: bv8;

var $$d_common$324bv32$2: bv8;

var $$d_common$325bv32$1: bv8;

var $$d_common$325bv32$2: bv8;

var $$d_common$326bv32$1: bv8;

var $$d_common$326bv32$2: bv8;

var $$d_common$327bv32$1: bv8;

var $$d_common$327bv32$2: bv8;

var $$d_common$328bv32$1: bv8;

var $$d_common$328bv32$2: bv8;

var $$d_common$329bv32$1: bv8;

var $$d_common$329bv32$2: bv8;

var $$d_common$330bv32$1: bv8;

var $$d_common$330bv32$2: bv8;

var $$d_common$331bv32$1: bv8;

var $$d_common$331bv32$2: bv8;

var $$d_common$332bv32$1: bv8;

var $$d_common$332bv32$2: bv8;

var $$d_common$333bv32$1: bv8;

var $$d_common$333bv32$2: bv8;

var $$d_common$334bv32$1: bv8;

var $$d_common$334bv32$2: bv8;

var $$d_common$335bv32$1: bv8;

var $$d_common$335bv32$2: bv8;

var $$d_common$336bv32$1: bv8;

var $$d_common$336bv32$2: bv8;

var $$d_common$337bv32$1: bv8;

var $$d_common$337bv32$2: bv8;

var $$d_common$338bv32$1: bv8;

var $$d_common$338bv32$2: bv8;

var $$d_common$339bv32$1: bv8;

var $$d_common$339bv32$2: bv8;

var $$d_common$340bv32$1: bv8;

var $$d_common$340bv32$2: bv8;

var $$d_common$341bv32$1: bv8;

var $$d_common$341bv32$2: bv8;

var $$d_common$342bv32$1: bv8;

var $$d_common$342bv32$2: bv8;

var $$d_common$343bv32$1: bv8;

var $$d_common$343bv32$2: bv8;

var $$d_common$344bv32$1: bv8;

var $$d_common$344bv32$2: bv8;

var $$d_common$345bv32$1: bv8;

var $$d_common$345bv32$2: bv8;

var $$d_common$346bv32$1: bv8;

var $$d_common$346bv32$2: bv8;

var $$d_common$347bv32$1: bv8;

var $$d_common$347bv32$2: bv8;

var $$d_common$348bv32$1: bv8;

var $$d_common$348bv32$2: bv8;

var $$d_common$349bv32$1: bv8;

var $$d_common$349bv32$2: bv8;

var $$d_common$350bv32$1: bv8;

var $$d_common$350bv32$2: bv8;

var $$d_common$351bv32$1: bv8;

var $$d_common$351bv32$2: bv8;

var $$d_common$352bv32$1: bv8;

var $$d_common$352bv32$2: bv8;

var $$d_common$353bv32$1: bv8;

var $$d_common$353bv32$2: bv8;

var $$d_common$354bv32$1: bv8;

var $$d_common$354bv32$2: bv8;

var $$d_common$355bv32$1: bv8;

var $$d_common$355bv32$2: bv8;

var $$d_common$356bv32$1: bv8;

var $$d_common$356bv32$2: bv8;

var $$d_common$357bv32$1: bv8;

var $$d_common$357bv32$2: bv8;

var $$d_common$358bv32$1: bv8;

var $$d_common$358bv32$2: bv8;

var $$d_common$359bv32$1: bv8;

var $$d_common$359bv32$2: bv8;

var $$d_common$360bv32$1: bv8;

var $$d_common$360bv32$2: bv8;

var $$d_common$361bv32$1: bv8;

var $$d_common$361bv32$2: bv8;

var $$d_common$362bv32$1: bv8;

var $$d_common$362bv32$2: bv8;

var $$d_common$363bv32$1: bv8;

var $$d_common$363bv32$2: bv8;

var $$d_common$364bv32$1: bv8;

var $$d_common$364bv32$2: bv8;

var $$d_common$365bv32$1: bv8;

var $$d_common$365bv32$2: bv8;

var $$d_common$366bv32$1: bv8;

var $$d_common$366bv32$2: bv8;

var $$d_common$367bv32$1: bv8;

var $$d_common$367bv32$2: bv8;

var $$d_common$368bv32$1: bv8;

var $$d_common$368bv32$2: bv8;

var $$d_common$369bv32$1: bv8;

var $$d_common$369bv32$2: bv8;

var $$d_common$370bv32$1: bv8;

var $$d_common$370bv32$2: bv8;

var $$d_common$371bv32$1: bv8;

var $$d_common$371bv32$2: bv8;

var $$d_common$372bv32$1: bv8;

var $$d_common$372bv32$2: bv8;

var $$d_common$373bv32$1: bv8;

var $$d_common$373bv32$2: bv8;

var $$d_common$374bv32$1: bv8;

var $$d_common$374bv32$2: bv8;

var $$d_common$375bv32$1: bv8;

var $$d_common$375bv32$2: bv8;

var $$d_common$376bv32$1: bv8;

var $$d_common$376bv32$2: bv8;

var $$d_common$377bv32$1: bv8;

var $$d_common$377bv32$2: bv8;

var $$d_common$378bv32$1: bv8;

var $$d_common$378bv32$2: bv8;

var $$d_common$379bv32$1: bv8;

var $$d_common$379bv32$2: bv8;

var $$d_common$380bv32$1: bv8;

var $$d_common$380bv32$2: bv8;

var $$d_common$381bv32$1: bv8;

var $$d_common$381bv32$2: bv8;

var $$d_common$382bv32$1: bv8;

var $$d_common$382bv32$2: bv8;

var $$d_common$383bv32$1: bv8;

var $$d_common$383bv32$2: bv8;

var $$d_common$384bv32$1: bv8;

var $$d_common$384bv32$2: bv8;

var $$d_common$385bv32$1: bv8;

var $$d_common$385bv32$2: bv8;

var $$d_common$386bv32$1: bv8;

var $$d_common$386bv32$2: bv8;

var $$d_common$387bv32$1: bv8;

var $$d_common$387bv32$2: bv8;

function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;

const {:existential true} _b0: bool;

const {:existential true} _b1: bool;

const {:existential true} _b2: bool;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;

const {:existential true} _b3: bool;

function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;

const {:existential true} _b4: bool;

function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;

const {:existential true} _b5: bool;

const {:existential true} _b6: bool;

const {:existential true} _b7: bool;

const {:existential true} _b8: bool;

const {:existential true} _b9: bool;

const {:existential true} _b10: bool;

const {:existential true} _b11: bool;

const {:existential true} _b12: bool;

const {:existential true} _b13: bool;

const {:existential true} _b14: bool;

const {:existential true} _b15: bool;

const {:existential true} _b16: bool;

const {:existential true} _b17: bool;

const {:existential true} _b18: bool;

const {:existential true} _b19: bool;

const {:existential true} _b20: bool;

const {:existential true} _b21: bool;

const {:existential true} _b22: bool;

const {:existential true} _b23: bool;

const {:existential true} _b24: bool;

const {:existential true} _b25: bool;

const {:existential true} _b26: bool;

const {:existential true} _b27: bool;

const {:existential true} _b28: bool;

const {:existential true} _b29: bool;

const {:existential true} _b30: bool;

const {:existential true} _b31: bool;

const {:existential true} _b32: bool;

const {:existential true} _b33: bool;

const {:existential true} _b34: bool;

const {:existential true} _b35: bool;

const {:existential true} _b36: bool;

const {:existential true} _b37: bool;

const {:existential true} _b38: bool;

const {:existential true} _b39: bool;

const {:existential true} _b40: bool;

const {:existential true} _b41: bool;

const {:existential true} _b42: bool;

const {:existential true} _b43: bool;

const {:existential true} _b44: bool;

const {:existential true} _b45: bool;

const {:existential true} _b46: bool;

const {:existential true} _b47: bool;

const {:existential true} _b48: bool;

const {:existential true} _b49: bool;

const {:existential true} _b50: bool;

const {:existential true} _b51: bool;

const {:existential true} _b52: bool;

const {:existential true} _b53: bool;

const {:existential true} _b54: bool;

const {:existential true} _b55: bool;

const {:existential true} _b56: bool;

const {:existential true} _b57: bool;

const {:existential true} _b58: bool;

const {:existential true} _b59: bool;

const {:existential true} _b60: bool;

const {:existential true} _b61: bool;

const {:existential true} _b62: bool;

const {:existential true} _b63: bool;

const {:existential true} _b64: bool;

const {:existential true} _b65: bool;

const {:existential true} _b66: bool;

const {:existential true} _b67: bool;

const {:existential true} _b68: bool;

const {:existential true} _b69: bool;

const {:existential true} _b70: bool;

const {:existential true} _b71: bool;

const {:existential true} _b72: bool;

const {:existential true} _b73: bool;

const {:existential true} _b74: bool;

const {:existential true} _b75: bool;

const {:existential true} _b76: bool;

const {:existential true} _b77: bool;

const {:existential true} _b78: bool;

const {:existential true} _b79: bool;

const {:existential true} _b80: bool;

const {:existential true} _b81: bool;

const {:existential true} _b82: bool;

const {:existential true} _b83: bool;

const {:existential true} _b84: bool;

const {:existential true} _b85: bool;

const {:existential true} _b86: bool;

const {:existential true} _b87: bool;

const {:existential true} _b88: bool;

const {:existential true} _b89: bool;

const {:existential true} _b90: bool;

const {:existential true} _b91: bool;

const {:existential true} _b92: bool;

const {:existential true} _b93: bool;

const {:existential true} _b94: bool;

const {:existential true} _b95: bool;

const {:existential true} _b96: bool;

const {:existential true} _b97: bool;

const {:existential true} _b98: bool;

const {:existential true} _b99: bool;

const {:existential true} _b100: bool;

const {:existential true} _b101: bool;

const {:existential true} _b102: bool;

const {:existential true} _b103: bool;

const {:existential true} _b104: bool;

const {:existential true} _b105: bool;

const {:existential true} _b106: bool;

const {:existential true} _b107: bool;

const {:existential true} _b108: bool;

const {:existential true} _b109: bool;

const {:existential true} _b110: bool;

const {:existential true} _b111: bool;

const {:existential true} _b112: bool;

const {:existential true} _b113: bool;

const {:existential true} _b114: bool;

const {:existential true} _b115: bool;

const {:existential true} _b116: bool;

const {:existential true} _b117: bool;

const {:existential true} _b118: bool;

const {:existential true} _b119: bool;

const {:existential true} _b120: bool;

const {:existential true} _b121: bool;

const {:existential true} _b122: bool;

const {:existential true} _b123: bool;

const {:existential true} _b124: bool;

const {:existential true} _b125: bool;

const {:existential true} _b126: bool;

const {:existential true} _b127: bool;

const {:existential true} _b128: bool;

const {:existential true} _b129: bool;

const {:existential true} _b130: bool;

const {:existential true} _b131: bool;

const {:existential true} _b132: bool;

const {:existential true} _b133: bool;

const {:existential true} _b134: bool;

const {:existential true} _b135: bool;

const {:existential true} _b136: bool;

const {:existential true} _b137: bool;

const {:existential true} _b138: bool;

const {:existential true} _b139: bool;

const {:existential true} _b140: bool;

const {:existential true} _b141: bool;

const {:existential true} _b142: bool;

const {:existential true} _b143: bool;

const {:existential true} _b144: bool;

const {:existential true} _b145: bool;

const {:existential true} _b146: bool;

const {:existential true} _b147: bool;

const {:existential true} _b148: bool;

const {:existential true} _b149: bool;

const {:existential true} _b150: bool;

const {:existential true} _b151: bool;

const {:existential true} _b152: bool;

const {:existential true} _b153: bool;

const {:existential true} _b154: bool;

const {:existential true} _b155: bool;

const {:existential true} _b156: bool;

const {:existential true} _b157: bool;

const {:existential true} _b158: bool;

const {:existential true} _b159: bool;

const {:existential true} _b160: bool;

const {:existential true} _b161: bool;

const {:existential true} _b162: bool;

const {:existential true} _b163: bool;

const {:existential true} _b164: bool;

const {:existential true} _b165: bool;

const {:existential true} _b166: bool;

const {:existential true} _b167: bool;

const {:existential true} _b168: bool;

const {:existential true} _b169: bool;

const {:existential true} _b170: bool;

const {:existential true} _b171: bool;

const {:existential true} _b172: bool;

const {:existential true} _b173: bool;

const {:existential true} _b174: bool;

const {:existential true} _b175: bool;

const {:existential true} _b176: bool;

const {:existential true} _b177: bool;

const {:existential true} _b178: bool;

const {:existential true} _b179: bool;

const {:existential true} _b180: bool;

const {:existential true} _b181: bool;

const {:existential true} _b182: bool;

const {:existential true} _b183: bool;

const {:existential true} _b184: bool;

const {:existential true} _b185: bool;

const {:existential true} _b186: bool;

const {:existential true} _b187: bool;

const {:existential true} _b188: bool;

const {:existential true} _b189: bool;

const {:existential true} _b190: bool;

const {:existential true} _b191: bool;

const {:existential true} _b192: bool;

const {:existential true} _b193: bool;

const {:existential true} _b194: bool;

const {:existential true} _b195: bool;

const {:existential true} _b196: bool;

const {:existential true} _b197: bool;

const {:existential true} _b198: bool;

const {:existential true} _b199: bool;

const {:existential true} _b200: bool;

const {:existential true} _b201: bool;

const {:existential true} _b202: bool;

const {:existential true} _b203: bool;

const {:existential true} _b204: bool;

const {:existential true} _b205: bool;

const {:existential true} _b206: bool;

const {:existential true} _b207: bool;

const {:existential true} _b208: bool;

const {:existential true} _b209: bool;

const {:existential true} _b210: bool;

const {:existential true} _b211: bool;

const {:existential true} _b212: bool;

const {:existential true} _b213: bool;

const {:existential true} _b214: bool;

const {:existential true} _b215: bool;

const {:existential true} _b216: bool;

const {:existential true} _b217: bool;

const {:existential true} _b218: bool;

const {:existential true} _b219: bool;

const {:existential true} _b220: bool;

const {:existential true} _b221: bool;

const {:existential true} _b222: bool;

const {:existential true} _b223: bool;

const {:existential true} _b224: bool;

const {:existential true} _b225: bool;

const {:existential true} _b226: bool;

const {:existential true} _b227: bool;

const {:existential true} _b228: bool;

const {:existential true} _b229: bool;

const {:existential true} _b230: bool;

const {:existential true} _b231: bool;

const {:existential true} _b232: bool;

const {:existential true} _b233: bool;

const {:existential true} _b234: bool;

const {:existential true} _b235: bool;

const {:existential true} _b236: bool;

const {:existential true} _b237: bool;

const {:existential true} _b238: bool;

const {:existential true} _b239: bool;

const {:existential true} _b240: bool;

const {:existential true} _b241: bool;

const {:existential true} _b242: bool;

const {:existential true} _b243: bool;

const {:existential true} _b244: bool;

const {:existential true} _b245: bool;

const {:existential true} _b246: bool;

const {:existential true} _b247: bool;

const {:existential true} _b248: bool;

const {:existential true} _b249: bool;

const {:existential true} _b250: bool;

const {:existential true} _b251: bool;

const {:existential true} _b252: bool;

const {:existential true} _b253: bool;

const {:existential true} _b254: bool;

const {:existential true} _b255: bool;

const {:existential true} _b256: bool;

const {:existential true} _b257: bool;

const {:existential true} _b258: bool;

const {:existential true} _b259: bool;

const {:existential true} _b260: bool;

const {:existential true} _b261: bool;

const {:existential true} _b262: bool;

const {:existential true} _b263: bool;

const {:existential true} _b264: bool;

const {:existential true} _b265: bool;

const {:existential true} _b266: bool;

const {:existential true} _b267: bool;

const {:existential true} _b268: bool;

const {:existential true} _b269: bool;

const {:existential true} _b270: bool;

const {:existential true} _b271: bool;

const {:existential true} _b272: bool;

const {:existential true} _b273: bool;

const {:existential true} _b274: bool;

const {:existential true} _b275: bool;

const {:existential true} _b276: bool;

const {:existential true} _b277: bool;

const {:existential true} _b278: bool;

const {:existential true} _b279: bool;

const {:existential true} _b280: bool;

const {:existential true} _b281: bool;

const {:existential true} _b282: bool;

const {:existential true} _b283: bool;

const {:existential true} _b284: bool;

const {:existential true} _b285: bool;

const {:existential true} _b286: bool;

const {:existential true} _b287: bool;

const {:existential true} _b288: bool;

const {:existential true} _b289: bool;

const {:existential true} _b290: bool;

const {:existential true} _b291: bool;

const {:existential true} _b292: bool;

const {:existential true} _b293: bool;

const {:existential true} _b294: bool;

const {:existential true} _b295: bool;

const {:existential true} _b296: bool;

const {:existential true} _b297: bool;

const {:existential true} _b298: bool;

const {:existential true} _b299: bool;

const {:existential true} _b300: bool;

const {:existential true} _b301: bool;

const {:existential true} _b302: bool;

const {:existential true} _b303: bool;

const {:existential true} _b304: bool;

const {:existential true} _b305: bool;

const {:existential true} _b306: bool;

const {:existential true} _b307: bool;

const {:existential true} _b308: bool;

const {:existential true} _b309: bool;

const {:existential true} _b310: bool;

const {:existential true} _b311: bool;

const {:existential true} _b312: bool;

const {:existential true} _b313: bool;

const {:existential true} _b314: bool;

const {:existential true} _b315: bool;

const {:existential true} _b316: bool;

const {:existential true} _b317: bool;

const {:existential true} _b318: bool;

const {:existential true} _b319: bool;

const {:existential true} _b320: bool;

const {:existential true} _b321: bool;

const {:existential true} _b322: bool;

const {:existential true} _b323: bool;

const {:existential true} _b324: bool;

const {:existential true} _b325: bool;

const {:existential true} _b326: bool;

const {:existential true} _b327: bool;

const {:existential true} _b328: bool;

const {:existential true} _b329: bool;

const {:existential true} _b330: bool;

const {:existential true} _b331: bool;

const {:existential true} _b332: bool;

const {:existential true} _b333: bool;

const {:existential true} _b334: bool;

const {:existential true} _b335: bool;

const {:existential true} _b336: bool;

const {:existential true} _b337: bool;

const {:existential true} _b338: bool;

const {:existential true} _b339: bool;

const {:existential true} _b340: bool;

const {:existential true} _b341: bool;

const {:existential true} _b342: bool;

const {:existential true} _b343: bool;

const {:existential true} _b344: bool;

const {:existential true} _b345: bool;

const {:existential true} _b346: bool;

const {:existential true} _b347: bool;

const {:existential true} _b348: bool;

const {:existential true} _b349: bool;

const {:existential true} _b350: bool;

const {:existential true} _b351: bool;

const {:existential true} _b352: bool;

const {:existential true} _b353: bool;

const {:existential true} _b354: bool;

const {:existential true} _b355: bool;

const {:existential true} _b356: bool;

const {:existential true} _b357: bool;

const {:existential true} _b358: bool;

const {:existential true} _b359: bool;

const {:existential true} _b360: bool;

const {:existential true} _b361: bool;

const {:existential true} _b362: bool;

const {:existential true} _b363: bool;

const {:existential true} _b364: bool;

const {:existential true} _b365: bool;

const {:existential true} _b366: bool;

const {:existential true} _b367: bool;

const {:existential true} _b368: bool;

const {:existential true} _b369: bool;

const {:existential true} _b370: bool;

const {:existential true} _b371: bool;

const {:existential true} _b372: bool;

const {:existential true} _b373: bool;

const {:existential true} _b374: bool;

const {:existential true} _b375: bool;

const {:existential true} _b376: bool;

const {:existential true} _b377: bool;

const {:existential true} _b378: bool;

const {:existential true} _b379: bool;

const {:existential true} _b380: bool;

const {:existential true} _b381: bool;

const {:existential true} _b382: bool;

const {:existential true} _b383: bool;

const {:existential true} _b384: bool;

const {:existential true} _b385: bool;

const {:existential true} _b386: bool;

const {:existential true} _b387: bool;

const {:existential true} _b388: bool;

const _WATCHED_VALUE_$$d_frame: bv32;

procedure {:inline 1} _LOG_READ_$$d_frame(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_frame;



implementation {:inline 1} _LOG_READ_$$d_frame(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_frame := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_frame == _value then true else _READ_HAS_OCCURRED_$$d_frame);
    return;
}



procedure _CHECK_READ_$$d_frame(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_frame"} {:array "$$d_frame"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_frame);
  requires {:source_name "d_frame"} {:array "$$d_frame"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_frame: bool;

procedure {:inline 1} _LOG_WRITE_$$d_frame(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_frame, _WRITE_READ_BENIGN_FLAG_$$d_frame;



implementation {:inline 1} _LOG_WRITE_$$d_frame(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_frame := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_frame == _value then true else _WRITE_HAS_OCCURRED_$$d_frame);
    _WRITE_READ_BENIGN_FLAG_$$d_frame := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_frame == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_frame);
    return;
}



procedure _CHECK_WRITE_$$d_frame(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_frame"} {:array "$$d_frame"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_frame != _value);
  requires {:source_name "d_frame"} {:array "$$d_frame"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_frame != _value);
  requires {:source_name "d_frame"} {:array "$$d_frame"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_frame(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_frame;



implementation {:inline 1} _LOG_ATOMIC_$$d_frame(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_frame := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_frame);
    return;
}



procedure _CHECK_ATOMIC_$$d_frame(_P: bool, _offset: bv32);
  requires {:source_name "d_frame"} {:array "$$d_frame"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_frame"} {:array "$$d_frame"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_frame(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_frame;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_frame(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_frame := (if _P && _WRITE_HAS_OCCURRED_$$d_frame && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_frame);
    return;
}



const _WATCHED_VALUE_$$d_endoRow: bv32;

procedure {:inline 1} _LOG_READ_$$d_endoRow(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_endoRow;



implementation {:inline 1} _LOG_READ_$$d_endoRow(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_endoRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoRow == _value then true else _READ_HAS_OCCURRED_$$d_endoRow);
    return;
}



procedure _CHECK_READ_$$d_endoRow(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_endoRow"} {:array "$$d_endoRow"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_endoRow);
  requires {:source_name "d_endoRow"} {:array "$$d_endoRow"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_endoRow: bool;

procedure {:inline 1} _LOG_WRITE_$$d_endoRow(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_endoRow, _WRITE_READ_BENIGN_FLAG_$$d_endoRow;



implementation {:inline 1} _LOG_WRITE_$$d_endoRow(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_endoRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoRow == _value then true else _WRITE_HAS_OCCURRED_$$d_endoRow);
    _WRITE_READ_BENIGN_FLAG_$$d_endoRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoRow == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_endoRow);
    return;
}



procedure _CHECK_WRITE_$$d_endoRow(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_endoRow"} {:array "$$d_endoRow"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoRow != _value);
  requires {:source_name "d_endoRow"} {:array "$$d_endoRow"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoRow != _value);
  requires {:source_name "d_endoRow"} {:array "$$d_endoRow"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_endoRow(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_endoRow;



implementation {:inline 1} _LOG_ATOMIC_$$d_endoRow(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_endoRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_endoRow);
    return;
}



procedure _CHECK_ATOMIC_$$d_endoRow(_P: bool, _offset: bv32);
  requires {:source_name "d_endoRow"} {:array "$$d_endoRow"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_endoRow"} {:array "$$d_endoRow"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoRow(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_endoRow;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoRow(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_endoRow := (if _P && _WRITE_HAS_OCCURRED_$$d_endoRow && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_endoRow);
    return;
}



const _WATCHED_VALUE_$$d_endoCol: bv32;

procedure {:inline 1} _LOG_READ_$$d_endoCol(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_endoCol;



implementation {:inline 1} _LOG_READ_$$d_endoCol(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_endoCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoCol == _value then true else _READ_HAS_OCCURRED_$$d_endoCol);
    return;
}



procedure _CHECK_READ_$$d_endoCol(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_endoCol"} {:array "$$d_endoCol"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_endoCol);
  requires {:source_name "d_endoCol"} {:array "$$d_endoCol"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_endoCol: bool;

procedure {:inline 1} _LOG_WRITE_$$d_endoCol(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_endoCol, _WRITE_READ_BENIGN_FLAG_$$d_endoCol;



implementation {:inline 1} _LOG_WRITE_$$d_endoCol(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_endoCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoCol == _value then true else _WRITE_HAS_OCCURRED_$$d_endoCol);
    _WRITE_READ_BENIGN_FLAG_$$d_endoCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoCol == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_endoCol);
    return;
}



procedure _CHECK_WRITE_$$d_endoCol(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_endoCol"} {:array "$$d_endoCol"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoCol != _value);
  requires {:source_name "d_endoCol"} {:array "$$d_endoCol"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoCol != _value);
  requires {:source_name "d_endoCol"} {:array "$$d_endoCol"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_endoCol(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_endoCol;



implementation {:inline 1} _LOG_ATOMIC_$$d_endoCol(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_endoCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_endoCol);
    return;
}



procedure _CHECK_ATOMIC_$$d_endoCol(_P: bool, _offset: bv32);
  requires {:source_name "d_endoCol"} {:array "$$d_endoCol"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_endoCol"} {:array "$$d_endoCol"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoCol(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_endoCol;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoCol(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_endoCol := (if _P && _WRITE_HAS_OCCURRED_$$d_endoCol && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_endoCol);
    return;
}



const _WATCHED_VALUE_$$d_tEndoRowLoc: bv32;

procedure {:inline 1} _LOG_READ_$$d_tEndoRowLoc(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_tEndoRowLoc;



implementation {:inline 1} _LOG_READ_$$d_tEndoRowLoc(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_tEndoRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoRowLoc == _value then true else _READ_HAS_OCCURRED_$$d_tEndoRowLoc);
    return;
}



procedure _CHECK_READ_$$d_tEndoRowLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEndoRowLoc"} {:array "$$d_tEndoRowLoc"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc);
  requires {:source_name "d_tEndoRowLoc"} {:array "$$d_tEndoRowLoc"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc: bool;

procedure {:inline 1} _LOG_WRITE_$$d_tEndoRowLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc;



implementation {:inline 1} _LOG_WRITE_$$d_tEndoRowLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoRowLoc == _value then true else _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc);
    _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoRowLoc == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc);
    return;
}



procedure _CHECK_WRITE_$$d_tEndoRowLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEndoRowLoc"} {:array "$$d_tEndoRowLoc"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoRowLoc != _value);
  requires {:source_name "d_tEndoRowLoc"} {:array "$$d_tEndoRowLoc"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoRowLoc != _value);
  requires {:source_name "d_tEndoRowLoc"} {:array "$$d_tEndoRowLoc"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_tEndoRowLoc(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;



implementation {:inline 1} _LOG_ATOMIC_$$d_tEndoRowLoc(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc);
    return;
}



procedure _CHECK_ATOMIC_$$d_tEndoRowLoc(_P: bool, _offset: bv32);
  requires {:source_name "d_tEndoRowLoc"} {:array "$$d_tEndoRowLoc"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_tEndoRowLoc"} {:array "$$d_tEndoRowLoc"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc := (if _P && _WRITE_HAS_OCCURRED_$$d_tEndoRowLoc && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_tEndoRowLoc);
    return;
}



const _WATCHED_VALUE_$$d_tEndoColLoc: bv32;

procedure {:inline 1} _LOG_READ_$$d_tEndoColLoc(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_tEndoColLoc;



implementation {:inline 1} _LOG_READ_$$d_tEndoColLoc(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_tEndoColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoColLoc == _value then true else _READ_HAS_OCCURRED_$$d_tEndoColLoc);
    return;
}



procedure _CHECK_READ_$$d_tEndoColLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEndoColLoc"} {:array "$$d_tEndoColLoc"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc);
  requires {:source_name "d_tEndoColLoc"} {:array "$$d_tEndoColLoc"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc: bool;

procedure {:inline 1} _LOG_WRITE_$$d_tEndoColLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_tEndoColLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc;



implementation {:inline 1} _LOG_WRITE_$$d_tEndoColLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_tEndoColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoColLoc == _value then true else _WRITE_HAS_OCCURRED_$$d_tEndoColLoc);
    _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoColLoc == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc);
    return;
}



procedure _CHECK_WRITE_$$d_tEndoColLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEndoColLoc"} {:array "$$d_tEndoColLoc"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoColLoc != _value);
  requires {:source_name "d_tEndoColLoc"} {:array "$$d_tEndoColLoc"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEndoColLoc != _value);
  requires {:source_name "d_tEndoColLoc"} {:array "$$d_tEndoColLoc"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_tEndoColLoc(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;



implementation {:inline 1} _LOG_ATOMIC_$$d_tEndoColLoc(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc);
    return;
}



procedure _CHECK_ATOMIC_$$d_tEndoColLoc(_P: bool, _offset: bv32);
  requires {:source_name "d_tEndoColLoc"} {:array "$$d_tEndoColLoc"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_tEndoColLoc"} {:array "$$d_tEndoColLoc"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc := (if _P && _WRITE_HAS_OCCURRED_$$d_tEndoColLoc && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_tEndoColLoc);
    return;
}



const _WATCHED_VALUE_$$d_epiRow: bv32;

procedure {:inline 1} _LOG_READ_$$d_epiRow(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_epiRow;



implementation {:inline 1} _LOG_READ_$$d_epiRow(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_epiRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiRow == _value then true else _READ_HAS_OCCURRED_$$d_epiRow);
    return;
}



procedure _CHECK_READ_$$d_epiRow(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_epiRow"} {:array "$$d_epiRow"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_epiRow);
  requires {:source_name "d_epiRow"} {:array "$$d_epiRow"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_epiRow: bool;

procedure {:inline 1} _LOG_WRITE_$$d_epiRow(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_epiRow, _WRITE_READ_BENIGN_FLAG_$$d_epiRow;



implementation {:inline 1} _LOG_WRITE_$$d_epiRow(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_epiRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiRow == _value then true else _WRITE_HAS_OCCURRED_$$d_epiRow);
    _WRITE_READ_BENIGN_FLAG_$$d_epiRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiRow == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_epiRow);
    return;
}



procedure _CHECK_WRITE_$$d_epiRow(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_epiRow"} {:array "$$d_epiRow"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiRow != _value);
  requires {:source_name "d_epiRow"} {:array "$$d_epiRow"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiRow != _value);
  requires {:source_name "d_epiRow"} {:array "$$d_epiRow"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_epiRow(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_epiRow;



implementation {:inline 1} _LOG_ATOMIC_$$d_epiRow(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_epiRow := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_epiRow);
    return;
}



procedure _CHECK_ATOMIC_$$d_epiRow(_P: bool, _offset: bv32);
  requires {:source_name "d_epiRow"} {:array "$$d_epiRow"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_epiRow"} {:array "$$d_epiRow"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiRow(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_epiRow;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiRow(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_epiRow := (if _P && _WRITE_HAS_OCCURRED_$$d_epiRow && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_epiRow);
    return;
}



const _WATCHED_VALUE_$$d_epiCol: bv32;

procedure {:inline 1} _LOG_READ_$$d_epiCol(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_epiCol;



implementation {:inline 1} _LOG_READ_$$d_epiCol(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_epiCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiCol == _value then true else _READ_HAS_OCCURRED_$$d_epiCol);
    return;
}



procedure _CHECK_READ_$$d_epiCol(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_epiCol"} {:array "$$d_epiCol"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_epiCol);
  requires {:source_name "d_epiCol"} {:array "$$d_epiCol"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_epiCol: bool;

procedure {:inline 1} _LOG_WRITE_$$d_epiCol(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_epiCol, _WRITE_READ_BENIGN_FLAG_$$d_epiCol;



implementation {:inline 1} _LOG_WRITE_$$d_epiCol(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_epiCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiCol == _value then true else _WRITE_HAS_OCCURRED_$$d_epiCol);
    _WRITE_READ_BENIGN_FLAG_$$d_epiCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiCol == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_epiCol);
    return;
}



procedure _CHECK_WRITE_$$d_epiCol(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_epiCol"} {:array "$$d_epiCol"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiCol != _value);
  requires {:source_name "d_epiCol"} {:array "$$d_epiCol"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiCol != _value);
  requires {:source_name "d_epiCol"} {:array "$$d_epiCol"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_epiCol(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_epiCol;



implementation {:inline 1} _LOG_ATOMIC_$$d_epiCol(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_epiCol := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_epiCol);
    return;
}



procedure _CHECK_ATOMIC_$$d_epiCol(_P: bool, _offset: bv32);
  requires {:source_name "d_epiCol"} {:array "$$d_epiCol"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_epiCol"} {:array "$$d_epiCol"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiCol(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_epiCol;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiCol(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_epiCol := (if _P && _WRITE_HAS_OCCURRED_$$d_epiCol && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_epiCol);
    return;
}



const _WATCHED_VALUE_$$d_tEpiRowLoc: bv32;

procedure {:inline 1} _LOG_READ_$$d_tEpiRowLoc(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_tEpiRowLoc;



implementation {:inline 1} _LOG_READ_$$d_tEpiRowLoc(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_tEpiRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiRowLoc == _value then true else _READ_HAS_OCCURRED_$$d_tEpiRowLoc);
    return;
}



procedure _CHECK_READ_$$d_tEpiRowLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEpiRowLoc"} {:array "$$d_tEpiRowLoc"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc);
  requires {:source_name "d_tEpiRowLoc"} {:array "$$d_tEpiRowLoc"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc: bool;

procedure {:inline 1} _LOG_WRITE_$$d_tEpiRowLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc;



implementation {:inline 1} _LOG_WRITE_$$d_tEpiRowLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiRowLoc == _value then true else _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc);
    _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiRowLoc == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc);
    return;
}



procedure _CHECK_WRITE_$$d_tEpiRowLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEpiRowLoc"} {:array "$$d_tEpiRowLoc"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiRowLoc != _value);
  requires {:source_name "d_tEpiRowLoc"} {:array "$$d_tEpiRowLoc"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiRowLoc != _value);
  requires {:source_name "d_tEpiRowLoc"} {:array "$$d_tEpiRowLoc"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_tEpiRowLoc(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;



implementation {:inline 1} _LOG_ATOMIC_$$d_tEpiRowLoc(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc);
    return;
}



procedure _CHECK_ATOMIC_$$d_tEpiRowLoc(_P: bool, _offset: bv32);
  requires {:source_name "d_tEpiRowLoc"} {:array "$$d_tEpiRowLoc"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_tEpiRowLoc"} {:array "$$d_tEpiRowLoc"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc := (if _P && _WRITE_HAS_OCCURRED_$$d_tEpiRowLoc && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_tEpiRowLoc);
    return;
}



const _WATCHED_VALUE_$$d_tEpiColLoc: bv32;

procedure {:inline 1} _LOG_READ_$$d_tEpiColLoc(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_tEpiColLoc;



implementation {:inline 1} _LOG_READ_$$d_tEpiColLoc(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_tEpiColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiColLoc == _value then true else _READ_HAS_OCCURRED_$$d_tEpiColLoc);
    return;
}



procedure _CHECK_READ_$$d_tEpiColLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEpiColLoc"} {:array "$$d_tEpiColLoc"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc);
  requires {:source_name "d_tEpiColLoc"} {:array "$$d_tEpiColLoc"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc: bool;

procedure {:inline 1} _LOG_WRITE_$$d_tEpiColLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_tEpiColLoc, _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc;



implementation {:inline 1} _LOG_WRITE_$$d_tEpiColLoc(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_tEpiColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiColLoc == _value then true else _WRITE_HAS_OCCURRED_$$d_tEpiColLoc);
    _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiColLoc == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc);
    return;
}



procedure _CHECK_WRITE_$$d_tEpiColLoc(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tEpiColLoc"} {:array "$$d_tEpiColLoc"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiColLoc != _value);
  requires {:source_name "d_tEpiColLoc"} {:array "$$d_tEpiColLoc"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tEpiColLoc != _value);
  requires {:source_name "d_tEpiColLoc"} {:array "$$d_tEpiColLoc"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_tEpiColLoc(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;



implementation {:inline 1} _LOG_ATOMIC_$$d_tEpiColLoc(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc);
    return;
}



procedure _CHECK_ATOMIC_$$d_tEpiColLoc(_P: bool, _offset: bv32);
  requires {:source_name "d_tEpiColLoc"} {:array "$$d_tEpiColLoc"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_tEpiColLoc"} {:array "$$d_tEpiColLoc"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc := (if _P && _WRITE_HAS_OCCURRED_$$d_tEpiColLoc && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_tEpiColLoc);
    return;
}



const _WATCHED_VALUE_$$d_endoT: bv32;

procedure {:inline 1} _LOG_READ_$$d_endoT(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_endoT;



implementation {:inline 1} _LOG_READ_$$d_endoT(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_endoT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoT == _value then true else _READ_HAS_OCCURRED_$$d_endoT);
    return;
}



procedure _CHECK_READ_$$d_endoT(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_endoT"} {:array "$$d_endoT"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_endoT);
  requires {:source_name "d_endoT"} {:array "$$d_endoT"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_endoT: bool;

procedure {:inline 1} _LOG_WRITE_$$d_endoT(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_endoT, _WRITE_READ_BENIGN_FLAG_$$d_endoT;



implementation {:inline 1} _LOG_WRITE_$$d_endoT(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_endoT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoT == _value then true else _WRITE_HAS_OCCURRED_$$d_endoT);
    _WRITE_READ_BENIGN_FLAG_$$d_endoT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoT == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_endoT);
    return;
}



procedure _CHECK_WRITE_$$d_endoT(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_endoT"} {:array "$$d_endoT"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoT != _value);
  requires {:source_name "d_endoT"} {:array "$$d_endoT"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_endoT != _value);
  requires {:source_name "d_endoT"} {:array "$$d_endoT"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_endoT(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_endoT;



implementation {:inline 1} _LOG_ATOMIC_$$d_endoT(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_endoT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_endoT);
    return;
}



procedure _CHECK_ATOMIC_$$d_endoT(_P: bool, _offset: bv32);
  requires {:source_name "d_endoT"} {:array "$$d_endoT"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_endoT"} {:array "$$d_endoT"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoT(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_endoT;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_endoT(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_endoT := (if _P && _WRITE_HAS_OCCURRED_$$d_endoT && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_endoT);
    return;
}



const _WATCHED_VALUE_$$d_epiT: bv32;

procedure {:inline 1} _LOG_READ_$$d_epiT(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_epiT;



implementation {:inline 1} _LOG_READ_$$d_epiT(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_epiT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiT == _value then true else _READ_HAS_OCCURRED_$$d_epiT);
    return;
}



procedure _CHECK_READ_$$d_epiT(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_epiT"} {:array "$$d_epiT"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_epiT);
  requires {:source_name "d_epiT"} {:array "$$d_epiT"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_epiT: bool;

procedure {:inline 1} _LOG_WRITE_$$d_epiT(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_epiT, _WRITE_READ_BENIGN_FLAG_$$d_epiT;



implementation {:inline 1} _LOG_WRITE_$$d_epiT(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_epiT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiT == _value then true else _WRITE_HAS_OCCURRED_$$d_epiT);
    _WRITE_READ_BENIGN_FLAG_$$d_epiT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiT == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_epiT);
    return;
}



procedure _CHECK_WRITE_$$d_epiT(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_epiT"} {:array "$$d_epiT"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiT != _value);
  requires {:source_name "d_epiT"} {:array "$$d_epiT"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_epiT != _value);
  requires {:source_name "d_epiT"} {:array "$$d_epiT"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_epiT(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_epiT;



implementation {:inline 1} _LOG_ATOMIC_$$d_epiT(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_epiT := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_epiT);
    return;
}



procedure _CHECK_ATOMIC_$$d_epiT(_P: bool, _offset: bv32);
  requires {:source_name "d_epiT"} {:array "$$d_epiT"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_epiT"} {:array "$$d_epiT"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiT(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_epiT;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_epiT(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_epiT := (if _P && _WRITE_HAS_OCCURRED_$$d_epiT && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_epiT);
    return;
}



const _WATCHED_VALUE_$$d_in2_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_all;



implementation {:inline 1} _LOG_READ_$$d_in2_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_all);
    return;
}



procedure _CHECK_READ_$$d_in2_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_all"} {:array "$$d_in2_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_all);
  requires {:source_name "d_in2_all"} {:array "$$d_in2_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_all"} {:array "$$d_in2_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_all != _value);
  requires {:source_name "d_in2_all"} {:array "$$d_in2_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_all != _value);
  requires {:source_name "d_in2_all"} {:array "$$d_in2_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_all"} {:array "$$d_in2_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_all"} {:array "$$d_in2_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_all);
    return;
}



const _WATCHED_VALUE_$$d_conv_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_conv_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_conv_all;



implementation {:inline 1} _LOG_READ_$$d_conv_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_conv_all == _value then true else _READ_HAS_OCCURRED_$$d_conv_all);
    return;
}



procedure _CHECK_READ_$$d_conv_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_conv_all"} {:array "$$d_conv_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_conv_all);
  requires {:source_name "d_conv_all"} {:array "$$d_conv_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_conv_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_conv_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_conv_all, _WRITE_READ_BENIGN_FLAG_$$d_conv_all;



implementation {:inline 1} _LOG_WRITE_$$d_conv_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_conv_all == _value then true else _WRITE_HAS_OCCURRED_$$d_conv_all);
    _WRITE_READ_BENIGN_FLAG_$$d_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_conv_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_conv_all);
    return;
}



procedure _CHECK_WRITE_$$d_conv_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_conv_all"} {:array "$$d_conv_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_conv_all != _value);
  requires {:source_name "d_conv_all"} {:array "$$d_conv_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_conv_all != _value);
  requires {:source_name "d_conv_all"} {:array "$$d_conv_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_conv_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_conv_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_conv_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_conv_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_conv_all(_P: bool, _offset: bv32);
  requires {:source_name "d_conv_all"} {:array "$$d_conv_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_conv_all"} {:array "$$d_conv_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_conv_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_conv_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_conv_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_conv_all := (if _P && _WRITE_HAS_OCCURRED_$$d_conv_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_conv_all);
    return;
}



const _WATCHED_VALUE_$$d_in2_pad_cumv_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;



implementation {:inline 1} _LOG_READ_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_pad_cumv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_pad_cumv_all);
    return;
}



procedure _CHECK_READ_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_pad_cumv_all"} {:array "$$d_in2_pad_cumv_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all);
  requires {:source_name "d_in2_pad_cumv_all"} {:array "$$d_in2_pad_cumv_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_pad_cumv_all"} {:array "$$d_in2_pad_cumv_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_all != _value);
  requires {:source_name "d_in2_pad_cumv_all"} {:array "$$d_in2_pad_cumv_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_all != _value);
  requires {:source_name "d_in2_pad_cumv_all"} {:array "$$d_in2_pad_cumv_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_pad_cumv_all"} {:array "$$d_in2_pad_cumv_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_pad_cumv_all"} {:array "$$d_in2_pad_cumv_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_all);
    return;
}



const _WATCHED_VALUE_$$d_in2_pad_cumv_sel_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;



implementation {:inline 1} _LOG_READ_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_sel_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all);
    return;
}



procedure _CHECK_READ_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_pad_cumv_sel_all"} {:array "$$d_in2_pad_cumv_sel_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all);
  requires {:source_name "d_in2_pad_cumv_sel_all"} {:array "$$d_in2_pad_cumv_sel_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_sel_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_sel_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_pad_cumv_sel_all"} {:array "$$d_in2_pad_cumv_sel_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_sel_all != _value);
  requires {:source_name "d_in2_pad_cumv_sel_all"} {:array "$$d_in2_pad_cumv_sel_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_pad_cumv_sel_all != _value);
  requires {:source_name "d_in2_pad_cumv_sel_all"} {:array "$$d_in2_pad_cumv_sel_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_pad_cumv_sel_all"} {:array "$$d_in2_pad_cumv_sel_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_pad_cumv_sel_all"} {:array "$$d_in2_pad_cumv_sel_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_pad_cumv_sel_all);
    return;
}



const _WATCHED_VALUE_$$d_in2_sub_cumh_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;



implementation {:inline 1} _LOG_READ_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all);
    return;
}



procedure _CHECK_READ_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sub_cumh_all"} {:array "$$d_in2_sub_cumh_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all);
  requires {:source_name "d_in2_sub_cumh_all"} {:array "$$d_in2_sub_cumh_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sub_cumh_all"} {:array "$$d_in2_sub_cumh_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_all != _value);
  requires {:source_name "d_in2_sub_cumh_all"} {:array "$$d_in2_sub_cumh_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_all != _value);
  requires {:source_name "d_in2_sub_cumh_all"} {:array "$$d_in2_sub_cumh_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_sub_cumh_all"} {:array "$$d_in2_sub_cumh_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_sub_cumh_all"} {:array "$$d_in2_sub_cumh_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_all);
    return;
}



const _WATCHED_VALUE_$$d_in2_sub_cumh_sel_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;



implementation {:inline 1} _LOG_READ_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_sel_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all);
    return;
}



procedure _CHECK_READ_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sub_cumh_sel_all"} {:array "$$d_in2_sub_cumh_sel_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all);
  requires {:source_name "d_in2_sub_cumh_sel_all"} {:array "$$d_in2_sub_cumh_sel_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_sel_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_sel_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sub_cumh_sel_all"} {:array "$$d_in2_sub_cumh_sel_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_sel_all != _value);
  requires {:source_name "d_in2_sub_cumh_sel_all"} {:array "$$d_in2_sub_cumh_sel_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub_cumh_sel_all != _value);
  requires {:source_name "d_in2_sub_cumh_sel_all"} {:array "$$d_in2_sub_cumh_sel_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_sub_cumh_sel_all"} {:array "$$d_in2_sub_cumh_sel_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_sub_cumh_sel_all"} {:array "$$d_in2_sub_cumh_sel_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_sub_cumh_sel_all);
    return;
}



const _WATCHED_VALUE_$$d_in2_sub2_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_sub2_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_sub2_all;



implementation {:inline 1} _LOG_READ_$$d_in2_sub2_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub2_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_sub2_all);
    return;
}



procedure _CHECK_READ_$$d_in2_sub2_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sub2_all"} {:array "$$d_in2_sub2_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all);
  requires {:source_name "d_in2_sub2_all"} {:array "$$d_in2_sub2_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_sub2_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_sub2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_sub2_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub2_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_sub2_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub2_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_sub2_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sub2_all"} {:array "$$d_in2_sub2_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub2_all != _value);
  requires {:source_name "d_in2_sub2_all"} {:array "$$d_in2_sub2_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sub2_all != _value);
  requires {:source_name "d_in2_sub2_all"} {:array "$$d_in2_sub2_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_sub2_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_sub2_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_sub2_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_sub2_all"} {:array "$$d_in2_sub2_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_sub2_all"} {:array "$$d_in2_sub2_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_sub2_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_sub2_all);
    return;
}



const _WATCHED_VALUE_$$d_in2_sqr_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_sqr_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_sqr_all;



implementation {:inline 1} _LOG_READ_$$d_in2_sqr_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_sqr_all);
    return;
}



procedure _CHECK_READ_$$d_in2_sqr_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sqr_all"} {:array "$$d_in2_sqr_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all);
  requires {:source_name "d_in2_sqr_all"} {:array "$$d_in2_sqr_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_sqr_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_sqr_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_sqr_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_sqr_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_sqr_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sqr_all"} {:array "$$d_in2_sqr_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_all != _value);
  requires {:source_name "d_in2_sqr_all"} {:array "$$d_in2_sqr_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_all != _value);
  requires {:source_name "d_in2_sqr_all"} {:array "$$d_in2_sqr_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_sqr_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_sqr_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_sqr_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_sqr_all"} {:array "$$d_in2_sqr_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_sqr_all"} {:array "$$d_in2_sqr_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_all);
    return;
}



const _WATCHED_VALUE_$$d_in2_sqr_sub2_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;



implementation {:inline 1} _LOG_READ_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_sub2_all == _value then true else _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all);
    return;
}



procedure _CHECK_READ_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sqr_sub2_all"} {:array "$$d_in2_sqr_sub2_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all);
  requires {:source_name "d_in2_sqr_sub2_all"} {:array "$$d_in2_sqr_sub2_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all, _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all;



implementation {:inline 1} _LOG_WRITE_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_sub2_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_sub2_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all);
    return;
}



procedure _CHECK_WRITE_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in2_sqr_sub2_all"} {:array "$$d_in2_sqr_sub2_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_sub2_all != _value);
  requires {:source_name "d_in2_sqr_sub2_all"} {:array "$$d_in2_sqr_sub2_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in2_sqr_sub2_all != _value);
  requires {:source_name "d_in2_sqr_sub2_all"} {:array "$$d_in2_sqr_sub2_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in2_sqr_sub2_all"} {:array "$$d_in2_sqr_sub2_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in2_sqr_sub2_all"} {:array "$$d_in2_sqr_sub2_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in2_sqr_sub2_all);
    return;
}



const _WATCHED_VALUE_$$d_in_sqr_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in_sqr_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in_sqr_all;



implementation {:inline 1} _LOG_READ_$$d_in_sqr_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_sqr_all == _value then true else _READ_HAS_OCCURRED_$$d_in_sqr_all);
    return;
}



procedure _CHECK_READ_$$d_in_sqr_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in_sqr_all"} {:array "$$d_in_sqr_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all);
  requires {:source_name "d_in_sqr_all"} {:array "$$d_in_sqr_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in_sqr_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in_sqr_all, _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all;



implementation {:inline 1} _LOG_WRITE_$$d_in_sqr_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_sqr_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in_sqr_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_sqr_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all);
    return;
}



procedure _CHECK_WRITE_$$d_in_sqr_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in_sqr_all"} {:array "$$d_in_sqr_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_sqr_all != _value);
  requires {:source_name "d_in_sqr_all"} {:array "$$d_in_sqr_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_sqr_all != _value);
  requires {:source_name "d_in_sqr_all"} {:array "$$d_in_sqr_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in_sqr_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in_sqr_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in_sqr_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in_sqr_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in_sqr_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in_sqr_all"} {:array "$$d_in_sqr_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in_sqr_all"} {:array "$$d_in_sqr_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in_sqr_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in_sqr_all);
    return;
}



const _WATCHED_VALUE_$$d_tMask_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_tMask_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_tMask_all;



implementation {:inline 1} _LOG_READ_$$d_tMask_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_tMask_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tMask_all == _value then true else _READ_HAS_OCCURRED_$$d_tMask_all);
    return;
}



procedure _CHECK_READ_$$d_tMask_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tMask_all"} {:array "$$d_tMask_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_tMask_all);
  requires {:source_name "d_tMask_all"} {:array "$$d_tMask_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_tMask_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_tMask_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_tMask_all, _WRITE_READ_BENIGN_FLAG_$$d_tMask_all;



implementation {:inline 1} _LOG_WRITE_$$d_tMask_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_tMask_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tMask_all == _value then true else _WRITE_HAS_OCCURRED_$$d_tMask_all);
    _WRITE_READ_BENIGN_FLAG_$$d_tMask_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tMask_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_tMask_all);
    return;
}



procedure _CHECK_WRITE_$$d_tMask_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_tMask_all"} {:array "$$d_tMask_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tMask_all != _value);
  requires {:source_name "d_tMask_all"} {:array "$$d_tMask_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_tMask_all != _value);
  requires {:source_name "d_tMask_all"} {:array "$$d_tMask_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_tMask_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_tMask_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_tMask_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_tMask_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_tMask_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_tMask_all(_P: bool, _offset: bv32);
  requires {:source_name "d_tMask_all"} {:array "$$d_tMask_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_tMask_all"} {:array "$$d_tMask_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tMask_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_tMask_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_tMask_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_tMask_all := (if _P && _WRITE_HAS_OCCURRED_$$d_tMask_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_tMask_all);
    return;
}



const _WATCHED_VALUE_$$d_mask_conv_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_mask_conv_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_mask_conv_all;



implementation {:inline 1} _LOG_READ_$$d_mask_conv_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_mask_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_mask_conv_all == _value then true else _READ_HAS_OCCURRED_$$d_mask_conv_all);
    return;
}



procedure _CHECK_READ_$$d_mask_conv_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_mask_conv_all"} {:array "$$d_mask_conv_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all);
  requires {:source_name "d_mask_conv_all"} {:array "$$d_mask_conv_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_mask_conv_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_mask_conv_all, _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all;



implementation {:inline 1} _LOG_WRITE_$$d_mask_conv_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_mask_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_mask_conv_all == _value then true else _WRITE_HAS_OCCURRED_$$d_mask_conv_all);
    _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_mask_conv_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all);
    return;
}



procedure _CHECK_WRITE_$$d_mask_conv_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_mask_conv_all"} {:array "$$d_mask_conv_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_mask_conv_all != _value);
  requires {:source_name "d_mask_conv_all"} {:array "$$d_mask_conv_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_mask_conv_all != _value);
  requires {:source_name "d_mask_conv_all"} {:array "$$d_mask_conv_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_mask_conv_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_mask_conv_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_mask_conv_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_mask_conv_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_mask_conv_all(_P: bool, _offset: bv32);
  requires {:source_name "d_mask_conv_all"} {:array "$$d_mask_conv_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_mask_conv_all"} {:array "$$d_mask_conv_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all := (if _P && _WRITE_HAS_OCCURRED_$$d_mask_conv_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_mask_conv_all);
    return;
}



const _WATCHED_VALUE_$$d_in_mod_temp_all: bv32;

procedure {:inline 1} _LOG_READ_$$d_in_mod_temp_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$d_in_mod_temp_all;



implementation {:inline 1} _LOG_READ_$$d_in_mod_temp_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$d_in_mod_temp_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_mod_temp_all == _value then true else _READ_HAS_OCCURRED_$$d_in_mod_temp_all);
    return;
}



procedure _CHECK_READ_$$d_in_mod_temp_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in_mod_temp_all"} {:array "$$d_in_mod_temp_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all);
  requires {:source_name "d_in_mod_temp_all"} {:array "$$d_in_mod_temp_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all: bool;

procedure {:inline 1} _LOG_WRITE_$$d_in_mod_temp_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all, _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all;



implementation {:inline 1} _LOG_WRITE_$$d_in_mod_temp_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_mod_temp_all == _value then true else _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all);
    _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_mod_temp_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all);
    return;
}



procedure _CHECK_WRITE_$$d_in_mod_temp_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "d_in_mod_temp_all"} {:array "$$d_in_mod_temp_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_mod_temp_all != _value);
  requires {:source_name "d_in_mod_temp_all"} {:array "$$d_in_mod_temp_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$d_in_mod_temp_all != _value);
  requires {:source_name "d_in_mod_temp_all"} {:array "$$d_in_mod_temp_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$d_in_mod_temp_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;



implementation {:inline 1} _LOG_ATOMIC_$$d_in_mod_temp_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all);
    return;
}



procedure _CHECK_ATOMIC_$$d_in_mod_temp_all(_P: bool, _offset: bv32);
  requires {:source_name "d_in_mod_temp_all"} {:array "$$d_in_mod_temp_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "d_in_mod_temp_all"} {:array "$$d_in_mod_temp_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all := (if _P && _WRITE_HAS_OCCURRED_$$d_in_mod_temp_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$d_in_mod_temp_all);
    return;
}



const _WATCHED_VALUE_$$in_partial_sum_all: bv32;

procedure {:inline 1} _LOG_READ_$$in_partial_sum_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$in_partial_sum_all;



implementation {:inline 1} _LOG_READ_$$in_partial_sum_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$in_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_partial_sum_all == _value then true else _READ_HAS_OCCURRED_$$in_partial_sum_all);
    return;
}



procedure _CHECK_READ_$$in_partial_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_partial_sum_all"} {:array "$$in_partial_sum_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all);
  requires {:source_name "in_partial_sum_all"} {:array "$$in_partial_sum_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all: bool;

procedure {:inline 1} _LOG_WRITE_$$in_partial_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$in_partial_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all;



implementation {:inline 1} _LOG_WRITE_$$in_partial_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$in_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_partial_sum_all == _value then true else _WRITE_HAS_OCCURRED_$$in_partial_sum_all);
    _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_partial_sum_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all);
    return;
}



procedure _CHECK_WRITE_$$in_partial_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_partial_sum_all"} {:array "$$in_partial_sum_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_partial_sum_all != _value);
  requires {:source_name "in_partial_sum_all"} {:array "$$in_partial_sum_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_partial_sum_all != _value);
  requires {:source_name "in_partial_sum_all"} {:array "$$in_partial_sum_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$in_partial_sum_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;



implementation {:inline 1} _LOG_ATOMIC_$$in_partial_sum_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$in_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$in_partial_sum_all);
    return;
}



procedure _CHECK_ATOMIC_$$in_partial_sum_all(_P: bool, _offset: bv32);
  requires {:source_name "in_partial_sum_all"} {:array "$$in_partial_sum_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "in_partial_sum_all"} {:array "$$in_partial_sum_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all := (if _P && _WRITE_HAS_OCCURRED_$$in_partial_sum_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$in_partial_sum_all);
    return;
}



const _WATCHED_VALUE_$$in_sqr_partial_sum_all: bv32;

procedure {:inline 1} _LOG_READ_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;



implementation {:inline 1} _LOG_READ_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_partial_sum_all == _value then true else _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all);
    return;
}



procedure _CHECK_READ_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_sqr_partial_sum_all"} {:array "$$in_sqr_partial_sum_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all);
  requires {:source_name "in_sqr_partial_sum_all"} {:array "$$in_sqr_partial_sum_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all: bool;

procedure {:inline 1} _LOG_WRITE_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all;



implementation {:inline 1} _LOG_WRITE_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_partial_sum_all == _value then true else _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all);
    _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_partial_sum_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all);
    return;
}



procedure _CHECK_WRITE_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_sqr_partial_sum_all"} {:array "$$in_sqr_partial_sum_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_partial_sum_all != _value);
  requires {:source_name "in_sqr_partial_sum_all"} {:array "$$in_sqr_partial_sum_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_partial_sum_all != _value);
  requires {:source_name "in_sqr_partial_sum_all"} {:array "$$in_sqr_partial_sum_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;



implementation {:inline 1} _LOG_ATOMIC_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all);
    return;
}



procedure _CHECK_ATOMIC_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32);
  requires {:source_name "in_sqr_partial_sum_all"} {:array "$$in_sqr_partial_sum_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "in_sqr_partial_sum_all"} {:array "$$in_sqr_partial_sum_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all := (if _P && _WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$in_sqr_partial_sum_all);
    return;
}



const _WATCHED_VALUE_$$par_max_val_all: bv32;

procedure {:inline 1} _LOG_READ_$$par_max_val_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$par_max_val_all;



implementation {:inline 1} _LOG_READ_$$par_max_val_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$par_max_val_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_val_all == _value then true else _READ_HAS_OCCURRED_$$par_max_val_all);
    return;
}



procedure _CHECK_READ_$$par_max_val_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "par_max_val_all"} {:array "$$par_max_val_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$par_max_val_all);
  requires {:source_name "par_max_val_all"} {:array "$$par_max_val_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$par_max_val_all: bool;

procedure {:inline 1} _LOG_WRITE_$$par_max_val_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$par_max_val_all, _WRITE_READ_BENIGN_FLAG_$$par_max_val_all;



implementation {:inline 1} _LOG_WRITE_$$par_max_val_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$par_max_val_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_val_all == _value then true else _WRITE_HAS_OCCURRED_$$par_max_val_all);
    _WRITE_READ_BENIGN_FLAG_$$par_max_val_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_val_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$par_max_val_all);
    return;
}



procedure _CHECK_WRITE_$$par_max_val_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "par_max_val_all"} {:array "$$par_max_val_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_val_all != _value);
  requires {:source_name "par_max_val_all"} {:array "$$par_max_val_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_val_all != _value);
  requires {:source_name "par_max_val_all"} {:array "$$par_max_val_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$par_max_val_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$par_max_val_all;



implementation {:inline 1} _LOG_ATOMIC_$$par_max_val_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$par_max_val_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$par_max_val_all);
    return;
}



procedure _CHECK_ATOMIC_$$par_max_val_all(_P: bool, _offset: bv32);
  requires {:source_name "par_max_val_all"} {:array "$$par_max_val_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "par_max_val_all"} {:array "$$par_max_val_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$par_max_val_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$par_max_val_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$par_max_val_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$par_max_val_all := (if _P && _WRITE_HAS_OCCURRED_$$par_max_val_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$par_max_val_all);
    return;
}



const _WATCHED_VALUE_$$par_max_coo_all: bv32;

procedure {:inline 1} _LOG_READ_$$par_max_coo_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$par_max_coo_all;



implementation {:inline 1} _LOG_READ_$$par_max_coo_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$par_max_coo_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_coo_all == _value then true else _READ_HAS_OCCURRED_$$par_max_coo_all);
    return;
}



procedure _CHECK_READ_$$par_max_coo_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "par_max_coo_all"} {:array "$$par_max_coo_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all);
  requires {:source_name "par_max_coo_all"} {:array "$$par_max_coo_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all: bool;

procedure {:inline 1} _LOG_WRITE_$$par_max_coo_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$par_max_coo_all, _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all;



implementation {:inline 1} _LOG_WRITE_$$par_max_coo_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$par_max_coo_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_coo_all == _value then true else _WRITE_HAS_OCCURRED_$$par_max_coo_all);
    _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_coo_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all);
    return;
}



procedure _CHECK_WRITE_$$par_max_coo_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "par_max_coo_all"} {:array "$$par_max_coo_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_coo_all != _value);
  requires {:source_name "par_max_coo_all"} {:array "$$par_max_coo_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$par_max_coo_all != _value);
  requires {:source_name "par_max_coo_all"} {:array "$$par_max_coo_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$par_max_coo_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$par_max_coo_all;



implementation {:inline 1} _LOG_ATOMIC_$$par_max_coo_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$par_max_coo_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$par_max_coo_all);
    return;
}



procedure _CHECK_ATOMIC_$$par_max_coo_all(_P: bool, _offset: bv32);
  requires {:source_name "par_max_coo_all"} {:array "$$par_max_coo_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "par_max_coo_all"} {:array "$$par_max_coo_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$par_max_coo_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$par_max_coo_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all := (if _P && _WRITE_HAS_OCCURRED_$$par_max_coo_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$par_max_coo_all);
    return;
}



const _WATCHED_VALUE_$$in_final_sum_all: bv32;

procedure {:inline 1} _LOG_READ_$$in_final_sum_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$in_final_sum_all;



implementation {:inline 1} _LOG_READ_$$in_final_sum_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$in_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_final_sum_all == _value then true else _READ_HAS_OCCURRED_$$in_final_sum_all);
    return;
}



procedure _CHECK_READ_$$in_final_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_final_sum_all"} {:array "$$in_final_sum_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all);
  requires {:source_name "in_final_sum_all"} {:array "$$in_final_sum_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all: bool;

procedure {:inline 1} _LOG_WRITE_$$in_final_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$in_final_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all;



implementation {:inline 1} _LOG_WRITE_$$in_final_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$in_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_final_sum_all == _value then true else _WRITE_HAS_OCCURRED_$$in_final_sum_all);
    _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_final_sum_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all);
    return;
}



procedure _CHECK_WRITE_$$in_final_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_final_sum_all"} {:array "$$in_final_sum_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_final_sum_all != _value);
  requires {:source_name "in_final_sum_all"} {:array "$$in_final_sum_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_final_sum_all != _value);
  requires {:source_name "in_final_sum_all"} {:array "$$in_final_sum_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$in_final_sum_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$in_final_sum_all;



implementation {:inline 1} _LOG_ATOMIC_$$in_final_sum_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$in_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$in_final_sum_all);
    return;
}



procedure _CHECK_ATOMIC_$$in_final_sum_all(_P: bool, _offset: bv32);
  requires {:source_name "in_final_sum_all"} {:array "$$in_final_sum_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "in_final_sum_all"} {:array "$$in_final_sum_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_final_sum_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_final_sum_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all := (if _P && _WRITE_HAS_OCCURRED_$$in_final_sum_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$in_final_sum_all);
    return;
}



const _WATCHED_VALUE_$$in_sqr_final_sum_all: bv32;

procedure {:inline 1} _LOG_READ_$$in_sqr_final_sum_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$in_sqr_final_sum_all;



implementation {:inline 1} _LOG_READ_$$in_sqr_final_sum_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$in_sqr_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_final_sum_all == _value then true else _READ_HAS_OCCURRED_$$in_sqr_final_sum_all);
    return;
}



procedure _CHECK_READ_$$in_sqr_final_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_sqr_final_sum_all"} {:array "$$in_sqr_final_sum_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all);
  requires {:source_name "in_sqr_final_sum_all"} {:array "$$in_sqr_final_sum_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all: bool;

procedure {:inline 1} _LOG_WRITE_$$in_sqr_final_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all, _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all;



implementation {:inline 1} _LOG_WRITE_$$in_sqr_final_sum_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_final_sum_all == _value then true else _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all);
    _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_final_sum_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all);
    return;
}



procedure _CHECK_WRITE_$$in_sqr_final_sum_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "in_sqr_final_sum_all"} {:array "$$in_sqr_final_sum_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_final_sum_all != _value);
  requires {:source_name "in_sqr_final_sum_all"} {:array "$$in_sqr_final_sum_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$in_sqr_final_sum_all != _value);
  requires {:source_name "in_sqr_final_sum_all"} {:array "$$in_sqr_final_sum_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$in_sqr_final_sum_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;



implementation {:inline 1} _LOG_ATOMIC_$$in_sqr_final_sum_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all);
    return;
}



procedure _CHECK_ATOMIC_$$in_sqr_final_sum_all(_P: bool, _offset: bv32);
  requires {:source_name "in_sqr_final_sum_all"} {:array "$$in_sqr_final_sum_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "in_sqr_final_sum_all"} {:array "$$in_sqr_final_sum_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all := (if _P && _WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$in_sqr_final_sum_all);
    return;
}



const _WATCHED_VALUE_$$denomT_all: bv32;

procedure {:inline 1} _LOG_READ_$$denomT_all(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$denomT_all;



implementation {:inline 1} _LOG_READ_$$denomT_all(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$denomT_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$denomT_all == _value then true else _READ_HAS_OCCURRED_$$denomT_all);
    return;
}



procedure _CHECK_READ_$$denomT_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "denomT_all"} {:array "$$denomT_all"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$denomT_all);
  requires {:source_name "denomT_all"} {:array "$$denomT_all"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$denomT_all: bool;

procedure {:inline 1} _LOG_WRITE_$$denomT_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$denomT_all, _WRITE_READ_BENIGN_FLAG_$$denomT_all;



implementation {:inline 1} _LOG_WRITE_$$denomT_all(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$denomT_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$denomT_all == _value then true else _WRITE_HAS_OCCURRED_$$denomT_all);
    _WRITE_READ_BENIGN_FLAG_$$denomT_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$denomT_all == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$denomT_all);
    return;
}



procedure _CHECK_WRITE_$$denomT_all(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "denomT_all"} {:array "$$denomT_all"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$denomT_all != _value);
  requires {:source_name "denomT_all"} {:array "$$denomT_all"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$denomT_all != _value);
  requires {:source_name "denomT_all"} {:array "$$denomT_all"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$denomT_all(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$denomT_all;



implementation {:inline 1} _LOG_ATOMIC_$$denomT_all(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$denomT_all := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$denomT_all);
    return;
}



procedure _CHECK_ATOMIC_$$denomT_all(_P: bool, _offset: bv32);
  requires {:source_name "denomT_all"} {:array "$$denomT_all"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset);
  requires {:source_name "denomT_all"} {:array "$$denomT_all"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$denomT_all(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$denomT_all;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$denomT_all(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$denomT_all := (if _P && _WRITE_HAS_OCCURRED_$$denomT_all && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$denomT_all);
    return;
}



const _WATCHED_VALUE_$$checksum: bv32;

procedure {:inline 1} _LOG_READ_$$checksum(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$checksum;



implementation {:inline 1} _LOG_READ_$$checksum(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$checksum := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$checksum == _value then true else _READ_HAS_OCCURRED_$$checksum);
    return;
}



procedure _CHECK_READ_$$checksum(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "checksum"} {:array "$$checksum"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$checksum);
  requires {:source_name "checksum"} {:array "$$checksum"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$checksum: bool;

procedure {:inline 1} _LOG_WRITE_$$checksum(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$checksum, _WRITE_READ_BENIGN_FLAG_$$checksum;



implementation {:inline 1} _LOG_WRITE_$$checksum(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$checksum := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$checksum == _value then true else _WRITE_HAS_OCCURRED_$$checksum);
    _WRITE_READ_BENIGN_FLAG_$$checksum := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$checksum == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$checksum);
    return;
}



procedure _CHECK_WRITE_$$checksum(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "checksum"} {:array "$$checksum"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$checksum != _value);
  requires {:source_name "checksum"} {:array "$$checksum"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$checksum != _value);
  requires {:source_name "checksum"} {:array "$$checksum"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$checksum(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$checksum;



implementation {:inline 1} _LOG_ATOMIC_$$checksum(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$checksum := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$checksum);
    return;
}



procedure _CHECK_ATOMIC_$$checksum(_P: bool, _offset: bv32);
  requires {:source_name "checksum"} {:array "$$checksum"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset);
  requires {:source_name "checksum"} {:array "$$checksum"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$checksum(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$checksum;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$checksum(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$checksum := (if _P && _WRITE_HAS_OCCURRED_$$checksum && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$checksum);
    return;
}



var _TRACKING: bool;

implementation {:inline 1} $bugle_barrier_duplicated_0($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_1($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_2($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_3($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_4($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_5($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_6($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_7($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_8($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_9($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_10($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_11($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_12($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_13($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_14($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_15($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_16($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_17($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_18($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_19($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_20($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_21($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_22($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_23($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_24($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_25($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_26($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_27($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_28($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_29($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_30($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_31($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_32($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_33($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_34($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_35($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_36($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_37($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_38($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_39($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_40($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoRow;
    goto anon1;

  anon1:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoCol;
    goto anon2;

  anon2:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoRowLoc;
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEndoColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEndoColLoc;
    goto anon4;

  anon4:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiRow;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiRow;
    goto anon5;

  anon5:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiCol;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiCol;
    goto anon6;

  anon6:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiRowLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiRowLoc;
    goto anon7;

  anon7:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tEpiColLoc;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tEpiColLoc;
    goto anon8;

  anon8:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_endoT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_endoT;
    goto anon9;

  anon9:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_epiT;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_epiT;
    goto anon10;

  anon10:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_all;
    goto anon11;

  anon11:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_conv_all;
    goto anon12;

  anon12:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_all;
    goto anon13;

  anon13:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_pad_cumv_sel_all;
    goto anon14;

  anon14:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_all;
    goto anon15;

  anon15:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub_cumh_sel_all;
    goto anon16;

  anon16:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sub2_all;
    goto anon17;

  anon17:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_all;
    goto anon18;

  anon18:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in2_sqr_sub2_all;
    goto anon19;

  anon19:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_sqr_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_sqr_all;
    goto anon20;

  anon20:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_tMask_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_tMask_all;
    goto anon21;

  anon21:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_mask_conv_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_mask_conv_all;
    goto anon22;

  anon22:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$d_in_mod_temp_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$d_in_mod_temp_all;
    goto anon23;

  anon23:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_partial_sum_all;
    goto anon24;

  anon24:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_partial_sum_all;
    goto anon25;

  anon25:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_val_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_val_all;
    goto anon26;

  anon26:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$par_max_coo_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$par_max_coo_all;
    goto anon27;

  anon27:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_final_sum_all;
    goto anon28;

  anon28:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$in_sqr_final_sum_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$in_sqr_final_sum_all;
    goto anon29;

  anon29:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$denomT_all;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$denomT_all;
    goto anon30;

  anon30:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon61;

  anon61:
    havoc _TRACKING;
    return;

  anon63_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$d_endoRow;
    goto anon32;

  anon32:
    havoc $$d_endoCol;
    goto anon33;

  anon33:
    havoc $$d_tEndoRowLoc;
    goto anon34;

  anon34:
    havoc $$d_tEndoColLoc;
    goto anon35;

  anon35:
    havoc $$d_epiRow;
    goto anon36;

  anon36:
    havoc $$d_epiCol;
    goto anon37;

  anon37:
    havoc $$d_tEpiRowLoc;
    goto anon38;

  anon38:
    havoc $$d_tEpiColLoc;
    goto anon39;

  anon39:
    havoc $$d_endoT;
    goto anon40;

  anon40:
    havoc $$d_epiT;
    goto anon41;

  anon41:
    havoc $$d_in2_all;
    goto anon42;

  anon42:
    havoc $$d_conv_all;
    goto anon43;

  anon43:
    havoc $$d_in2_pad_cumv_all;
    goto anon44;

  anon44:
    havoc $$d_in2_pad_cumv_sel_all;
    goto anon45;

  anon45:
    havoc $$d_in2_sub_cumh_all;
    goto anon46;

  anon46:
    havoc $$d_in2_sub_cumh_sel_all;
    goto anon47;

  anon47:
    havoc $$d_in2_sub2_all;
    goto anon48;

  anon48:
    havoc $$d_in2_sqr_all;
    goto anon49;

  anon49:
    havoc $$d_in2_sqr_sub2_all;
    goto anon50;

  anon50:
    havoc $$d_in_sqr_all;
    goto anon51;

  anon51:
    havoc $$d_tMask_all;
    goto anon52;

  anon52:
    havoc $$d_mask_conv_all;
    goto anon53;

  anon53:
    havoc $$d_in_mod_temp_all;
    goto anon54;

  anon54:
    havoc $$in_partial_sum_all;
    goto anon55;

  anon55:
    havoc $$in_sqr_partial_sum_all;
    goto anon56;

  anon56:
    havoc $$par_max_val_all;
    goto anon57;

  anon57:
    havoc $$par_max_coo_all;
    goto anon58;

  anon58:
    havoc $$in_final_sum_all;
    goto anon59;

  anon59:
    havoc $$in_sqr_final_sum_all;
    goto anon60;

  anon60:
    havoc $$denomT_all;
    goto anon61;

  anon62_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



const {:existential true} _b389: bool;

const {:existential true} _b390: bool;

const {:existential true} _b391: bool;

const {:existential true} _b392: bool;

function {:bvbuiltin "bvsdiv"} BV32_DIV(bv32, bv32) : bv32;

const {:existential true} _b393: bool;

const {:existential true} _b394: bool;

const {:existential true} _b395: bool;

const {:existential true} _b396: bool;

const {:existential true} _b397: bool;

const {:existential true} _b398: bool;

const {:existential true} _b399: bool;

const {:existential true} _b400: bool;

const {:existential true} _b401: bool;

const {:existential true} _b402: bool;

const {:existential true} _b403: bool;

const {:existential true} _b404: bool;

const {:existential true} _b405: bool;

const {:existential true} _b406: bool;

const {:existential true} _b407: bool;

const {:existential true} _b408: bool;

const {:existential true} _b409: bool;

const {:existential true} _b410: bool;

const {:existential true} _b411: bool;

const {:existential true} _b412: bool;

const {:existential true} _b413: bool;

const {:existential true} _b414: bool;

const {:existential true} _b415: bool;

const {:existential true} _b416: bool;

const {:existential true} _b417: bool;

const {:existential true} _b418: bool;

const {:existential true} _b419: bool;

const {:existential true} _b420: bool;

const {:existential true} _b421: bool;

const {:existential true} _b422: bool;

const {:existential true} _b423: bool;

const {:existential true} _b424: bool;

const {:existential true} _b425: bool;

const {:existential true} _b426: bool;

const {:existential true} _b427: bool;

const {:existential true} _b428: bool;

const {:existential true} _b429: bool;

const {:existential true} _b430: bool;

const {:existential true} _b431: bool;

const {:existential true} _b432: bool;

const {:existential true} _b433: bool;

const {:existential true} _b434: bool;

const {:existential true} _b435: bool;

const {:existential true} _b436: bool;

const {:existential true} _b437: bool;

const {:existential true} _b438: bool;

const {:existential true} _b439: bool;

const {:existential true} _b440: bool;

const {:existential true} _b441: bool;

const {:existential true} _b442: bool;

const {:existential true} _b443: bool;

const {:existential true} _b444: bool;

const {:existential true} _b445: bool;

const {:existential true} _b446: bool;

const {:existential true} _b447: bool;

const {:existential true} _b448: bool;

const {:existential true} _b449: bool;

const {:existential true} _b450: bool;

const {:existential true} _b451: bool;

const {:existential true} _b452: bool;

const {:existential true} _b453: bool;

const {:existential true} _b454: bool;

const {:existential true} _b455: bool;

const {:existential true} _b456: bool;

const {:existential true} _b457: bool;

const {:existential true} _b458: bool;
