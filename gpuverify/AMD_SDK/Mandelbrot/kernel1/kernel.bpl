type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x: [bv32]bv8, y: bv32) returns (z$1: bv8, A$1: [bv32]bv8, z$2: bv8, A$2: [bv32]bv8);



var {:source_name "mandelbrotImage"} {:global} $$mandelbrotImage: [bv32]bv8;

axiom {:array_info "$$mandelbrotImage"} {:global} {:elem_width 8} {:source_name "mandelbrotImage"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$mandelbrotImage: bool;

var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$mandelbrotImage: bool;

var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$mandelbrotImage: bool;

axiom {:array_info "$$color"} {:elem_width 8} {:source_name "color"} {:source_elem_width 32} {:source_dimensions "4"} true;

const _WATCHED_OFFSET: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

function FADD32(bv32, bv32) : bv32;

function FCOS32(bv32) : bv32;

function FDIV32(bv32, bv32) : bv32;

function FEQ32(bv32, bv32) : bool;

function FLOG32(bv32) : bv32;

function FLT32(bv32, bv32) : bool;

function FMUL32(bv32, bv32) : bv32;

function FP32_TO_UI8(bv32) : bv8;

function FSUB32(bv32, bv32) : bv32;

function SI32_TO_FP32(bv32) : bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;

function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;

function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;

function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;

function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;

function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;

function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;

function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;

function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;

procedure {:source_name "mandelbrot_vector_float"} {:kernel} $mandelbrot_vector_float($posx: bv32, $posy: bv32, $stepSizeX: bv32, $stepSizeY: bv32, $maxIterations: bv32, $width: bv32, $bench: bv32);
  requires !_READ_HAS_OCCURRED_$$mandelbrotImage && !_WRITE_HAS_OCCURRED_$$mandelbrotImage && !_ATOMIC_HAS_OCCURRED_$$mandelbrotImage;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> local_id_x$1 != local_id_x$2 || local_id_y$1 != local_id_y$2 || local_id_z$1 != local_id_z$2;
  modifies _WRITE_HAS_OCCURRED_$$mandelbrotImage, _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage, _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage;



implementation {:source_name "mandelbrot_vector_float"} {:kernel} $mandelbrot_vector_float($posx: bv32, $posy: bv32, $stepSizeX: bv32, $stepSizeY: bv32, $maxIterations: bv32, $width: bv32, $bench: bv32)
{
  var $iter.0$1: bv32;
  var $iter.0$2: bv32;
  var $stay.0$1: bv128;
  var $stay.0$2: bv128;
  var $ccount.0$1: bv128;
  var $ccount.0$2: bv128;
  var $savx.0$1: bv128;
  var $savx.0$2: bv128;
  var $savy.0$1: bv128;
  var $savy.0$2: bv128;
  var $0$1: bv1;
  var $0$2: bv1;
  var $1$1: bv32;
  var $1$2: bv32;
  var $2$1: bv32;
  var $2$2: bv32;
  var $3$1: bv32;
  var $3$2: bv32;
  var $4$1: bv32;
  var $4$2: bv32;
  var $5$1: bv32;
  var $5$2: bv32;
  var $6$1: bv32;
  var $6$2: bv32;
  var $7$1: bv32;
  var $7$2: bv32;
  var $8$1: bv32;
  var $8$2: bv32;
  var $ccount.2$1: bv128;
  var $ccount.2$2: bv128;
  var $savx.2$1: bv128;
  var $savx.2$2: bv128;
  var $savy.2$1: bv128;
  var $savy.2$2: bv128;
  var $iter.1$1: bv32;
  var $iter.1$2: bv32;
  var $stay.1$1: bv128;
  var $stay.1$2: bv128;
  var $ccount.1$1: bv128;
  var $ccount.1$2: bv128;
  var $savx.1$1: bv128;
  var $savx.1$2: bv128;
  var $savy.1$1: bv128;
  var $savy.1$2: bv128;
  var $9$1: bv1;
  var $9$2: bv1;
  var $10$1: bv1;
  var $10$2: bv1;
  var $11$1: bv1;
  var $11$2: bv1;
  var $12$1: bv1;
  var $12$2: bv1;
  var $13$1: bv32;
  var $13$2: bv32;
  var $14$1: bv32;
  var $14$2: bv32;
  var $15$1: bv32;
  var $15$2: bv32;
  var $16$1: bv32;
  var $16$2: bv32;
  var $17$1: bv32;
  var $17$2: bv32;
  var $18$1: bv32;
  var $18$2: bv32;
  var $19$1: bv32;
  var $19$2: bv32;
  var $20$1: bv32;
  var $20$2: bv32;
  var $21$1: bv1;
  var $21$2: bv1;
  var v0$1: bv32;
  var v0$2: bv32;
  var v1$1: bv32;
  var v1$2: bv32;
  var v2$1: bv32;
  var v2$2: bv32;
  var v4$1: bv32;
  var v4$2: bv32;
  var v3$1: bv32;
  var v3$2: bv32;
  var v5$1: bv32;
  var v5$2: bv32;
  var v6$1: bv32;
  var v6$2: bv32;
  var v263$1: bv8;
  var v263$2: bv8;
  var v264$1: bv8;
  var v264$2: bv8;
  var v265$1: bv8;
  var v265$2: bv8;
  var v266$1: bv8;
  var v266$2: bv8;
  var v7$1: bv32;
  var v7$2: bv32;
  var v8$1: bv32;
  var v8$2: bv32;
  var v9$1: bv32;
  var v9$2: bv32;
  var v10$1: bv32;
  var v10$2: bv32;
  var v11$1: bv32;
  var v11$2: bv32;
  var v12$1: bv32;
  var v12$2: bv32;
  var v13$1: bv32;
  var v13$2: bv32;
  var v14$1: bv32;
  var v14$2: bv32;
  var v15$1: bool;
  var v15$2: bool;
  var v21$1: bv32;
  var v21$2: bv32;
  var v16$1: bv32;
  var v16$2: bv32;
  var v17$1: bv32;
  var v17$2: bv32;
  var v18$1: bv32;
  var v18$2: bv32;
  var v19$1: bv32;
  var v19$2: bv32;
  var v20$1: bv32;
  var v20$2: bv32;
  var v22$1: bv32;
  var v22$2: bv32;
  var v23$1: bv32;
  var v23$2: bv32;
  var v24$1: bv32;
  var v24$2: bv32;
  var v25$1: bv32;
  var v25$2: bv32;
  var v26$1: bv32;
  var v26$2: bv32;
  var v27$1: bv32;
  var v27$2: bv32;
  var v40$1: bv32;
  var v40$2: bv32;
  var v41$1: bv32;
  var v41$2: bv32;
  var v42$1: bv32;
  var v42$2: bv32;
  var v43$1: bv32;
  var v43$2: bv32;
  var v28$1: bv32;
  var v28$2: bv32;
  var v29$1: bv32;
  var v29$2: bv32;
  var v30$1: bv32;
  var v30$2: bv32;
  var v31$1: bv32;
  var v31$2: bv32;
  var v32$1: bv32;
  var v32$2: bv32;
  var v33$1: bv32;
  var v33$2: bv32;
  var v34$1: bv32;
  var v34$2: bv32;
  var v35$1: bv32;
  var v35$2: bv32;
  var v36$1: bv32;
  var v36$2: bv32;
  var v37$1: bv32;
  var v37$2: bv32;
  var v38$1: bv32;
  var v38$2: bv32;
  var v39$1: bv32;
  var v39$2: bv32;
  var v70$1: bv32;
  var v70$2: bv32;
  var v71$1: bv32;
  var v71$2: bv32;
  var v44$1: bv32;
  var v44$2: bv32;
  var v45$1: bv32;
  var v45$2: bv32;
  var v46$1: bv32;
  var v46$2: bv32;
  var v47$1: bv32;
  var v47$2: bv32;
  var v48$1: bv32;
  var v48$2: bv32;
  var v49$1: bv32;
  var v49$2: bv32;
  var v50$1: bv32;
  var v50$2: bv32;
  var v51$1: bv32;
  var v51$2: bv32;
  var v52$1: bv32;
  var v52$2: bv32;
  var v53$1: bv32;
  var v53$2: bv32;
  var v54$1: bv32;
  var v54$2: bv32;
  var v55$1: bv32;
  var v55$2: bv32;
  var v56$1: bv32;
  var v56$2: bv32;
  var v57$1: bv32;
  var v57$2: bv32;
  var v58$1: bv32;
  var v58$2: bv32;
  var v59$1: bv32;
  var v59$2: bv32;
  var v60$1: bv32;
  var v60$2: bv32;
  var v61$1: bv32;
  var v61$2: bv32;
  var v62$1: bv32;
  var v62$2: bv32;
  var v63$1: bv32;
  var v63$2: bv32;
  var v64$1: bv32;
  var v64$2: bv32;
  var v65$1: bv32;
  var v65$2: bv32;
  var v66$1: bv32;
  var v66$2: bv32;
  var v67$1: bv32;
  var v67$2: bv32;
  var v68$1: bv32;
  var v68$2: bv32;
  var v69$1: bv32;
  var v69$2: bv32;
  var v124$1: bv32;
  var v124$2: bv32;
  var v125$1: bv32;
  var v125$2: bv32;
  var v126$1: bv32;
  var v126$2: bv32;
  var v127$1: bv32;
  var v127$2: bv32;
  var v72$1: bv32;
  var v72$2: bv32;
  var v73$1: bv32;
  var v73$2: bv32;
  var v74$1: bv32;
  var v74$2: bv32;
  var v75$1: bv32;
  var v75$2: bv32;
  var v76$1: bv32;
  var v76$2: bv32;
  var v77$1: bv32;
  var v77$2: bv32;
  var v78$1: bv32;
  var v78$2: bv32;
  var v79$1: bv32;
  var v79$2: bv32;
  var v80$1: bv32;
  var v80$2: bv32;
  var v81$1: bv32;
  var v81$2: bv32;
  var v82$1: bv32;
  var v82$2: bv32;
  var v83$1: bv32;
  var v83$2: bv32;
  var v84$1: bv32;
  var v84$2: bv32;
  var v85$1: bv32;
  var v85$2: bv32;
  var v86$1: bv32;
  var v86$2: bv32;
  var v87$1: bv32;
  var v87$2: bv32;
  var v88$1: bv32;
  var v88$2: bv32;
  var v89$1: bv32;
  var v89$2: bv32;
  var v90$1: bv32;
  var v90$2: bv32;
  var v91$1: bv32;
  var v91$2: bv32;
  var v92$1: bv32;
  var v92$2: bv32;
  var v93$1: bv32;
  var v93$2: bv32;
  var v94$1: bv32;
  var v94$2: bv32;
  var v95$1: bv32;
  var v95$2: bv32;
  var v96$1: bv32;
  var v96$2: bv32;
  var v97$1: bv32;
  var v97$2: bv32;
  var v98$1: bv32;
  var v98$2: bv32;
  var v99$1: bv32;
  var v99$2: bv32;
  var v100$1: bv32;
  var v100$2: bv32;
  var v101$1: bv32;
  var v101$2: bv32;
  var v102$1: bv32;
  var v102$2: bv32;
  var v103$1: bv32;
  var v103$2: bv32;
  var v104$1: bv32;
  var v104$2: bv32;
  var v105$1: bv32;
  var v105$2: bv32;
  var v106$1: bv32;
  var v106$2: bv32;
  var v107$1: bv32;
  var v107$2: bv32;
  var v108$1: bv32;
  var v108$2: bv32;
  var v109$1: bv32;
  var v109$2: bv32;
  var v110$1: bv32;
  var v110$2: bv32;
  var v111$1: bv32;
  var v111$2: bv32;
  var v112$1: bv32;
  var v112$2: bv32;
  var v113$1: bv32;
  var v113$2: bv32;
  var v114$1: bv32;
  var v114$2: bv32;
  var v115$1: bv32;
  var v115$2: bv32;
  var v116$1: bv32;
  var v116$2: bv32;
  var v117$1: bv32;
  var v117$2: bv32;
  var v118$1: bv32;
  var v118$2: bv32;
  var v119$1: bv32;
  var v119$2: bv32;
  var v120$1: bv32;
  var v120$2: bv32;
  var v121$1: bv32;
  var v121$2: bv32;
  var v122$1: bv32;
  var v122$2: bv32;
  var v123$1: bv32;
  var v123$2: bv32;
  var v128$1: bv32;
  var v128$2: bv32;
  var v129$1: bv32;
  var v129$2: bv32;
  var v130$1: bv32;
  var v130$2: bv32;
  var v131$1: bv32;
  var v131$2: bv32;
  var v132$1: bv32;
  var v132$2: bv32;
  var v133$1: bv32;
  var v133$2: bv32;
  var v134$1: bv32;
  var v134$2: bv32;
  var v135$1: bv32;
  var v135$2: bv32;
  var v136$1: bv32;
  var v136$2: bv32;
  var v137$1: bv32;
  var v137$2: bv32;
  var v138$1: bv32;
  var v138$2: bv32;
  var v139$1: bv32;
  var v139$2: bv32;
  var v140$1: bv32;
  var v140$2: bv32;
  var v141$1: bv32;
  var v141$2: bv32;
  var v142$1: bv32;
  var v142$2: bv32;
  var v143$1: bv32;
  var v143$2: bv32;
  var v144$1: bv32;
  var v144$2: bv32;
  var v145$1: bv32;
  var v145$2: bv32;
  var v146$1: bv32;
  var v146$2: bv32;
  var v147$1: bv32;
  var v147$2: bv32;
  var v148$1: bv32;
  var v148$2: bv32;
  var v149$1: bv32;
  var v149$2: bv32;
  var v150$1: bv32;
  var v150$2: bv32;
  var v151$1: bv32;
  var v151$2: bv32;
  var v152$1: bool;
  var v152$2: bool;
  var v153$1: bool;
  var v153$2: bool;
  var v154$1: bool;
  var v154$2: bool;
  var v155$1: bool;
  var v155$2: bool;
  var v156$1: bool;
  var v156$2: bool;
  var v157$1: bool;
  var v157$2: bool;
  var v158$1: bool;
  var v158$2: bool;
  var v159$1: bool;
  var v159$2: bool;
  var v160$1: bool;
  var v160$2: bool;
  var v161$1: bv32;
  var v161$2: bv32;
  var v162$1: bool;
  var v162$2: bool;
  var v163$1: bv32;
  var v163$2: bv32;
  var v164$1: bv32;
  var v164$2: bv32;
  var v165$1: bool;
  var v165$2: bool;
  var v166$1: bv32;
  var v166$2: bv32;
  var v167$1: bv32;
  var v167$2: bv32;
  var v168$1: bool;
  var v168$2: bool;
  var v169$1: bv32;
  var v169$2: bv32;
  var v170$1: bv32;
  var v170$2: bv32;
  var v171$1: bool;
  var v171$2: bool;
  var v172$1: bv32;
  var v172$2: bv32;
  var v173$1: bv128;
  var v173$2: bv128;
  var v174$1: bv32;
  var v174$2: bv32;
  var v175$1: bool;
  var v175$2: bool;
  var v176$1: bool;
  var v176$2: bool;
  var v177$1: bool;
  var v177$2: bool;
  var v178$1: bool;
  var v178$2: bool;
  var v179$1: bv128;
  var v179$2: bv128;
  var v180$1: bool;
  var v180$2: bool;
  var v181$1: bool;
  var v181$2: bool;
  var v182$1: bool;
  var v182$2: bool;
  var v183$1: bool;
  var v183$2: bool;
  var v184$1: bv128;
  var v184$2: bv128;
  var v185$1: bool;
  var v185$2: bool;
  var v186$1: bv32;
  var v186$2: bv32;
  var v187$1: bv8;
  var v187$2: bv8;
  var v188$1: bv8;
  var v188$2: bv8;
  var v189$1: bv8;
  var v189$2: bv8;
  var v190$1: bv8;
  var v190$2: bv8;
  var v191$1: bv8;
  var v191$2: bv8;
  var v192$1: bv8;
  var v192$2: bv8;
  var v193$1: bv8;
  var v193$2: bv8;
  var v194$1: bv8;
  var v194$2: bv8;
  var v195$1: bv8;
  var v195$2: bv8;
  var v196$1: bv8;
  var v196$2: bv8;
  var v197$1: bv8;
  var v197$2: bv8;
  var v198$1: bv8;
  var v198$2: bv8;
  var v199$1: bv8;
  var v199$2: bv8;
  var v200$1: bv8;
  var v200$2: bv8;
  var v201$1: bv8;
  var v201$2: bv8;
  var v202$1: bv8;
  var v202$2: bv8;
  var v203$1: bool;
  var v203$2: bool;
  var v204$1: bv8;
  var v204$2: bv8;
  var v205$1: bv8;
  var v205$2: bv8;
  var v206$1: bv8;
  var v206$2: bv8;
  var v207$1: bv8;
  var v207$2: bv8;
  var v208$1: bv8;
  var v208$2: bv8;
  var v209$1: bv8;
  var v209$2: bv8;
  var v210$1: bv8;
  var v210$2: bv8;
  var v211$1: bv8;
  var v211$2: bv8;
  var v216: bool;
  var v212$1: bv8;
  var v212$2: bv8;
  var v213$1: bv8;
  var v213$2: bv8;
  var v214$1: bv8;
  var v214$2: bv8;
  var v215$1: bv8;
  var v215$2: bv8;
  var v217$1: bv8;
  var v217$2: bv8;
  var v218$1: bv8;
  var v218$2: bv8;
  var v219$1: bv8;
  var v219$2: bv8;
  var v220$1: bv8;
  var v220$2: bv8;
  var v221$1: bv8;
  var v221$2: bv8;
  var v222$1: bv8;
  var v222$2: bv8;
  var v223$1: bv8;
  var v223$2: bv8;
  var v224$1: bv8;
  var v224$2: bv8;
  var v225$1: bv8;
  var v225$2: bv8;
  var v226$1: bv8;
  var v226$2: bv8;
  var v227$1: bv8;
  var v227$2: bv8;
  var v228$1: bv8;
  var v228$2: bv8;
  var v229$1: bv8;
  var v229$2: bv8;
  var v230$1: bv8;
  var v230$2: bv8;
  var v231$1: bv8;
  var v231$2: bv8;
  var v232$1: bv8;
  var v232$2: bv8;
  var v233$1: bv8;
  var v233$2: bv8;
  var v234$1: bv8;
  var v234$2: bv8;
  var v235$1: bv8;
  var v235$2: bv8;
  var v236$1: bv8;
  var v236$2: bv8;
  var v237$1: bv32;
  var v237$2: bv32;
  var v238$1: bv8;
  var v238$2: bv8;
  var v239$1: bv8;
  var v239$2: bv8;
  var v240$1: bv8;
  var v240$2: bv8;
  var v241$1: bv8;
  var v241$2: bv8;
  var v242$1: bv8;
  var v242$2: bv8;
  var v243$1: bv8;
  var v243$2: bv8;
  var v244$1: bv8;
  var v244$2: bv8;
  var v245$1: bv8;
  var v245$2: bv8;
  var v246$1: bv8;
  var v246$2: bv8;
  var v247$1: bv8;
  var v247$2: bv8;
  var v248$1: bv8;
  var v248$2: bv8;
  var v249$1: bv8;
  var v249$2: bv8;
  var v250$1: bv8;
  var v250$2: bv8;
  var v251$1: bv8;
  var v251$2: bv8;
  var v252$1: bv8;
  var v252$2: bv8;
  var v253$1: bv8;
  var v253$2: bv8;
  var v254$1: bool;
  var v254$2: bool;
  var v255$1: bv8;
  var v255$2: bv8;
  var v256$1: bv8;
  var v256$2: bv8;
  var v257$1: bv8;
  var v257$2: bv8;
  var v258$1: bv8;
  var v258$2: bv8;
  var v259$1: bv8;
  var v259$2: bv8;
  var v260$1: bv8;
  var v260$2: bv8;
  var v261$1: bv8;
  var v261$2: bv8;
  var v262$1: bv8;
  var v262$2: bv8;
  var v267: bool;
  var v268$1: bv8;
  var v268$2: bv8;
  var v269$1: bv8;
  var v269$2: bv8;
  var v270$1: bv8;
  var v270$2: bv8;
  var v271$1: bv8;
  var v271$2: bv8;
  var v272$1: bv8;
  var v272$2: bv8;
  var v273$1: bv8;
  var v273$2: bv8;
  var v274$1: bv8;
  var v274$2: bv8;
  var v275$1: bv8;
  var v275$2: bv8;
  var v276$1: bv8;
  var v276$2: bv8;
  var v277$1: bv8;
  var v277$2: bv8;
  var v278$1: bv8;
  var v278$2: bv8;
  var v279$1: bv8;
  var v279$2: bv8;
  var v280$1: bv8;
  var v280$2: bv8;
  var v281$1: bv8;
  var v281$2: bv8;
  var v282$1: bv8;
  var v282$2: bv8;
  var v283$1: bv8;
  var v283$2: bv8;
  var v284$1: bv8;
  var v284$2: bv8;
  var v285$1: bv8;
  var v285$2: bv8;
  var v286$1: bv8;
  var v286$2: bv8;
  var v287$1: bv8;
  var v287$2: bv8;
  var v288$1: bv32;
  var v288$2: bv32;
  var v289$1: bv8;
  var v289$2: bv8;
  var v290$1: bv8;
  var v290$2: bv8;
  var v291$1: bv8;
  var v291$2: bv8;
  var v292$1: bv8;
  var v292$2: bv8;
  var v293$1: bv8;
  var v293$2: bv8;
  var v294$1: bv8;
  var v294$2: bv8;
  var v295$1: bv8;
  var v295$2: bv8;
  var v296$1: bv8;
  var v296$2: bv8;
  var v297$1: bv8;
  var v297$2: bv8;
  var v298$1: bv8;
  var v298$2: bv8;
  var v299$1: bv8;
  var v299$2: bv8;
  var v300$1: bv8;
  var v300$2: bv8;
  var v301$1: bv8;
  var v301$2: bv8;
  var v302$1: bv8;
  var v302$2: bv8;
  var v303$1: bv8;
  var v303$2: bv8;
  var v304$1: bv8;
  var v304$2: bv8;
  var v305$1: bool;
  var v305$2: bool;
  var v306$1: bv8;
  var v306$2: bv8;
  var v307$1: bv8;
  var v307$2: bv8;
  var v308$1: bv8;
  var v308$2: bv8;
  var v309$1: bv8;
  var v309$2: bv8;
  var v310$1: bv8;
  var v310$2: bv8;
  var v311$1: bv8;
  var v311$2: bv8;
  var v312$1: bv8;
  var v312$2: bv8;
  var v313$1: bv8;
  var v313$2: bv8;
  var v318: bool;
  var v314$1: bv8;
  var v314$2: bv8;
  var v315$1: bv8;
  var v315$2: bv8;
  var v316$1: bv8;
  var v316$2: bv8;
  var v317$1: bv8;
  var v317$2: bv8;
  var v319$1: bv8;
  var v319$2: bv8;
  var v320$1: bv8;
  var v320$2: bv8;
  var v321$1: bv8;
  var v321$2: bv8;
  var v322$1: bv8;
  var v322$2: bv8;
  var v323$1: bv8;
  var v323$2: bv8;
  var v324$1: bv8;
  var v324$2: bv8;
  var v325$1: bv8;
  var v325$2: bv8;
  var v326$1: bv8;
  var v326$2: bv8;
  var v327$1: bv8;
  var v327$2: bv8;
  var v328$1: bv8;
  var v328$2: bv8;
  var v329$1: bv8;
  var v329$2: bv8;
  var v330$1: bv8;
  var v330$2: bv8;
  var v331$1: bv8;
  var v331$2: bv8;
  var v332$1: bv8;
  var v332$2: bv8;
  var v333$1: bv8;
  var v333$2: bv8;
  var v334$1: bv8;
  var v334$2: bv8;
  var v335$1: bv8;
  var v335$2: bv8;
  var v336$1: bv8;
  var v336$2: bv8;
  var v337$1: bv8;
  var v337$2: bv8;
  var v338$1: bv8;
  var v338$2: bv8;
  var v339$1: bv32;
  var v339$2: bv32;
  var v340$1: bv8;
  var v340$2: bv8;
  var v341$1: bv8;
  var v341$2: bv8;
  var v342$1: bv8;
  var v342$2: bv8;
  var v343$1: bv8;
  var v343$2: bv8;
  var v344$1: bv8;
  var v344$2: bv8;
  var v345$1: bv8;
  var v345$2: bv8;
  var v346$1: bv8;
  var v346$2: bv8;
  var v347$1: bv8;
  var v347$2: bv8;
  var v348$1: bv8;
  var v348$2: bv8;
  var v349$1: bv8;
  var v349$2: bv8;
  var v350$1: bv8;
  var v350$2: bv8;
  var v351$1: bv8;
  var v351$2: bv8;
  var v352$1: bv8;
  var v352$2: bv8;
  var v353$1: bv8;
  var v353$2: bv8;
  var v354$1: bv8;
  var v354$2: bv8;
  var v355$1: bv8;
  var v355$2: bv8;
  var v356$1: bool;
  var v356$2: bool;
  var v357$1: bv8;
  var v357$2: bv8;
  var v358$1: bv8;
  var v358$2: bv8;
  var v359$1: bv8;
  var v359$2: bv8;
  var v360$1: bv8;
  var v360$2: bv8;
  var v361$1: bv8;
  var v361$2: bv8;
  var v362$1: bv8;
  var v362$2: bv8;
  var v363$1: bv8;
  var v363$2: bv8;
  var v364$1: bv8;
  var v364$2: bv8;
  var v369: bool;
  var v365$1: bv8;
  var v365$2: bv8;
  var v366$1: bv8;
  var v366$2: bv8;
  var v367$1: bv8;
  var v367$2: bv8;
  var v368$1: bv8;
  var v368$2: bv8;
  var v370$1: bv8;
  var v370$2: bv8;
  var v371$1: bv8;
  var v371$2: bv8;
  var v372$1: bv8;
  var v372$2: bv8;
  var v373$1: bv8;
  var v373$2: bv8;
  var v374$1: bv8;
  var v374$2: bv8;
  var v375$1: bv8;
  var v375$2: bv8;
  var v376$1: bv8;
  var v376$2: bv8;
  var v377$1: bv8;
  var v377$2: bv8;
  var v378$1: bv8;
  var v378$2: bv8;
  var v379$1: bv8;
  var v379$2: bv8;
  var v380$1: bv8;
  var v380$2: bv8;
  var v381$1: bv8;
  var v381$2: bv8;
  var v382$1: bv8;
  var v382$2: bv8;
  var v383$1: bv8;
  var v383$2: bv8;
  var v384$1: bv8;
  var v384$2: bv8;
  var v385$1: bv8;
  var v385$2: bv8;
  var v386$1: bv8;
  var v386$2: bv8;
  var v387$1: bv8;
  var v387$2: bv8;
  var v388$1: bv8;
  var v388$2: bv8;
  var v389$1: bv8;
  var v389$2: bv8;
  var p0$1: bool;
  var p0$2: bool;
  var p1$1: bool;
  var p1$2: bool;
  var p2$1: bool;
  var p2$2: bool;
  var p3$1: bool;
  var p3$2: bool;
  var p4$1: bool;
  var p4$2: bool;
  var p5$1: bool;
  var p5$2: bool;
  var p6$1: bool;
  var p6$2: bool;
  var p7$1: bool;
  var p7$2: bool;
  var p8$1: bool;
  var p8$2: bool;
  var p9$1: bool;
  var p9$2: bool;
  var p10$1: bool;
  var p10$2: bool;
  var p11$1: bool;
  var p11$2: bool;
  var p12$1: bool;
  var p12$2: bool;
  var p13$1: bool;
  var p13$2: bool;
  var p14$1: bool;
  var p14$2: bool;
  var p15$1: bool;
  var p15$2: bool;
  var p16$1: bool;
  var p16$2: bool;
  var p17$1: bool;
  var p17$2: bool;
  var p18$1: bool;
  var p18$2: bool;
  var p19$1: bool;
  var p19$2: bool;
  var p20$1: bool;
  var p20$2: bool;
  var p21$1: bool;
  var p21$2: bool;
  var p22$1: bool;
  var p22$2: bool;
  var p23$1: bool;
  var p23$2: bool;
  var p24$1: bool;
  var p24$2: bool;
  var p25$1: bool;
  var p25$2: bool;
  var p26$1: bool;
  var p26$2: bool;
  var p27$1: bool;
  var p27$2: bool;
  var p28$1: bool;
  var p28$2: bool;
  var p29$1: bool;
  var p29$2: bool;
  var p30$1: bool;
  var p30$2: bool;
  var p31$1: bool;
  var p31$2: bool;
  var p32$1: bool;
  var p32$2: bool;
  var p33$1: bool;
  var p33$2: bool;
  var p34$1: bool;
  var p34$2: bool;
  var p35$1: bool;
  var p35$2: bool;
  var p36$1: bool;
  var p36$2: bool;
  var p37$1: bool;
  var p37$2: bool;
  var p38$1: bool;
  var p38$2: bool;
  var p39$1: bool;
  var p39$2: bool;
  var p40$1: bool;
  var p40$2: bool;
  var p41$1: bool;
  var p41$2: bool;
  var p42$1: bool;
  var p42$2: bool;
  var p43$1: bool;
  var p43$2: bool;
  var p44$1: bool;
  var p44$2: bool;
  var p45$1: bool;
  var p45$2: bool;
  var p46$1: bool;
  var p46$2: bool;
  var p47$1: bool;
  var p47$2: bool;
  var p48$1: bool;
  var p48$2: bool;
  var p49$1: bool;
  var p49$2: bool;
  var p50$1: bool;
  var p50$2: bool;
  var p51$1: bool;
  var p51$2: bool;
  var p52$1: bool;
  var p52$2: bool;
  var p53$1: bool;
  var p53$2: bool;
  var p54$1: bool;
  var p54$2: bool;
  var p55$1: bool;
  var p55$2: bool;
  var p56$1: bool;
  var p56$2: bool;
  var p57$1: bool;
  var p57$2: bool;
  var p58$1: bool;
  var p58$2: bool;


  $0:
    v0$1 := BV32_ADD(BV32_MUL(group_size_x, group_id_x$1), local_id_x$1);
    v0$2 := BV32_ADD(BV32_MUL(group_size_x, group_id_x$2), local_id_x$2);
    v1$1 := BV32_SREM(v0$1, BV32_SDIV($width, 4bv32));
    v1$2 := BV32_SREM(v0$2, BV32_SDIV($width, 4bv32));
    v2$1 := BV32_SDIV(v0$1, BV32_SDIV($width, 4bv32));
    v2$2 := BV32_SDIV(v0$2, BV32_SDIV($width, 4bv32));
    v3$1 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_MUL(4bv32, v1$1))), $posx);
    v3$2 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_MUL(4bv32, v1$2))), $posx);
    v4$1 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_ADD(BV32_MUL(4bv32, v1$1), 1bv32))), $posx);
    v4$2 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_ADD(BV32_MUL(4bv32, v1$2), 1bv32))), $posx);
    v5$1 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_ADD(BV32_MUL(4bv32, v1$1), 2bv32))), $posx);
    v5$2 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_ADD(BV32_MUL(4bv32, v1$2), 2bv32))), $posx);
    v6$1 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_ADD(BV32_MUL(4bv32, v1$1), 3bv32))), $posx);
    v6$2 := FADD32(FMUL32($stepSizeX, SI32_TO_FP32(BV32_ADD(BV32_MUL(4bv32, v1$2), 3bv32))), $posx);
    v7$1 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$1)), $posy);
    v7$2 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$2)), $posy);
    v8$1 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$1)), $posy);
    v8$2 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$2)), $posy);
    v9$1 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$1)), $posy);
    v9$2 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$2)), $posy);
    v10$1 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$1)), $posy);
    v10$2 := FADD32(FMUL32($stepSizeY, SI32_TO_FP32(v2$2)), $posy);
    v11$1 := FADD32(FMUL32(v3$1, v3$1), FMUL32(v7$1, v7$1));
    v11$2 := FADD32(FMUL32(v3$2, v3$2), FMUL32(v7$2, v7$2));
    v12$1 := FADD32(FMUL32(v4$1, v4$1), FMUL32(v8$1, v8$1));
    v12$2 := FADD32(FMUL32(v4$2, v4$2), FMUL32(v8$2, v8$2));
    v13$1 := FADD32(FMUL32(v5$1, v5$1), FMUL32(v9$1, v9$1));
    v13$2 := FADD32(FMUL32(v5$2, v5$2), FMUL32(v9$2, v9$2));
    v14$1 := FADD32(FMUL32(v6$1, v6$1), FMUL32(v10$1, v10$1));
    v14$2 := FADD32(FMUL32(v6$2, v6$2), FMUL32(v10$2, v10$2));
    $iter.0$1, $stay.0$1, $ccount.0$1, $savx.0$1, $savy.0$1 := 0bv32, BV1_ZEXT32((if FEQ32(v14$1, 1082130432bv32) || FLT32(v14$1, 1082130432bv32) then 1bv1 else 0bv1)) ++ BV1_ZEXT32((if FEQ32(v13$1, 1082130432bv32) || FLT32(v13$1, 1082130432bv32) then 1bv1 else 0bv1)) ++ BV1_ZEXT32((if FEQ32(v12$1, 1082130432bv32) || FLT32(v12$1, 1082130432bv32) then 1bv1 else 0bv1)) ++ BV1_ZEXT32((if FEQ32(v11$1, 1082130432bv32) || FLT32(v11$1, 1082130432bv32) then 1bv1 else 0bv1)), 0bv128, v6$1 ++ v5$1 ++ v4$1 ++ v3$1, v10$1 ++ v9$1 ++ v8$1 ++ v7$1;
    $iter.0$2, $stay.0$2, $ccount.0$2, $savx.0$2, $savy.0$2 := 0bv32, BV1_ZEXT32((if FEQ32(v14$2, 1082130432bv32) || FLT32(v14$2, 1082130432bv32) then 1bv1 else 0bv1)) ++ BV1_ZEXT32((if FEQ32(v13$2, 1082130432bv32) || FLT32(v13$2, 1082130432bv32) then 1bv1 else 0bv1)) ++ BV1_ZEXT32((if FEQ32(v12$2, 1082130432bv32) || FLT32(v12$2, 1082130432bv32) then 1bv1 else 0bv1)) ++ BV1_ZEXT32((if FEQ32(v11$2, 1082130432bv32) || FLT32(v11$2, 1082130432bv32) then 1bv1 else 0bv1)), 0bv128, v6$2 ++ v5$2 ++ v4$2 ++ v3$2, v10$2 ++ v9$2 ++ v8$2 ++ v7$2;
    p0$1 := false;
    p0$2 := false;
    p23$1 := false;
    p23$2 := false;
    p0$1 := true;
    p0$2 := true;
    assume {:captureState "loop_entry_state_1_0"} true;
    goto $1;

  $1:
    assume {:captureState "loop_head_state_1"} true;
    assume {:invGenSkippedLoop} true;
    assert {:block_sourceloc} {:sourceloc_num 1} p0$1 ==> true;
    v15$1 := (if p0$1 then BV32_OR(BV32_OR(BV32_OR($stay.0$1[32:0], $stay.0$1[64:32]), $stay.0$1[96:64]), $stay.0$1[128:96]) != 0bv32 else v15$1);
    v15$2 := (if p0$2 then BV32_OR(BV32_OR(BV32_OR($stay.0$2[32:0], $stay.0$2[64:32]), $stay.0$2[96:64]), $stay.0$2[128:96]) != 0bv32 else v15$2);
    p1$1 := false;
    p1$2 := false;
    p2$1 := false;
    p2$2 := false;
    p3$1 := false;
    p3$2 := false;
    p4$1 := false;
    p4$2 := false;
    p5$1 := false;
    p5$2 := false;
    p6$1 := false;
    p6$2 := false;
    p7$1 := false;
    p7$2 := false;
    p8$1 := false;
    p8$2 := false;
    p9$1 := false;
    p9$2 := false;
    p10$1 := false;
    p10$2 := false;
    p11$1 := false;
    p11$2 := false;
    p12$1 := false;
    p12$2 := false;
    p13$1 := false;
    p13$2 := false;
    p14$1 := false;
    p14$2 := false;
    p15$1 := false;
    p15$2 := false;
    p16$1 := false;
    p16$2 := false;
    p17$1 := false;
    p17$2 := false;
    p18$1 := false;
    p18$2 := false;
    p19$1 := false;
    p19$2 := false;
    p20$1 := false;
    p20$2 := false;
    p21$1 := false;
    p21$2 := false;
    p22$1 := false;
    p22$2 := false;
    p51$1 := false;
    p51$2 := false;
    p52$1 := false;
    p52$2 := false;
    p53$1 := false;
    p53$2 := false;
    p54$1 := false;
    p54$2 := false;
    p55$1 := false;
    p55$2 := false;
    p56$1 := false;
    p56$2 := false;
    p57$1 := false;
    p57$2 := false;
    p58$1 := false;
    p58$2 := false;
    p2$1 := (if p0$1 && v15$1 then v15$1 else p2$1);
    p2$2 := (if p0$2 && v15$2 then v15$2 else p2$2);
    p1$1 := (if p0$1 && !v15$1 then !v15$1 else p1$1);
    p1$2 := (if p0$2 && !v15$2 then !v15$2 else p1$2);
    $0$1 := (if p1$1 then 0bv1 else $0$1);
    $0$2 := (if p1$2 then 0bv1 else $0$2);
    $0$1 := (if p2$1 then (if BV32_ULT($iter.0$1, $maxIterations) then 1bv1 else 0bv1) else $0$1);
    $0$2 := (if p2$2 then (if BV32_ULT($iter.0$2, $maxIterations) then 1bv1 else 0bv1) else $0$2);
    p3$1 := (if p0$1 && $0$1 == 1bv1 then $0$1 == 1bv1 else p3$1);
    p3$2 := (if p0$2 && $0$2 == 1bv1 then $0$2 == 1bv1 else p3$2);
    p0$1 := (if p0$1 && !($0$1 == 1bv1) then $0$1 == 1bv1 else p0$1);
    p0$2 := (if p0$2 && !($0$2 == 1bv1) then $0$2 == 1bv1 else p0$2);
    v16$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$1[32:0]), $savy.0$1[32:0]), FADD32(FMUL32($savx.0$1[32:0], $savx.0$1[32:0]), v3$1)) else v16$1);
    v16$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$2[32:0]), $savy.0$2[32:0]), FADD32(FMUL32($savx.0$2[32:0], $savx.0$2[32:0]), v3$2)) else v16$2);
    v17$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$1[64:32]), $savy.0$1[64:32]), FADD32(FMUL32($savx.0$1[64:32], $savx.0$1[64:32]), v4$1)) else v17$1);
    v17$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$2[64:32]), $savy.0$2[64:32]), FADD32(FMUL32($savx.0$2[64:32], $savx.0$2[64:32]), v4$2)) else v17$2);
    v18$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$1[96:64]), $savy.0$1[96:64]), FADD32(FMUL32($savx.0$1[96:64], $savx.0$1[96:64]), v5$1)) else v18$1);
    v18$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$2[96:64]), $savy.0$2[96:64]), FADD32(FMUL32($savx.0$2[96:64], $savx.0$2[96:64]), v5$2)) else v18$2);
    v19$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$1[128:96]), $savy.0$1[128:96]), FADD32(FMUL32($savx.0$1[128:96], $savx.0$1[128:96]), v6$1)) else v19$1);
    v19$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.0$2[128:96]), $savy.0$2[128:96]), FADD32(FMUL32($savx.0$2[128:96], $savx.0$2[128:96]), v6$2)) else v19$2);
    v20$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$1[32:0]), $savy.0$1[32:0]), v7$1) else v20$1);
    v20$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$2[32:0]), $savy.0$2[32:0]), v7$2) else v20$2);
    v21$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$1[64:32]), $savy.0$1[64:32]), v8$1) else v21$1);
    v21$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$2[64:32]), $savy.0$2[64:32]), v8$2) else v21$2);
    v22$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$1[96:64]), $savy.0$1[96:64]), v9$1) else v22$1);
    v22$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$2[96:64]), $savy.0$2[96:64]), v9$2) else v22$2);
    v23$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$1[128:96]), $savy.0$1[128:96]), v10$1) else v23$1);
    v23$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.0$2[128:96]), $savy.0$2[128:96]), v10$2) else v23$2);
    v24$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v20$1), v20$1), FADD32(FMUL32(v16$1, v16$1), v3$1)) else v24$1);
    v24$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v20$2), v20$2), FADD32(FMUL32(v16$2, v16$2), v3$2)) else v24$2);
    v25$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v21$1), v21$1), FADD32(FMUL32(v17$1, v17$1), v4$1)) else v25$1);
    v25$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v21$2), v21$2), FADD32(FMUL32(v17$2, v17$2), v4$2)) else v25$2);
    v26$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v22$1), v22$1), FADD32(FMUL32(v18$1, v18$1), v5$1)) else v26$1);
    v26$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v22$2), v22$2), FADD32(FMUL32(v18$2, v18$2), v5$2)) else v26$2);
    v27$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v23$1), v23$1), FADD32(FMUL32(v19$1, v19$1), v6$1)) else v27$1);
    v27$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v23$2), v23$2), FADD32(FMUL32(v19$2, v19$2), v6$2)) else v27$2);
    v28$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v16$1), v20$1), v7$1) else v28$1);
    v28$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v16$2), v20$2), v7$2) else v28$2);
    v29$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v17$1), v21$1), v8$1) else v29$1);
    v29$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v17$2), v21$2), v8$2) else v29$2);
    v30$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v18$1), v22$1), v9$1) else v30$1);
    v30$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v18$2), v22$2), v9$2) else v30$2);
    v31$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v19$1), v23$1), v10$1) else v31$1);
    v31$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v19$2), v23$2), v10$2) else v31$2);
    v32$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v28$1), v28$1), FADD32(FMUL32(v24$1, v24$1), v3$1)) else v32$1);
    v32$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v28$2), v28$2), FADD32(FMUL32(v24$2, v24$2), v3$2)) else v32$2);
    v33$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v29$1), v29$1), FADD32(FMUL32(v25$1, v25$1), v4$1)) else v33$1);
    v33$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v29$2), v29$2), FADD32(FMUL32(v25$2, v25$2), v4$2)) else v33$2);
    v34$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v30$1), v30$1), FADD32(FMUL32(v26$1, v26$1), v5$1)) else v34$1);
    v34$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v30$2), v30$2), FADD32(FMUL32(v26$2, v26$2), v5$2)) else v34$2);
    v35$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v31$1), v31$1), FADD32(FMUL32(v27$1, v27$1), v6$1)) else v35$1);
    v35$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v31$2), v31$2), FADD32(FMUL32(v27$2, v27$2), v6$2)) else v35$2);
    v36$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v24$1), v28$1), v7$1) else v36$1);
    v36$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v24$2), v28$2), v7$2) else v36$2);
    v37$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v25$1), v29$1), v8$1) else v37$1);
    v37$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v25$2), v29$2), v8$2) else v37$2);
    v38$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v26$1), v30$1), v9$1) else v38$1);
    v38$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v26$2), v30$2), v9$2) else v38$2);
    v39$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v27$1), v31$1), v10$1) else v39$1);
    v39$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v27$2), v31$2), v10$2) else v39$2);
    v40$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v36$1), v36$1), FADD32(FMUL32(v32$1, v32$1), v3$1)) else v40$1);
    v40$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v36$2), v36$2), FADD32(FMUL32(v32$2, v32$2), v3$2)) else v40$2);
    v41$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v37$1), v37$1), FADD32(FMUL32(v33$1, v33$1), v4$1)) else v41$1);
    v41$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v37$2), v37$2), FADD32(FMUL32(v33$2, v33$2), v4$2)) else v41$2);
    v42$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v38$1), v38$1), FADD32(FMUL32(v34$1, v34$1), v5$1)) else v42$1);
    v42$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v38$2), v38$2), FADD32(FMUL32(v34$2, v34$2), v5$2)) else v42$2);
    v43$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v39$1), v39$1), FADD32(FMUL32(v35$1, v35$1), v6$1)) else v43$1);
    v43$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v39$2), v39$2), FADD32(FMUL32(v35$2, v35$2), v6$2)) else v43$2);
    v44$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v32$1), v36$1), v7$1) else v44$1);
    v44$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v32$2), v36$2), v7$2) else v44$2);
    v45$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v33$1), v37$1), v8$1) else v45$1);
    v45$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v33$2), v37$2), v8$2) else v45$2);
    v46$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v34$1), v38$1), v9$1) else v46$1);
    v46$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v34$2), v38$2), v9$2) else v46$2);
    v47$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v35$1), v39$1), v10$1) else v47$1);
    v47$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v35$2), v39$2), v10$2) else v47$2);
    v48$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v44$1), v44$1), FADD32(FMUL32(v40$1, v40$1), v3$1)) else v48$1);
    v48$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v44$2), v44$2), FADD32(FMUL32(v40$2, v40$2), v3$2)) else v48$2);
    v49$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v45$1), v45$1), FADD32(FMUL32(v41$1, v41$1), v4$1)) else v49$1);
    v49$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v45$2), v45$2), FADD32(FMUL32(v41$2, v41$2), v4$2)) else v49$2);
    v50$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v46$1), v46$1), FADD32(FMUL32(v42$1, v42$1), v5$1)) else v50$1);
    v50$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v46$2), v46$2), FADD32(FMUL32(v42$2, v42$2), v5$2)) else v50$2);
    v51$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v47$1), v47$1), FADD32(FMUL32(v43$1, v43$1), v6$1)) else v51$1);
    v51$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v47$2), v47$2), FADD32(FMUL32(v43$2, v43$2), v6$2)) else v51$2);
    v52$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v40$1), v44$1), v7$1) else v52$1);
    v52$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v40$2), v44$2), v7$2) else v52$2);
    v53$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v41$1), v45$1), v8$1) else v53$1);
    v53$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v41$2), v45$2), v8$2) else v53$2);
    v54$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v42$1), v46$1), v9$1) else v54$1);
    v54$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v42$2), v46$2), v9$2) else v54$2);
    v55$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v43$1), v47$1), v10$1) else v55$1);
    v55$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v43$2), v47$2), v10$2) else v55$2);
    v56$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v52$1), v52$1), FADD32(FMUL32(v48$1, v48$1), v3$1)) else v56$1);
    v56$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v52$2), v52$2), FADD32(FMUL32(v48$2, v48$2), v3$2)) else v56$2);
    v57$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v53$1), v53$1), FADD32(FMUL32(v49$1, v49$1), v4$1)) else v57$1);
    v57$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v53$2), v53$2), FADD32(FMUL32(v49$2, v49$2), v4$2)) else v57$2);
    v58$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v54$1), v54$1), FADD32(FMUL32(v50$1, v50$1), v5$1)) else v58$1);
    v58$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v54$2), v54$2), FADD32(FMUL32(v50$2, v50$2), v5$2)) else v58$2);
    v59$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v55$1), v55$1), FADD32(FMUL32(v51$1, v51$1), v6$1)) else v59$1);
    v59$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v55$2), v55$2), FADD32(FMUL32(v51$2, v51$2), v6$2)) else v59$2);
    v60$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v48$1), v52$1), v7$1) else v60$1);
    v60$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v48$2), v52$2), v7$2) else v60$2);
    v61$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v49$1), v53$1), v8$1) else v61$1);
    v61$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v49$2), v53$2), v8$2) else v61$2);
    v62$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v50$1), v54$1), v9$1) else v62$1);
    v62$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v50$2), v54$2), v9$2) else v62$2);
    v63$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v51$1), v55$1), v10$1) else v63$1);
    v63$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v51$2), v55$2), v10$2) else v63$2);
    v64$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v60$1), v60$1), FADD32(FMUL32(v56$1, v56$1), v3$1)) else v64$1);
    v64$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v60$2), v60$2), FADD32(FMUL32(v56$2, v56$2), v3$2)) else v64$2);
    v65$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v61$1), v61$1), FADD32(FMUL32(v57$1, v57$1), v4$1)) else v65$1);
    v65$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v61$2), v61$2), FADD32(FMUL32(v57$2, v57$2), v4$2)) else v65$2);
    v66$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v62$1), v62$1), FADD32(FMUL32(v58$1, v58$1), v5$1)) else v66$1);
    v66$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v62$2), v62$2), FADD32(FMUL32(v58$2, v58$2), v5$2)) else v66$2);
    v67$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v63$1), v63$1), FADD32(FMUL32(v59$1, v59$1), v6$1)) else v67$1);
    v67$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v63$2), v63$2), FADD32(FMUL32(v59$2, v59$2), v6$2)) else v67$2);
    v68$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v56$1), v60$1), v7$1) else v68$1);
    v68$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v56$2), v60$2), v7$2) else v68$2);
    v69$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v57$1), v61$1), v8$1) else v69$1);
    v69$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v57$2), v61$2), v8$2) else v69$2);
    v70$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v58$1), v62$1), v9$1) else v70$1);
    v70$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v58$2), v62$2), v9$2) else v70$2);
    v71$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v59$1), v63$1), v10$1) else v71$1);
    v71$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v59$2), v63$2), v10$2) else v71$2);
    v72$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v68$1), v68$1), FADD32(FMUL32(v64$1, v64$1), v3$1)) else v72$1);
    v72$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v68$2), v68$2), FADD32(FMUL32(v64$2, v64$2), v3$2)) else v72$2);
    v73$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v69$1), v69$1), FADD32(FMUL32(v65$1, v65$1), v4$1)) else v73$1);
    v73$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v69$2), v69$2), FADD32(FMUL32(v65$2, v65$2), v4$2)) else v73$2);
    v74$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v70$1), v70$1), FADD32(FMUL32(v66$1, v66$1), v5$1)) else v74$1);
    v74$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v70$2), v70$2), FADD32(FMUL32(v66$2, v66$2), v5$2)) else v74$2);
    v75$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v71$1), v71$1), FADD32(FMUL32(v67$1, v67$1), v6$1)) else v75$1);
    v75$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v71$2), v71$2), FADD32(FMUL32(v67$2, v67$2), v6$2)) else v75$2);
    v76$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v64$1), v68$1), v7$1) else v76$1);
    v76$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v64$2), v68$2), v7$2) else v76$2);
    v77$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v65$1), v69$1), v8$1) else v77$1);
    v77$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v65$2), v69$2), v8$2) else v77$2);
    v78$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v66$1), v70$1), v9$1) else v78$1);
    v78$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v66$2), v70$2), v9$2) else v78$2);
    v79$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v67$1), v71$1), v10$1) else v79$1);
    v79$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v67$2), v71$2), v10$2) else v79$2);
    v80$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v76$1), v76$1), FADD32(FMUL32(v72$1, v72$1), v3$1)) else v80$1);
    v80$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v76$2), v76$2), FADD32(FMUL32(v72$2, v72$2), v3$2)) else v80$2);
    v81$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v77$1), v77$1), FADD32(FMUL32(v73$1, v73$1), v4$1)) else v81$1);
    v81$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v77$2), v77$2), FADD32(FMUL32(v73$2, v73$2), v4$2)) else v81$2);
    v82$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v78$1), v78$1), FADD32(FMUL32(v74$1, v74$1), v5$1)) else v82$1);
    v82$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v78$2), v78$2), FADD32(FMUL32(v74$2, v74$2), v5$2)) else v82$2);
    v83$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v79$1), v79$1), FADD32(FMUL32(v75$1, v75$1), v6$1)) else v83$1);
    v83$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v79$2), v79$2), FADD32(FMUL32(v75$2, v75$2), v6$2)) else v83$2);
    v84$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v72$1), v76$1), v7$1) else v84$1);
    v84$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v72$2), v76$2), v7$2) else v84$2);
    v85$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v73$1), v77$1), v8$1) else v85$1);
    v85$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v73$2), v77$2), v8$2) else v85$2);
    v86$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v74$1), v78$1), v9$1) else v86$1);
    v86$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v74$2), v78$2), v9$2) else v86$2);
    v87$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v75$1), v79$1), v10$1) else v87$1);
    v87$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v75$2), v79$2), v10$2) else v87$2);
    v88$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v84$1), v84$1), FADD32(FMUL32(v80$1, v80$1), v3$1)) else v88$1);
    v88$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v84$2), v84$2), FADD32(FMUL32(v80$2, v80$2), v3$2)) else v88$2);
    v89$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v85$1), v85$1), FADD32(FMUL32(v81$1, v81$1), v4$1)) else v89$1);
    v89$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v85$2), v85$2), FADD32(FMUL32(v81$2, v81$2), v4$2)) else v89$2);
    v90$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v86$1), v86$1), FADD32(FMUL32(v82$1, v82$1), v5$1)) else v90$1);
    v90$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v86$2), v86$2), FADD32(FMUL32(v82$2, v82$2), v5$2)) else v90$2);
    v91$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v87$1), v87$1), FADD32(FMUL32(v83$1, v83$1), v6$1)) else v91$1);
    v91$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v87$2), v87$2), FADD32(FMUL32(v83$2, v83$2), v6$2)) else v91$2);
    v92$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v80$1), v84$1), v7$1) else v92$1);
    v92$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v80$2), v84$2), v7$2) else v92$2);
    v93$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v81$1), v85$1), v8$1) else v93$1);
    v93$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v81$2), v85$2), v8$2) else v93$2);
    v94$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v82$1), v86$1), v9$1) else v94$1);
    v94$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v82$2), v86$2), v9$2) else v94$2);
    v95$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v83$1), v87$1), v10$1) else v95$1);
    v95$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v83$2), v87$2), v10$2) else v95$2);
    v96$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v92$1), v92$1), FADD32(FMUL32(v88$1, v88$1), v3$1)) else v96$1);
    v96$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v92$2), v92$2), FADD32(FMUL32(v88$2, v88$2), v3$2)) else v96$2);
    v97$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v93$1), v93$1), FADD32(FMUL32(v89$1, v89$1), v4$1)) else v97$1);
    v97$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v93$2), v93$2), FADD32(FMUL32(v89$2, v89$2), v4$2)) else v97$2);
    v98$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v94$1), v94$1), FADD32(FMUL32(v90$1, v90$1), v5$1)) else v98$1);
    v98$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v94$2), v94$2), FADD32(FMUL32(v90$2, v90$2), v5$2)) else v98$2);
    v99$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v95$1), v95$1), FADD32(FMUL32(v91$1, v91$1), v6$1)) else v99$1);
    v99$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v95$2), v95$2), FADD32(FMUL32(v91$2, v91$2), v6$2)) else v99$2);
    v100$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v88$1), v92$1), v7$1) else v100$1);
    v100$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v88$2), v92$2), v7$2) else v100$2);
    v101$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v89$1), v93$1), v8$1) else v101$1);
    v101$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v89$2), v93$2), v8$2) else v101$2);
    v102$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v90$1), v94$1), v9$1) else v102$1);
    v102$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v90$2), v94$2), v9$2) else v102$2);
    v103$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v91$1), v95$1), v10$1) else v103$1);
    v103$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v91$2), v95$2), v10$2) else v103$2);
    v104$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v100$1), v100$1), FADD32(FMUL32(v96$1, v96$1), v3$1)) else v104$1);
    v104$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v100$2), v100$2), FADD32(FMUL32(v96$2, v96$2), v3$2)) else v104$2);
    v105$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v101$1), v101$1), FADD32(FMUL32(v97$1, v97$1), v4$1)) else v105$1);
    v105$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v101$2), v101$2), FADD32(FMUL32(v97$2, v97$2), v4$2)) else v105$2);
    v106$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v102$1), v102$1), FADD32(FMUL32(v98$1, v98$1), v5$1)) else v106$1);
    v106$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v102$2), v102$2), FADD32(FMUL32(v98$2, v98$2), v5$2)) else v106$2);
    v107$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v103$1), v103$1), FADD32(FMUL32(v99$1, v99$1), v6$1)) else v107$1);
    v107$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v103$2), v103$2), FADD32(FMUL32(v99$2, v99$2), v6$2)) else v107$2);
    v108$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v96$1), v100$1), v7$1) else v108$1);
    v108$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v96$2), v100$2), v7$2) else v108$2);
    v109$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v97$1), v101$1), v8$1) else v109$1);
    v109$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v97$2), v101$2), v8$2) else v109$2);
    v110$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v98$1), v102$1), v9$1) else v110$1);
    v110$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v98$2), v102$2), v9$2) else v110$2);
    v111$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v99$1), v103$1), v10$1) else v111$1);
    v111$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v99$2), v103$2), v10$2) else v111$2);
    v112$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v108$1), v108$1), FADD32(FMUL32(v104$1, v104$1), v3$1)) else v112$1);
    v112$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v108$2), v108$2), FADD32(FMUL32(v104$2, v104$2), v3$2)) else v112$2);
    v113$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v109$1), v109$1), FADD32(FMUL32(v105$1, v105$1), v4$1)) else v113$1);
    v113$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v109$2), v109$2), FADD32(FMUL32(v105$2, v105$2), v4$2)) else v113$2);
    v114$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v110$1), v110$1), FADD32(FMUL32(v106$1, v106$1), v5$1)) else v114$1);
    v114$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v110$2), v110$2), FADD32(FMUL32(v106$2, v106$2), v5$2)) else v114$2);
    v115$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v111$1), v111$1), FADD32(FMUL32(v107$1, v107$1), v6$1)) else v115$1);
    v115$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v111$2), v111$2), FADD32(FMUL32(v107$2, v107$2), v6$2)) else v115$2);
    v116$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v104$1), v108$1), v7$1) else v116$1);
    v116$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v104$2), v108$2), v7$2) else v116$2);
    v117$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v105$1), v109$1), v8$1) else v117$1);
    v117$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v105$2), v109$2), v8$2) else v117$2);
    v118$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v106$1), v110$1), v9$1) else v118$1);
    v118$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v106$2), v110$2), v9$2) else v118$2);
    v119$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v107$1), v111$1), v10$1) else v119$1);
    v119$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v107$2), v111$2), v10$2) else v119$2);
    v120$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v116$1), v116$1), FADD32(FMUL32(v112$1, v112$1), v3$1)) else v120$1);
    v120$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v116$2), v116$2), FADD32(FMUL32(v112$2, v112$2), v3$2)) else v120$2);
    v121$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v117$1), v117$1), FADD32(FMUL32(v113$1, v113$1), v4$1)) else v121$1);
    v121$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v117$2), v117$2), FADD32(FMUL32(v113$2, v113$2), v4$2)) else v121$2);
    v122$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v118$1), v118$1), FADD32(FMUL32(v114$1, v114$1), v5$1)) else v122$1);
    v122$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v118$2), v118$2), FADD32(FMUL32(v114$2, v114$2), v5$2)) else v122$2);
    v123$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v119$1), v119$1), FADD32(FMUL32(v115$1, v115$1), v6$1)) else v123$1);
    v123$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v119$2), v119$2), FADD32(FMUL32(v115$2, v115$2), v6$2)) else v123$2);
    v124$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v112$1), v116$1), v7$1) else v124$1);
    v124$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v112$2), v116$2), v7$2) else v124$2);
    v125$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v113$1), v117$1), v8$1) else v125$1);
    v125$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v113$2), v117$2), v8$2) else v125$2);
    v126$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v114$1), v118$1), v9$1) else v126$1);
    v126$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v114$2), v118$2), v9$2) else v126$2);
    v127$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v115$1), v119$1), v10$1) else v127$1);
    v127$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v115$2), v119$2), v10$2) else v127$2);
    v128$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v124$1), v124$1), FADD32(FMUL32(v120$1, v120$1), v3$1)) else v128$1);
    v128$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v124$2), v124$2), FADD32(FMUL32(v120$2, v120$2), v3$2)) else v128$2);
    v129$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v125$1), v125$1), FADD32(FMUL32(v121$1, v121$1), v4$1)) else v129$1);
    v129$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v125$2), v125$2), FADD32(FMUL32(v121$2, v121$2), v4$2)) else v129$2);
    v130$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v126$1), v126$1), FADD32(FMUL32(v122$1, v122$1), v5$1)) else v130$1);
    v130$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v126$2), v126$2), FADD32(FMUL32(v122$2, v122$2), v5$2)) else v130$2);
    v131$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v127$1), v127$1), FADD32(FMUL32(v123$1, v123$1), v6$1)) else v131$1);
    v131$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v127$2), v127$2), FADD32(FMUL32(v123$2, v123$2), v6$2)) else v131$2);
    v132$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v120$1), v124$1), v7$1) else v132$1);
    v132$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v120$2), v124$2), v7$2) else v132$2);
    v133$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v121$1), v125$1), v8$1) else v133$1);
    v133$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v121$2), v125$2), v8$2) else v133$2);
    v134$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v122$1), v126$1), v9$1) else v134$1);
    v134$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v122$2), v126$2), v9$2) else v134$2);
    v135$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v123$1), v127$1), v10$1) else v135$1);
    v135$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v123$2), v127$2), v10$2) else v135$2);
    v136$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v132$1), v132$1), FADD32(FMUL32(v128$1, v128$1), v3$1)) else v136$1);
    v136$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v132$2), v132$2), FADD32(FMUL32(v128$2, v128$2), v3$2)) else v136$2);
    v137$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v133$1), v133$1), FADD32(FMUL32(v129$1, v129$1), v4$1)) else v137$1);
    v137$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v133$2), v133$2), FADD32(FMUL32(v129$2, v129$2), v4$2)) else v137$2);
    v138$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v134$1), v134$1), FADD32(FMUL32(v130$1, v130$1), v5$1)) else v138$1);
    v138$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v134$2), v134$2), FADD32(FMUL32(v130$2, v130$2), v5$2)) else v138$2);
    v139$1 := (if p3$1 then FADD32(FMUL32(FSUB32(2147483648bv32, v135$1), v135$1), FADD32(FMUL32(v131$1, v131$1), v6$1)) else v139$1);
    v139$2 := (if p3$2 then FADD32(FMUL32(FSUB32(2147483648bv32, v135$2), v135$2), FADD32(FMUL32(v131$2, v131$2), v6$2)) else v139$2);
    v140$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v128$1), v132$1), v7$1) else v140$1);
    v140$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v128$2), v132$2), v7$2) else v140$2);
    v141$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v129$1), v133$1), v8$1) else v141$1);
    v141$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v129$2), v133$2), v8$2) else v141$2);
    v142$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v130$1), v134$1), v9$1) else v142$1);
    v142$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v130$2), v134$2), v9$2) else v142$2);
    v143$1 := (if p3$1 then FADD32(FMUL32(FMUL32(1073741824bv32, v131$1), v135$1), v10$1) else v143$1);
    v143$2 := (if p3$2 then FADD32(FMUL32(FMUL32(1073741824bv32, v131$2), v135$2), v10$2) else v143$2);
    v144$1 := (if p3$1 then FADD32(FMUL32(v136$1, v136$1), FMUL32(v140$1, v140$1)) else v144$1);
    v144$2 := (if p3$2 then FADD32(FMUL32(v136$2, v136$2), FMUL32(v140$2, v140$2)) else v144$2);
    v145$1 := (if p3$1 then BV1_ZEXT32((if FEQ32(v144$1, 1082130432bv32) || FLT32(v144$1, 1082130432bv32) then 1bv1 else 0bv1)) else v145$1);
    v145$2 := (if p3$2 then BV1_ZEXT32((if FEQ32(v144$2, 1082130432bv32) || FLT32(v144$2, 1082130432bv32) then 1bv1 else 0bv1)) else v145$2);
    v146$1 := (if p3$1 then FADD32(FMUL32(v137$1, v137$1), FMUL32(v141$1, v141$1)) else v146$1);
    v146$2 := (if p3$2 then FADD32(FMUL32(v137$2, v137$2), FMUL32(v141$2, v141$2)) else v146$2);
    v147$1 := (if p3$1 then BV1_ZEXT32((if FEQ32(v146$1, 1082130432bv32) || FLT32(v146$1, 1082130432bv32) then 1bv1 else 0bv1)) else v147$1);
    v147$2 := (if p3$2 then BV1_ZEXT32((if FEQ32(v146$2, 1082130432bv32) || FLT32(v146$2, 1082130432bv32) then 1bv1 else 0bv1)) else v147$2);
    v148$1 := (if p3$1 then FADD32(FMUL32(v138$1, v138$1), FMUL32(v142$1, v142$1)) else v148$1);
    v148$2 := (if p3$2 then FADD32(FMUL32(v138$2, v138$2), FMUL32(v142$2, v142$2)) else v148$2);
    v149$1 := (if p3$1 then BV1_ZEXT32((if FEQ32(v148$1, 1082130432bv32) || FLT32(v148$1, 1082130432bv32) then 1bv1 else 0bv1)) else v149$1);
    v149$2 := (if p3$2 then BV1_ZEXT32((if FEQ32(v148$2, 1082130432bv32) || FLT32(v148$2, 1082130432bv32) then 1bv1 else 0bv1)) else v149$2);
    v150$1 := (if p3$1 then FADD32(FMUL32(v139$1, v139$1), FMUL32(v143$1, v143$1)) else v150$1);
    v150$2 := (if p3$2 then FADD32(FMUL32(v139$2, v139$2), FMUL32(v143$2, v143$2)) else v150$2);
    v151$1 := (if p3$1 then BV1_ZEXT32((if FEQ32(v150$1, 1082130432bv32) || FLT32(v150$1, 1082130432bv32) then 1bv1 else 0bv1)) else v151$1);
    v151$2 := (if p3$2 then BV1_ZEXT32((if FEQ32(v150$2, 1082130432bv32) || FLT32(v150$2, 1082130432bv32) then 1bv1 else 0bv1)) else v151$2);
    v152$1 := (if p3$1 then v145$1 != 0bv32 else v152$1);
    v152$2 := (if p3$2 then v145$2 != 0bv32 else v152$2);
    p5$1 := (if p3$1 && v152$1 then v152$1 else p5$1);
    p5$2 := (if p3$2 && v152$2 then v152$2 else p5$2);
    p4$1 := (if p3$1 && !v152$1 then !v152$1 else p4$1);
    p4$2 := (if p3$2 && !v152$2 then !v152$2 else p4$2);
    $1$1 := (if p4$1 then $savx.0$1[32:0] else $1$1);
    $1$2 := (if p4$2 then $savx.0$2[32:0] else $1$2);
    $1$1 := (if p5$1 then v136$1 else $1$1);
    $1$2 := (if p5$2 then v136$2 else $1$2);
    v153$1 := (if p3$1 then v147$1 != 0bv32 else v153$1);
    v153$2 := (if p3$2 then v147$2 != 0bv32 else v153$2);
    p7$1 := (if p3$1 && v153$1 then v153$1 else p7$1);
    p7$2 := (if p3$2 && v153$2 then v153$2 else p7$2);
    p6$1 := (if p3$1 && !v153$1 then !v153$1 else p6$1);
    p6$2 := (if p3$2 && !v153$2 then !v153$2 else p6$2);
    $2$1 := (if p6$1 then $savx.0$1[64:32] else $2$1);
    $2$2 := (if p6$2 then $savx.0$2[64:32] else $2$2);
    $2$1 := (if p7$1 then v137$1 else $2$1);
    $2$2 := (if p7$2 then v137$2 else $2$2);
    v154$1 := (if p3$1 then v149$1 != 0bv32 else v154$1);
    v154$2 := (if p3$2 then v149$2 != 0bv32 else v154$2);
    p9$1 := (if p3$1 && v154$1 then v154$1 else p9$1);
    p9$2 := (if p3$2 && v154$2 then v154$2 else p9$2);
    p8$1 := (if p3$1 && !v154$1 then !v154$1 else p8$1);
    p8$2 := (if p3$2 && !v154$2 then !v154$2 else p8$2);
    $3$1 := (if p8$1 then $savx.0$1[96:64] else $3$1);
    $3$2 := (if p8$2 then $savx.0$2[96:64] else $3$2);
    $3$1 := (if p9$1 then v138$1 else $3$1);
    $3$2 := (if p9$2 then v138$2 else $3$2);
    v155$1 := (if p3$1 then v151$1 != 0bv32 else v155$1);
    v155$2 := (if p3$2 then v151$2 != 0bv32 else v155$2);
    p11$1 := (if p3$1 && v155$1 then v155$1 else p11$1);
    p11$2 := (if p3$2 && v155$2 then v155$2 else p11$2);
    p10$1 := (if p3$1 && !v155$1 then !v155$1 else p10$1);
    p10$2 := (if p3$2 && !v155$2 then !v155$2 else p10$2);
    $4$1 := (if p10$1 then $savx.0$1[128:96] else $4$1);
    $4$2 := (if p10$2 then $savx.0$2[128:96] else $4$2);
    $4$1 := (if p11$1 then v139$1 else $4$1);
    $4$2 := (if p11$2 then v139$2 else $4$2);
    v156$1 := (if p3$1 then v145$1 != 0bv32 else v156$1);
    v156$2 := (if p3$2 then v145$2 != 0bv32 else v156$2);
    p13$1 := (if p3$1 && v156$1 then v156$1 else p13$1);
    p13$2 := (if p3$2 && v156$2 then v156$2 else p13$2);
    p12$1 := (if p3$1 && !v156$1 then !v156$1 else p12$1);
    p12$2 := (if p3$2 && !v156$2 then !v156$2 else p12$2);
    $5$1 := (if p12$1 then $savy.0$1[32:0] else $5$1);
    $5$2 := (if p12$2 then $savy.0$2[32:0] else $5$2);
    $5$1 := (if p13$1 then v140$1 else $5$1);
    $5$2 := (if p13$2 then v140$2 else $5$2);
    v157$1 := (if p3$1 then v147$1 != 0bv32 else v157$1);
    v157$2 := (if p3$2 then v147$2 != 0bv32 else v157$2);
    p15$1 := (if p3$1 && v157$1 then v157$1 else p15$1);
    p15$2 := (if p3$2 && v157$2 then v157$2 else p15$2);
    p14$1 := (if p3$1 && !v157$1 then !v157$1 else p14$1);
    p14$2 := (if p3$2 && !v157$2 then !v157$2 else p14$2);
    $6$1 := (if p14$1 then $savy.0$1[64:32] else $6$1);
    $6$2 := (if p14$2 then $savy.0$2[64:32] else $6$2);
    $6$1 := (if p15$1 then v141$1 else $6$1);
    $6$2 := (if p15$2 then v141$2 else $6$2);
    v158$1 := (if p3$1 then v149$1 != 0bv32 else v158$1);
    v158$2 := (if p3$2 then v149$2 != 0bv32 else v158$2);
    p17$1 := (if p3$1 && v158$1 then v158$1 else p17$1);
    p17$2 := (if p3$2 && v158$2 then v158$2 else p17$2);
    p16$1 := (if p3$1 && !v158$1 then !v158$1 else p16$1);
    p16$2 := (if p3$2 && !v158$2 then !v158$2 else p16$2);
    $7$1 := (if p16$1 then $savy.0$1[96:64] else $7$1);
    $7$2 := (if p16$2 then $savy.0$2[96:64] else $7$2);
    $7$1 := (if p17$1 then v142$1 else $7$1);
    $7$2 := (if p17$2 then v142$2 else $7$2);
    v159$1 := (if p3$1 then v151$1 != 0bv32 else v159$1);
    v159$2 := (if p3$2 then v151$2 != 0bv32 else v159$2);
    p19$1 := (if p3$1 && v159$1 then v159$1 else p19$1);
    p19$2 := (if p3$2 && v159$2 then v159$2 else p19$2);
    p18$1 := (if p3$1 && !v159$1 then !v159$1 else p18$1);
    p18$2 := (if p3$2 && !v159$2 then !v159$2 else p18$2);
    $8$1 := (if p18$1 then $savy.0$1[128:96] else $8$1);
    $8$2 := (if p18$2 then $savy.0$2[128:96] else $8$2);
    $8$1 := (if p19$1 then v143$1 else $8$1);
    $8$2 := (if p19$2 then v143$2 else $8$2);
    $iter.0$1, $stay.0$1, $ccount.0$1, $savx.0$1, $savy.0$1 := (if p3$1 then BV32_ADD($iter.0$1, 16bv32) else $iter.0$1), (if p3$1 then v151$1 ++ v149$1 ++ v147$1 ++ v145$1 else $stay.0$1), (if p3$1 then BV32_ADD($ccount.0$1[128:96], BV32_MUL(v151$1, 16bv32)) ++ BV32_ADD($ccount.0$1[96:64], BV32_MUL(v149$1, 16bv32)) ++ BV32_ADD($ccount.0$1[64:32], BV32_MUL(v147$1, 16bv32)) ++ BV32_ADD($ccount.0$1[32:0], BV32_MUL(v145$1, 16bv32)) else $ccount.0$1), (if p3$1 then $4$1 ++ $3$1 ++ $2$1 ++ $1$1 else $savx.0$1), (if p3$1 then $8$1 ++ $7$1 ++ $6$1 ++ $5$1 else $savy.0$1);
    $iter.0$2, $stay.0$2, $ccount.0$2, $savx.0$2, $savy.0$2 := (if p3$2 then BV32_ADD($iter.0$2, 16bv32) else $iter.0$2), (if p3$2 then v151$2 ++ v149$2 ++ v147$2 ++ v145$2 else $stay.0$2), (if p3$2 then BV32_ADD($ccount.0$2[128:96], BV32_MUL(v151$2, 16bv32)) ++ BV32_ADD($ccount.0$2[96:64], BV32_MUL(v149$2, 16bv32)) ++ BV32_ADD($ccount.0$2[64:32], BV32_MUL(v147$2, 16bv32)) ++ BV32_ADD($ccount.0$2[32:0], BV32_MUL(v145$2, 16bv32)) else $ccount.0$2), (if p3$2 then $4$2 ++ $3$2 ++ $2$2 ++ $1$2 else $savx.0$2), (if p3$2 then $8$2 ++ $7$2 ++ $6$2 ++ $5$2 else $savy.0$2);
    p0$1 := (if p3$1 then true else p0$1);
    p0$2 := (if p3$2 then true else p0$2);
    goto $1.backedge, $1.tail;

  $1.tail:
    assume !p0$1 && !p0$2;
    v160$1 := BV32_AND(BV32_AND(BV32_AND($stay.0$1[32:0], $stay.0$1[64:32]), $stay.0$1[96:64]), $stay.0$1[128:96]) != 0bv32;
    v160$2 := BV32_AND(BV32_AND(BV32_AND($stay.0$2[32:0], $stay.0$2[64:32]), $stay.0$2[96:64]), $stay.0$2[128:96]) != 0bv32;
    p21$1 := (if v160$1 then v160$1 else p21$1);
    p21$2 := (if v160$2 then v160$2 else p21$2);
    p22$1 := (if !v160$1 then !v160$1 else p22$1);
    p22$2 := (if !v160$2 then !v160$2 else p22$2);
    $ccount.2$1, $savx.2$1, $savy.2$1 := (if p21$1 then $ccount.0$1 else $ccount.2$1), (if p21$1 then $savx.0$1 else $savx.2$1), (if p21$1 then $savy.0$1 else $savy.2$1);
    $ccount.2$2, $savx.2$2, $savy.2$2 := (if p21$2 then $ccount.0$2 else $ccount.2$2), (if p21$2 then $savx.0$2 else $savx.2$2), (if p21$2 then $savy.0$2 else $savy.2$2);
    $iter.1$1, $stay.1$1, $ccount.1$1, $savx.1$1, $savy.1$1 := (if p22$1 then 16bv32 else $iter.1$1), (if p22$1 then $stay.0$1 else $stay.1$1), (if p22$1 then $ccount.0$1 else $ccount.1$1), (if p22$1 then $savx.0$1 else $savx.1$1), (if p22$1 then $savy.0$1 else $savy.1$1);
    $iter.1$2, $stay.1$2, $ccount.1$2, $savx.1$2, $savy.1$2 := (if p22$2 then 16bv32 else $iter.1$2), (if p22$2 then $stay.0$2 else $stay.1$2), (if p22$2 then $ccount.0$2 else $ccount.1$2), (if p22$2 then $savx.0$2 else $savx.1$2), (if p22$2 then $savy.0$2 else $savy.1$2);
    p23$1 := (if p22$1 then true else p23$1);
    p23$2 := (if p22$2 then true else p23$2);
    assume {:captureState "loop_entry_state_0_0"} true;
    goto $32;

  $32:
    assume {:captureState "loop_head_state_0"} true;
    assume {:invGenSkippedLoop} true;
    assert {:block_sourceloc} {:sourceloc_num 32} p23$1 ==> true;
    v161$1 := (if p23$1 then FADD32(FMUL32($savx.1$1[32:0], $savx.1$1[32:0]), FMUL32($savy.1$1[32:0], $savy.1$1[32:0])) else v161$1);
    v161$2 := (if p23$2 then FADD32(FMUL32($savx.1$2[32:0], $savx.1$2[32:0]), FMUL32($savy.1$2[32:0], $savy.1$2[32:0])) else v161$2);
    v162$1 := (if p23$1 then FEQ32(v161$1, 1082130432bv32) || FLT32(v161$1, 1082130432bv32) else v162$1);
    v162$2 := (if p23$2 then FEQ32(v161$2, 1082130432bv32) || FLT32(v161$2, 1082130432bv32) else v162$2);
    p24$1 := false;
    p24$2 := false;
    p25$1 := false;
    p25$2 := false;
    p26$1 := false;
    p26$2 := false;
    p27$1 := false;
    p27$2 := false;
    p28$1 := false;
    p28$2 := false;
    p29$1 := false;
    p29$2 := false;
    p30$1 := false;
    p30$2 := false;
    p31$1 := false;
    p31$2 := false;
    p32$1 := false;
    p32$2 := false;
    p33$1 := false;
    p33$2 := false;
    p34$1 := false;
    p34$2 := false;
    p35$1 := false;
    p35$2 := false;
    p36$1 := false;
    p36$2 := false;
    p37$1 := false;
    p37$2 := false;
    p38$1 := false;
    p38$2 := false;
    p39$1 := false;
    p39$2 := false;
    p40$1 := false;
    p40$2 := false;
    p41$1 := false;
    p41$2 := false;
    p42$1 := false;
    p42$2 := false;
    p43$1 := false;
    p43$2 := false;
    p44$1 := false;
    p44$2 := false;
    p45$1 := false;
    p45$2 := false;
    p46$1 := false;
    p46$2 := false;
    p47$1 := false;
    p47$2 := false;
    p48$1 := false;
    p48$2 := false;
    p49$1 := false;
    p49$2 := false;
    p50$1 := false;
    p50$2 := false;
    p25$1 := (if p23$1 && v162$1 then v162$1 else p25$1);
    p25$2 := (if p23$2 && v162$2 then v162$2 else p25$2);
    p24$1 := (if p23$1 && !v162$1 then !v162$1 else p24$1);
    p24$2 := (if p23$2 && !v162$2 then !v162$2 else p24$2);
    $9$1 := (if p24$1 then 0bv1 else $9$1);
    $9$2 := (if p24$2 then 0bv1 else $9$2);
    $9$1 := (if p25$1 then (if BV32_ULT($ccount.1$1[32:0], $maxIterations) then 1bv1 else 0bv1) else $9$1);
    $9$2 := (if p25$2 then (if BV32_ULT($ccount.1$2[32:0], $maxIterations) then 1bv1 else 0bv1) else $9$2);
    v163$1 := (if p23$1 then BV1_ZEXT32($9$1) else v163$1);
    v163$2 := (if p23$2 then BV1_ZEXT32($9$2) else v163$2);
    v164$1 := (if p23$1 then FADD32(FMUL32($savx.1$1[64:32], $savx.1$1[64:32]), FMUL32($savy.1$1[64:32], $savy.1$1[64:32])) else v164$1);
    v164$2 := (if p23$2 then FADD32(FMUL32($savx.1$2[64:32], $savx.1$2[64:32]), FMUL32($savy.1$2[64:32], $savy.1$2[64:32])) else v164$2);
    v165$1 := (if p23$1 then FEQ32(v164$1, 1082130432bv32) || FLT32(v164$1, 1082130432bv32) else v165$1);
    v165$2 := (if p23$2 then FEQ32(v164$2, 1082130432bv32) || FLT32(v164$2, 1082130432bv32) else v165$2);
    p27$1 := (if p23$1 && v165$1 then v165$1 else p27$1);
    p27$2 := (if p23$2 && v165$2 then v165$2 else p27$2);
    p26$1 := (if p23$1 && !v165$1 then !v165$1 else p26$1);
    p26$2 := (if p23$2 && !v165$2 then !v165$2 else p26$2);
    $10$1 := (if p26$1 then 0bv1 else $10$1);
    $10$2 := (if p26$2 then 0bv1 else $10$2);
    $10$1 := (if p27$1 then (if BV32_ULT($ccount.1$1[64:32], $maxIterations) then 1bv1 else 0bv1) else $10$1);
    $10$2 := (if p27$2 then (if BV32_ULT($ccount.1$2[64:32], $maxIterations) then 1bv1 else 0bv1) else $10$2);
    v166$1 := (if p23$1 then BV1_ZEXT32($10$1) else v166$1);
    v166$2 := (if p23$2 then BV1_ZEXT32($10$2) else v166$2);
    v167$1 := (if p23$1 then FADD32(FMUL32($savx.1$1[96:64], $savx.1$1[96:64]), FMUL32($savy.1$1[96:64], $savy.1$1[96:64])) else v167$1);
    v167$2 := (if p23$2 then FADD32(FMUL32($savx.1$2[96:64], $savx.1$2[96:64]), FMUL32($savy.1$2[96:64], $savy.1$2[96:64])) else v167$2);
    v168$1 := (if p23$1 then FEQ32(v167$1, 1082130432bv32) || FLT32(v167$1, 1082130432bv32) else v168$1);
    v168$2 := (if p23$2 then FEQ32(v167$2, 1082130432bv32) || FLT32(v167$2, 1082130432bv32) else v168$2);
    p29$1 := (if p23$1 && v168$1 then v168$1 else p29$1);
    p29$2 := (if p23$2 && v168$2 then v168$2 else p29$2);
    p28$1 := (if p23$1 && !v168$1 then !v168$1 else p28$1);
    p28$2 := (if p23$2 && !v168$2 then !v168$2 else p28$2);
    $11$1 := (if p28$1 then 0bv1 else $11$1);
    $11$2 := (if p28$2 then 0bv1 else $11$2);
    $11$1 := (if p29$1 then (if BV32_ULT($ccount.1$1[96:64], $maxIterations) then 1bv1 else 0bv1) else $11$1);
    $11$2 := (if p29$2 then (if BV32_ULT($ccount.1$2[96:64], $maxIterations) then 1bv1 else 0bv1) else $11$2);
    v169$1 := (if p23$1 then BV1_ZEXT32($11$1) else v169$1);
    v169$2 := (if p23$2 then BV1_ZEXT32($11$2) else v169$2);
    v170$1 := (if p23$1 then FADD32(FMUL32($savx.1$1[128:96], $savx.1$1[128:96]), FMUL32($savy.1$1[128:96], $savy.1$1[128:96])) else v170$1);
    v170$2 := (if p23$2 then FADD32(FMUL32($savx.1$2[128:96], $savx.1$2[128:96]), FMUL32($savy.1$2[128:96], $savy.1$2[128:96])) else v170$2);
    v171$1 := (if p23$1 then FEQ32(v170$1, 1082130432bv32) || FLT32(v170$1, 1082130432bv32) else v171$1);
    v171$2 := (if p23$2 then FEQ32(v170$2, 1082130432bv32) || FLT32(v170$2, 1082130432bv32) else v171$2);
    p31$1 := (if p23$1 && v171$1 then v171$1 else p31$1);
    p31$2 := (if p23$2 && v171$2 then v171$2 else p31$2);
    p30$1 := (if p23$1 && !v171$1 then !v171$1 else p30$1);
    p30$2 := (if p23$2 && !v171$2 then !v171$2 else p30$2);
    $12$1 := (if p30$1 then 0bv1 else $12$1);
    $12$2 := (if p30$2 then 0bv1 else $12$2);
    $12$1 := (if p31$1 then (if BV32_ULT($ccount.1$1[128:96], $maxIterations) then 1bv1 else 0bv1) else $12$1);
    $12$2 := (if p31$2 then (if BV32_ULT($ccount.1$2[128:96], $maxIterations) then 1bv1 else 0bv1) else $12$2);
    v172$1 := (if p23$1 then BV1_ZEXT32($12$1) else v172$1);
    v172$2 := (if p23$2 then BV1_ZEXT32($12$2) else v172$2);
    v173$1 := (if p23$1 then BV32_ADD($ccount.1$1[128:96], v172$1) ++ BV32_ADD($ccount.1$1[96:64], v169$1) ++ BV32_ADD($ccount.1$1[64:32], v166$1) ++ BV32_ADD($ccount.1$1[32:0], v163$1) else v173$1);
    v173$2 := (if p23$2 then BV32_ADD($ccount.1$2[128:96], v172$2) ++ BV32_ADD($ccount.1$2[96:64], v169$2) ++ BV32_ADD($ccount.1$2[64:32], v166$2) ++ BV32_ADD($ccount.1$2[32:0], v163$2) else v173$2);
    v174$1 := (if p23$1 then BV32_ADD($iter.1$1, 4294967295bv32) else v174$1);
    v174$2 := (if p23$2 then BV32_ADD($iter.1$2, 4294967295bv32) else v174$2);
    v175$1 := (if p23$1 then v163$1 != 0bv32 else v175$1);
    v175$2 := (if p23$2 then v163$2 != 0bv32 else v175$2);
    p33$1 := (if p23$1 && v175$1 then v175$1 else p33$1);
    p33$2 := (if p23$2 && v175$2 then v175$2 else p33$2);
    p32$1 := (if p23$1 && !v175$1 then !v175$1 else p32$1);
    p32$2 := (if p23$2 && !v175$2 then !v175$2 else p32$2);
    $13$1 := (if p32$1 then $savx.1$1[32:0] else $13$1);
    $13$2 := (if p32$2 then $savx.1$2[32:0] else $13$2);
    $13$1 := (if p33$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$1[32:0]), $savy.1$1[32:0]), FADD32(FMUL32($savx.1$1[32:0], $savx.1$1[32:0]), v3$1)) else $13$1);
    $13$2 := (if p33$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$2[32:0]), $savy.1$2[32:0]), FADD32(FMUL32($savx.1$2[32:0], $savx.1$2[32:0]), v3$2)) else $13$2);
    v176$1 := (if p23$1 then v166$1 != 0bv32 else v176$1);
    v176$2 := (if p23$2 then v166$2 != 0bv32 else v176$2);
    p35$1 := (if p23$1 && v176$1 then v176$1 else p35$1);
    p35$2 := (if p23$2 && v176$2 then v176$2 else p35$2);
    p34$1 := (if p23$1 && !v176$1 then !v176$1 else p34$1);
    p34$2 := (if p23$2 && !v176$2 then !v176$2 else p34$2);
    $14$1 := (if p34$1 then $savx.1$1[64:32] else $14$1);
    $14$2 := (if p34$2 then $savx.1$2[64:32] else $14$2);
    $14$1 := (if p35$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$1[64:32]), $savy.1$1[64:32]), FADD32(FMUL32($savx.1$1[64:32], $savx.1$1[64:32]), v4$1)) else $14$1);
    $14$2 := (if p35$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$2[64:32]), $savy.1$2[64:32]), FADD32(FMUL32($savx.1$2[64:32], $savx.1$2[64:32]), v4$2)) else $14$2);
    v177$1 := (if p23$1 then v169$1 != 0bv32 else v177$1);
    v177$2 := (if p23$2 then v169$2 != 0bv32 else v177$2);
    p37$1 := (if p23$1 && v177$1 then v177$1 else p37$1);
    p37$2 := (if p23$2 && v177$2 then v177$2 else p37$2);
    p36$1 := (if p23$1 && !v177$1 then !v177$1 else p36$1);
    p36$2 := (if p23$2 && !v177$2 then !v177$2 else p36$2);
    $15$1 := (if p36$1 then $savx.1$1[96:64] else $15$1);
    $15$2 := (if p36$2 then $savx.1$2[96:64] else $15$2);
    $15$1 := (if p37$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$1[96:64]), $savy.1$1[96:64]), FADD32(FMUL32($savx.1$1[96:64], $savx.1$1[96:64]), v5$1)) else $15$1);
    $15$2 := (if p37$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$2[96:64]), $savy.1$2[96:64]), FADD32(FMUL32($savx.1$2[96:64], $savx.1$2[96:64]), v5$2)) else $15$2);
    v178$1 := (if p23$1 then v172$1 != 0bv32 else v178$1);
    v178$2 := (if p23$2 then v172$2 != 0bv32 else v178$2);
    p39$1 := (if p23$1 && v178$1 then v178$1 else p39$1);
    p39$2 := (if p23$2 && v178$2 then v178$2 else p39$2);
    p38$1 := (if p23$1 && !v178$1 then !v178$1 else p38$1);
    p38$2 := (if p23$2 && !v178$2 then !v178$2 else p38$2);
    $16$1 := (if p38$1 then $savx.1$1[128:96] else $16$1);
    $16$2 := (if p38$2 then $savx.1$2[128:96] else $16$2);
    $16$1 := (if p39$1 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$1[128:96]), $savy.1$1[128:96]), FADD32(FMUL32($savx.1$1[128:96], $savx.1$1[128:96]), v6$1)) else $16$1);
    $16$2 := (if p39$2 then FADD32(FMUL32(FSUB32(2147483648bv32, $savy.1$2[128:96]), $savy.1$2[128:96]), FADD32(FMUL32($savx.1$2[128:96], $savx.1$2[128:96]), v6$2)) else $16$2);
    v179$1 := (if p23$1 then $16$1 ++ $15$1 ++ $14$1 ++ $13$1 else v179$1);
    v179$2 := (if p23$2 then $16$2 ++ $15$2 ++ $14$2 ++ $13$2 else v179$2);
    v180$1 := (if p23$1 then v163$1 != 0bv32 else v180$1);
    v180$2 := (if p23$2 then v163$2 != 0bv32 else v180$2);
    p41$1 := (if p23$1 && v180$1 then v180$1 else p41$1);
    p41$2 := (if p23$2 && v180$2 then v180$2 else p41$2);
    p40$1 := (if p23$1 && !v180$1 then !v180$1 else p40$1);
    p40$2 := (if p23$2 && !v180$2 then !v180$2 else p40$2);
    $17$1 := (if p40$1 then $savy.1$1[32:0] else $17$1);
    $17$2 := (if p40$2 then $savy.1$2[32:0] else $17$2);
    $17$1 := (if p41$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$1[32:0]), $savy.1$1[32:0]), v7$1) else $17$1);
    $17$2 := (if p41$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$2[32:0]), $savy.1$2[32:0]), v7$2) else $17$2);
    v181$1 := (if p23$1 then v166$1 != 0bv32 else v181$1);
    v181$2 := (if p23$2 then v166$2 != 0bv32 else v181$2);
    p43$1 := (if p23$1 && v181$1 then v181$1 else p43$1);
    p43$2 := (if p23$2 && v181$2 then v181$2 else p43$2);
    p42$1 := (if p23$1 && !v181$1 then !v181$1 else p42$1);
    p42$2 := (if p23$2 && !v181$2 then !v181$2 else p42$2);
    $18$1 := (if p42$1 then $savy.1$1[64:32] else $18$1);
    $18$2 := (if p42$2 then $savy.1$2[64:32] else $18$2);
    $18$1 := (if p43$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$1[64:32]), $savy.1$1[64:32]), v8$1) else $18$1);
    $18$2 := (if p43$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$2[64:32]), $savy.1$2[64:32]), v8$2) else $18$2);
    v182$1 := (if p23$1 then v169$1 != 0bv32 else v182$1);
    v182$2 := (if p23$2 then v169$2 != 0bv32 else v182$2);
    p45$1 := (if p23$1 && v182$1 then v182$1 else p45$1);
    p45$2 := (if p23$2 && v182$2 then v182$2 else p45$2);
    p44$1 := (if p23$1 && !v182$1 then !v182$1 else p44$1);
    p44$2 := (if p23$2 && !v182$2 then !v182$2 else p44$2);
    $19$1 := (if p44$1 then $savy.1$1[96:64] else $19$1);
    $19$2 := (if p44$2 then $savy.1$2[96:64] else $19$2);
    $19$1 := (if p45$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$1[96:64]), $savy.1$1[96:64]), v9$1) else $19$1);
    $19$2 := (if p45$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$2[96:64]), $savy.1$2[96:64]), v9$2) else $19$2);
    v183$1 := (if p23$1 then v172$1 != 0bv32 else v183$1);
    v183$2 := (if p23$2 then v172$2 != 0bv32 else v183$2);
    p47$1 := (if p23$1 && v183$1 then v183$1 else p47$1);
    p47$2 := (if p23$2 && v183$2 then v183$2 else p47$2);
    p46$1 := (if p23$1 && !v183$1 then !v183$1 else p46$1);
    p46$2 := (if p23$2 && !v183$2 then !v183$2 else p46$2);
    $20$1 := (if p46$1 then $savy.1$1[128:96] else $20$1);
    $20$2 := (if p46$2 then $savy.1$2[128:96] else $20$2);
    $20$1 := (if p47$1 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$1[128:96]), $savy.1$1[128:96]), v10$1) else $20$1);
    $20$2 := (if p47$2 then FADD32(FMUL32(FMUL32(1073741824bv32, $savx.1$2[128:96]), $savy.1$2[128:96]), v10$2) else $20$2);
    v184$1 := (if p23$1 then $20$1 ++ $19$1 ++ $18$1 ++ $17$1 else v184$1);
    v184$2 := (if p23$2 then $20$2 ++ $19$2 ++ $18$2 ++ $17$2 else v184$2);
    v185$1 := (if p23$1 then BV32_OR(BV32_OR(BV32_OR(v163$1, v166$1), v169$1), v172$1) != 0bv32 else v185$1);
    v185$2 := (if p23$2 then BV32_OR(BV32_OR(BV32_OR(v163$2, v166$2), v169$2), v172$2) != 0bv32 else v185$2);
    p49$1 := (if p23$1 && v185$1 then v185$1 else p49$1);
    p49$2 := (if p23$2 && v185$2 then v185$2 else p49$2);
    p48$1 := (if p23$1 && !v185$1 then !v185$1 else p48$1);
    p48$2 := (if p23$2 && !v185$2 then !v185$2 else p48$2);
    $21$1 := (if p48$1 then 0bv1 else $21$1);
    $21$2 := (if p48$2 then 0bv1 else $21$2);
    $21$1 := (if p49$1 then (if v174$1 != 0bv32 then 1bv1 else 0bv1) else $21$1);
    $21$2 := (if p49$2 then (if v174$2 != 0bv32 then 1bv1 else 0bv1) else $21$2);
    p50$1 := (if p23$1 && $21$1 == 1bv1 then $21$1 == 1bv1 else p50$1);
    p50$2 := (if p23$2 && $21$2 == 1bv1 then $21$2 == 1bv1 else p50$2);
    p23$1 := (if p23$1 && !($21$1 == 1bv1) then $21$1 == 1bv1 else p23$1);
    p23$2 := (if p23$2 && !($21$2 == 1bv1) then $21$2 == 1bv1 else p23$2);
    $iter.1$1, $stay.1$1, $ccount.1$1, $savx.1$1, $savy.1$1 := (if p50$1 then v174$1 else $iter.1$1), (if p50$1 then v172$1 ++ v169$1 ++ v166$1 ++ v163$1 else $stay.1$1), (if p50$1 then v173$1 else $ccount.1$1), (if p50$1 then v179$1 else $savx.1$1), (if p50$1 then v184$1 else $savy.1$1);
    $iter.1$2, $stay.1$2, $ccount.1$2, $savx.1$2, $savy.1$2 := (if p50$2 then v174$2 else $iter.1$2), (if p50$2 then v172$2 ++ v169$2 ++ v166$2 ++ v163$2 else $stay.1$2), (if p50$2 then v173$2 else $ccount.1$2), (if p50$2 then v179$2 else $savx.1$2), (if p50$2 then v184$2 else $savy.1$2);
    p23$1 := (if p50$1 then true else p23$1);
    p23$2 := (if p50$2 then true else p23$2);
    goto $32.backedge, $32.tail;

  $32.tail:
    assume !p23$1 && !p23$2;
    $ccount.2$1, $savx.2$1, $savy.2$1 := (if p22$1 then v173$1 else $ccount.2$1), (if p22$1 then v179$1 else $savx.2$1), (if p22$1 then v184$1 else $savy.2$1);
    $ccount.2$2, $savx.2$2, $savy.2$2 := (if p22$2 then v173$2 else $ccount.2$2), (if p22$2 then v179$2 else $savx.2$2), (if p22$2 then v184$2 else $savy.2$2);
    v186$1 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$1[32:0]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$1[32:0], $savx.2$1[32:0]), FMUL32($savy.2$1[32:0], $savy.2$1[32:0]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v186$2 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$2[32:0]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$2[32:0], $savx.2$2[32:0]), FMUL32($savy.2$2[32:0], $savy.2$2[32:0]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v187$1 := $$color$0bv32$1;
    v187$2 := $$color$0bv32$2;
    v188$1 := $$color$1bv32$1;
    v188$2 := $$color$1bv32$2;
    v189$1 := $$color$2bv32$1;
    v189$2 := $$color$2bv32$2;
    v190$1 := $$color$3bv32$1;
    v190$2 := $$color$3bv32$2;
    $$color$0bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v186$1)), 1056964608bv32), 1132396544bv32));
    $$color$0bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v186$2)), 1056964608bv32), 1132396544bv32));
    $$color$1bv32$1 := v188$1;
    $$color$1bv32$2 := v188$2;
    $$color$2bv32$1 := v189$1;
    $$color$2bv32$2 := v189$2;
    $$color$3bv32$1 := v190$1;
    $$color$3bv32$2 := v190$2;
    v191$1 := $$color$0bv32$1;
    v191$2 := $$color$0bv32$2;
    v192$1 := $$color$1bv32$1;
    v192$2 := $$color$1bv32$2;
    v193$1 := $$color$2bv32$1;
    v193$2 := $$color$2bv32$2;
    v194$1 := $$color$3bv32$1;
    v194$2 := $$color$3bv32$2;
    $$color$0bv32$1 := v191$1;
    $$color$0bv32$2 := v191$2;
    $$color$1bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v186$1), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$1bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v186$2), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$2bv32$1 := v193$1;
    $$color$2bv32$2 := v193$2;
    $$color$3bv32$1 := v194$1;
    $$color$3bv32$2 := v194$2;
    v195$1 := $$color$0bv32$1;
    v195$2 := $$color$0bv32$2;
    v196$1 := $$color$1bv32$1;
    v196$2 := $$color$1bv32$2;
    v197$1 := $$color$2bv32$1;
    v197$2 := $$color$2bv32$2;
    v198$1 := $$color$3bv32$1;
    v198$2 := $$color$3bv32$2;
    $$color$0bv32$1 := v195$1;
    $$color$0bv32$2 := v195$2;
    $$color$1bv32$1 := v196$1;
    $$color$1bv32$2 := v196$2;
    $$color$2bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v186$1, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$2bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v186$2, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$3bv32$1 := v198$1;
    $$color$3bv32$2 := v198$2;
    v199$1 := $$color$0bv32$1;
    v199$2 := $$color$0bv32$2;
    v200$1 := $$color$1bv32$1;
    v200$2 := $$color$1bv32$2;
    v201$1 := $$color$2bv32$1;
    v201$2 := $$color$2bv32$2;
    v202$1 := $$color$3bv32$1;
    v202$2 := $$color$3bv32$2;
    $$color$0bv32$1 := v199$1;
    $$color$0bv32$2 := v199$2;
    $$color$1bv32$1 := v200$1;
    $$color$1bv32$2 := v200$2;
    $$color$2bv32$1 := v201$1;
    $$color$2bv32$2 := v201$2;
    $$color$3bv32$1 := 255bv8;
    $$color$3bv32$2 := 255bv8;
    v203$1 := $ccount.2$1[32:0] == $maxIterations;
    v203$2 := $ccount.2$2[32:0] == $maxIterations;
    p51$1 := (if v203$1 then v203$1 else p51$1);
    p51$2 := (if v203$2 then v203$2 else p51$2);
    v204$1 := (if p51$1 then $$color$0bv32$1 else v204$1);
    v204$2 := (if p51$2 then $$color$0bv32$2 else v204$2);
    v205$1 := (if p51$1 then $$color$1bv32$1 else v205$1);
    v205$2 := (if p51$2 then $$color$1bv32$2 else v205$2);
    v206$1 := (if p51$1 then $$color$2bv32$1 else v206$1);
    v206$2 := (if p51$2 then $$color$2bv32$2 else v206$2);
    v207$1 := (if p51$1 then $$color$3bv32$1 else v207$1);
    v207$2 := (if p51$2 then $$color$3bv32$2 else v207$2);
    $$color$0bv32$1 := (if p51$1 then 0bv8 else $$color$0bv32$1);
    $$color$0bv32$2 := (if p51$2 then 0bv8 else $$color$0bv32$2);
    $$color$1bv32$1 := (if p51$1 then v205$1 else $$color$1bv32$1);
    $$color$1bv32$2 := (if p51$2 then v205$2 else $$color$1bv32$2);
    $$color$2bv32$1 := (if p51$1 then v206$1 else $$color$2bv32$1);
    $$color$2bv32$2 := (if p51$2 then v206$2 else $$color$2bv32$2);
    $$color$3bv32$1 := (if p51$1 then v207$1 else $$color$3bv32$1);
    $$color$3bv32$2 := (if p51$2 then v207$2 else $$color$3bv32$2);
    v208$1 := (if p51$1 then $$color$0bv32$1 else v208$1);
    v208$2 := (if p51$2 then $$color$0bv32$2 else v208$2);
    v209$1 := (if p51$1 then $$color$1bv32$1 else v209$1);
    v209$2 := (if p51$2 then $$color$1bv32$2 else v209$2);
    v210$1 := (if p51$1 then $$color$2bv32$1 else v210$1);
    v210$2 := (if p51$2 then $$color$2bv32$2 else v210$2);
    v211$1 := (if p51$1 then $$color$3bv32$1 else v211$1);
    v211$2 := (if p51$2 then $$color$3bv32$2 else v211$2);
    $$color$0bv32$1 := (if p51$1 then v208$1 else $$color$0bv32$1);
    $$color$0bv32$2 := (if p51$2 then v208$2 else $$color$0bv32$2);
    $$color$1bv32$1 := (if p51$1 then 0bv8 else $$color$1bv32$1);
    $$color$1bv32$2 := (if p51$2 then 0bv8 else $$color$1bv32$2);
    $$color$2bv32$1 := (if p51$1 then v210$1 else $$color$2bv32$1);
    $$color$2bv32$2 := (if p51$2 then v210$2 else $$color$2bv32$2);
    $$color$3bv32$1 := (if p51$1 then v211$1 else $$color$3bv32$1);
    $$color$3bv32$2 := (if p51$2 then v211$2 else $$color$3bv32$2);
    v212$1 := (if p51$1 then $$color$0bv32$1 else v212$1);
    v212$2 := (if p51$2 then $$color$0bv32$2 else v212$2);
    v213$1 := (if p51$1 then $$color$1bv32$1 else v213$1);
    v213$2 := (if p51$2 then $$color$1bv32$2 else v213$2);
    v214$1 := (if p51$1 then $$color$2bv32$1 else v214$1);
    v214$2 := (if p51$2 then $$color$2bv32$2 else v214$2);
    v215$1 := (if p51$1 then $$color$3bv32$1 else v215$1);
    v215$2 := (if p51$2 then $$color$3bv32$2 else v215$2);
    $$color$0bv32$1 := (if p51$1 then v212$1 else $$color$0bv32$1);
    $$color$0bv32$2 := (if p51$2 then v212$2 else $$color$0bv32$2);
    $$color$1bv32$1 := (if p51$1 then v213$1 else $$color$1bv32$1);
    $$color$1bv32$2 := (if p51$2 then v213$2 else $$color$1bv32$2);
    $$color$2bv32$1 := (if p51$1 then 0bv8 else $$color$2bv32$1);
    $$color$2bv32$2 := (if p51$2 then 0bv8 else $$color$2bv32$2);
    $$color$3bv32$1 := (if p51$1 then v215$1 else $$color$3bv32$1);
    $$color$3bv32$2 := (if p51$2 then v215$2 else $$color$3bv32$2);
    v216 := $bench != 0bv32;
    goto $truebb25, $falsebb25;

  $falsebb25:
    assume {:partition} !v216 && !v216;
    goto $73;

  $73:
    v233$1 := $$color$0bv32$1;
    v233$2 := $$color$0bv32$2;
    v234$1 := $$color$1bv32$1;
    v234$2 := $$color$1bv32$2;
    v235$1 := $$color$2bv32$1;
    v235$2 := $$color$2bv32$2;
    v236$1 := $$color$3bv32$1;
    v236$2 := $$color$3bv32$2;
    call {:sourceloc} {:sourceloc_num 166} _LOG_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), v233$1, $$mandelbrotImage[BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32));
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 166} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 166} _CHECK_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), v233$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32)] := v233$1;
    $$mandelbrotImage[BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32)] := v233$2;
    call {:sourceloc} {:sourceloc_num 167} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 1bv32), v234$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 1bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 1bv32));
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 167} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 167} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 1bv32), v234$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 1bv32)] := v234$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 1bv32)] := v234$2;
    call {:sourceloc} {:sourceloc_num 168} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 2bv32), v235$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 2bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 2bv32));
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 168} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 168} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 2bv32), v235$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 2bv32)] := v235$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 2bv32)] := v235$2;
    call {:sourceloc} {:sourceloc_num 169} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 3bv32), v236$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 3bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 3bv32));
    assume {:do_not_predicate} {:check_id "check_state_3"} {:captureState "check_state_3"} {:sourceloc} {:sourceloc_num 169} true;
    call {:check_id "check_state_3"} {:sourceloc} {:sourceloc_num 169} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 3bv32), v236$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$1), 4bv32), 3bv32)] := v236$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_MUL(4bv32, v0$2), 4bv32), 3bv32)] := v236$2;
    v237$1 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$1[64:32]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$1[64:32], $savx.2$1[64:32]), FMUL32($savy.2$1[64:32], $savy.2$1[64:32]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v237$2 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$2[64:32]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$2[64:32], $savx.2$2[64:32]), FMUL32($savy.2$2[64:32], $savy.2$2[64:32]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v238$1 := $$color$4bv32$1;
    v238$2 := $$color$4bv32$2;
    v239$1 := $$color$5bv32$1;
    v239$2 := $$color$5bv32$2;
    v240$1 := $$color$6bv32$1;
    v240$2 := $$color$6bv32$2;
    v241$1 := $$color$7bv32$1;
    v241$2 := $$color$7bv32$2;
    $$color$4bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v237$1)), 1056964608bv32), 1132396544bv32));
    $$color$4bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v237$2)), 1056964608bv32), 1132396544bv32));
    $$color$5bv32$1 := v239$1;
    $$color$5bv32$2 := v239$2;
    $$color$6bv32$1 := v240$1;
    $$color$6bv32$2 := v240$2;
    $$color$7bv32$1 := v241$1;
    $$color$7bv32$2 := v241$2;
    v242$1 := $$color$4bv32$1;
    v242$2 := $$color$4bv32$2;
    v243$1 := $$color$5bv32$1;
    v243$2 := $$color$5bv32$2;
    v244$1 := $$color$6bv32$1;
    v244$2 := $$color$6bv32$2;
    v245$1 := $$color$7bv32$1;
    v245$2 := $$color$7bv32$2;
    $$color$4bv32$1 := v242$1;
    $$color$4bv32$2 := v242$2;
    $$color$5bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v237$1), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$5bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v237$2), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$6bv32$1 := v244$1;
    $$color$6bv32$2 := v244$2;
    $$color$7bv32$1 := v245$1;
    $$color$7bv32$2 := v245$2;
    v246$1 := $$color$4bv32$1;
    v246$2 := $$color$4bv32$2;
    v247$1 := $$color$5bv32$1;
    v247$2 := $$color$5bv32$2;
    v248$1 := $$color$6bv32$1;
    v248$2 := $$color$6bv32$2;
    v249$1 := $$color$7bv32$1;
    v249$2 := $$color$7bv32$2;
    $$color$4bv32$1 := v246$1;
    $$color$4bv32$2 := v246$2;
    $$color$5bv32$1 := v247$1;
    $$color$5bv32$2 := v247$2;
    $$color$6bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v237$1, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$6bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v237$2, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$7bv32$1 := v249$1;
    $$color$7bv32$2 := v249$2;
    v250$1 := $$color$4bv32$1;
    v250$2 := $$color$4bv32$2;
    v251$1 := $$color$5bv32$1;
    v251$2 := $$color$5bv32$2;
    v252$1 := $$color$6bv32$1;
    v252$2 := $$color$6bv32$2;
    v253$1 := $$color$7bv32$1;
    v253$2 := $$color$7bv32$2;
    $$color$4bv32$1 := v250$1;
    $$color$4bv32$2 := v250$2;
    $$color$5bv32$1 := v251$1;
    $$color$5bv32$2 := v251$2;
    $$color$6bv32$1 := v252$1;
    $$color$6bv32$2 := v252$2;
    $$color$7bv32$1 := 255bv8;
    $$color$7bv32$2 := 255bv8;
    v254$1 := $ccount.2$1[64:32] == $maxIterations;
    v254$2 := $ccount.2$2[64:32] == $maxIterations;
    p53$1 := (if v254$1 then v254$1 else p53$1);
    p53$2 := (if v254$2 then v254$2 else p53$2);
    v255$1 := (if p53$1 then $$color$4bv32$1 else v255$1);
    v255$2 := (if p53$2 then $$color$4bv32$2 else v255$2);
    v256$1 := (if p53$1 then $$color$5bv32$1 else v256$1);
    v256$2 := (if p53$2 then $$color$5bv32$2 else v256$2);
    v257$1 := (if p53$1 then $$color$6bv32$1 else v257$1);
    v257$2 := (if p53$2 then $$color$6bv32$2 else v257$2);
    v258$1 := (if p53$1 then $$color$7bv32$1 else v258$1);
    v258$2 := (if p53$2 then $$color$7bv32$2 else v258$2);
    $$color$4bv32$1 := (if p53$1 then 0bv8 else $$color$4bv32$1);
    $$color$4bv32$2 := (if p53$2 then 0bv8 else $$color$4bv32$2);
    $$color$5bv32$1 := (if p53$1 then v256$1 else $$color$5bv32$1);
    $$color$5bv32$2 := (if p53$2 then v256$2 else $$color$5bv32$2);
    $$color$6bv32$1 := (if p53$1 then v257$1 else $$color$6bv32$1);
    $$color$6bv32$2 := (if p53$2 then v257$2 else $$color$6bv32$2);
    $$color$7bv32$1 := (if p53$1 then v258$1 else $$color$7bv32$1);
    $$color$7bv32$2 := (if p53$2 then v258$2 else $$color$7bv32$2);
    v259$1 := (if p53$1 then $$color$4bv32$1 else v259$1);
    v259$2 := (if p53$2 then $$color$4bv32$2 else v259$2);
    v260$1 := (if p53$1 then $$color$5bv32$1 else v260$1);
    v260$2 := (if p53$2 then $$color$5bv32$2 else v260$2);
    v261$1 := (if p53$1 then $$color$6bv32$1 else v261$1);
    v261$2 := (if p53$2 then $$color$6bv32$2 else v261$2);
    v262$1 := (if p53$1 then $$color$7bv32$1 else v262$1);
    v262$2 := (if p53$2 then $$color$7bv32$2 else v262$2);
    $$color$4bv32$1 := (if p53$1 then v259$1 else $$color$4bv32$1);
    $$color$4bv32$2 := (if p53$2 then v259$2 else $$color$4bv32$2);
    $$color$5bv32$1 := (if p53$1 then 0bv8 else $$color$5bv32$1);
    $$color$5bv32$2 := (if p53$2 then 0bv8 else $$color$5bv32$2);
    $$color$6bv32$1 := (if p53$1 then v261$1 else $$color$6bv32$1);
    $$color$6bv32$2 := (if p53$2 then v261$2 else $$color$6bv32$2);
    $$color$7bv32$1 := (if p53$1 then v262$1 else $$color$7bv32$1);
    $$color$7bv32$2 := (if p53$2 then v262$2 else $$color$7bv32$2);
    v263$1 := (if p53$1 then $$color$4bv32$1 else v263$1);
    v263$2 := (if p53$2 then $$color$4bv32$2 else v263$2);
    v264$1 := (if p53$1 then $$color$5bv32$1 else v264$1);
    v264$2 := (if p53$2 then $$color$5bv32$2 else v264$2);
    v265$1 := (if p53$1 then $$color$6bv32$1 else v265$1);
    v265$2 := (if p53$2 then $$color$6bv32$2 else v265$2);
    v266$1 := (if p53$1 then $$color$7bv32$1 else v266$1);
    v266$2 := (if p53$2 then $$color$7bv32$2 else v266$2);
    $$color$4bv32$1 := (if p53$1 then v263$1 else $$color$4bv32$1);
    $$color$4bv32$2 := (if p53$2 then v263$2 else $$color$4bv32$2);
    $$color$5bv32$1 := (if p53$1 then v264$1 else $$color$5bv32$1);
    $$color$5bv32$2 := (if p53$2 then v264$2 else $$color$5bv32$2);
    $$color$6bv32$1 := (if p53$1 then 0bv8 else $$color$6bv32$1);
    $$color$6bv32$2 := (if p53$2 then 0bv8 else $$color$6bv32$2);
    $$color$7bv32$1 := (if p53$1 then v266$1 else $$color$7bv32$1);
    $$color$7bv32$2 := (if p53$2 then v266$2 else $$color$7bv32$2);
    v267 := $bench != 0bv32;
    goto $truebb27, $falsebb27;

  $falsebb27:
    assume {:partition} !v267 && !v267;
    goto $77;

  $77:
    v284$1 := $$color$4bv32$1;
    v284$2 := $$color$4bv32$2;
    v285$1 := $$color$5bv32$1;
    v285$2 := $$color$5bv32$2;
    v286$1 := $$color$6bv32$1;
    v286$2 := $$color$6bv32$2;
    v287$1 := $$color$7bv32$1;
    v287$2 := $$color$7bv32$2;
    call {:sourceloc} {:sourceloc_num 266} _LOG_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), v284$1, $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32));
    assume {:do_not_predicate} {:check_id "check_state_4"} {:captureState "check_state_4"} {:sourceloc} {:sourceloc_num 266} true;
    call {:check_id "check_state_4"} {:sourceloc} {:sourceloc_num 266} _CHECK_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), v284$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32)] := v284$1;
    $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32)] := v284$2;
    call {:sourceloc} {:sourceloc_num 267} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 1bv32), v285$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 1bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 1bv32));
    assume {:do_not_predicate} {:check_id "check_state_5"} {:captureState "check_state_5"} {:sourceloc} {:sourceloc_num 267} true;
    call {:check_id "check_state_5"} {:sourceloc} {:sourceloc_num 267} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 1bv32), v285$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 1bv32)] := v285$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 1bv32)] := v285$2;
    call {:sourceloc} {:sourceloc_num 268} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 2bv32), v286$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 2bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 2bv32));
    assume {:do_not_predicate} {:check_id "check_state_6"} {:captureState "check_state_6"} {:sourceloc} {:sourceloc_num 268} true;
    call {:check_id "check_state_6"} {:sourceloc} {:sourceloc_num 268} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 2bv32), v286$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 2bv32)] := v286$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 2bv32)] := v286$2;
    call {:sourceloc} {:sourceloc_num 269} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 3bv32), v287$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 3bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 3bv32));
    assume {:do_not_predicate} {:check_id "check_state_7"} {:captureState "check_state_7"} {:sourceloc} {:sourceloc_num 269} true;
    call {:check_id "check_state_7"} {:sourceloc} {:sourceloc_num 269} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 3bv32), v287$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 1bv32), 4bv32), 3bv32)] := v287$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 1bv32), 4bv32), 3bv32)] := v287$2;
    v288$1 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$1[96:64]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$1[96:64], $savx.2$1[96:64]), FMUL32($savy.2$1[96:64], $savy.2$1[96:64]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v288$2 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$2[96:64]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$2[96:64], $savx.2$2[96:64]), FMUL32($savy.2$2[96:64], $savy.2$2[96:64]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v289$1 := $$color$8bv32$1;
    v289$2 := $$color$8bv32$2;
    v290$1 := $$color$9bv32$1;
    v290$2 := $$color$9bv32$2;
    v291$1 := $$color$10bv32$1;
    v291$2 := $$color$10bv32$2;
    v292$1 := $$color$11bv32$1;
    v292$2 := $$color$11bv32$2;
    $$color$8bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v288$1)), 1056964608bv32), 1132396544bv32));
    $$color$8bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v288$2)), 1056964608bv32), 1132396544bv32));
    $$color$9bv32$1 := v290$1;
    $$color$9bv32$2 := v290$2;
    $$color$10bv32$1 := v291$1;
    $$color$10bv32$2 := v291$2;
    $$color$11bv32$1 := v292$1;
    $$color$11bv32$2 := v292$2;
    v293$1 := $$color$8bv32$1;
    v293$2 := $$color$8bv32$2;
    v294$1 := $$color$9bv32$1;
    v294$2 := $$color$9bv32$2;
    v295$1 := $$color$10bv32$1;
    v295$2 := $$color$10bv32$2;
    v296$1 := $$color$11bv32$1;
    v296$2 := $$color$11bv32$2;
    $$color$8bv32$1 := v293$1;
    $$color$8bv32$2 := v293$2;
    $$color$9bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v288$1), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$9bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v288$2), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$10bv32$1 := v295$1;
    $$color$10bv32$2 := v295$2;
    $$color$11bv32$1 := v296$1;
    $$color$11bv32$2 := v296$2;
    v297$1 := $$color$8bv32$1;
    v297$2 := $$color$8bv32$2;
    v298$1 := $$color$9bv32$1;
    v298$2 := $$color$9bv32$2;
    v299$1 := $$color$10bv32$1;
    v299$2 := $$color$10bv32$2;
    v300$1 := $$color$11bv32$1;
    v300$2 := $$color$11bv32$2;
    $$color$8bv32$1 := v297$1;
    $$color$8bv32$2 := v297$2;
    $$color$9bv32$1 := v298$1;
    $$color$9bv32$2 := v298$2;
    $$color$10bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v288$1, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$10bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v288$2, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$11bv32$1 := v300$1;
    $$color$11bv32$2 := v300$2;
    v301$1 := $$color$8bv32$1;
    v301$2 := $$color$8bv32$2;
    v302$1 := $$color$9bv32$1;
    v302$2 := $$color$9bv32$2;
    v303$1 := $$color$10bv32$1;
    v303$2 := $$color$10bv32$2;
    v304$1 := $$color$11bv32$1;
    v304$2 := $$color$11bv32$2;
    $$color$8bv32$1 := v301$1;
    $$color$8bv32$2 := v301$2;
    $$color$9bv32$1 := v302$1;
    $$color$9bv32$2 := v302$2;
    $$color$10bv32$1 := v303$1;
    $$color$10bv32$2 := v303$2;
    $$color$11bv32$1 := 255bv8;
    $$color$11bv32$2 := 255bv8;
    v305$1 := $ccount.2$1[96:64] == $maxIterations;
    v305$2 := $ccount.2$2[96:64] == $maxIterations;
    p55$1 := (if v305$1 then v305$1 else p55$1);
    p55$2 := (if v305$2 then v305$2 else p55$2);
    v306$1 := (if p55$1 then $$color$8bv32$1 else v306$1);
    v306$2 := (if p55$2 then $$color$8bv32$2 else v306$2);
    v307$1 := (if p55$1 then $$color$9bv32$1 else v307$1);
    v307$2 := (if p55$2 then $$color$9bv32$2 else v307$2);
    v308$1 := (if p55$1 then $$color$10bv32$1 else v308$1);
    v308$2 := (if p55$2 then $$color$10bv32$2 else v308$2);
    v309$1 := (if p55$1 then $$color$11bv32$1 else v309$1);
    v309$2 := (if p55$2 then $$color$11bv32$2 else v309$2);
    $$color$8bv32$1 := (if p55$1 then 0bv8 else $$color$8bv32$1);
    $$color$8bv32$2 := (if p55$2 then 0bv8 else $$color$8bv32$2);
    $$color$9bv32$1 := (if p55$1 then v307$1 else $$color$9bv32$1);
    $$color$9bv32$2 := (if p55$2 then v307$2 else $$color$9bv32$2);
    $$color$10bv32$1 := (if p55$1 then v308$1 else $$color$10bv32$1);
    $$color$10bv32$2 := (if p55$2 then v308$2 else $$color$10bv32$2);
    $$color$11bv32$1 := (if p55$1 then v309$1 else $$color$11bv32$1);
    $$color$11bv32$2 := (if p55$2 then v309$2 else $$color$11bv32$2);
    v310$1 := (if p55$1 then $$color$8bv32$1 else v310$1);
    v310$2 := (if p55$2 then $$color$8bv32$2 else v310$2);
    v311$1 := (if p55$1 then $$color$9bv32$1 else v311$1);
    v311$2 := (if p55$2 then $$color$9bv32$2 else v311$2);
    v312$1 := (if p55$1 then $$color$10bv32$1 else v312$1);
    v312$2 := (if p55$2 then $$color$10bv32$2 else v312$2);
    v313$1 := (if p55$1 then $$color$11bv32$1 else v313$1);
    v313$2 := (if p55$2 then $$color$11bv32$2 else v313$2);
    $$color$8bv32$1 := (if p55$1 then v310$1 else $$color$8bv32$1);
    $$color$8bv32$2 := (if p55$2 then v310$2 else $$color$8bv32$2);
    $$color$9bv32$1 := (if p55$1 then 0bv8 else $$color$9bv32$1);
    $$color$9bv32$2 := (if p55$2 then 0bv8 else $$color$9bv32$2);
    $$color$10bv32$1 := (if p55$1 then v312$1 else $$color$10bv32$1);
    $$color$10bv32$2 := (if p55$2 then v312$2 else $$color$10bv32$2);
    $$color$11bv32$1 := (if p55$1 then v313$1 else $$color$11bv32$1);
    $$color$11bv32$2 := (if p55$2 then v313$2 else $$color$11bv32$2);
    v314$1 := (if p55$1 then $$color$8bv32$1 else v314$1);
    v314$2 := (if p55$2 then $$color$8bv32$2 else v314$2);
    v315$1 := (if p55$1 then $$color$9bv32$1 else v315$1);
    v315$2 := (if p55$2 then $$color$9bv32$2 else v315$2);
    v316$1 := (if p55$1 then $$color$10bv32$1 else v316$1);
    v316$2 := (if p55$2 then $$color$10bv32$2 else v316$2);
    v317$1 := (if p55$1 then $$color$11bv32$1 else v317$1);
    v317$2 := (if p55$2 then $$color$11bv32$2 else v317$2);
    $$color$8bv32$1 := (if p55$1 then v314$1 else $$color$8bv32$1);
    $$color$8bv32$2 := (if p55$2 then v314$2 else $$color$8bv32$2);
    $$color$9bv32$1 := (if p55$1 then v315$1 else $$color$9bv32$1);
    $$color$9bv32$2 := (if p55$2 then v315$2 else $$color$9bv32$2);
    $$color$10bv32$1 := (if p55$1 then 0bv8 else $$color$10bv32$1);
    $$color$10bv32$2 := (if p55$2 then 0bv8 else $$color$10bv32$2);
    $$color$11bv32$1 := (if p55$1 then v317$1 else $$color$11bv32$1);
    $$color$11bv32$2 := (if p55$2 then v317$2 else $$color$11bv32$2);
    v318 := $bench != 0bv32;
    goto $truebb29, $falsebb29;

  $falsebb29:
    assume {:partition} !v318 && !v318;
    goto $81;

  $81:
    v335$1 := $$color$8bv32$1;
    v335$2 := $$color$8bv32$2;
    v336$1 := $$color$9bv32$1;
    v336$2 := $$color$9bv32$2;
    v337$1 := $$color$10bv32$1;
    v337$2 := $$color$10bv32$2;
    v338$1 := $$color$11bv32$1;
    v338$2 := $$color$11bv32$2;
    call {:sourceloc} {:sourceloc_num 366} _LOG_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), v335$1, $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32));
    assume {:do_not_predicate} {:check_id "check_state_8"} {:captureState "check_state_8"} {:sourceloc} {:sourceloc_num 366} true;
    call {:check_id "check_state_8"} {:sourceloc} {:sourceloc_num 366} _CHECK_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), v335$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32)] := v335$1;
    $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32)] := v335$2;
    call {:sourceloc} {:sourceloc_num 367} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 1bv32), v336$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 1bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 1bv32));
    assume {:do_not_predicate} {:check_id "check_state_9"} {:captureState "check_state_9"} {:sourceloc} {:sourceloc_num 367} true;
    call {:check_id "check_state_9"} {:sourceloc} {:sourceloc_num 367} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 1bv32), v336$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 1bv32)] := v336$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 1bv32)] := v336$2;
    call {:sourceloc} {:sourceloc_num 368} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 2bv32), v337$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 2bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 2bv32));
    assume {:do_not_predicate} {:check_id "check_state_10"} {:captureState "check_state_10"} {:sourceloc} {:sourceloc_num 368} true;
    call {:check_id "check_state_10"} {:sourceloc} {:sourceloc_num 368} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 2bv32), v337$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 2bv32)] := v337$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 2bv32)] := v337$2;
    call {:sourceloc} {:sourceloc_num 369} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 3bv32), v338$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 3bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 3bv32));
    assume {:do_not_predicate} {:check_id "check_state_11"} {:captureState "check_state_11"} {:sourceloc} {:sourceloc_num 369} true;
    call {:check_id "check_state_11"} {:sourceloc} {:sourceloc_num 369} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 3bv32), v338$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 2bv32), 4bv32), 3bv32)] := v338$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 2bv32), 4bv32), 3bv32)] := v338$2;
    v339$1 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$1[128:96]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$1[128:96], $savx.2$1[128:96]), FMUL32($savy.2$1[128:96], $savy.2$1[128:96]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v339$2 := FDIV32(FMUL32(FMUL32(FSUB32(FADD32(SI32_TO_FP32($ccount.2$2[128:96]), 1065353216bv32), FLOG32(FLOG32(FADD32(FMUL32($savx.2$2[128:96], $savx.2$2[128:96]), FMUL32($savy.2$2[128:96], $savy.2$2[128:96]))))), 1073741824bv32), 1078530041bv32), 1132462080bv32);
    v340$1 := $$color$12bv32$1;
    v340$2 := $$color$12bv32$2;
    v341$1 := $$color$13bv32$1;
    v341$2 := $$color$13bv32$2;
    v342$1 := $$color$14bv32$1;
    v342$2 := $$color$14bv32$2;
    v343$1 := $$color$15bv32$1;
    v343$2 := $$color$15bv32$2;
    $$color$12bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v339$1)), 1056964608bv32), 1132396544bv32));
    $$color$12bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(v339$2)), 1056964608bv32), 1132396544bv32));
    $$color$13bv32$1 := v341$1;
    $$color$13bv32$2 := v341$2;
    $$color$14bv32$1 := v342$1;
    $$color$14bv32$2 := v342$2;
    $$color$15bv32$1 := v343$1;
    $$color$15bv32$2 := v343$2;
    v344$1 := $$color$12bv32$1;
    v344$2 := $$color$12bv32$2;
    v345$1 := $$color$13bv32$1;
    v345$2 := $$color$13bv32$2;
    v346$1 := $$color$14bv32$1;
    v346$2 := $$color$14bv32$2;
    v347$1 := $$color$15bv32$1;
    v347$2 := $$color$15bv32$2;
    $$color$12bv32$1 := v344$1;
    $$color$12bv32$2 := v344$2;
    $$color$13bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v339$1), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$13bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FADD32(FMUL32(1073741824bv32, v339$2), 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$14bv32$1 := v346$1;
    $$color$14bv32$2 := v346$2;
    $$color$15bv32$1 := v347$1;
    $$color$15bv32$2 := v347$2;
    v348$1 := $$color$12bv32$1;
    v348$2 := $$color$12bv32$2;
    v349$1 := $$color$13bv32$1;
    v349$2 := $$color$13bv32$2;
    v350$1 := $$color$14bv32$1;
    v350$2 := $$color$14bv32$2;
    v351$1 := $$color$15bv32$1;
    v351$2 := $$color$15bv32$2;
    $$color$12bv32$1 := v348$1;
    $$color$12bv32$2 := v348$2;
    $$color$13bv32$1 := v349$1;
    $$color$13bv32$2 := v349$2;
    $$color$14bv32$1 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v339$1, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$14bv32$2 := FP32_TO_UI8(FMUL32(FMUL32(FADD32(1065353216bv32, FCOS32(FSUB32(v339$2, 1074137766bv32))), 1056964608bv32), 1132396544bv32));
    $$color$15bv32$1 := v351$1;
    $$color$15bv32$2 := v351$2;
    v352$1 := $$color$12bv32$1;
    v352$2 := $$color$12bv32$2;
    v353$1 := $$color$13bv32$1;
    v353$2 := $$color$13bv32$2;
    v354$1 := $$color$14bv32$1;
    v354$2 := $$color$14bv32$2;
    v355$1 := $$color$15bv32$1;
    v355$2 := $$color$15bv32$2;
    $$color$12bv32$1 := v352$1;
    $$color$12bv32$2 := v352$2;
    $$color$13bv32$1 := v353$1;
    $$color$13bv32$2 := v353$2;
    $$color$14bv32$1 := v354$1;
    $$color$14bv32$2 := v354$2;
    $$color$15bv32$1 := 255bv8;
    $$color$15bv32$2 := 255bv8;
    v356$1 := $ccount.2$1[128:96] == $maxIterations;
    v356$2 := $ccount.2$2[128:96] == $maxIterations;
    p57$1 := (if v356$1 then v356$1 else p57$1);
    p57$2 := (if v356$2 then v356$2 else p57$2);
    v357$1 := (if p57$1 then $$color$12bv32$1 else v357$1);
    v357$2 := (if p57$2 then $$color$12bv32$2 else v357$2);
    v358$1 := (if p57$1 then $$color$13bv32$1 else v358$1);
    v358$2 := (if p57$2 then $$color$13bv32$2 else v358$2);
    v359$1 := (if p57$1 then $$color$14bv32$1 else v359$1);
    v359$2 := (if p57$2 then $$color$14bv32$2 else v359$2);
    v360$1 := (if p57$1 then $$color$15bv32$1 else v360$1);
    v360$2 := (if p57$2 then $$color$15bv32$2 else v360$2);
    $$color$12bv32$1 := (if p57$1 then 0bv8 else $$color$12bv32$1);
    $$color$12bv32$2 := (if p57$2 then 0bv8 else $$color$12bv32$2);
    $$color$13bv32$1 := (if p57$1 then v358$1 else $$color$13bv32$1);
    $$color$13bv32$2 := (if p57$2 then v358$2 else $$color$13bv32$2);
    $$color$14bv32$1 := (if p57$1 then v359$1 else $$color$14bv32$1);
    $$color$14bv32$2 := (if p57$2 then v359$2 else $$color$14bv32$2);
    $$color$15bv32$1 := (if p57$1 then v360$1 else $$color$15bv32$1);
    $$color$15bv32$2 := (if p57$2 then v360$2 else $$color$15bv32$2);
    v361$1 := (if p57$1 then $$color$12bv32$1 else v361$1);
    v361$2 := (if p57$2 then $$color$12bv32$2 else v361$2);
    v362$1 := (if p57$1 then $$color$13bv32$1 else v362$1);
    v362$2 := (if p57$2 then $$color$13bv32$2 else v362$2);
    v363$1 := (if p57$1 then $$color$14bv32$1 else v363$1);
    v363$2 := (if p57$2 then $$color$14bv32$2 else v363$2);
    v364$1 := (if p57$1 then $$color$15bv32$1 else v364$1);
    v364$2 := (if p57$2 then $$color$15bv32$2 else v364$2);
    $$color$12bv32$1 := (if p57$1 then v361$1 else $$color$12bv32$1);
    $$color$12bv32$2 := (if p57$2 then v361$2 else $$color$12bv32$2);
    $$color$13bv32$1 := (if p57$1 then 0bv8 else $$color$13bv32$1);
    $$color$13bv32$2 := (if p57$2 then 0bv8 else $$color$13bv32$2);
    $$color$14bv32$1 := (if p57$1 then v363$1 else $$color$14bv32$1);
    $$color$14bv32$2 := (if p57$2 then v363$2 else $$color$14bv32$2);
    $$color$15bv32$1 := (if p57$1 then v364$1 else $$color$15bv32$1);
    $$color$15bv32$2 := (if p57$2 then v364$2 else $$color$15bv32$2);
    v365$1 := (if p57$1 then $$color$12bv32$1 else v365$1);
    v365$2 := (if p57$2 then $$color$12bv32$2 else v365$2);
    v366$1 := (if p57$1 then $$color$13bv32$1 else v366$1);
    v366$2 := (if p57$2 then $$color$13bv32$2 else v366$2);
    v367$1 := (if p57$1 then $$color$14bv32$1 else v367$1);
    v367$2 := (if p57$2 then $$color$14bv32$2 else v367$2);
    v368$1 := (if p57$1 then $$color$15bv32$1 else v368$1);
    v368$2 := (if p57$2 then $$color$15bv32$2 else v368$2);
    $$color$12bv32$1 := (if p57$1 then v365$1 else $$color$12bv32$1);
    $$color$12bv32$2 := (if p57$2 then v365$2 else $$color$12bv32$2);
    $$color$13bv32$1 := (if p57$1 then v366$1 else $$color$13bv32$1);
    $$color$13bv32$2 := (if p57$2 then v366$2 else $$color$13bv32$2);
    $$color$14bv32$1 := (if p57$1 then 0bv8 else $$color$14bv32$1);
    $$color$14bv32$2 := (if p57$2 then 0bv8 else $$color$14bv32$2);
    $$color$15bv32$1 := (if p57$1 then v368$1 else $$color$15bv32$1);
    $$color$15bv32$2 := (if p57$2 then v368$2 else $$color$15bv32$2);
    v369 := $bench != 0bv32;
    goto $truebb31, $falsebb31;

  $falsebb31:
    assume {:partition} !v369 && !v369;
    goto $85;

  $85:
    v386$1 := $$color$12bv32$1;
    v386$2 := $$color$12bv32$2;
    v387$1 := $$color$13bv32$1;
    v387$2 := $$color$13bv32$2;
    v388$1 := $$color$14bv32$1;
    v388$2 := $$color$14bv32$2;
    v389$1 := $$color$15bv32$1;
    v389$2 := $$color$15bv32$2;
    call {:sourceloc} {:sourceloc_num 466} _LOG_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), v386$1, $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32));
    assume {:do_not_predicate} {:check_id "check_state_12"} {:captureState "check_state_12"} {:sourceloc} {:sourceloc_num 466} true;
    call {:check_id "check_state_12"} {:sourceloc} {:sourceloc_num 466} _CHECK_WRITE_$$mandelbrotImage(true, BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), v386$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32)] := v386$1;
    $$mandelbrotImage[BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32)] := v386$2;
    call {:sourceloc} {:sourceloc_num 467} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 1bv32), v387$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 1bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 1bv32));
    assume {:do_not_predicate} {:check_id "check_state_13"} {:captureState "check_state_13"} {:sourceloc} {:sourceloc_num 467} true;
    call {:check_id "check_state_13"} {:sourceloc} {:sourceloc_num 467} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 1bv32), v387$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 1bv32)] := v387$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 1bv32)] := v387$2;
    call {:sourceloc} {:sourceloc_num 468} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 2bv32), v388$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 2bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 2bv32));
    assume {:do_not_predicate} {:check_id "check_state_14"} {:captureState "check_state_14"} {:sourceloc} {:sourceloc_num 468} true;
    call {:check_id "check_state_14"} {:sourceloc} {:sourceloc_num 468} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 2bv32), v388$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 2bv32)] := v388$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 2bv32)] := v388$2;
    call {:sourceloc} {:sourceloc_num 469} _LOG_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 3bv32), v389$1, $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 3bv32)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 3bv32));
    assume {:do_not_predicate} {:check_id "check_state_15"} {:captureState "check_state_15"} {:sourceloc} {:sourceloc_num 469} true;
    call {:check_id "check_state_15"} {:sourceloc} {:sourceloc_num 469} _CHECK_WRITE_$$mandelbrotImage(true, BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 3bv32), v389$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$mandelbrotImage"} true;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$1), 3bv32), 4bv32), 3bv32)] := v389$1;
    $$mandelbrotImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(4bv32, v0$2), 3bv32), 4bv32), 3bv32)] := v389$2;
    return;

  $truebb31:
    assume {:partition} v369 && v369;
    v370$1 := $$color$12bv32$1;
    v370$2 := $$color$12bv32$2;
    v371$1 := $$color$13bv32$1;
    v371$2 := $$color$13bv32$2;
    v372$1 := $$color$14bv32$1;
    v372$2 := $$color$14bv32$2;
    v373$1 := $$color$15bv32$1;
    v373$2 := $$color$15bv32$2;
    $$color$12bv32$1 := BV32_AND($ccount.2$1[128:96], 255bv32)[8:0];
    $$color$12bv32$2 := BV32_AND($ccount.2$2[128:96], 255bv32)[8:0];
    $$color$13bv32$1 := v371$1;
    $$color$13bv32$2 := v371$2;
    $$color$14bv32$1 := v372$1;
    $$color$14bv32$2 := v372$2;
    $$color$15bv32$1 := v373$1;
    $$color$15bv32$2 := v373$2;
    v374$1 := $$color$12bv32$1;
    v374$2 := $$color$12bv32$2;
    v375$1 := $$color$13bv32$1;
    v375$2 := $$color$13bv32$2;
    v376$1 := $$color$14bv32$1;
    v376$2 := $$color$14bv32$2;
    v377$1 := $$color$15bv32$1;
    v377$2 := $$color$15bv32$2;
    $$color$12bv32$1 := v374$1;
    $$color$12bv32$2 := v374$2;
    $$color$13bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[128:96], 65280bv32), 8bv32)[8:0];
    $$color$13bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[128:96], 65280bv32), 8bv32)[8:0];
    $$color$14bv32$1 := v376$1;
    $$color$14bv32$2 := v376$2;
    $$color$15bv32$1 := v377$1;
    $$color$15bv32$2 := v377$2;
    v378$1 := $$color$12bv32$1;
    v378$2 := $$color$12bv32$2;
    v379$1 := $$color$13bv32$1;
    v379$2 := $$color$13bv32$2;
    v380$1 := $$color$14bv32$1;
    v380$2 := $$color$14bv32$2;
    v381$1 := $$color$15bv32$1;
    v381$2 := $$color$15bv32$2;
    $$color$12bv32$1 := v378$1;
    $$color$12bv32$2 := v378$2;
    $$color$13bv32$1 := v379$1;
    $$color$13bv32$2 := v379$2;
    $$color$14bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[128:96], 16711680bv32), 16bv32)[8:0];
    $$color$14bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[128:96], 16711680bv32), 16bv32)[8:0];
    $$color$15bv32$1 := v381$1;
    $$color$15bv32$2 := v381$2;
    v382$1 := $$color$12bv32$1;
    v382$2 := $$color$12bv32$2;
    v383$1 := $$color$13bv32$1;
    v383$2 := $$color$13bv32$2;
    v384$1 := $$color$14bv32$1;
    v384$2 := $$color$14bv32$2;
    v385$1 := $$color$15bv32$1;
    v385$2 := $$color$15bv32$2;
    $$color$12bv32$1 := v382$1;
    $$color$12bv32$2 := v382$2;
    $$color$13bv32$1 := v383$1;
    $$color$13bv32$2 := v383$2;
    $$color$14bv32$1 := v384$1;
    $$color$14bv32$2 := v384$2;
    $$color$15bv32$1 := BV32_LSHR(BV32_AND($ccount.2$1[128:96], 4278190080bv32), 24bv32)[8:0];
    $$color$15bv32$2 := BV32_LSHR(BV32_AND($ccount.2$2[128:96], 4278190080bv32), 24bv32)[8:0];
    goto $85;

  $truebb29:
    assume {:partition} v318 && v318;
    v319$1 := $$color$8bv32$1;
    v319$2 := $$color$8bv32$2;
    v320$1 := $$color$9bv32$1;
    v320$2 := $$color$9bv32$2;
    v321$1 := $$color$10bv32$1;
    v321$2 := $$color$10bv32$2;
    v322$1 := $$color$11bv32$1;
    v322$2 := $$color$11bv32$2;
    $$color$8bv32$1 := BV32_AND($ccount.2$1[96:64], 255bv32)[8:0];
    $$color$8bv32$2 := BV32_AND($ccount.2$2[96:64], 255bv32)[8:0];
    $$color$9bv32$1 := v320$1;
    $$color$9bv32$2 := v320$2;
    $$color$10bv32$1 := v321$1;
    $$color$10bv32$2 := v321$2;
    $$color$11bv32$1 := v322$1;
    $$color$11bv32$2 := v322$2;
    v323$1 := $$color$8bv32$1;
    v323$2 := $$color$8bv32$2;
    v324$1 := $$color$9bv32$1;
    v324$2 := $$color$9bv32$2;
    v325$1 := $$color$10bv32$1;
    v325$2 := $$color$10bv32$2;
    v326$1 := $$color$11bv32$1;
    v326$2 := $$color$11bv32$2;
    $$color$8bv32$1 := v323$1;
    $$color$8bv32$2 := v323$2;
    $$color$9bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[96:64], 65280bv32), 8bv32)[8:0];
    $$color$9bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[96:64], 65280bv32), 8bv32)[8:0];
    $$color$10bv32$1 := v325$1;
    $$color$10bv32$2 := v325$2;
    $$color$11bv32$1 := v326$1;
    $$color$11bv32$2 := v326$2;
    v327$1 := $$color$8bv32$1;
    v327$2 := $$color$8bv32$2;
    v328$1 := $$color$9bv32$1;
    v328$2 := $$color$9bv32$2;
    v329$1 := $$color$10bv32$1;
    v329$2 := $$color$10bv32$2;
    v330$1 := $$color$11bv32$1;
    v330$2 := $$color$11bv32$2;
    $$color$8bv32$1 := v327$1;
    $$color$8bv32$2 := v327$2;
    $$color$9bv32$1 := v328$1;
    $$color$9bv32$2 := v328$2;
    $$color$10bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[96:64], 16711680bv32), 16bv32)[8:0];
    $$color$10bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[96:64], 16711680bv32), 16bv32)[8:0];
    $$color$11bv32$1 := v330$1;
    $$color$11bv32$2 := v330$2;
    v331$1 := $$color$8bv32$1;
    v331$2 := $$color$8bv32$2;
    v332$1 := $$color$9bv32$1;
    v332$2 := $$color$9bv32$2;
    v333$1 := $$color$10bv32$1;
    v333$2 := $$color$10bv32$2;
    v334$1 := $$color$11bv32$1;
    v334$2 := $$color$11bv32$2;
    $$color$8bv32$1 := v331$1;
    $$color$8bv32$2 := v331$2;
    $$color$9bv32$1 := v332$1;
    $$color$9bv32$2 := v332$2;
    $$color$10bv32$1 := v333$1;
    $$color$10bv32$2 := v333$2;
    $$color$11bv32$1 := BV32_LSHR(BV32_AND($ccount.2$1[96:64], 4278190080bv32), 24bv32)[8:0];
    $$color$11bv32$2 := BV32_LSHR(BV32_AND($ccount.2$2[96:64], 4278190080bv32), 24bv32)[8:0];
    goto $81;

  $truebb27:
    assume {:partition} v267 && v267;
    v268$1 := $$color$4bv32$1;
    v268$2 := $$color$4bv32$2;
    v269$1 := $$color$5bv32$1;
    v269$2 := $$color$5bv32$2;
    v270$1 := $$color$6bv32$1;
    v270$2 := $$color$6bv32$2;
    v271$1 := $$color$7bv32$1;
    v271$2 := $$color$7bv32$2;
    $$color$4bv32$1 := BV32_AND($ccount.2$1[64:32], 255bv32)[8:0];
    $$color$4bv32$2 := BV32_AND($ccount.2$2[64:32], 255bv32)[8:0];
    $$color$5bv32$1 := v269$1;
    $$color$5bv32$2 := v269$2;
    $$color$6bv32$1 := v270$1;
    $$color$6bv32$2 := v270$2;
    $$color$7bv32$1 := v271$1;
    $$color$7bv32$2 := v271$2;
    v272$1 := $$color$4bv32$1;
    v272$2 := $$color$4bv32$2;
    v273$1 := $$color$5bv32$1;
    v273$2 := $$color$5bv32$2;
    v274$1 := $$color$6bv32$1;
    v274$2 := $$color$6bv32$2;
    v275$1 := $$color$7bv32$1;
    v275$2 := $$color$7bv32$2;
    $$color$4bv32$1 := v272$1;
    $$color$4bv32$2 := v272$2;
    $$color$5bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[64:32], 65280bv32), 8bv32)[8:0];
    $$color$5bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[64:32], 65280bv32), 8bv32)[8:0];
    $$color$6bv32$1 := v274$1;
    $$color$6bv32$2 := v274$2;
    $$color$7bv32$1 := v275$1;
    $$color$7bv32$2 := v275$2;
    v276$1 := $$color$4bv32$1;
    v276$2 := $$color$4bv32$2;
    v277$1 := $$color$5bv32$1;
    v277$2 := $$color$5bv32$2;
    v278$1 := $$color$6bv32$1;
    v278$2 := $$color$6bv32$2;
    v279$1 := $$color$7bv32$1;
    v279$2 := $$color$7bv32$2;
    $$color$4bv32$1 := v276$1;
    $$color$4bv32$2 := v276$2;
    $$color$5bv32$1 := v277$1;
    $$color$5bv32$2 := v277$2;
    $$color$6bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[64:32], 16711680bv32), 16bv32)[8:0];
    $$color$6bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[64:32], 16711680bv32), 16bv32)[8:0];
    $$color$7bv32$1 := v279$1;
    $$color$7bv32$2 := v279$2;
    v280$1 := $$color$4bv32$1;
    v280$2 := $$color$4bv32$2;
    v281$1 := $$color$5bv32$1;
    v281$2 := $$color$5bv32$2;
    v282$1 := $$color$6bv32$1;
    v282$2 := $$color$6bv32$2;
    v283$1 := $$color$7bv32$1;
    v283$2 := $$color$7bv32$2;
    $$color$4bv32$1 := v280$1;
    $$color$4bv32$2 := v280$2;
    $$color$5bv32$1 := v281$1;
    $$color$5bv32$2 := v281$2;
    $$color$6bv32$1 := v282$1;
    $$color$6bv32$2 := v282$2;
    $$color$7bv32$1 := BV32_LSHR(BV32_AND($ccount.2$1[64:32], 4278190080bv32), 24bv32)[8:0];
    $$color$7bv32$2 := BV32_LSHR(BV32_AND($ccount.2$2[64:32], 4278190080bv32), 24bv32)[8:0];
    goto $77;

  $truebb25:
    assume {:partition} v216 && v216;
    v217$1 := $$color$0bv32$1;
    v217$2 := $$color$0bv32$2;
    v218$1 := $$color$1bv32$1;
    v218$2 := $$color$1bv32$2;
    v219$1 := $$color$2bv32$1;
    v219$2 := $$color$2bv32$2;
    v220$1 := $$color$3bv32$1;
    v220$2 := $$color$3bv32$2;
    $$color$0bv32$1 := BV32_AND($ccount.2$1[32:0], 255bv32)[8:0];
    $$color$0bv32$2 := BV32_AND($ccount.2$2[32:0], 255bv32)[8:0];
    $$color$1bv32$1 := v218$1;
    $$color$1bv32$2 := v218$2;
    $$color$2bv32$1 := v219$1;
    $$color$2bv32$2 := v219$2;
    $$color$3bv32$1 := v220$1;
    $$color$3bv32$2 := v220$2;
    v221$1 := $$color$0bv32$1;
    v221$2 := $$color$0bv32$2;
    v222$1 := $$color$1bv32$1;
    v222$2 := $$color$1bv32$2;
    v223$1 := $$color$2bv32$1;
    v223$2 := $$color$2bv32$2;
    v224$1 := $$color$3bv32$1;
    v224$2 := $$color$3bv32$2;
    $$color$0bv32$1 := v221$1;
    $$color$0bv32$2 := v221$2;
    $$color$1bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[32:0], 65280bv32), 8bv32)[8:0];
    $$color$1bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[32:0], 65280bv32), 8bv32)[8:0];
    $$color$2bv32$1 := v223$1;
    $$color$2bv32$2 := v223$2;
    $$color$3bv32$1 := v224$1;
    $$color$3bv32$2 := v224$2;
    v225$1 := $$color$0bv32$1;
    v225$2 := $$color$0bv32$2;
    v226$1 := $$color$1bv32$1;
    v226$2 := $$color$1bv32$2;
    v227$1 := $$color$2bv32$1;
    v227$2 := $$color$2bv32$2;
    v228$1 := $$color$3bv32$1;
    v228$2 := $$color$3bv32$2;
    $$color$0bv32$1 := v225$1;
    $$color$0bv32$2 := v225$2;
    $$color$1bv32$1 := v226$1;
    $$color$1bv32$2 := v226$2;
    $$color$2bv32$1 := BV32_ASHR(BV32_AND($ccount.2$1[32:0], 16711680bv32), 16bv32)[8:0];
    $$color$2bv32$2 := BV32_ASHR(BV32_AND($ccount.2$2[32:0], 16711680bv32), 16bv32)[8:0];
    $$color$3bv32$1 := v228$1;
    $$color$3bv32$2 := v228$2;
    v229$1 := $$color$0bv32$1;
    v229$2 := $$color$0bv32$2;
    v230$1 := $$color$1bv32$1;
    v230$2 := $$color$1bv32$2;
    v231$1 := $$color$2bv32$1;
    v231$2 := $$color$2bv32$2;
    v232$1 := $$color$3bv32$1;
    v232$2 := $$color$3bv32$2;
    $$color$0bv32$1 := v229$1;
    $$color$0bv32$2 := v229$2;
    $$color$1bv32$1 := v230$1;
    $$color$1bv32$2 := v230$2;
    $$color$2bv32$1 := v231$1;
    $$color$2bv32$2 := v231$2;
    $$color$3bv32$1 := BV32_LSHR(BV32_AND($ccount.2$1[32:0], 4278190080bv32), 24bv32)[8:0];
    $$color$3bv32$2 := BV32_LSHR(BV32_AND($ccount.2$2[32:0], 4278190080bv32), 24bv32)[8:0];
    goto $73;

  $32.backedge:
    assume {:backedge} p23$1 || p23$2;
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto $32;

  $1.backedge:
    assume {:backedge} p0$1 || p0$2;
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto $1;
}



axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

var $$color$0bv32$1: bv8;

var $$color$0bv32$2: bv8;

var $$color$1bv32$1: bv8;

var $$color$1bv32$2: bv8;

var $$color$2bv32$1: bv8;

var $$color$2bv32$2: bv8;

var $$color$3bv32$1: bv8;

var $$color$3bv32$2: bv8;

var $$color$4bv32$1: bv8;

var $$color$4bv32$2: bv8;

var $$color$5bv32$1: bv8;

var $$color$5bv32$2: bv8;

var $$color$6bv32$1: bv8;

var $$color$6bv32$2: bv8;

var $$color$7bv32$1: bv8;

var $$color$7bv32$2: bv8;

var $$color$8bv32$1: bv8;

var $$color$8bv32$2: bv8;

var $$color$9bv32$1: bv8;

var $$color$9bv32$2: bv8;

var $$color$10bv32$1: bv8;

var $$color$10bv32$2: bv8;

var $$color$11bv32$1: bv8;

var $$color$11bv32$2: bv8;

var $$color$12bv32$1: bv8;

var $$color$12bv32$2: bv8;

var $$color$13bv32$1: bv8;

var $$color$13bv32$2: bv8;

var $$color$14bv32$1: bv8;

var $$color$14bv32$2: bv8;

var $$color$15bv32$1: bv8;

var $$color$15bv32$2: bv8;

const _WATCHED_VALUE_$$mandelbrotImage: bv8;

procedure {:inline 1} _LOG_READ_$$mandelbrotImage(_P: bool, _offset: bv32, _value: bv8);
  modifies _READ_HAS_OCCURRED_$$mandelbrotImage;



implementation {:inline 1} _LOG_READ_$$mandelbrotImage(_P: bool, _offset: bv32, _value: bv8)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$mandelbrotImage := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$mandelbrotImage == _value then true else _READ_HAS_OCCURRED_$$mandelbrotImage);
    return;
}



procedure _CHECK_READ_$$mandelbrotImage(_P: bool, _offset: bv32, _value: bv8);
  requires {:source_name "mandelbrotImage"} {:array "$$mandelbrotImage"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage);
  requires {:source_name "mandelbrotImage"} {:array "$$mandelbrotImage"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage: bool;

procedure {:inline 1} _LOG_WRITE_$$mandelbrotImage(_P: bool, _offset: bv32, _value: bv8, _value_old: bv8);
  modifies _WRITE_HAS_OCCURRED_$$mandelbrotImage, _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage;



implementation {:inline 1} _LOG_WRITE_$$mandelbrotImage(_P: bool, _offset: bv32, _value: bv8, _value_old: bv8)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$mandelbrotImage := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$mandelbrotImage == _value then true else _WRITE_HAS_OCCURRED_$$mandelbrotImage);
    _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$mandelbrotImage == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage);
    return;
}



procedure _CHECK_WRITE_$$mandelbrotImage(_P: bool, _offset: bv32, _value: bv8);
  requires {:source_name "mandelbrotImage"} {:array "$$mandelbrotImage"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$mandelbrotImage != _value);
  requires {:source_name "mandelbrotImage"} {:array "$$mandelbrotImage"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$mandelbrotImage != _value);
  requires {:source_name "mandelbrotImage"} {:array "$$mandelbrotImage"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$mandelbrotImage(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$mandelbrotImage;



implementation {:inline 1} _LOG_ATOMIC_$$mandelbrotImage(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$mandelbrotImage := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$mandelbrotImage);
    return;
}



procedure _CHECK_ATOMIC_$$mandelbrotImage(_P: bool, _offset: bv32);
  requires {:source_name "mandelbrotImage"} {:array "$$mandelbrotImage"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset);
  requires {:source_name "mandelbrotImage"} {:array "$$mandelbrotImage"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$mandelbrotImage(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage := (if _P && _WRITE_HAS_OCCURRED_$$mandelbrotImage && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$mandelbrotImage);
    return;
}



var _TRACKING: bool;

function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
