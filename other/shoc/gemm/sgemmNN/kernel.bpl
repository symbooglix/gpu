type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x: [bv32]bv32, y: bv32) returns (z$1: bv32, A$1: [bv32]bv32, z$2: bv32, A$2: [bv32]bv32);



axiom {:array_info "$$A"} {:global} {:elem_width 32} {:source_name "A"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A: bool;

axiom {:array_info "$$B"} {:global} {:elem_width 32} {:source_name "B"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$B: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$B: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$B: bool;

var {:source_name "C"} {:global} $$C: [bv32]bv32;

axiom {:array_info "$$C"} {:global} {:elem_width 32} {:source_name "C"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$C: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$C: bool;

var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$C: bool;

var {:source_name "c"} $$c$1: [bv32]bv32;

var {:source_name "c"} $$c$2: [bv32]bv32;

axiom {:array_info "$$c"} {:elem_width 32} {:source_name "c"} {:source_elem_width 32} {:source_dimensions "16"} true;

var {:source_name "a"} $$a$1: [bv32]bv32;

var {:source_name "a"} $$a$2: [bv32]bv32;

axiom {:array_info "$$a"} {:elem_width 32} {:source_name "a"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "bs"} {:group_shared} $$sgemmNN.bs: [bv1][bv32]bv32;

axiom {:array_info "$$sgemmNN.bs"} {:group_shared} {:elem_width 32} {:source_name "bs"} {:source_elem_width 32} {:source_dimensions "16,17"} true;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,17"} _READ_HAS_OCCURRED_$$sgemmNN.bs: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,17"} _WRITE_HAS_OCCURRED_$$sgemmNN.bs: bool;

var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,17"} _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs: bool;

const _WATCHED_OFFSET: bv32;

const {:group_id_x} group_id_x$1: bv32;

const {:group_id_x} group_id_x$2: bv32;

const {:group_id_y} group_id_y$1: bv32;

const {:group_id_y} group_id_y$2: bv32;

const {:group_size_x} group_size_x: bv32;

const {:group_size_y} group_size_y: bv32;

const {:group_size_z} group_size_z: bv32;

const {:local_id_x} local_id_x$1: bv32;

const {:local_id_x} local_id_x$2: bv32;

const {:local_id_y} local_id_y$1: bv32;

const {:local_id_y} local_id_y$2: bv32;

const {:num_groups_x} num_groups_x: bv32;

const {:num_groups_y} num_groups_y: bv32;

const {:num_groups_z} num_groups_z: bv32;

function FADD32(bv32, bv32) : bv32;

function FMUL32(bv32, bv32) : bv32;

function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;

function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;

function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;

procedure {:source_name "sgemmNN"} {:kernel} $sgemmNN($lda: bv32, $ldb: bv32, $ldc: bv32, $k: bv32, $alpha: bv32, $beta: bv32);
  requires {:sourceloc_num 0} {:thread 1} (if $ldc == 256bv32 then 1bv1 else 0bv1) != 0bv1;
  requires !_READ_HAS_OCCURRED_$$A && !_WRITE_HAS_OCCURRED_$$A && !_ATOMIC_HAS_OCCURRED_$$A;
  requires !_READ_HAS_OCCURRED_$$B && !_WRITE_HAS_OCCURRED_$$B && !_ATOMIC_HAS_OCCURRED_$$B;
  requires !_READ_HAS_OCCURRED_$$C && !_WRITE_HAS_OCCURRED_$$C && !_ATOMIC_HAS_OCCURRED_$$C;
  requires !_READ_HAS_OCCURRED_$$sgemmNN.bs && !_WRITE_HAS_OCCURRED_$$sgemmNN.bs && !_ATOMIC_HAS_OCCURRED_$$sgemmNN.bs;
  requires BV32_SGT(group_size_x, 0bv32);
  requires BV32_SGT(num_groups_x, 0bv32);
  requires BV32_SGE(group_id_x$1, 0bv32);
  requires BV32_SGE(group_id_x$2, 0bv32);
  requires BV32_SLT(group_id_x$1, num_groups_x);
  requires BV32_SLT(group_id_x$2, num_groups_x);
  requires BV32_SGE(local_id_x$1, 0bv32);
  requires BV32_SGE(local_id_x$2, 0bv32);
  requires BV32_SLT(local_id_x$1, group_size_x);
  requires BV32_SLT(local_id_x$2, group_size_x);
  requires BV32_SGT(group_size_y, 0bv32);
  requires BV32_SGT(num_groups_y, 0bv32);
  requires BV32_SGE(group_id_y$1, 0bv32);
  requires BV32_SGE(group_id_y$2, 0bv32);
  requires BV32_SLT(group_id_y$1, num_groups_y);
  requires BV32_SLT(group_id_y$2, num_groups_y);
  requires BV32_SGE(local_id_y$1, 0bv32);
  requires BV32_SGE(local_id_y$2, 0bv32);
  requires BV32_SLT(local_id_y$1, group_size_y);
  requires BV32_SLT(local_id_y$2, group_size_y);
  requires BV32_SGT(group_size_z, 0bv32);
  requires BV32_SGT(num_groups_z, 0bv32);
  requires BV32_SGE(group_id_z$1, 0bv32);
  requires BV32_SGE(group_id_z$2, 0bv32);
  requires BV32_SLT(group_id_z$1, num_groups_z);
  requires BV32_SLT(group_id_z$2, num_groups_z);
  requires BV32_SGE(local_id_z$1, 0bv32);
  requires BV32_SGE(local_id_z$2, 0bv32);
  requires BV32_SLT(local_id_z$1, group_size_z);
  requires BV32_SLT(local_id_z$2, group_size_z);
  requires group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> local_id_x$1 != local_id_x$2 || local_id_y$1 != local_id_y$2 || local_id_z$1 != local_id_z$2;
  modifies $$sgemmNN.bs, _WRITE_HAS_OCCURRED_$$sgemmNN.bs, _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs, _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs, $$C, _TRACKING, _READ_HAS_OCCURRED_$$sgemmNN.bs, _TRACKING, _READ_HAS_OCCURRED_$$C, _WRITE_HAS_OCCURRED_$$C, _WRITE_READ_BENIGN_FLAG_$$C, _WRITE_READ_BENIGN_FLAG_$$C;



implementation {:source_name "sgemmNN"} {:kernel} $sgemmNN($lda: bv32, $ldb: bv32, $ldc: bv32, $k: bv32, $alpha: bv32, $beta: bv32)
{
  var $i.0: bv32;
  var $counter.0: bv32;
  var $.01$1: bv32;
  var $.01$2: bv32;
  var $.0$1: bv32;
  var $.0$2: bv32;
  var $ii.0: bv32;
  var $.02$1: bv32;
  var $.02$2: bv32;
  var $i1.0: bv32;
  var v12: bv32;
  var v11$1: bv32;
  var v11$2: bv32;
  var v7$1: bv32;
  var v7$2: bv32;
  var v3$1: bv32;
  var v3$2: bv32;
  var v5: bool;
  var v4$1: bv32;
  var v4$2: bv32;
  var v16$1: bv32;
  var v16$2: bv32;
  var v17$1: bv32;
  var v17$2: bv32;
  var v18$1: bv32;
  var v18$2: bv32;
  var v19$1: bv32;
  var v19$2: bv32;
  var v20$1: bv32;
  var v20$2: bv32;
  var v21$1: bv32;
  var v21$2: bv32;
  var v13$1: bv32;
  var v13$2: bv32;
  var v14$1: bv32;
  var v14$2: bv32;
  var v15$1: bv32;
  var v15$2: bv32;
  var v22$1: bv32;
  var v22$2: bv32;
  var v23$1: bv32;
  var v23$2: bv32;
  var v24$1: bv32;
  var v24$2: bv32;
  var v37$1: bv32;
  var v37$2: bv32;
  var v38$1: bv32;
  var v38$2: bv32;
  var v39$1: bv32;
  var v39$2: bv32;
  var v40$1: bv32;
  var v40$2: bv32;
  var v41$1: bv32;
  var v41$2: bv32;
  var v42$1: bv32;
  var v42$2: bv32;
  var v43$1: bv32;
  var v43$2: bv32;
  var v44$1: bv32;
  var v44$2: bv32;
  var v45$1: bv32;
  var v45$2: bv32;
  var v46$1: bv32;
  var v46$2: bv32;
  var v47$1: bv32;
  var v47$2: bv32;
  var v48$1: bv32;
  var v48$2: bv32;
  var v49$1: bv32;
  var v49$2: bv32;
  var v50$1: bv32;
  var v50$2: bv32;
  var v51$1: bv32;
  var v51$2: bv32;
  var v52$1: bv32;
  var v52$2: bv32;
  var v53$1: bv32;
  var v53$2: bv32;
  var v54$1: bv32;
  var v54$2: bv32;
  var v55$1: bv32;
  var v55$2: bv32;
  var v56$1: bv32;
  var v56$2: bv32;
  var v28$1: bv32;
  var v28$2: bv32;
  var v29$1: bv32;
  var v29$2: bv32;
  var v30$1: bv32;
  var v30$2: bv32;
  var v31$1: bv32;
  var v31$2: bv32;
  var v32$1: bv32;
  var v32$2: bv32;
  var v33$1: bv32;
  var v33$2: bv32;
  var v34$1: bv32;
  var v34$2: bv32;
  var v35$1: bv32;
  var v35$2: bv32;
  var v36$1: bv32;
  var v36$2: bv32;
  var v0$1: bv32;
  var v0$2: bv32;
  var v1$1: bv32;
  var v1$2: bv32;
  var v2$1: bv32;
  var v2$2: bv32;
  var v10$1: bv32;
  var v10$2: bv32;
  var v57$1: bv32;
  var v57$2: bv32;
  var v58$1: bv32;
  var v58$2: bv32;
  var v59$1: bv32;
  var v59$2: bv32;
  var v60$1: bv32;
  var v60$2: bv32;
  var v61$1: bv32;
  var v61$2: bv32;
  var v62$1: bv32;
  var v62$2: bv32;
  var v63$1: bv32;
  var v63$2: bv32;
  var v64$1: bv32;
  var v64$2: bv32;
  var v65$1: bv32;
  var v65$2: bv32;
  var v66$1: bv32;
  var v66$2: bv32;
  var v67$1: bv32;
  var v67$2: bv32;
  var v68$1: bv32;
  var v68$2: bv32;
  var v69$1: bv32;
  var v69$2: bv32;
  var v70$1: bv32;
  var v70$2: bv32;
  var v71$1: bv32;
  var v71$2: bv32;
  var v72$1: bv32;
  var v72$2: bv32;
  var v73$1: bv32;
  var v73$2: bv32;
  var v74$1: bv32;
  var v74$2: bv32;
  var v75$1: bv32;
  var v75$2: bv32;
  var v76$1: bv32;
  var v76$2: bv32;
  var v77$1: bv32;
  var v77$2: bv32;
  var v405$1: bv32;
  var v405$2: bv32;
  var v406: bv32;
  var v407$1: bv32;
  var v407$2: bv32;
  var v408$1: bv32;
  var v408$2: bv32;
  var v409$1: bv32;
  var v409$2: bv32;
  var v410$1: bv32;
  var v410$2: bv32;
  var v411$1: bv32;
  var v411$2: bv32;
  var v412$1: bv32;
  var v412$2: bv32;
  var v413$1: bv32;
  var v413$2: bv32;
  var v414$1: bv32;
  var v414$2: bv32;
  var v415$1: bv32;
  var v415$2: bv32;
  var v416$1: bv32;
  var v416$2: bv32;
  var v417$1: bv32;
  var v417$2: bv32;
  var v418$1: bv32;
  var v418$2: bv32;
  var v419$1: bv32;
  var v419$2: bv32;
  var v420$1: bv32;
  var v420$2: bv32;
  var v421$1: bv32;
  var v421$2: bv32;
  var v422$1: bv32;
  var v422$2: bv32;
  var v423$1: bv32;
  var v423$2: bv32;
  var v424$1: bv32;
  var v424$2: bv32;
  var v425$1: bv32;
  var v425$2: bv32;
  var v426$1: bv32;
  var v426$2: bv32;
  var v427$1: bv32;
  var v427$2: bv32;
  var v550$1: bv32;
  var v550$2: bv32;
  var v551$1: bv32;
  var v551$2: bv32;
  var v552$1: bv32;
  var v552$2: bv32;
  var v553$1: bv32;
  var v553$2: bv32;
  var v554$1: bv32;
  var v554$2: bv32;
  var v555$1: bv32;
  var v555$2: bv32;
  var v556$1: bv32;
  var v556$2: bv32;
  var v557$1: bv32;
  var v557$2: bv32;
  var v558$1: bv32;
  var v558$2: bv32;
  var v559$1: bv32;
  var v559$2: bv32;
  var v560$1: bv32;
  var v560$2: bv32;
  var v561$1: bv32;
  var v561$2: bv32;
  var v562$1: bv32;
  var v562$2: bv32;
  var v563$1: bv32;
  var v563$2: bv32;
  var v564$1: bv32;
  var v564$2: bv32;
  var v565$1: bv32;
  var v565$2: bv32;
  var v566$1: bv32;
  var v566$2: bv32;
  var v567$1: bv32;
  var v567$2: bv32;
  var v568$1: bv32;
  var v568$2: bv32;
  var v569$1: bv32;
  var v569$2: bv32;
  var v570$1: bv32;
  var v570$2: bv32;
  var v571$1: bv32;
  var v571$2: bv32;
  var v572$1: bv32;
  var v572$2: bv32;
  var v573$1: bv32;
  var v573$2: bv32;
  var v217$1: bv32;
  var v217$2: bv32;
  var v218$1: bv32;
  var v218$2: bv32;
  var v219$1: bv32;
  var v219$2: bv32;
  var v220$1: bv32;
  var v220$2: bv32;
  var v221$1: bv32;
  var v221$2: bv32;
  var v222$1: bv32;
  var v222$2: bv32;
  var v223$1: bv32;
  var v223$2: bv32;
  var v224$1: bv32;
  var v224$2: bv32;
  var v225$1: bv32;
  var v225$2: bv32;
  var v226$1: bv32;
  var v226$2: bv32;
  var v227$1: bv32;
  var v227$2: bv32;
  var v228$1: bv32;
  var v228$2: bv32;
  var v229$1: bv32;
  var v229$2: bv32;
  var v230$1: bv32;
  var v230$2: bv32;
  var v231$1: bv32;
  var v231$2: bv32;
  var v232$1: bv32;
  var v232$2: bv32;
  var v233$1: bv32;
  var v233$2: bv32;
  var v234$1: bv32;
  var v234$2: bv32;
  var v235$1: bv32;
  var v235$2: bv32;
  var v236$1: bv32;
  var v236$2: bv32;
  var v237$1: bv32;
  var v237$2: bv32;
  var v238$1: bv32;
  var v238$2: bv32;
  var v239$1: bv32;
  var v239$2: bv32;
  var v240$1: bv32;
  var v240$2: bv32;
  var v779$1: bv32;
  var v779$2: bv32;
  var v780$1: bv32;
  var v780$2: bv32;
  var v781$1: bv32;
  var v781$2: bv32;
  var v782$1: bv32;
  var v782$2: bv32;
  var v783$1: bv32;
  var v783$2: bv32;
  var v784$1: bv32;
  var v784$2: bv32;
  var v785$1: bv32;
  var v785$2: bv32;
  var v786$1: bv32;
  var v786$2: bv32;
  var v787$1: bv32;
  var v787$2: bv32;
  var v788$1: bv32;
  var v788$2: bv32;
  var v789$1: bv32;
  var v789$2: bv32;
  var v790$1: bv32;
  var v790$2: bv32;
  var v791$1: bv32;
  var v791$2: bv32;
  var v792$1: bv32;
  var v792$2: bv32;
  var v793$1: bv32;
  var v793$2: bv32;
  var v794$1: bv32;
  var v794$2: bv32;
  var v795: bv32;
  var v796: bool;
  var v797: bool;
  var v798$1: bv32;
  var v798$2: bv32;
  var v799$1: bv32;
  var v799$2: bv32;
  var v310$1: bv32;
  var v310$2: bv32;
  var v311$1: bv32;
  var v311$2: bv32;
  var v312$1: bv32;
  var v312$2: bv32;
  var v313$1: bv32;
  var v313$2: bv32;
  var v314$1: bv32;
  var v314$2: bv32;
  var v315$1: bv32;
  var v315$2: bv32;
  var v316$1: bv32;
  var v316$2: bv32;
  var v317$1: bv32;
  var v317$2: bv32;
  var v318$1: bv32;
  var v318$2: bv32;
  var v319$1: bv32;
  var v319$2: bv32;
  var v320$1: bv32;
  var v320$2: bv32;
  var v321$1: bv32;
  var v321$2: bv32;
  var v322$1: bv32;
  var v322$2: bv32;
  var v323$1: bv32;
  var v323$2: bv32;
  var v324$1: bv32;
  var v324$2: bv32;
  var v325$1: bv32;
  var v325$2: bv32;
  var v326$1: bv32;
  var v326$2: bv32;
  var v327$1: bv32;
  var v327$2: bv32;
  var v328$1: bv32;
  var v328$2: bv32;
  var v329$1: bv32;
  var v329$2: bv32;
  var v330$1: bv32;
  var v330$2: bv32;
  var v331$1: bv32;
  var v331$2: bv32;
  var v332$1: bv32;
  var v332$2: bv32;
  var v333$1: bv32;
  var v333$2: bv32;
  var v334$1: bv32;
  var v334$2: bv32;
  var v752$1: bv32;
  var v752$2: bv32;
  var v753$1: bv32;
  var v753$2: bv32;
  var v754$1: bv32;
  var v754$2: bv32;
  var v755$1: bv32;
  var v755$2: bv32;
  var v756$1: bv32;
  var v756$2: bv32;
  var v757$1: bv32;
  var v757$2: bv32;
  var v758$1: bv32;
  var v758$2: bv32;
  var v759$1: bv32;
  var v759$2: bv32;
  var v760$1: bv32;
  var v760$2: bv32;
  var v761$1: bv32;
  var v761$2: bv32;
  var v762$1: bv32;
  var v762$2: bv32;
  var v763$1: bv32;
  var v763$2: bv32;
  var v764$1: bv32;
  var v764$2: bv32;
  var v765$1: bv32;
  var v765$2: bv32;
  var v766$1: bv32;
  var v766$2: bv32;
  var v767$1: bv32;
  var v767$2: bv32;
  var v768$1: bv32;
  var v768$2: bv32;
  var v769$1: bv32;
  var v769$2: bv32;
  var v770$1: bv32;
  var v770$2: bv32;
  var v771$1: bv32;
  var v771$2: bv32;
  var v772$1: bv32;
  var v772$2: bv32;
  var v773$1: bv32;
  var v773$2: bv32;
  var v774$1: bv32;
  var v774$2: bv32;
  var v775$1: bv32;
  var v775$2: bv32;
  var v776$1: bv32;
  var v776$2: bv32;
  var v777$1: bv32;
  var v777$2: bv32;
  var v778$1: bv32;
  var v778$2: bv32;
  var v6: bool;
  var v125$1: bv32;
  var v125$2: bv32;
  var v126$1: bv32;
  var v126$2: bv32;
  var v127$1: bv32;
  var v127$2: bv32;
  var v128$1: bv32;
  var v128$2: bv32;
  var v129$1: bv32;
  var v129$2: bv32;
  var v130$1: bv32;
  var v130$2: bv32;
  var v131$1: bv32;
  var v131$2: bv32;
  var v132$1: bv32;
  var v132$2: bv32;
  var v133$1: bv32;
  var v133$2: bv32;
  var v134$1: bv32;
  var v134$2: bv32;
  var v135$1: bv32;
  var v135$2: bv32;
  var v136$1: bv32;
  var v136$2: bv32;
  var v137$1: bv32;
  var v137$2: bv32;
  var v138$1: bv32;
  var v138$2: bv32;
  var v139$1: bv32;
  var v139$2: bv32;
  var v140$1: bv32;
  var v140$2: bv32;
  var v141$1: bv32;
  var v141$2: bv32;
  var v142$1: bv32;
  var v142$2: bv32;
  var v143$1: bv32;
  var v143$2: bv32;
  var v144$1: bv32;
  var v144$2: bv32;
  var v145$1: bv32;
  var v145$2: bv32;
  var v146$1: bv32;
  var v146$2: bv32;
  var v147$1: bv32;
  var v147$2: bv32;
  var v148$1: bv32;
  var v148$2: bv32;
  var v601$1: bv32;
  var v601$2: bv32;
  var v602$1: bv32;
  var v602$2: bv32;
  var v603$1: bv32;
  var v603$2: bv32;
  var v604$1: bv32;
  var v604$2: bv32;
  var v605$1: bv32;
  var v605$2: bv32;
  var v606$1: bv32;
  var v606$2: bv32;
  var v607$1: bv32;
  var v607$2: bv32;
  var v608$1: bv32;
  var v608$2: bv32;
  var v609$1: bv32;
  var v609$2: bv32;
  var v610$1: bv32;
  var v610$2: bv32;
  var v611$1: bv32;
  var v611$2: bv32;
  var v612$1: bv32;
  var v612$2: bv32;
  var v613$1: bv32;
  var v613$2: bv32;
  var v614$1: bv32;
  var v614$2: bv32;
  var v615$1: bv32;
  var v615$2: bv32;
  var v616$1: bv32;
  var v616$2: bv32;
  var v617$1: bv32;
  var v617$2: bv32;
  var v618$1: bv32;
  var v618$2: bv32;
  var v619$1: bv32;
  var v619$2: bv32;
  var v620$1: bv32;
  var v620$2: bv32;
  var v621$1: bv32;
  var v621$2: bv32;
  var v622$1: bv32;
  var v622$2: bv32;
  var v623$1: bv32;
  var v623$2: bv32;
  var v335$1: bv32;
  var v335$2: bv32;
  var v336$1: bv32;
  var v336$2: bv32;
  var v337$1: bv32;
  var v337$2: bv32;
  var v338$1: bv32;
  var v338$2: bv32;
  var v339$1: bv32;
  var v339$2: bv32;
  var v340$1: bv32;
  var v340$2: bv32;
  var v341$1: bv32;
  var v341$2: bv32;
  var v342$1: bv32;
  var v342$2: bv32;
  var v343$1: bv32;
  var v343$2: bv32;
  var v344$1: bv32;
  var v344$2: bv32;
  var v345$1: bv32;
  var v345$2: bv32;
  var v346$1: bv32;
  var v346$2: bv32;
  var v347$1: bv32;
  var v347$2: bv32;
  var v348$1: bv32;
  var v348$2: bv32;
  var v349$1: bv32;
  var v349$2: bv32;
  var v350$1: bv32;
  var v350$2: bv32;
  var v351$1: bv32;
  var v351$2: bv32;
  var v352$1: bv32;
  var v352$2: bv32;
  var v353$1: bv32;
  var v353$2: bv32;
  var v354$1: bv32;
  var v354$2: bv32;
  var v355$1: bv32;
  var v355$2: bv32;
  var v356$1: bv32;
  var v356$2: bv32;
  var v524$1: bv32;
  var v524$2: bv32;
  var v525$1: bv32;
  var v525$2: bv32;
  var v526$1: bv32;
  var v526$2: bv32;
  var v527$1: bv32;
  var v527$2: bv32;
  var v528$1: bv32;
  var v528$2: bv32;
  var v529$1: bv32;
  var v529$2: bv32;
  var v530$1: bv32;
  var v530$2: bv32;
  var v531$1: bv32;
  var v531$2: bv32;
  var v532$1: bv32;
  var v532$2: bv32;
  var v533$1: bv32;
  var v533$2: bv32;
  var v534$1: bv32;
  var v534$2: bv32;
  var v535$1: bv32;
  var v535$2: bv32;
  var v536$1: bv32;
  var v536$2: bv32;
  var v537$1: bv32;
  var v537$2: bv32;
  var v538$1: bv32;
  var v538$2: bv32;
  var v539$1: bv32;
  var v539$2: bv32;
  var v540$1: bv32;
  var v540$2: bv32;
  var v541$1: bv32;
  var v541$2: bv32;
  var v542$1: bv32;
  var v542$2: bv32;
  var v543$1: bv32;
  var v543$2: bv32;
  var v544$1: bv32;
  var v544$2: bv32;
  var v545$1: bv32;
  var v545$2: bv32;
  var v546$1: bv32;
  var v546$2: bv32;
  var v547$1: bv32;
  var v547$2: bv32;
  var v548$1: bv32;
  var v548$2: bv32;
  var v549$1: bv32;
  var v549$2: bv32;
  var v288$1: bv32;
  var v288$2: bv32;
  var v289$1: bv32;
  var v289$2: bv32;
  var v290$1: bv32;
  var v290$2: bv32;
  var v291$1: bv32;
  var v291$2: bv32;
  var v292$1: bv32;
  var v292$2: bv32;
  var v293$1: bv32;
  var v293$2: bv32;
  var v294$1: bv32;
  var v294$2: bv32;
  var v295$1: bv32;
  var v295$2: bv32;
  var v296$1: bv32;
  var v296$2: bv32;
  var v297$1: bv32;
  var v297$2: bv32;
  var v298$1: bv32;
  var v298$2: bv32;
  var v299$1: bv32;
  var v299$2: bv32;
  var v300$1: bv32;
  var v300$2: bv32;
  var v301$1: bv32;
  var v301$2: bv32;
  var v302$1: bv32;
  var v302$2: bv32;
  var v303$1: bv32;
  var v303$2: bv32;
  var v304$1: bv32;
  var v304$2: bv32;
  var v305$1: bv32;
  var v305$2: bv32;
  var v306$1: bv32;
  var v306$2: bv32;
  var v307$1: bv32;
  var v307$2: bv32;
  var v308$1: bv32;
  var v308$2: bv32;
  var v309$1: bv32;
  var v309$2: bv32;
  var v624$1: bv32;
  var v624$2: bv32;
  var v625$1: bv32;
  var v625$2: bv32;
  var v626$1: bv32;
  var v626$2: bv32;
  var v627$1: bv32;
  var v627$2: bv32;
  var v628$1: bv32;
  var v628$2: bv32;
  var v629$1: bv32;
  var v629$2: bv32;
  var v630$1: bv32;
  var v630$2: bv32;
  var v631$1: bv32;
  var v631$2: bv32;
  var v632$1: bv32;
  var v632$2: bv32;
  var v633$1: bv32;
  var v633$2: bv32;
  var v634$1: bv32;
  var v634$2: bv32;
  var v635$1: bv32;
  var v635$2: bv32;
  var v636$1: bv32;
  var v636$2: bv32;
  var v637$1: bv32;
  var v637$2: bv32;
  var v638$1: bv32;
  var v638$2: bv32;
  var v639$1: bv32;
  var v639$2: bv32;
  var v640$1: bv32;
  var v640$2: bv32;
  var v641$1: bv32;
  var v641$2: bv32;
  var v642$1: bv32;
  var v642$2: bv32;
  var v643$1: bv32;
  var v643$2: bv32;
  var v644$1: bv32;
  var v644$2: bv32;
  var v645$1: bv32;
  var v645$2: bv32;
  var v646$1: bv32;
  var v646$2: bv32;
  var v647$1: bv32;
  var v647$2: bv32;
  var v648$1: bv32;
  var v648$2: bv32;
  var v649$1: bv32;
  var v649$2: bv32;
  var v650$1: bv32;
  var v650$2: bv32;
  var v357$1: bv32;
  var v357$2: bv32;
  var v358$1: bv32;
  var v358$2: bv32;
  var v359$1: bv32;
  var v359$2: bv32;
  var v360$1: bv32;
  var v360$2: bv32;
  var v361$1: bv32;
  var v361$2: bv32;
  var v362$1: bv32;
  var v362$2: bv32;
  var v363$1: bv32;
  var v363$2: bv32;
  var v364$1: bv32;
  var v364$2: bv32;
  var v365$1: bv32;
  var v365$2: bv32;
  var v366$1: bv32;
  var v366$2: bv32;
  var v367$1: bv32;
  var v367$2: bv32;
  var v368$1: bv32;
  var v368$2: bv32;
  var v369$1: bv32;
  var v369$2: bv32;
  var v370$1: bv32;
  var v370$2: bv32;
  var v371$1: bv32;
  var v371$2: bv32;
  var v372$1: bv32;
  var v372$2: bv32;
  var v373$1: bv32;
  var v373$2: bv32;
  var v374$1: bv32;
  var v374$2: bv32;
  var v375$1: bv32;
  var v375$2: bv32;
  var v376$1: bv32;
  var v376$2: bv32;
  var v377$1: bv32;
  var v377$2: bv32;
  var v378$1: bv32;
  var v378$2: bv32;
  var v379$1: bv32;
  var v379$2: bv32;
  var v380$1: bv32;
  var v380$2: bv32;
  var v651$1: bv32;
  var v651$2: bv32;
  var v652$1: bv32;
  var v652$2: bv32;
  var v653$1: bv32;
  var v653$2: bv32;
  var v654$1: bv32;
  var v654$2: bv32;
  var v655$1: bv32;
  var v655$2: bv32;
  var v656$1: bv32;
  var v656$2: bv32;
  var v657$1: bv32;
  var v657$2: bv32;
  var v658$1: bv32;
  var v658$2: bv32;
  var v659$1: bv32;
  var v659$2: bv32;
  var v660$1: bv32;
  var v660$2: bv32;
  var v661$1: bv32;
  var v661$2: bv32;
  var v662$1: bv32;
  var v662$2: bv32;
  var v675$1: bv32;
  var v675$2: bv32;
  var v663$1: bv32;
  var v663$2: bv32;
  var v664$1: bv32;
  var v664$2: bv32;
  var v665$1: bv32;
  var v665$2: bv32;
  var v666$1: bv32;
  var v666$2: bv32;
  var v667$1: bv32;
  var v667$2: bv32;
  var v668$1: bv32;
  var v668$2: bv32;
  var v669$1: bv32;
  var v669$2: bv32;
  var v670$1: bv32;
  var v670$2: bv32;
  var v671$1: bv32;
  var v671$2: bv32;
  var v672$1: bv32;
  var v672$2: bv32;
  var v673$1: bv32;
  var v673$2: bv32;
  var v674$1: bv32;
  var v674$2: bv32;
  var v78$1: bv32;
  var v78$2: bv32;
  var v79$1: bv32;
  var v79$2: bv32;
  var v80$1: bv32;
  var v80$2: bv32;
  var v81$1: bv32;
  var v81$2: bv32;
  var v82$1: bv32;
  var v82$2: bv32;
  var v83$1: bv32;
  var v83$2: bv32;
  var v84$1: bv32;
  var v84$2: bv32;
  var v85$1: bv32;
  var v85$2: bv32;
  var v86$1: bv32;
  var v86$2: bv32;
  var v87$1: bv32;
  var v87$2: bv32;
  var v88$1: bv32;
  var v88$2: bv32;
  var v89$1: bv32;
  var v89$2: bv32;
  var v90$1: bv32;
  var v90$2: bv32;
  var v91$1: bv32;
  var v91$2: bv32;
  var v92$1: bv32;
  var v92$2: bv32;
  var v93$1: bv32;
  var v93$2: bv32;
  var v94$1: bv32;
  var v94$2: bv32;
  var v95$1: bv32;
  var v95$2: bv32;
  var v96$1: bv32;
  var v96$2: bv32;
  var v97$1: bv32;
  var v97$2: bv32;
  var v98$1: bv32;
  var v98$2: bv32;
  var v99$1: bv32;
  var v99$2: bv32;
  var v100$1: bv32;
  var v100$2: bv32;
  var v101$1: bv32;
  var v101$2: bv32;
  var v102$1: bv32;
  var v102$2: bv32;
  var v676$1: bv32;
  var v676$2: bv32;
  var v677$1: bv32;
  var v677$2: bv32;
  var v678$1: bv32;
  var v678$2: bv32;
  var v679$1: bv32;
  var v679$2: bv32;
  var v680$1: bv32;
  var v680$2: bv32;
  var v681$1: bv32;
  var v681$2: bv32;
  var v682$1: bv32;
  var v682$2: bv32;
  var v683$1: bv32;
  var v683$2: bv32;
  var v684$1: bv32;
  var v684$2: bv32;
  var v685$1: bv32;
  var v685$2: bv32;
  var v686$1: bv32;
  var v686$2: bv32;
  var v687$1: bv32;
  var v687$2: bv32;
  var v688$1: bv32;
  var v688$2: bv32;
  var v689$1: bv32;
  var v689$2: bv32;
  var v690$1: bv32;
  var v690$2: bv32;
  var v691$1: bv32;
  var v691$2: bv32;
  var v692$1: bv32;
  var v692$2: bv32;
  var v693$1: bv32;
  var v693$2: bv32;
  var v694$1: bv32;
  var v694$2: bv32;
  var v695$1: bv32;
  var v695$2: bv32;
  var v696$1: bv32;
  var v696$2: bv32;
  var v697$1: bv32;
  var v697$2: bv32;
  var v698$1: bv32;
  var v698$2: bv32;
  var v699$1: bv32;
  var v699$2: bv32;
  var v700$1: bv32;
  var v700$2: bv32;
  var v241$1: bv32;
  var v241$2: bv32;
  var v242$1: bv32;
  var v242$2: bv32;
  var v243$1: bv32;
  var v243$2: bv32;
  var v244$1: bv32;
  var v244$2: bv32;
  var v245$1: bv32;
  var v245$2: bv32;
  var v246$1: bv32;
  var v246$2: bv32;
  var v247$1: bv32;
  var v247$2: bv32;
  var v248$1: bv32;
  var v248$2: bv32;
  var v249$1: bv32;
  var v249$2: bv32;
  var v250$1: bv32;
  var v250$2: bv32;
  var v251$1: bv32;
  var v251$2: bv32;
  var v252$1: bv32;
  var v252$2: bv32;
  var v253$1: bv32;
  var v253$2: bv32;
  var v254$1: bv32;
  var v254$2: bv32;
  var v255$1: bv32;
  var v255$2: bv32;
  var v256$1: bv32;
  var v256$2: bv32;
  var v257$1: bv32;
  var v257$2: bv32;
  var v258$1: bv32;
  var v258$2: bv32;
  var v259$1: bv32;
  var v259$2: bv32;
  var v260$1: bv32;
  var v260$2: bv32;
  var v261$1: bv32;
  var v261$2: bv32;
  var v262$1: bv32;
  var v262$2: bv32;
  var v263$1: bv32;
  var v263$2: bv32;
  var v574$1: bv32;
  var v574$2: bv32;
  var v575$1: bv32;
  var v575$2: bv32;
  var v576$1: bv32;
  var v576$2: bv32;
  var v577$1: bv32;
  var v577$2: bv32;
  var v578$1: bv32;
  var v578$2: bv32;
  var v579$1: bv32;
  var v579$2: bv32;
  var v580$1: bv32;
  var v580$2: bv32;
  var v581$1: bv32;
  var v581$2: bv32;
  var v582$1: bv32;
  var v582$2: bv32;
  var v583$1: bv32;
  var v583$2: bv32;
  var v584$1: bv32;
  var v584$2: bv32;
  var v585$1: bv32;
  var v585$2: bv32;
  var v586$1: bv32;
  var v586$2: bv32;
  var v587$1: bv32;
  var v587$2: bv32;
  var v588$1: bv32;
  var v588$2: bv32;
  var v589$1: bv32;
  var v589$2: bv32;
  var v590$1: bv32;
  var v590$2: bv32;
  var v591$1: bv32;
  var v591$2: bv32;
  var v592$1: bv32;
  var v592$2: bv32;
  var v593$1: bv32;
  var v593$2: bv32;
  var v594$1: bv32;
  var v594$2: bv32;
  var v595$1: bv32;
  var v595$2: bv32;
  var v596$1: bv32;
  var v596$2: bv32;
  var v597$1: bv32;
  var v597$2: bv32;
  var v598$1: bv32;
  var v598$2: bv32;
  var v599$1: bv32;
  var v599$2: bv32;
  var v600$1: bv32;
  var v600$2: bv32;
  var v264$1: bv32;
  var v264$2: bv32;
  var v265$1: bv32;
  var v265$2: bv32;
  var v266$1: bv32;
  var v266$2: bv32;
  var v267$1: bv32;
  var v267$2: bv32;
  var v268$1: bv32;
  var v268$2: bv32;
  var v269$1: bv32;
  var v269$2: bv32;
  var v270$1: bv32;
  var v270$2: bv32;
  var v271$1: bv32;
  var v271$2: bv32;
  var v272$1: bv32;
  var v272$2: bv32;
  var v273$1: bv32;
  var v273$2: bv32;
  var v274$1: bv32;
  var v274$2: bv32;
  var v275$1: bv32;
  var v275$2: bv32;
  var v276$1: bv32;
  var v276$2: bv32;
  var v277$1: bv32;
  var v277$2: bv32;
  var v278$1: bv32;
  var v278$2: bv32;
  var v279$1: bv32;
  var v279$2: bv32;
  var v280$1: bv32;
  var v280$2: bv32;
  var v281$1: bv32;
  var v281$2: bv32;
  var v282$1: bv32;
  var v282$2: bv32;
  var v283$1: bv32;
  var v283$2: bv32;
  var v284$1: bv32;
  var v284$2: bv32;
  var v285$1: bv32;
  var v285$2: bv32;
  var v286$1: bv32;
  var v286$2: bv32;
  var v287$1: bv32;
  var v287$2: bv32;
  var v701$1: bv32;
  var v701$2: bv32;
  var v702$1: bv32;
  var v702$2: bv32;
  var v703$1: bv32;
  var v703$2: bv32;
  var v704$1: bv32;
  var v704$2: bv32;
  var v705$1: bv32;
  var v705$2: bv32;
  var v706$1: bv32;
  var v706$2: bv32;
  var v707$1: bv32;
  var v707$2: bv32;
  var v708$1: bv32;
  var v708$2: bv32;
  var v709$1: bv32;
  var v709$2: bv32;
  var v710$1: bv32;
  var v710$2: bv32;
  var v711$1: bv32;
  var v711$2: bv32;
  var v712$1: bv32;
  var v712$2: bv32;
  var v713$1: bv32;
  var v713$2: bv32;
  var v714$1: bv32;
  var v714$2: bv32;
  var v715$1: bv32;
  var v715$2: bv32;
  var v716$1: bv32;
  var v716$2: bv32;
  var v717$1: bv32;
  var v717$2: bv32;
  var v718$1: bv32;
  var v718$2: bv32;
  var v719$1: bv32;
  var v719$2: bv32;
  var v720$1: bv32;
  var v720$2: bv32;
  var v721$1: bv32;
  var v721$2: bv32;
  var v722$1: bv32;
  var v722$2: bv32;
  var v723$1: bv32;
  var v723$2: bv32;
  var v724$1: bv32;
  var v724$2: bv32;
  var v725$1: bv32;
  var v725$2: bv32;
  var v726$1: bv32;
  var v726$2: bv32;
  var v381$1: bv32;
  var v381$2: bv32;
  var v382$1: bv32;
  var v382$2: bv32;
  var v383$1: bv32;
  var v383$2: bv32;
  var v384$1: bv32;
  var v384$2: bv32;
  var v385$1: bv32;
  var v385$2: bv32;
  var v386$1: bv32;
  var v386$2: bv32;
  var v387$1: bv32;
  var v387$2: bv32;
  var v388$1: bv32;
  var v388$2: bv32;
  var v389$1: bv32;
  var v389$2: bv32;
  var v390$1: bv32;
  var v390$2: bv32;
  var v391$1: bv32;
  var v391$2: bv32;
  var v392$1: bv32;
  var v392$2: bv32;
  var v393$1: bv32;
  var v393$2: bv32;
  var v394$1: bv32;
  var v394$2: bv32;
  var v395$1: bv32;
  var v395$2: bv32;
  var v396$1: bv32;
  var v396$2: bv32;
  var v397$1: bv32;
  var v397$2: bv32;
  var v398$1: bv32;
  var v398$2: bv32;
  var v399$1: bv32;
  var v399$2: bv32;
  var v400$1: bv32;
  var v400$2: bv32;
  var v401$1: bv32;
  var v401$2: bv32;
  var v402$1: bv32;
  var v402$2: bv32;
  var v403$1: bv32;
  var v403$2: bv32;
  var v404$1: bv32;
  var v404$2: bv32;
  var v727$1: bv32;
  var v727$2: bv32;
  var v728$1: bv32;
  var v728$2: bv32;
  var v729$1: bv32;
  var v729$2: bv32;
  var v730$1: bv32;
  var v730$2: bv32;
  var v731$1: bv32;
  var v731$2: bv32;
  var v732$1: bv32;
  var v732$2: bv32;
  var v733$1: bv32;
  var v733$2: bv32;
  var v734$1: bv32;
  var v734$2: bv32;
  var v735$1: bv32;
  var v735$2: bv32;
  var v736$1: bv32;
  var v736$2: bv32;
  var v737$1: bv32;
  var v737$2: bv32;
  var v738$1: bv32;
  var v738$2: bv32;
  var v739$1: bv32;
  var v739$2: bv32;
  var v740$1: bv32;
  var v740$2: bv32;
  var v741$1: bv32;
  var v741$2: bv32;
  var v742$1: bv32;
  var v742$2: bv32;
  var v743$1: bv32;
  var v743$2: bv32;
  var v744$1: bv32;
  var v744$2: bv32;
  var v745$1: bv32;
  var v745$2: bv32;
  var v746$1: bv32;
  var v746$2: bv32;
  var v747$1: bv32;
  var v747$2: bv32;
  var v748$1: bv32;
  var v748$2: bv32;
  var v749$1: bv32;
  var v749$2: bv32;
  var v750$1: bv32;
  var v750$2: bv32;
  var v751$1: bv32;
  var v751$2: bv32;
  var v103$1: bv32;
  var v103$2: bv32;
  var v104$1: bv32;
  var v104$2: bv32;
  var v105$1: bv32;
  var v105$2: bv32;
  var v106$1: bv32;
  var v106$2: bv32;
  var v107$1: bv32;
  var v107$2: bv32;
  var v108$1: bv32;
  var v108$2: bv32;
  var v109$1: bv32;
  var v109$2: bv32;
  var v110$1: bv32;
  var v110$2: bv32;
  var v111$1: bv32;
  var v111$2: bv32;
  var v112$1: bv32;
  var v112$2: bv32;
  var v113$1: bv32;
  var v113$2: bv32;
  var v114$1: bv32;
  var v114$2: bv32;
  var v115$1: bv32;
  var v115$2: bv32;
  var v116$1: bv32;
  var v116$2: bv32;
  var v117$1: bv32;
  var v117$2: bv32;
  var v118$1: bv32;
  var v118$2: bv32;
  var v119$1: bv32;
  var v119$2: bv32;
  var v120$1: bv32;
  var v120$2: bv32;
  var v121$1: bv32;
  var v121$2: bv32;
  var v122$1: bv32;
  var v122$2: bv32;
  var v123$1: bv32;
  var v123$2: bv32;
  var v124$1: bv32;
  var v124$2: bv32;
  var v476$1: bv32;
  var v476$2: bv32;
  var v477$1: bv32;
  var v477$2: bv32;
  var v478$1: bv32;
  var v478$2: bv32;
  var v479$1: bv32;
  var v479$2: bv32;
  var v480$1: bv32;
  var v480$2: bv32;
  var v481$1: bv32;
  var v481$2: bv32;
  var v482$1: bv32;
  var v482$2: bv32;
  var v483$1: bv32;
  var v483$2: bv32;
  var v484$1: bv32;
  var v484$2: bv32;
  var v485$1: bv32;
  var v485$2: bv32;
  var v486$1: bv32;
  var v486$2: bv32;
  var v487$1: bv32;
  var v487$2: bv32;
  var v488$1: bv32;
  var v488$2: bv32;
  var v489$1: bv32;
  var v489$2: bv32;
  var v490$1: bv32;
  var v490$2: bv32;
  var v491$1: bv32;
  var v491$2: bv32;
  var v492$1: bv32;
  var v492$2: bv32;
  var v493$1: bv32;
  var v493$2: bv32;
  var v494$1: bv32;
  var v494$2: bv32;
  var v495$1: bv32;
  var v495$2: bv32;
  var v496$1: bv32;
  var v496$2: bv32;
  var v497$1: bv32;
  var v497$2: bv32;
  var v498$1: bv32;
  var v498$2: bv32;
  var v499$1: bv32;
  var v499$2: bv32;
  var v500$1: bv32;
  var v500$2: bv32;
  var v195$1: bv32;
  var v195$2: bv32;
  var v196$1: bv32;
  var v196$2: bv32;
  var v197$1: bv32;
  var v197$2: bv32;
  var v198$1: bv32;
  var v198$2: bv32;
  var v199$1: bv32;
  var v199$2: bv32;
  var v200$1: bv32;
  var v200$2: bv32;
  var v201$1: bv32;
  var v201$2: bv32;
  var v202$1: bv32;
  var v202$2: bv32;
  var v203$1: bv32;
  var v203$2: bv32;
  var v204$1: bv32;
  var v204$2: bv32;
  var v205$1: bv32;
  var v205$2: bv32;
  var v206$1: bv32;
  var v206$2: bv32;
  var v207$1: bv32;
  var v207$2: bv32;
  var v208$1: bv32;
  var v208$2: bv32;
  var v209: bv32;
  var v210$1: bv32;
  var v210$2: bv32;
  var v211$1: bv32;
  var v211$2: bv32;
  var v212$1: bv32;
  var v212$2: bv32;
  var v213$1: bv32;
  var v213$2: bv32;
  var v214$1: bv32;
  var v214$2: bv32;
  var v215$1: bv32;
  var v215$2: bv32;
  var v216$1: bv32;
  var v216$2: bv32;
  var v453$1: bv32;
  var v453$2: bv32;
  var v454$1: bv32;
  var v454$2: bv32;
  var v455$1: bv32;
  var v455$2: bv32;
  var v456$1: bv32;
  var v456$2: bv32;
  var v457$1: bv32;
  var v457$2: bv32;
  var v458$1: bv32;
  var v458$2: bv32;
  var v459$1: bv32;
  var v459$2: bv32;
  var v460$1: bv32;
  var v460$2: bv32;
  var v461$1: bv32;
  var v461$2: bv32;
  var v462$1: bv32;
  var v462$2: bv32;
  var v463$1: bv32;
  var v463$2: bv32;
  var v464$1: bv32;
  var v464$2: bv32;
  var v465$1: bv32;
  var v465$2: bv32;
  var v466$1: bv32;
  var v466$2: bv32;
  var v467$1: bv32;
  var v467$2: bv32;
  var v468$1: bv32;
  var v468$2: bv32;
  var v469$1: bv32;
  var v469$2: bv32;
  var v470$1: bv32;
  var v470$2: bv32;
  var v471$1: bv32;
  var v471$2: bv32;
  var v472$1: bv32;
  var v472$2: bv32;
  var v473$1: bv32;
  var v473$2: bv32;
  var v474$1: bv32;
  var v474$2: bv32;
  var v475$1: bv32;
  var v475$2: bv32;
  var v149$1: bv32;
  var v149$2: bv32;
  var v150$1: bv32;
  var v150$2: bv32;
  var v151$1: bv32;
  var v151$2: bv32;
  var v152$1: bv32;
  var v152$2: bv32;
  var v153$1: bv32;
  var v153$2: bv32;
  var v154$1: bv32;
  var v154$2: bv32;
  var v155$1: bv32;
  var v155$2: bv32;
  var v156$1: bv32;
  var v156$2: bv32;
  var v157$1: bv32;
  var v157$2: bv32;
  var v158$1: bv32;
  var v158$2: bv32;
  var v159$1: bv32;
  var v159$2: bv32;
  var v160$1: bv32;
  var v160$2: bv32;
  var v161$1: bv32;
  var v161$2: bv32;
  var v162$1: bv32;
  var v162$2: bv32;
  var v163$1: bv32;
  var v163$2: bv32;
  var v164$1: bv32;
  var v164$2: bv32;
  var v165$1: bv32;
  var v165$2: bv32;
  var v166$1: bv32;
  var v166$2: bv32;
  var v167$1: bv32;
  var v167$2: bv32;
  var v168$1: bv32;
  var v168$2: bv32;
  var v169$1: bv32;
  var v169$2: bv32;
  var v170$1: bv32;
  var v170$2: bv32;
  var v428$1: bv32;
  var v428$2: bv32;
  var v429$1: bv32;
  var v429$2: bv32;
  var v430$1: bv32;
  var v430$2: bv32;
  var v431$1: bv32;
  var v431$2: bv32;
  var v432$1: bv32;
  var v432$2: bv32;
  var v433$1: bv32;
  var v433$2: bv32;
  var v434$1: bv32;
  var v434$2: bv32;
  var v435$1: bv32;
  var v435$2: bv32;
  var v436$1: bv32;
  var v436$2: bv32;
  var v437$1: bv32;
  var v437$2: bv32;
  var v438$1: bv32;
  var v438$2: bv32;
  var v439$1: bv32;
  var v439$2: bv32;
  var v440$1: bv32;
  var v440$2: bv32;
  var v441$1: bv32;
  var v441$2: bv32;
  var v442$1: bv32;
  var v442$2: bv32;
  var v443$1: bv32;
  var v443$2: bv32;
  var v444$1: bv32;
  var v444$2: bv32;
  var v445$1: bv32;
  var v445$2: bv32;
  var v446$1: bv32;
  var v446$2: bv32;
  var v447$1: bv32;
  var v447$2: bv32;
  var v448$1: bv32;
  var v448$2: bv32;
  var v449$1: bv32;
  var v449$2: bv32;
  var v450$1: bv32;
  var v450$2: bv32;
  var v451$1: bv32;
  var v451$2: bv32;
  var v452$1: bv32;
  var v452$2: bv32;
  var v171$1: bv32;
  var v171$2: bv32;
  var v172$1: bv32;
  var v172$2: bv32;
  var v173$1: bv32;
  var v173$2: bv32;
  var v174$1: bv32;
  var v174$2: bv32;
  var v175$1: bv32;
  var v175$2: bv32;
  var v176$1: bv32;
  var v176$2: bv32;
  var v177$1: bv32;
  var v177$2: bv32;
  var v178$1: bv32;
  var v178$2: bv32;
  var v179$1: bv32;
  var v179$2: bv32;
  var v180$1: bv32;
  var v180$2: bv32;
  var v181$1: bv32;
  var v181$2: bv32;
  var v182$1: bv32;
  var v182$2: bv32;
  var v183$1: bv32;
  var v183$2: bv32;
  var v184$1: bv32;
  var v184$2: bv32;
  var v185$1: bv32;
  var v185$2: bv32;
  var v186$1: bv32;
  var v186$2: bv32;
  var v187$1: bv32;
  var v187$2: bv32;
  var v188$1: bv32;
  var v188$2: bv32;
  var v189$1: bv32;
  var v189$2: bv32;
  var v190$1: bv32;
  var v190$2: bv32;
  var v191$1: bv32;
  var v191$2: bv32;
  var v192$1: bv32;
  var v192$2: bv32;
  var v193$1: bv32;
  var v193$2: bv32;
  var v194$1: bv32;
  var v194$2: bv32;
  var v501$1: bv32;
  var v501$2: bv32;
  var v502$1: bv32;
  var v502$2: bv32;
  var v503$1: bv32;
  var v503$2: bv32;
  var v504$1: bv32;
  var v504$2: bv32;
  var v505$1: bv32;
  var v505$2: bv32;
  var v506$1: bv32;
  var v506$2: bv32;
  var v507$1: bv32;
  var v507$2: bv32;
  var v508$1: bv32;
  var v508$2: bv32;
  var v509$1: bv32;
  var v509$2: bv32;
  var v510$1: bv32;
  var v510$2: bv32;
  var v511$1: bv32;
  var v511$2: bv32;
  var v512$1: bv32;
  var v512$2: bv32;
  var v513$1: bv32;
  var v513$2: bv32;
  var v514$1: bv32;
  var v514$2: bv32;
  var v515$1: bv32;
  var v515$2: bv32;
  var v516$1: bv32;
  var v516$2: bv32;
  var v517$1: bv32;
  var v517$2: bv32;
  var v518$1: bv32;
  var v518$2: bv32;
  var v519$1: bv32;
  var v519$2: bv32;
  var v520$1: bv32;
  var v520$2: bv32;
  var v521$1: bv32;
  var v521$2: bv32;
  var v522$1: bv32;
  var v522$2: bv32;
  var v523$1: bv32;
  var v523$2: bv32;
  var v8$1: bv32;
  var v8$2: bv32;
  var v25$1: bv32;
  var v25$2: bv32;
  var v26$1: bv32;
  var v26$2: bv32;
  var v27$1: bv32;
  var v27$2: bv32;
  var v9$1: bv32;
  var v9$2: bv32;


  $0:
    v0$1 := local_id_x$1;
    v0$2 := local_id_x$2;
    v1$1 := local_id_y$1;
    v1$2 := local_id_y$2;
    v2$1 := BV32_MUL(group_id_x$1, 64bv32);
    v2$2 := BV32_MUL(group_id_x$2, 64bv32);
    v3$1 := BV32_MUL(group_id_y$1, 16bv32);
    v3$2 := BV32_MUL(group_id_y$2, 16bv32);
    v4$1 := BV32_ADD(v0$1, BV32_MUL(v1$1, 16bv32));
    v4$2 := BV32_ADD(v0$2, BV32_MUL(v1$2, 16bv32));
    $i.0 := 0bv32;
    assume {:captureState "loop_entry_state_3_0"} true;
    goto $1;

  $1:
    assume {:captureState "loop_head_state_3"} true;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:block_sourceloc} {:sourceloc_num 2} true;
    v5 := BV32_SLT($i.0, 16bv32);
    goto $truebb, $falsebb;

  $falsebb:
    assume {:partition} !v5 && !v5;
    $counter.0, $.01$1, $.0$1 := 0bv32, BV32_ADD(v0$1, BV32_MUL(BV32_ADD(v3$1, v1$1), $ldb)), BV32_ADD(v2$1, v4$1);
    $.01$2, $.0$2 := BV32_ADD(v0$2, BV32_MUL(BV32_ADD(v3$2, v1$2), $ldb)), BV32_ADD(v2$2, v4$2);
    assume {:captureState "loop_entry_state_1_0"} true;
    goto $5;

  $5:
    assume {:captureState "loop_head_state_1"} true;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:block_sourceloc} {:sourceloc_num 7} true;
    $ii.0 := 0bv32;
    assume {:captureState "loop_entry_state_2_0"} true;
    goto $6;

  $6:
    assume {:captureState "loop_head_state_2"} true;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:block_sourceloc} {:sourceloc_num 8} true;
    v6 := BV32_SLT($ii.0, 4bv32);
    goto $truebb0, __partitioned_block_$falsebb0_0;

  __partitioned_block_$falsebb0_0:
    assume {:partition} !v6 && !v6;
    havoc v8$1, v8$2;
    call {:sourceloc} {:sourceloc_num 15} _LOG_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$1, 17bv32), v1$1), v8$1, $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), v1$1)]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), v1$2));
    assume {:do_not_predicate} {:check_id "check_state_0"} {:captureState "check_state_0"} {:sourceloc} {:sourceloc_num 15} true;
    call {:check_id "check_state_0"} {:sourceloc} {:sourceloc_num 15} _CHECK_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), v1$2), v8$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$sgemmNN.bs"} true;
    $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), v1$1)] := v8$1;
    $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][BV32_ADD(BV32_MUL(v0$2, 17bv32), v1$2)] := v8$2;
    havoc v9$1, v9$2;
    call {:sourceloc} {:sourceloc_num 17} _LOG_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 4bv32)), v9$1, $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 4bv32))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 4bv32)));
    assume {:do_not_predicate} {:check_id "check_state_1"} {:captureState "check_state_1"} {:sourceloc} {:sourceloc_num 17} true;
    call {:check_id "check_state_1"} {:sourceloc} {:sourceloc_num 17} _CHECK_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 4bv32)), v9$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$sgemmNN.bs"} true;
    $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 4bv32))] := v9$1;
    $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 4bv32))] := v9$2;
    havoc v10$1, v10$2;
    call {:sourceloc} {:sourceloc_num 19} _LOG_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 8bv32)), v10$1, $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 8bv32))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 8bv32)));
    assume {:do_not_predicate} {:check_id "check_state_2"} {:captureState "check_state_2"} {:sourceloc} {:sourceloc_num 19} true;
    call {:check_id "check_state_2"} {:sourceloc} {:sourceloc_num 19} _CHECK_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 8bv32)), v10$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$sgemmNN.bs"} true;
    $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 8bv32))] := v10$1;
    $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 8bv32))] := v10$2;
    havoc v11$1, v11$2;
    call {:sourceloc} {:sourceloc_num 21} _LOG_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 12bv32)), v11$1, $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 12bv32))]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 12bv32)));
    assume {:do_not_predicate} {:check_id "check_state_3"} {:captureState "check_state_3"} {:sourceloc} {:sourceloc_num 21} true;
    call {:check_id "check_state_3"} {:sourceloc} {:sourceloc_num 21} _CHECK_WRITE_$$sgemmNN.bs(true, BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 12bv32)), v11$2);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$sgemmNN.bs"} true;
    $$sgemmNN.bs[1bv1][BV32_ADD(BV32_MUL(v0$1, 17bv32), BV32_ADD(v1$1, 12bv32))] := v11$1;
    $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][BV32_ADD(BV32_MUL(v0$2, 17bv32), BV32_ADD(v1$2, 12bv32))] := v11$2;
    goto __partitioned_block_$falsebb0_1;

  __partitioned_block_$falsebb0_1:
    call {:sourceloc_num 22} $bugle_barrier_duplicated_0(1bv1, 0bv1);
    v12 := BV32_MUL(4bv32, $lda);
    v13$1 := $$a$1[0bv32];
    v13$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_4"} {:captureState "check_state_4"} {:sourceloc} {:sourceloc_num 25} true;
    v14$1 := $$sgemmNN.bs[1bv1][0bv32];
    v14$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][0bv32];
    v15$1 := $$c$1[0bv32];
    v15$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v15$1, FMUL32(v13$1, v14$1));
    $$c$2[0bv32] := FADD32(v15$2, FMUL32(v13$2, v14$2));
    v16$1 := $$a$1[0bv32];
    v16$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_5"} {:captureState "check_state_5"} {:sourceloc} {:sourceloc_num 29} true;
    v17$1 := $$sgemmNN.bs[1bv1][1bv32];
    v17$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][1bv32];
    v18$1 := $$c$1[1bv32];
    v18$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v18$1, FMUL32(v16$1, v17$1));
    $$c$2[1bv32] := FADD32(v18$2, FMUL32(v16$2, v17$2));
    v19$1 := $$a$1[0bv32];
    v19$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_6"} {:captureState "check_state_6"} {:sourceloc} {:sourceloc_num 33} true;
    v20$1 := $$sgemmNN.bs[1bv1][2bv32];
    v20$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][2bv32];
    v21$1 := $$c$1[2bv32];
    v21$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v21$1, FMUL32(v19$1, v20$1));
    $$c$2[2bv32] := FADD32(v21$2, FMUL32(v19$2, v20$2));
    v22$1 := $$a$1[0bv32];
    v22$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_7"} {:captureState "check_state_7"} {:sourceloc} {:sourceloc_num 37} true;
    v23$1 := $$sgemmNN.bs[1bv1][3bv32];
    v23$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][3bv32];
    v24$1 := $$c$1[3bv32];
    v24$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v24$1, FMUL32(v22$1, v23$1));
    $$c$2[3bv32] := FADD32(v24$2, FMUL32(v22$2, v23$2));
    v25$1 := $$a$1[0bv32];
    v25$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_8"} {:captureState "check_state_8"} {:sourceloc} {:sourceloc_num 41} true;
    v26$1 := $$sgemmNN.bs[1bv1][4bv32];
    v26$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][4bv32];
    v27$1 := $$c$1[4bv32];
    v27$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v27$1, FMUL32(v25$1, v26$1));
    $$c$2[4bv32] := FADD32(v27$2, FMUL32(v25$2, v26$2));
    v28$1 := $$a$1[0bv32];
    v28$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_9"} {:captureState "check_state_9"} {:sourceloc} {:sourceloc_num 45} true;
    v29$1 := $$sgemmNN.bs[1bv1][5bv32];
    v29$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][5bv32];
    v30$1 := $$c$1[5bv32];
    v30$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v30$1, FMUL32(v28$1, v29$1));
    $$c$2[5bv32] := FADD32(v30$2, FMUL32(v28$2, v29$2));
    v31$1 := $$a$1[0bv32];
    v31$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_10"} {:captureState "check_state_10"} {:sourceloc} {:sourceloc_num 49} true;
    v32$1 := $$sgemmNN.bs[1bv1][6bv32];
    v32$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][6bv32];
    v33$1 := $$c$1[6bv32];
    v33$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v33$1, FMUL32(v31$1, v32$1));
    $$c$2[6bv32] := FADD32(v33$2, FMUL32(v31$2, v32$2));
    v34$1 := $$a$1[0bv32];
    v34$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_11"} {:captureState "check_state_11"} {:sourceloc} {:sourceloc_num 53} true;
    v35$1 := $$sgemmNN.bs[1bv1][7bv32];
    v35$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][7bv32];
    v36$1 := $$c$1[7bv32];
    v36$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v36$1, FMUL32(v34$1, v35$1));
    $$c$2[7bv32] := FADD32(v36$2, FMUL32(v34$2, v35$2));
    v37$1 := $$a$1[0bv32];
    v37$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_12"} {:captureState "check_state_12"} {:sourceloc} {:sourceloc_num 57} true;
    v38$1 := $$sgemmNN.bs[1bv1][8bv32];
    v38$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][8bv32];
    v39$1 := $$c$1[8bv32];
    v39$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v39$1, FMUL32(v37$1, v38$1));
    $$c$2[8bv32] := FADD32(v39$2, FMUL32(v37$2, v38$2));
    v40$1 := $$a$1[0bv32];
    v40$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_13"} {:captureState "check_state_13"} {:sourceloc} {:sourceloc_num 61} true;
    v41$1 := $$sgemmNN.bs[1bv1][9bv32];
    v41$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][9bv32];
    v42$1 := $$c$1[9bv32];
    v42$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v42$1, FMUL32(v40$1, v41$1));
    $$c$2[9bv32] := FADD32(v42$2, FMUL32(v40$2, v41$2));
    v43$1 := $$a$1[0bv32];
    v43$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_14"} {:captureState "check_state_14"} {:sourceloc} {:sourceloc_num 65} true;
    v44$1 := $$sgemmNN.bs[1bv1][10bv32];
    v44$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][10bv32];
    v45$1 := $$c$1[10bv32];
    v45$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v45$1, FMUL32(v43$1, v44$1));
    $$c$2[10bv32] := FADD32(v45$2, FMUL32(v43$2, v44$2));
    v46$1 := $$a$1[0bv32];
    v46$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_15"} {:captureState "check_state_15"} {:sourceloc} {:sourceloc_num 69} true;
    v47$1 := $$sgemmNN.bs[1bv1][11bv32];
    v47$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][11bv32];
    v48$1 := $$c$1[11bv32];
    v48$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v48$1, FMUL32(v46$1, v47$1));
    $$c$2[11bv32] := FADD32(v48$2, FMUL32(v46$2, v47$2));
    v49$1 := $$a$1[0bv32];
    v49$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_16"} {:captureState "check_state_16"} {:sourceloc} {:sourceloc_num 73} true;
    v50$1 := $$sgemmNN.bs[1bv1][12bv32];
    v50$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][12bv32];
    v51$1 := $$c$1[12bv32];
    v51$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v51$1, FMUL32(v49$1, v50$1));
    $$c$2[12bv32] := FADD32(v51$2, FMUL32(v49$2, v50$2));
    v52$1 := $$a$1[0bv32];
    v52$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_17"} {:captureState "check_state_17"} {:sourceloc} {:sourceloc_num 77} true;
    v53$1 := $$sgemmNN.bs[1bv1][13bv32];
    v53$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][13bv32];
    v54$1 := $$c$1[13bv32];
    v54$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v54$1, FMUL32(v52$1, v53$1));
    $$c$2[13bv32] := FADD32(v54$2, FMUL32(v52$2, v53$2));
    v55$1 := $$a$1[0bv32];
    v55$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_18"} {:captureState "check_state_18"} {:sourceloc} {:sourceloc_num 81} true;
    v56$1 := $$sgemmNN.bs[1bv1][14bv32];
    v56$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][14bv32];
    v57$1 := $$c$1[14bv32];
    v57$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v57$1, FMUL32(v55$1, v56$1));
    $$c$2[14bv32] := FADD32(v57$2, FMUL32(v55$2, v56$2));
    v58$1 := $$a$1[0bv32];
    v58$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_19"} {:captureState "check_state_19"} {:sourceloc} {:sourceloc_num 85} true;
    v59$1 := $$sgemmNN.bs[1bv1][15bv32];
    v59$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][15bv32];
    v60$1 := $$c$1[15bv32];
    v60$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v60$1, FMUL32(v58$1, v59$1));
    $$c$2[15bv32] := FADD32(v60$2, FMUL32(v58$2, v59$2));
    havoc v61$1, v61$2;
    $$a$1[0bv32] := v61$1;
    $$a$2[0bv32] := v61$2;
    v62$1 := $$a$1[1bv32];
    v62$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_20"} {:captureState "check_state_20"} {:sourceloc} {:sourceloc_num 93} true;
    v63$1 := $$sgemmNN.bs[1bv1][17bv32];
    v63$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][17bv32];
    v64$1 := $$c$1[0bv32];
    v64$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v64$1, FMUL32(v62$1, v63$1));
    $$c$2[0bv32] := FADD32(v64$2, FMUL32(v62$2, v63$2));
    v65$1 := $$a$1[1bv32];
    v65$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_21"} {:captureState "check_state_21"} {:sourceloc} {:sourceloc_num 97} true;
    v66$1 := $$sgemmNN.bs[1bv1][18bv32];
    v66$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][18bv32];
    v67$1 := $$c$1[1bv32];
    v67$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v67$1, FMUL32(v65$1, v66$1));
    $$c$2[1bv32] := FADD32(v67$2, FMUL32(v65$2, v66$2));
    v68$1 := $$a$1[1bv32];
    v68$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_22"} {:captureState "check_state_22"} {:sourceloc} {:sourceloc_num 101} true;
    v69$1 := $$sgemmNN.bs[1bv1][19bv32];
    v69$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][19bv32];
    v70$1 := $$c$1[2bv32];
    v70$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v70$1, FMUL32(v68$1, v69$1));
    $$c$2[2bv32] := FADD32(v70$2, FMUL32(v68$2, v69$2));
    v71$1 := $$a$1[1bv32];
    v71$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_23"} {:captureState "check_state_23"} {:sourceloc} {:sourceloc_num 105} true;
    v72$1 := $$sgemmNN.bs[1bv1][20bv32];
    v72$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][20bv32];
    v73$1 := $$c$1[3bv32];
    v73$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v73$1, FMUL32(v71$1, v72$1));
    $$c$2[3bv32] := FADD32(v73$2, FMUL32(v71$2, v72$2));
    v74$1 := $$a$1[1bv32];
    v74$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_24"} {:captureState "check_state_24"} {:sourceloc} {:sourceloc_num 109} true;
    v75$1 := $$sgemmNN.bs[1bv1][21bv32];
    v75$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][21bv32];
    v76$1 := $$c$1[4bv32];
    v76$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v76$1, FMUL32(v74$1, v75$1));
    $$c$2[4bv32] := FADD32(v76$2, FMUL32(v74$2, v75$2));
    v77$1 := $$a$1[1bv32];
    v77$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_25"} {:captureState "check_state_25"} {:sourceloc} {:sourceloc_num 113} true;
    v78$1 := $$sgemmNN.bs[1bv1][22bv32];
    v78$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][22bv32];
    v79$1 := $$c$1[5bv32];
    v79$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v79$1, FMUL32(v77$1, v78$1));
    $$c$2[5bv32] := FADD32(v79$2, FMUL32(v77$2, v78$2));
    v80$1 := $$a$1[1bv32];
    v80$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_26"} {:captureState "check_state_26"} {:sourceloc} {:sourceloc_num 117} true;
    v81$1 := $$sgemmNN.bs[1bv1][23bv32];
    v81$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][23bv32];
    v82$1 := $$c$1[6bv32];
    v82$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v82$1, FMUL32(v80$1, v81$1));
    $$c$2[6bv32] := FADD32(v82$2, FMUL32(v80$2, v81$2));
    v83$1 := $$a$1[1bv32];
    v83$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_27"} {:captureState "check_state_27"} {:sourceloc} {:sourceloc_num 121} true;
    v84$1 := $$sgemmNN.bs[1bv1][24bv32];
    v84$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][24bv32];
    v85$1 := $$c$1[7bv32];
    v85$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v85$1, FMUL32(v83$1, v84$1));
    $$c$2[7bv32] := FADD32(v85$2, FMUL32(v83$2, v84$2));
    v86$1 := $$a$1[1bv32];
    v86$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_28"} {:captureState "check_state_28"} {:sourceloc} {:sourceloc_num 125} true;
    v87$1 := $$sgemmNN.bs[1bv1][25bv32];
    v87$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][25bv32];
    v88$1 := $$c$1[8bv32];
    v88$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v88$1, FMUL32(v86$1, v87$1));
    $$c$2[8bv32] := FADD32(v88$2, FMUL32(v86$2, v87$2));
    v89$1 := $$a$1[1bv32];
    v89$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_29"} {:captureState "check_state_29"} {:sourceloc} {:sourceloc_num 129} true;
    v90$1 := $$sgemmNN.bs[1bv1][26bv32];
    v90$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][26bv32];
    v91$1 := $$c$1[9bv32];
    v91$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v91$1, FMUL32(v89$1, v90$1));
    $$c$2[9bv32] := FADD32(v91$2, FMUL32(v89$2, v90$2));
    v92$1 := $$a$1[1bv32];
    v92$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_30"} {:captureState "check_state_30"} {:sourceloc} {:sourceloc_num 133} true;
    v93$1 := $$sgemmNN.bs[1bv1][27bv32];
    v93$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][27bv32];
    v94$1 := $$c$1[10bv32];
    v94$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v94$1, FMUL32(v92$1, v93$1));
    $$c$2[10bv32] := FADD32(v94$2, FMUL32(v92$2, v93$2));
    v95$1 := $$a$1[1bv32];
    v95$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_31"} {:captureState "check_state_31"} {:sourceloc} {:sourceloc_num 137} true;
    v96$1 := $$sgemmNN.bs[1bv1][28bv32];
    v96$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][28bv32];
    v97$1 := $$c$1[11bv32];
    v97$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v97$1, FMUL32(v95$1, v96$1));
    $$c$2[11bv32] := FADD32(v97$2, FMUL32(v95$2, v96$2));
    v98$1 := $$a$1[1bv32];
    v98$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_32"} {:captureState "check_state_32"} {:sourceloc} {:sourceloc_num 141} true;
    v99$1 := $$sgemmNN.bs[1bv1][29bv32];
    v99$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][29bv32];
    v100$1 := $$c$1[12bv32];
    v100$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v100$1, FMUL32(v98$1, v99$1));
    $$c$2[12bv32] := FADD32(v100$2, FMUL32(v98$2, v99$2));
    v101$1 := $$a$1[1bv32];
    v101$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_33"} {:captureState "check_state_33"} {:sourceloc} {:sourceloc_num 145} true;
    v102$1 := $$sgemmNN.bs[1bv1][30bv32];
    v102$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][30bv32];
    v103$1 := $$c$1[13bv32];
    v103$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v103$1, FMUL32(v101$1, v102$1));
    $$c$2[13bv32] := FADD32(v103$2, FMUL32(v101$2, v102$2));
    v104$1 := $$a$1[1bv32];
    v104$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_34"} {:captureState "check_state_34"} {:sourceloc} {:sourceloc_num 149} true;
    v105$1 := $$sgemmNN.bs[1bv1][31bv32];
    v105$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][31bv32];
    v106$1 := $$c$1[14bv32];
    v106$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v106$1, FMUL32(v104$1, v105$1));
    $$c$2[14bv32] := FADD32(v106$2, FMUL32(v104$2, v105$2));
    v107$1 := $$a$1[1bv32];
    v107$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_35"} {:captureState "check_state_35"} {:sourceloc} {:sourceloc_num 153} true;
    v108$1 := $$sgemmNN.bs[1bv1][32bv32];
    v108$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][32bv32];
    v109$1 := $$c$1[15bv32];
    v109$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v109$1, FMUL32(v107$1, v108$1));
    $$c$2[15bv32] := FADD32(v109$2, FMUL32(v107$2, v108$2));
    havoc v110$1, v110$2;
    $$a$1[1bv32] := v110$1;
    $$a$2[1bv32] := v110$2;
    v111$1 := $$a$1[2bv32];
    v111$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_36"} {:captureState "check_state_36"} {:sourceloc} {:sourceloc_num 161} true;
    v112$1 := $$sgemmNN.bs[1bv1][34bv32];
    v112$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][34bv32];
    v113$1 := $$c$1[0bv32];
    v113$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v113$1, FMUL32(v111$1, v112$1));
    $$c$2[0bv32] := FADD32(v113$2, FMUL32(v111$2, v112$2));
    v114$1 := $$a$1[2bv32];
    v114$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_37"} {:captureState "check_state_37"} {:sourceloc} {:sourceloc_num 165} true;
    v115$1 := $$sgemmNN.bs[1bv1][35bv32];
    v115$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][35bv32];
    v116$1 := $$c$1[1bv32];
    v116$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v116$1, FMUL32(v114$1, v115$1));
    $$c$2[1bv32] := FADD32(v116$2, FMUL32(v114$2, v115$2));
    v117$1 := $$a$1[2bv32];
    v117$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_38"} {:captureState "check_state_38"} {:sourceloc} {:sourceloc_num 169} true;
    v118$1 := $$sgemmNN.bs[1bv1][36bv32];
    v118$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][36bv32];
    v119$1 := $$c$1[2bv32];
    v119$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v119$1, FMUL32(v117$1, v118$1));
    $$c$2[2bv32] := FADD32(v119$2, FMUL32(v117$2, v118$2));
    v120$1 := $$a$1[2bv32];
    v120$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_39"} {:captureState "check_state_39"} {:sourceloc} {:sourceloc_num 173} true;
    v121$1 := $$sgemmNN.bs[1bv1][37bv32];
    v121$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][37bv32];
    v122$1 := $$c$1[3bv32];
    v122$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v122$1, FMUL32(v120$1, v121$1));
    $$c$2[3bv32] := FADD32(v122$2, FMUL32(v120$2, v121$2));
    v123$1 := $$a$1[2bv32];
    v123$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_40"} {:captureState "check_state_40"} {:sourceloc} {:sourceloc_num 177} true;
    v124$1 := $$sgemmNN.bs[1bv1][38bv32];
    v124$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][38bv32];
    v125$1 := $$c$1[4bv32];
    v125$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v125$1, FMUL32(v123$1, v124$1));
    $$c$2[4bv32] := FADD32(v125$2, FMUL32(v123$2, v124$2));
    v126$1 := $$a$1[2bv32];
    v126$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_41"} {:captureState "check_state_41"} {:sourceloc} {:sourceloc_num 181} true;
    v127$1 := $$sgemmNN.bs[1bv1][39bv32];
    v127$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][39bv32];
    v128$1 := $$c$1[5bv32];
    v128$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v128$1, FMUL32(v126$1, v127$1));
    $$c$2[5bv32] := FADD32(v128$2, FMUL32(v126$2, v127$2));
    v129$1 := $$a$1[2bv32];
    v129$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_42"} {:captureState "check_state_42"} {:sourceloc} {:sourceloc_num 185} true;
    v130$1 := $$sgemmNN.bs[1bv1][40bv32];
    v130$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][40bv32];
    v131$1 := $$c$1[6bv32];
    v131$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v131$1, FMUL32(v129$1, v130$1));
    $$c$2[6bv32] := FADD32(v131$2, FMUL32(v129$2, v130$2));
    v132$1 := $$a$1[2bv32];
    v132$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_43"} {:captureState "check_state_43"} {:sourceloc} {:sourceloc_num 189} true;
    v133$1 := $$sgemmNN.bs[1bv1][41bv32];
    v133$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][41bv32];
    v134$1 := $$c$1[7bv32];
    v134$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v134$1, FMUL32(v132$1, v133$1));
    $$c$2[7bv32] := FADD32(v134$2, FMUL32(v132$2, v133$2));
    v135$1 := $$a$1[2bv32];
    v135$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_44"} {:captureState "check_state_44"} {:sourceloc} {:sourceloc_num 193} true;
    v136$1 := $$sgemmNN.bs[1bv1][42bv32];
    v136$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][42bv32];
    v137$1 := $$c$1[8bv32];
    v137$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v137$1, FMUL32(v135$1, v136$1));
    $$c$2[8bv32] := FADD32(v137$2, FMUL32(v135$2, v136$2));
    v138$1 := $$a$1[2bv32];
    v138$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_45"} {:captureState "check_state_45"} {:sourceloc} {:sourceloc_num 197} true;
    v139$1 := $$sgemmNN.bs[1bv1][43bv32];
    v139$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][43bv32];
    v140$1 := $$c$1[9bv32];
    v140$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v140$1, FMUL32(v138$1, v139$1));
    $$c$2[9bv32] := FADD32(v140$2, FMUL32(v138$2, v139$2));
    v141$1 := $$a$1[2bv32];
    v141$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_46"} {:captureState "check_state_46"} {:sourceloc} {:sourceloc_num 201} true;
    v142$1 := $$sgemmNN.bs[1bv1][44bv32];
    v142$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][44bv32];
    v143$1 := $$c$1[10bv32];
    v143$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v143$1, FMUL32(v141$1, v142$1));
    $$c$2[10bv32] := FADD32(v143$2, FMUL32(v141$2, v142$2));
    v144$1 := $$a$1[2bv32];
    v144$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_47"} {:captureState "check_state_47"} {:sourceloc} {:sourceloc_num 205} true;
    v145$1 := $$sgemmNN.bs[1bv1][45bv32];
    v145$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][45bv32];
    v146$1 := $$c$1[11bv32];
    v146$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v146$1, FMUL32(v144$1, v145$1));
    $$c$2[11bv32] := FADD32(v146$2, FMUL32(v144$2, v145$2));
    v147$1 := $$a$1[2bv32];
    v147$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_48"} {:captureState "check_state_48"} {:sourceloc} {:sourceloc_num 209} true;
    v148$1 := $$sgemmNN.bs[1bv1][46bv32];
    v148$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][46bv32];
    v149$1 := $$c$1[12bv32];
    v149$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v149$1, FMUL32(v147$1, v148$1));
    $$c$2[12bv32] := FADD32(v149$2, FMUL32(v147$2, v148$2));
    v150$1 := $$a$1[2bv32];
    v150$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_49"} {:captureState "check_state_49"} {:sourceloc} {:sourceloc_num 213} true;
    v151$1 := $$sgemmNN.bs[1bv1][47bv32];
    v151$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][47bv32];
    v152$1 := $$c$1[13bv32];
    v152$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v152$1, FMUL32(v150$1, v151$1));
    $$c$2[13bv32] := FADD32(v152$2, FMUL32(v150$2, v151$2));
    v153$1 := $$a$1[2bv32];
    v153$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_50"} {:captureState "check_state_50"} {:sourceloc} {:sourceloc_num 217} true;
    v154$1 := $$sgemmNN.bs[1bv1][48bv32];
    v154$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][48bv32];
    v155$1 := $$c$1[14bv32];
    v155$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v155$1, FMUL32(v153$1, v154$1));
    $$c$2[14bv32] := FADD32(v155$2, FMUL32(v153$2, v154$2));
    v156$1 := $$a$1[2bv32];
    v156$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_51"} {:captureState "check_state_51"} {:sourceloc} {:sourceloc_num 221} true;
    v157$1 := $$sgemmNN.bs[1bv1][49bv32];
    v157$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][49bv32];
    v158$1 := $$c$1[15bv32];
    v158$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v158$1, FMUL32(v156$1, v157$1));
    $$c$2[15bv32] := FADD32(v158$2, FMUL32(v156$2, v157$2));
    havoc v159$1, v159$2;
    $$a$1[2bv32] := v159$1;
    $$a$2[2bv32] := v159$2;
    v160$1 := $$a$1[3bv32];
    v160$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_52"} {:captureState "check_state_52"} {:sourceloc} {:sourceloc_num 229} true;
    v161$1 := $$sgemmNN.bs[1bv1][51bv32];
    v161$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][51bv32];
    v162$1 := $$c$1[0bv32];
    v162$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v162$1, FMUL32(v160$1, v161$1));
    $$c$2[0bv32] := FADD32(v162$2, FMUL32(v160$2, v161$2));
    v163$1 := $$a$1[3bv32];
    v163$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_53"} {:captureState "check_state_53"} {:sourceloc} {:sourceloc_num 233} true;
    v164$1 := $$sgemmNN.bs[1bv1][52bv32];
    v164$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][52bv32];
    v165$1 := $$c$1[1bv32];
    v165$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v165$1, FMUL32(v163$1, v164$1));
    $$c$2[1bv32] := FADD32(v165$2, FMUL32(v163$2, v164$2));
    v166$1 := $$a$1[3bv32];
    v166$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_54"} {:captureState "check_state_54"} {:sourceloc} {:sourceloc_num 237} true;
    v167$1 := $$sgemmNN.bs[1bv1][53bv32];
    v167$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][53bv32];
    v168$1 := $$c$1[2bv32];
    v168$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v168$1, FMUL32(v166$1, v167$1));
    $$c$2[2bv32] := FADD32(v168$2, FMUL32(v166$2, v167$2));
    v169$1 := $$a$1[3bv32];
    v169$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_55"} {:captureState "check_state_55"} {:sourceloc} {:sourceloc_num 241} true;
    v170$1 := $$sgemmNN.bs[1bv1][54bv32];
    v170$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][54bv32];
    v171$1 := $$c$1[3bv32];
    v171$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v171$1, FMUL32(v169$1, v170$1));
    $$c$2[3bv32] := FADD32(v171$2, FMUL32(v169$2, v170$2));
    v172$1 := $$a$1[3bv32];
    v172$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_56"} {:captureState "check_state_56"} {:sourceloc} {:sourceloc_num 245} true;
    v173$1 := $$sgemmNN.bs[1bv1][55bv32];
    v173$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][55bv32];
    v174$1 := $$c$1[4bv32];
    v174$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v174$1, FMUL32(v172$1, v173$1));
    $$c$2[4bv32] := FADD32(v174$2, FMUL32(v172$2, v173$2));
    v175$1 := $$a$1[3bv32];
    v175$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_57"} {:captureState "check_state_57"} {:sourceloc} {:sourceloc_num 249} true;
    v176$1 := $$sgemmNN.bs[1bv1][56bv32];
    v176$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][56bv32];
    v177$1 := $$c$1[5bv32];
    v177$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v177$1, FMUL32(v175$1, v176$1));
    $$c$2[5bv32] := FADD32(v177$2, FMUL32(v175$2, v176$2));
    v178$1 := $$a$1[3bv32];
    v178$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_58"} {:captureState "check_state_58"} {:sourceloc} {:sourceloc_num 253} true;
    v179$1 := $$sgemmNN.bs[1bv1][57bv32];
    v179$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][57bv32];
    v180$1 := $$c$1[6bv32];
    v180$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v180$1, FMUL32(v178$1, v179$1));
    $$c$2[6bv32] := FADD32(v180$2, FMUL32(v178$2, v179$2));
    v181$1 := $$a$1[3bv32];
    v181$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_59"} {:captureState "check_state_59"} {:sourceloc} {:sourceloc_num 257} true;
    v182$1 := $$sgemmNN.bs[1bv1][58bv32];
    v182$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][58bv32];
    v183$1 := $$c$1[7bv32];
    v183$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v183$1, FMUL32(v181$1, v182$1));
    $$c$2[7bv32] := FADD32(v183$2, FMUL32(v181$2, v182$2));
    v184$1 := $$a$1[3bv32];
    v184$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_60"} {:captureState "check_state_60"} {:sourceloc} {:sourceloc_num 261} true;
    v185$1 := $$sgemmNN.bs[1bv1][59bv32];
    v185$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][59bv32];
    v186$1 := $$c$1[8bv32];
    v186$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v186$1, FMUL32(v184$1, v185$1));
    $$c$2[8bv32] := FADD32(v186$2, FMUL32(v184$2, v185$2));
    v187$1 := $$a$1[3bv32];
    v187$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_61"} {:captureState "check_state_61"} {:sourceloc} {:sourceloc_num 265} true;
    v188$1 := $$sgemmNN.bs[1bv1][60bv32];
    v188$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][60bv32];
    v189$1 := $$c$1[9bv32];
    v189$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v189$1, FMUL32(v187$1, v188$1));
    $$c$2[9bv32] := FADD32(v189$2, FMUL32(v187$2, v188$2));
    v190$1 := $$a$1[3bv32];
    v190$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_62"} {:captureState "check_state_62"} {:sourceloc} {:sourceloc_num 269} true;
    v191$1 := $$sgemmNN.bs[1bv1][61bv32];
    v191$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][61bv32];
    v192$1 := $$c$1[10bv32];
    v192$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v192$1, FMUL32(v190$1, v191$1));
    $$c$2[10bv32] := FADD32(v192$2, FMUL32(v190$2, v191$2));
    v193$1 := $$a$1[3bv32];
    v193$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_63"} {:captureState "check_state_63"} {:sourceloc} {:sourceloc_num 273} true;
    v194$1 := $$sgemmNN.bs[1bv1][62bv32];
    v194$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][62bv32];
    v195$1 := $$c$1[11bv32];
    v195$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v195$1, FMUL32(v193$1, v194$1));
    $$c$2[11bv32] := FADD32(v195$2, FMUL32(v193$2, v194$2));
    v196$1 := $$a$1[3bv32];
    v196$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_64"} {:captureState "check_state_64"} {:sourceloc} {:sourceloc_num 277} true;
    v197$1 := $$sgemmNN.bs[1bv1][63bv32];
    v197$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][63bv32];
    v198$1 := $$c$1[12bv32];
    v198$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v198$1, FMUL32(v196$1, v197$1));
    $$c$2[12bv32] := FADD32(v198$2, FMUL32(v196$2, v197$2));
    v199$1 := $$a$1[3bv32];
    v199$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_65"} {:captureState "check_state_65"} {:sourceloc} {:sourceloc_num 281} true;
    v200$1 := $$sgemmNN.bs[1bv1][64bv32];
    v200$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][64bv32];
    v201$1 := $$c$1[13bv32];
    v201$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v201$1, FMUL32(v199$1, v200$1));
    $$c$2[13bv32] := FADD32(v201$2, FMUL32(v199$2, v200$2));
    v202$1 := $$a$1[3bv32];
    v202$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_66"} {:captureState "check_state_66"} {:sourceloc} {:sourceloc_num 285} true;
    v203$1 := $$sgemmNN.bs[1bv1][65bv32];
    v203$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][65bv32];
    v204$1 := $$c$1[14bv32];
    v204$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v204$1, FMUL32(v202$1, v203$1));
    $$c$2[14bv32] := FADD32(v204$2, FMUL32(v202$2, v203$2));
    v205$1 := $$a$1[3bv32];
    v205$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_67"} {:captureState "check_state_67"} {:sourceloc} {:sourceloc_num 289} true;
    v206$1 := $$sgemmNN.bs[1bv1][66bv32];
    v206$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][66bv32];
    v207$1 := $$c$1[15bv32];
    v207$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v207$1, FMUL32(v205$1, v206$1));
    $$c$2[15bv32] := FADD32(v207$2, FMUL32(v205$2, v206$2));
    havoc v208$1, v208$2;
    $$a$1[3bv32] := v208$1;
    $$a$2[3bv32] := v208$2;
    v209 := BV32_MUL(4bv32, $lda);
    v210$1 := $$a$1[0bv32];
    v210$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_68"} {:captureState "check_state_68"} {:sourceloc} {:sourceloc_num 297} true;
    v211$1 := $$sgemmNN.bs[1bv1][68bv32];
    v211$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][68bv32];
    v212$1 := $$c$1[0bv32];
    v212$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v212$1, FMUL32(v210$1, v211$1));
    $$c$2[0bv32] := FADD32(v212$2, FMUL32(v210$2, v211$2));
    v213$1 := $$a$1[0bv32];
    v213$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_69"} {:captureState "check_state_69"} {:sourceloc} {:sourceloc_num 301} true;
    v214$1 := $$sgemmNN.bs[1bv1][69bv32];
    v214$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][69bv32];
    v215$1 := $$c$1[1bv32];
    v215$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v215$1, FMUL32(v213$1, v214$1));
    $$c$2[1bv32] := FADD32(v215$2, FMUL32(v213$2, v214$2));
    v216$1 := $$a$1[0bv32];
    v216$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_70"} {:captureState "check_state_70"} {:sourceloc} {:sourceloc_num 305} true;
    v217$1 := $$sgemmNN.bs[1bv1][70bv32];
    v217$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][70bv32];
    v218$1 := $$c$1[2bv32];
    v218$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v218$1, FMUL32(v216$1, v217$1));
    $$c$2[2bv32] := FADD32(v218$2, FMUL32(v216$2, v217$2));
    v219$1 := $$a$1[0bv32];
    v219$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_71"} {:captureState "check_state_71"} {:sourceloc} {:sourceloc_num 309} true;
    v220$1 := $$sgemmNN.bs[1bv1][71bv32];
    v220$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][71bv32];
    v221$1 := $$c$1[3bv32];
    v221$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v221$1, FMUL32(v219$1, v220$1));
    $$c$2[3bv32] := FADD32(v221$2, FMUL32(v219$2, v220$2));
    v222$1 := $$a$1[0bv32];
    v222$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_72"} {:captureState "check_state_72"} {:sourceloc} {:sourceloc_num 313} true;
    v223$1 := $$sgemmNN.bs[1bv1][72bv32];
    v223$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][72bv32];
    v224$1 := $$c$1[4bv32];
    v224$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v224$1, FMUL32(v222$1, v223$1));
    $$c$2[4bv32] := FADD32(v224$2, FMUL32(v222$2, v223$2));
    v225$1 := $$a$1[0bv32];
    v225$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_73"} {:captureState "check_state_73"} {:sourceloc} {:sourceloc_num 317} true;
    v226$1 := $$sgemmNN.bs[1bv1][73bv32];
    v226$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][73bv32];
    v227$1 := $$c$1[5bv32];
    v227$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v227$1, FMUL32(v225$1, v226$1));
    $$c$2[5bv32] := FADD32(v227$2, FMUL32(v225$2, v226$2));
    v228$1 := $$a$1[0bv32];
    v228$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_74"} {:captureState "check_state_74"} {:sourceloc} {:sourceloc_num 321} true;
    v229$1 := $$sgemmNN.bs[1bv1][74bv32];
    v229$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][74bv32];
    v230$1 := $$c$1[6bv32];
    v230$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v230$1, FMUL32(v228$1, v229$1));
    $$c$2[6bv32] := FADD32(v230$2, FMUL32(v228$2, v229$2));
    v231$1 := $$a$1[0bv32];
    v231$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_75"} {:captureState "check_state_75"} {:sourceloc} {:sourceloc_num 325} true;
    v232$1 := $$sgemmNN.bs[1bv1][75bv32];
    v232$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][75bv32];
    v233$1 := $$c$1[7bv32];
    v233$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v233$1, FMUL32(v231$1, v232$1));
    $$c$2[7bv32] := FADD32(v233$2, FMUL32(v231$2, v232$2));
    v234$1 := $$a$1[0bv32];
    v234$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_76"} {:captureState "check_state_76"} {:sourceloc} {:sourceloc_num 329} true;
    v235$1 := $$sgemmNN.bs[1bv1][76bv32];
    v235$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][76bv32];
    v236$1 := $$c$1[8bv32];
    v236$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v236$1, FMUL32(v234$1, v235$1));
    $$c$2[8bv32] := FADD32(v236$2, FMUL32(v234$2, v235$2));
    v237$1 := $$a$1[0bv32];
    v237$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_77"} {:captureState "check_state_77"} {:sourceloc} {:sourceloc_num 333} true;
    v238$1 := $$sgemmNN.bs[1bv1][77bv32];
    v238$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][77bv32];
    v239$1 := $$c$1[9bv32];
    v239$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v239$1, FMUL32(v237$1, v238$1));
    $$c$2[9bv32] := FADD32(v239$2, FMUL32(v237$2, v238$2));
    v240$1 := $$a$1[0bv32];
    v240$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_78"} {:captureState "check_state_78"} {:sourceloc} {:sourceloc_num 337} true;
    v241$1 := $$sgemmNN.bs[1bv1][78bv32];
    v241$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][78bv32];
    v242$1 := $$c$1[10bv32];
    v242$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v242$1, FMUL32(v240$1, v241$1));
    $$c$2[10bv32] := FADD32(v242$2, FMUL32(v240$2, v241$2));
    v243$1 := $$a$1[0bv32];
    v243$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_79"} {:captureState "check_state_79"} {:sourceloc} {:sourceloc_num 341} true;
    v244$1 := $$sgemmNN.bs[1bv1][79bv32];
    v244$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][79bv32];
    v245$1 := $$c$1[11bv32];
    v245$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v245$1, FMUL32(v243$1, v244$1));
    $$c$2[11bv32] := FADD32(v245$2, FMUL32(v243$2, v244$2));
    v246$1 := $$a$1[0bv32];
    v246$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_80"} {:captureState "check_state_80"} {:sourceloc} {:sourceloc_num 345} true;
    v247$1 := $$sgemmNN.bs[1bv1][80bv32];
    v247$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][80bv32];
    v248$1 := $$c$1[12bv32];
    v248$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v248$1, FMUL32(v246$1, v247$1));
    $$c$2[12bv32] := FADD32(v248$2, FMUL32(v246$2, v247$2));
    v249$1 := $$a$1[0bv32];
    v249$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_81"} {:captureState "check_state_81"} {:sourceloc} {:sourceloc_num 349} true;
    v250$1 := $$sgemmNN.bs[1bv1][81bv32];
    v250$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][81bv32];
    v251$1 := $$c$1[13bv32];
    v251$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v251$1, FMUL32(v249$1, v250$1));
    $$c$2[13bv32] := FADD32(v251$2, FMUL32(v249$2, v250$2));
    v252$1 := $$a$1[0bv32];
    v252$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_82"} {:captureState "check_state_82"} {:sourceloc} {:sourceloc_num 353} true;
    v253$1 := $$sgemmNN.bs[1bv1][82bv32];
    v253$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][82bv32];
    v254$1 := $$c$1[14bv32];
    v254$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v254$1, FMUL32(v252$1, v253$1));
    $$c$2[14bv32] := FADD32(v254$2, FMUL32(v252$2, v253$2));
    v255$1 := $$a$1[0bv32];
    v255$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_83"} {:captureState "check_state_83"} {:sourceloc} {:sourceloc_num 357} true;
    v256$1 := $$sgemmNN.bs[1bv1][83bv32];
    v256$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][83bv32];
    v257$1 := $$c$1[15bv32];
    v257$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v257$1, FMUL32(v255$1, v256$1));
    $$c$2[15bv32] := FADD32(v257$2, FMUL32(v255$2, v256$2));
    havoc v258$1, v258$2;
    $$a$1[0bv32] := v258$1;
    $$a$2[0bv32] := v258$2;
    v259$1 := $$a$1[1bv32];
    v259$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_84"} {:captureState "check_state_84"} {:sourceloc} {:sourceloc_num 365} true;
    v260$1 := $$sgemmNN.bs[1bv1][85bv32];
    v260$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][85bv32];
    v261$1 := $$c$1[0bv32];
    v261$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v261$1, FMUL32(v259$1, v260$1));
    $$c$2[0bv32] := FADD32(v261$2, FMUL32(v259$2, v260$2));
    v262$1 := $$a$1[1bv32];
    v262$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_85"} {:captureState "check_state_85"} {:sourceloc} {:sourceloc_num 369} true;
    v263$1 := $$sgemmNN.bs[1bv1][86bv32];
    v263$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][86bv32];
    v264$1 := $$c$1[1bv32];
    v264$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v264$1, FMUL32(v262$1, v263$1));
    $$c$2[1bv32] := FADD32(v264$2, FMUL32(v262$2, v263$2));
    v265$1 := $$a$1[1bv32];
    v265$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_86"} {:captureState "check_state_86"} {:sourceloc} {:sourceloc_num 373} true;
    v266$1 := $$sgemmNN.bs[1bv1][87bv32];
    v266$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][87bv32];
    v267$1 := $$c$1[2bv32];
    v267$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v267$1, FMUL32(v265$1, v266$1));
    $$c$2[2bv32] := FADD32(v267$2, FMUL32(v265$2, v266$2));
    v268$1 := $$a$1[1bv32];
    v268$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_87"} {:captureState "check_state_87"} {:sourceloc} {:sourceloc_num 377} true;
    v269$1 := $$sgemmNN.bs[1bv1][88bv32];
    v269$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][88bv32];
    v270$1 := $$c$1[3bv32];
    v270$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v270$1, FMUL32(v268$1, v269$1));
    $$c$2[3bv32] := FADD32(v270$2, FMUL32(v268$2, v269$2));
    v271$1 := $$a$1[1bv32];
    v271$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_88"} {:captureState "check_state_88"} {:sourceloc} {:sourceloc_num 381} true;
    v272$1 := $$sgemmNN.bs[1bv1][89bv32];
    v272$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][89bv32];
    v273$1 := $$c$1[4bv32];
    v273$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v273$1, FMUL32(v271$1, v272$1));
    $$c$2[4bv32] := FADD32(v273$2, FMUL32(v271$2, v272$2));
    v274$1 := $$a$1[1bv32];
    v274$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_89"} {:captureState "check_state_89"} {:sourceloc} {:sourceloc_num 385} true;
    v275$1 := $$sgemmNN.bs[1bv1][90bv32];
    v275$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][90bv32];
    v276$1 := $$c$1[5bv32];
    v276$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v276$1, FMUL32(v274$1, v275$1));
    $$c$2[5bv32] := FADD32(v276$2, FMUL32(v274$2, v275$2));
    v277$1 := $$a$1[1bv32];
    v277$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_90"} {:captureState "check_state_90"} {:sourceloc} {:sourceloc_num 389} true;
    v278$1 := $$sgemmNN.bs[1bv1][91bv32];
    v278$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][91bv32];
    v279$1 := $$c$1[6bv32];
    v279$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v279$1, FMUL32(v277$1, v278$1));
    $$c$2[6bv32] := FADD32(v279$2, FMUL32(v277$2, v278$2));
    v280$1 := $$a$1[1bv32];
    v280$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_91"} {:captureState "check_state_91"} {:sourceloc} {:sourceloc_num 393} true;
    v281$1 := $$sgemmNN.bs[1bv1][92bv32];
    v281$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][92bv32];
    v282$1 := $$c$1[7bv32];
    v282$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v282$1, FMUL32(v280$1, v281$1));
    $$c$2[7bv32] := FADD32(v282$2, FMUL32(v280$2, v281$2));
    v283$1 := $$a$1[1bv32];
    v283$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_92"} {:captureState "check_state_92"} {:sourceloc} {:sourceloc_num 397} true;
    v284$1 := $$sgemmNN.bs[1bv1][93bv32];
    v284$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][93bv32];
    v285$1 := $$c$1[8bv32];
    v285$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v285$1, FMUL32(v283$1, v284$1));
    $$c$2[8bv32] := FADD32(v285$2, FMUL32(v283$2, v284$2));
    v286$1 := $$a$1[1bv32];
    v286$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_93"} {:captureState "check_state_93"} {:sourceloc} {:sourceloc_num 401} true;
    v287$1 := $$sgemmNN.bs[1bv1][94bv32];
    v287$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][94bv32];
    v288$1 := $$c$1[9bv32];
    v288$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v288$1, FMUL32(v286$1, v287$1));
    $$c$2[9bv32] := FADD32(v288$2, FMUL32(v286$2, v287$2));
    v289$1 := $$a$1[1bv32];
    v289$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_94"} {:captureState "check_state_94"} {:sourceloc} {:sourceloc_num 405} true;
    v290$1 := $$sgemmNN.bs[1bv1][95bv32];
    v290$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][95bv32];
    v291$1 := $$c$1[10bv32];
    v291$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v291$1, FMUL32(v289$1, v290$1));
    $$c$2[10bv32] := FADD32(v291$2, FMUL32(v289$2, v290$2));
    v292$1 := $$a$1[1bv32];
    v292$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_95"} {:captureState "check_state_95"} {:sourceloc} {:sourceloc_num 409} true;
    v293$1 := $$sgemmNN.bs[1bv1][96bv32];
    v293$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][96bv32];
    v294$1 := $$c$1[11bv32];
    v294$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v294$1, FMUL32(v292$1, v293$1));
    $$c$2[11bv32] := FADD32(v294$2, FMUL32(v292$2, v293$2));
    v295$1 := $$a$1[1bv32];
    v295$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_96"} {:captureState "check_state_96"} {:sourceloc} {:sourceloc_num 413} true;
    v296$1 := $$sgemmNN.bs[1bv1][97bv32];
    v296$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][97bv32];
    v297$1 := $$c$1[12bv32];
    v297$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v297$1, FMUL32(v295$1, v296$1));
    $$c$2[12bv32] := FADD32(v297$2, FMUL32(v295$2, v296$2));
    v298$1 := $$a$1[1bv32];
    v298$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_97"} {:captureState "check_state_97"} {:sourceloc} {:sourceloc_num 417} true;
    v299$1 := $$sgemmNN.bs[1bv1][98bv32];
    v299$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][98bv32];
    v300$1 := $$c$1[13bv32];
    v300$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v300$1, FMUL32(v298$1, v299$1));
    $$c$2[13bv32] := FADD32(v300$2, FMUL32(v298$2, v299$2));
    v301$1 := $$a$1[1bv32];
    v301$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_98"} {:captureState "check_state_98"} {:sourceloc} {:sourceloc_num 421} true;
    v302$1 := $$sgemmNN.bs[1bv1][99bv32];
    v302$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][99bv32];
    v303$1 := $$c$1[14bv32];
    v303$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v303$1, FMUL32(v301$1, v302$1));
    $$c$2[14bv32] := FADD32(v303$2, FMUL32(v301$2, v302$2));
    v304$1 := $$a$1[1bv32];
    v304$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_99"} {:captureState "check_state_99"} {:sourceloc} {:sourceloc_num 425} true;
    v305$1 := $$sgemmNN.bs[1bv1][100bv32];
    v305$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][100bv32];
    v306$1 := $$c$1[15bv32];
    v306$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v306$1, FMUL32(v304$1, v305$1));
    $$c$2[15bv32] := FADD32(v306$2, FMUL32(v304$2, v305$2));
    havoc v307$1, v307$2;
    $$a$1[1bv32] := v307$1;
    $$a$2[1bv32] := v307$2;
    v308$1 := $$a$1[2bv32];
    v308$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_100"} {:captureState "check_state_100"} {:sourceloc} {:sourceloc_num 433} true;
    v309$1 := $$sgemmNN.bs[1bv1][102bv32];
    v309$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][102bv32];
    v310$1 := $$c$1[0bv32];
    v310$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v310$1, FMUL32(v308$1, v309$1));
    $$c$2[0bv32] := FADD32(v310$2, FMUL32(v308$2, v309$2));
    v311$1 := $$a$1[2bv32];
    v311$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_101"} {:captureState "check_state_101"} {:sourceloc} {:sourceloc_num 437} true;
    v312$1 := $$sgemmNN.bs[1bv1][103bv32];
    v312$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][103bv32];
    v313$1 := $$c$1[1bv32];
    v313$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v313$1, FMUL32(v311$1, v312$1));
    $$c$2[1bv32] := FADD32(v313$2, FMUL32(v311$2, v312$2));
    v314$1 := $$a$1[2bv32];
    v314$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_102"} {:captureState "check_state_102"} {:sourceloc} {:sourceloc_num 441} true;
    v315$1 := $$sgemmNN.bs[1bv1][104bv32];
    v315$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][104bv32];
    v316$1 := $$c$1[2bv32];
    v316$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v316$1, FMUL32(v314$1, v315$1));
    $$c$2[2bv32] := FADD32(v316$2, FMUL32(v314$2, v315$2));
    v317$1 := $$a$1[2bv32];
    v317$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_103"} {:captureState "check_state_103"} {:sourceloc} {:sourceloc_num 445} true;
    v318$1 := $$sgemmNN.bs[1bv1][105bv32];
    v318$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][105bv32];
    v319$1 := $$c$1[3bv32];
    v319$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v319$1, FMUL32(v317$1, v318$1));
    $$c$2[3bv32] := FADD32(v319$2, FMUL32(v317$2, v318$2));
    v320$1 := $$a$1[2bv32];
    v320$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_104"} {:captureState "check_state_104"} {:sourceloc} {:sourceloc_num 449} true;
    v321$1 := $$sgemmNN.bs[1bv1][106bv32];
    v321$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][106bv32];
    v322$1 := $$c$1[4bv32];
    v322$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v322$1, FMUL32(v320$1, v321$1));
    $$c$2[4bv32] := FADD32(v322$2, FMUL32(v320$2, v321$2));
    v323$1 := $$a$1[2bv32];
    v323$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_105"} {:captureState "check_state_105"} {:sourceloc} {:sourceloc_num 453} true;
    v324$1 := $$sgemmNN.bs[1bv1][107bv32];
    v324$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][107bv32];
    v325$1 := $$c$1[5bv32];
    v325$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v325$1, FMUL32(v323$1, v324$1));
    $$c$2[5bv32] := FADD32(v325$2, FMUL32(v323$2, v324$2));
    v326$1 := $$a$1[2bv32];
    v326$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_106"} {:captureState "check_state_106"} {:sourceloc} {:sourceloc_num 457} true;
    v327$1 := $$sgemmNN.bs[1bv1][108bv32];
    v327$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][108bv32];
    v328$1 := $$c$1[6bv32];
    v328$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v328$1, FMUL32(v326$1, v327$1));
    $$c$2[6bv32] := FADD32(v328$2, FMUL32(v326$2, v327$2));
    v329$1 := $$a$1[2bv32];
    v329$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_107"} {:captureState "check_state_107"} {:sourceloc} {:sourceloc_num 461} true;
    v330$1 := $$sgemmNN.bs[1bv1][109bv32];
    v330$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][109bv32];
    v331$1 := $$c$1[7bv32];
    v331$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v331$1, FMUL32(v329$1, v330$1));
    $$c$2[7bv32] := FADD32(v331$2, FMUL32(v329$2, v330$2));
    v332$1 := $$a$1[2bv32];
    v332$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_108"} {:captureState "check_state_108"} {:sourceloc} {:sourceloc_num 465} true;
    v333$1 := $$sgemmNN.bs[1bv1][110bv32];
    v333$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][110bv32];
    v334$1 := $$c$1[8bv32];
    v334$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v334$1, FMUL32(v332$1, v333$1));
    $$c$2[8bv32] := FADD32(v334$2, FMUL32(v332$2, v333$2));
    v335$1 := $$a$1[2bv32];
    v335$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_109"} {:captureState "check_state_109"} {:sourceloc} {:sourceloc_num 469} true;
    v336$1 := $$sgemmNN.bs[1bv1][111bv32];
    v336$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][111bv32];
    v337$1 := $$c$1[9bv32];
    v337$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v337$1, FMUL32(v335$1, v336$1));
    $$c$2[9bv32] := FADD32(v337$2, FMUL32(v335$2, v336$2));
    v338$1 := $$a$1[2bv32];
    v338$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_110"} {:captureState "check_state_110"} {:sourceloc} {:sourceloc_num 473} true;
    v339$1 := $$sgemmNN.bs[1bv1][112bv32];
    v339$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][112bv32];
    v340$1 := $$c$1[10bv32];
    v340$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v340$1, FMUL32(v338$1, v339$1));
    $$c$2[10bv32] := FADD32(v340$2, FMUL32(v338$2, v339$2));
    v341$1 := $$a$1[2bv32];
    v341$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_111"} {:captureState "check_state_111"} {:sourceloc} {:sourceloc_num 477} true;
    v342$1 := $$sgemmNN.bs[1bv1][113bv32];
    v342$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][113bv32];
    v343$1 := $$c$1[11bv32];
    v343$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v343$1, FMUL32(v341$1, v342$1));
    $$c$2[11bv32] := FADD32(v343$2, FMUL32(v341$2, v342$2));
    v344$1 := $$a$1[2bv32];
    v344$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_112"} {:captureState "check_state_112"} {:sourceloc} {:sourceloc_num 481} true;
    v345$1 := $$sgemmNN.bs[1bv1][114bv32];
    v345$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][114bv32];
    v346$1 := $$c$1[12bv32];
    v346$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v346$1, FMUL32(v344$1, v345$1));
    $$c$2[12bv32] := FADD32(v346$2, FMUL32(v344$2, v345$2));
    v347$1 := $$a$1[2bv32];
    v347$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_113"} {:captureState "check_state_113"} {:sourceloc} {:sourceloc_num 485} true;
    v348$1 := $$sgemmNN.bs[1bv1][115bv32];
    v348$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][115bv32];
    v349$1 := $$c$1[13bv32];
    v349$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v349$1, FMUL32(v347$1, v348$1));
    $$c$2[13bv32] := FADD32(v349$2, FMUL32(v347$2, v348$2));
    v350$1 := $$a$1[2bv32];
    v350$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_114"} {:captureState "check_state_114"} {:sourceloc} {:sourceloc_num 489} true;
    v351$1 := $$sgemmNN.bs[1bv1][116bv32];
    v351$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][116bv32];
    v352$1 := $$c$1[14bv32];
    v352$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v352$1, FMUL32(v350$1, v351$1));
    $$c$2[14bv32] := FADD32(v352$2, FMUL32(v350$2, v351$2));
    v353$1 := $$a$1[2bv32];
    v353$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_115"} {:captureState "check_state_115"} {:sourceloc} {:sourceloc_num 493} true;
    v354$1 := $$sgemmNN.bs[1bv1][117bv32];
    v354$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][117bv32];
    v355$1 := $$c$1[15bv32];
    v355$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v355$1, FMUL32(v353$1, v354$1));
    $$c$2[15bv32] := FADD32(v355$2, FMUL32(v353$2, v354$2));
    havoc v356$1, v356$2;
    $$a$1[2bv32] := v356$1;
    $$a$2[2bv32] := v356$2;
    v357$1 := $$a$1[3bv32];
    v357$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_116"} {:captureState "check_state_116"} {:sourceloc} {:sourceloc_num 501} true;
    v358$1 := $$sgemmNN.bs[1bv1][119bv32];
    v358$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][119bv32];
    v359$1 := $$c$1[0bv32];
    v359$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v359$1, FMUL32(v357$1, v358$1));
    $$c$2[0bv32] := FADD32(v359$2, FMUL32(v357$2, v358$2));
    v360$1 := $$a$1[3bv32];
    v360$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_117"} {:captureState "check_state_117"} {:sourceloc} {:sourceloc_num 505} true;
    v361$1 := $$sgemmNN.bs[1bv1][120bv32];
    v361$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][120bv32];
    v362$1 := $$c$1[1bv32];
    v362$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v362$1, FMUL32(v360$1, v361$1));
    $$c$2[1bv32] := FADD32(v362$2, FMUL32(v360$2, v361$2));
    v363$1 := $$a$1[3bv32];
    v363$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_118"} {:captureState "check_state_118"} {:sourceloc} {:sourceloc_num 509} true;
    v364$1 := $$sgemmNN.bs[1bv1][121bv32];
    v364$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][121bv32];
    v365$1 := $$c$1[2bv32];
    v365$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v365$1, FMUL32(v363$1, v364$1));
    $$c$2[2bv32] := FADD32(v365$2, FMUL32(v363$2, v364$2));
    v366$1 := $$a$1[3bv32];
    v366$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_119"} {:captureState "check_state_119"} {:sourceloc} {:sourceloc_num 513} true;
    v367$1 := $$sgemmNN.bs[1bv1][122bv32];
    v367$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][122bv32];
    v368$1 := $$c$1[3bv32];
    v368$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v368$1, FMUL32(v366$1, v367$1));
    $$c$2[3bv32] := FADD32(v368$2, FMUL32(v366$2, v367$2));
    v369$1 := $$a$1[3bv32];
    v369$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_120"} {:captureState "check_state_120"} {:sourceloc} {:sourceloc_num 517} true;
    v370$1 := $$sgemmNN.bs[1bv1][123bv32];
    v370$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][123bv32];
    v371$1 := $$c$1[4bv32];
    v371$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v371$1, FMUL32(v369$1, v370$1));
    $$c$2[4bv32] := FADD32(v371$2, FMUL32(v369$2, v370$2));
    v372$1 := $$a$1[3bv32];
    v372$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_121"} {:captureState "check_state_121"} {:sourceloc} {:sourceloc_num 521} true;
    v373$1 := $$sgemmNN.bs[1bv1][124bv32];
    v373$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][124bv32];
    v374$1 := $$c$1[5bv32];
    v374$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v374$1, FMUL32(v372$1, v373$1));
    $$c$2[5bv32] := FADD32(v374$2, FMUL32(v372$2, v373$2));
    v375$1 := $$a$1[3bv32];
    v375$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_122"} {:captureState "check_state_122"} {:sourceloc} {:sourceloc_num 525} true;
    v376$1 := $$sgemmNN.bs[1bv1][125bv32];
    v376$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][125bv32];
    v377$1 := $$c$1[6bv32];
    v377$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v377$1, FMUL32(v375$1, v376$1));
    $$c$2[6bv32] := FADD32(v377$2, FMUL32(v375$2, v376$2));
    v378$1 := $$a$1[3bv32];
    v378$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_123"} {:captureState "check_state_123"} {:sourceloc} {:sourceloc_num 529} true;
    v379$1 := $$sgemmNN.bs[1bv1][126bv32];
    v379$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][126bv32];
    v380$1 := $$c$1[7bv32];
    v380$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v380$1, FMUL32(v378$1, v379$1));
    $$c$2[7bv32] := FADD32(v380$2, FMUL32(v378$2, v379$2));
    v381$1 := $$a$1[3bv32];
    v381$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_124"} {:captureState "check_state_124"} {:sourceloc} {:sourceloc_num 533} true;
    v382$1 := $$sgemmNN.bs[1bv1][127bv32];
    v382$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][127bv32];
    v383$1 := $$c$1[8bv32];
    v383$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v383$1, FMUL32(v381$1, v382$1));
    $$c$2[8bv32] := FADD32(v383$2, FMUL32(v381$2, v382$2));
    v384$1 := $$a$1[3bv32];
    v384$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_125"} {:captureState "check_state_125"} {:sourceloc} {:sourceloc_num 537} true;
    v385$1 := $$sgemmNN.bs[1bv1][128bv32];
    v385$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][128bv32];
    v386$1 := $$c$1[9bv32];
    v386$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v386$1, FMUL32(v384$1, v385$1));
    $$c$2[9bv32] := FADD32(v386$2, FMUL32(v384$2, v385$2));
    v387$1 := $$a$1[3bv32];
    v387$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_126"} {:captureState "check_state_126"} {:sourceloc} {:sourceloc_num 541} true;
    v388$1 := $$sgemmNN.bs[1bv1][129bv32];
    v388$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][129bv32];
    v389$1 := $$c$1[10bv32];
    v389$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v389$1, FMUL32(v387$1, v388$1));
    $$c$2[10bv32] := FADD32(v389$2, FMUL32(v387$2, v388$2));
    v390$1 := $$a$1[3bv32];
    v390$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_127"} {:captureState "check_state_127"} {:sourceloc} {:sourceloc_num 545} true;
    v391$1 := $$sgemmNN.bs[1bv1][130bv32];
    v391$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][130bv32];
    v392$1 := $$c$1[11bv32];
    v392$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v392$1, FMUL32(v390$1, v391$1));
    $$c$2[11bv32] := FADD32(v392$2, FMUL32(v390$2, v391$2));
    v393$1 := $$a$1[3bv32];
    v393$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_128"} {:captureState "check_state_128"} {:sourceloc} {:sourceloc_num 549} true;
    v394$1 := $$sgemmNN.bs[1bv1][131bv32];
    v394$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][131bv32];
    v395$1 := $$c$1[12bv32];
    v395$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v395$1, FMUL32(v393$1, v394$1));
    $$c$2[12bv32] := FADD32(v395$2, FMUL32(v393$2, v394$2));
    v396$1 := $$a$1[3bv32];
    v396$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_129"} {:captureState "check_state_129"} {:sourceloc} {:sourceloc_num 553} true;
    v397$1 := $$sgemmNN.bs[1bv1][132bv32];
    v397$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][132bv32];
    v398$1 := $$c$1[13bv32];
    v398$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v398$1, FMUL32(v396$1, v397$1));
    $$c$2[13bv32] := FADD32(v398$2, FMUL32(v396$2, v397$2));
    v399$1 := $$a$1[3bv32];
    v399$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_130"} {:captureState "check_state_130"} {:sourceloc} {:sourceloc_num 557} true;
    v400$1 := $$sgemmNN.bs[1bv1][133bv32];
    v400$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][133bv32];
    v401$1 := $$c$1[14bv32];
    v401$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v401$1, FMUL32(v399$1, v400$1));
    $$c$2[14bv32] := FADD32(v401$2, FMUL32(v399$2, v400$2));
    v402$1 := $$a$1[3bv32];
    v402$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_131"} {:captureState "check_state_131"} {:sourceloc} {:sourceloc_num 561} true;
    v403$1 := $$sgemmNN.bs[1bv1][134bv32];
    v403$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][134bv32];
    v404$1 := $$c$1[15bv32];
    v404$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v404$1, FMUL32(v402$1, v403$1));
    $$c$2[15bv32] := FADD32(v404$2, FMUL32(v402$2, v403$2));
    havoc v405$1, v405$2;
    $$a$1[3bv32] := v405$1;
    $$a$2[3bv32] := v405$2;
    v406 := BV32_MUL(4bv32, $lda);
    v407$1 := $$a$1[0bv32];
    v407$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_132"} {:captureState "check_state_132"} {:sourceloc} {:sourceloc_num 569} true;
    v408$1 := $$sgemmNN.bs[1bv1][136bv32];
    v408$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][136bv32];
    v409$1 := $$c$1[0bv32];
    v409$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v409$1, FMUL32(v407$1, v408$1));
    $$c$2[0bv32] := FADD32(v409$2, FMUL32(v407$2, v408$2));
    v410$1 := $$a$1[0bv32];
    v410$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_133"} {:captureState "check_state_133"} {:sourceloc} {:sourceloc_num 573} true;
    v411$1 := $$sgemmNN.bs[1bv1][137bv32];
    v411$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][137bv32];
    v412$1 := $$c$1[1bv32];
    v412$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v412$1, FMUL32(v410$1, v411$1));
    $$c$2[1bv32] := FADD32(v412$2, FMUL32(v410$2, v411$2));
    v413$1 := $$a$1[0bv32];
    v413$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_134"} {:captureState "check_state_134"} {:sourceloc} {:sourceloc_num 577} true;
    v414$1 := $$sgemmNN.bs[1bv1][138bv32];
    v414$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][138bv32];
    v415$1 := $$c$1[2bv32];
    v415$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v415$1, FMUL32(v413$1, v414$1));
    $$c$2[2bv32] := FADD32(v415$2, FMUL32(v413$2, v414$2));
    v416$1 := $$a$1[0bv32];
    v416$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_135"} {:captureState "check_state_135"} {:sourceloc} {:sourceloc_num 581} true;
    v417$1 := $$sgemmNN.bs[1bv1][139bv32];
    v417$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][139bv32];
    v418$1 := $$c$1[3bv32];
    v418$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v418$1, FMUL32(v416$1, v417$1));
    $$c$2[3bv32] := FADD32(v418$2, FMUL32(v416$2, v417$2));
    v419$1 := $$a$1[0bv32];
    v419$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_136"} {:captureState "check_state_136"} {:sourceloc} {:sourceloc_num 585} true;
    v420$1 := $$sgemmNN.bs[1bv1][140bv32];
    v420$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][140bv32];
    v421$1 := $$c$1[4bv32];
    v421$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v421$1, FMUL32(v419$1, v420$1));
    $$c$2[4bv32] := FADD32(v421$2, FMUL32(v419$2, v420$2));
    v422$1 := $$a$1[0bv32];
    v422$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_137"} {:captureState "check_state_137"} {:sourceloc} {:sourceloc_num 589} true;
    v423$1 := $$sgemmNN.bs[1bv1][141bv32];
    v423$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][141bv32];
    v424$1 := $$c$1[5bv32];
    v424$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v424$1, FMUL32(v422$1, v423$1));
    $$c$2[5bv32] := FADD32(v424$2, FMUL32(v422$2, v423$2));
    v425$1 := $$a$1[0bv32];
    v425$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_138"} {:captureState "check_state_138"} {:sourceloc} {:sourceloc_num 593} true;
    v426$1 := $$sgemmNN.bs[1bv1][142bv32];
    v426$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][142bv32];
    v427$1 := $$c$1[6bv32];
    v427$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v427$1, FMUL32(v425$1, v426$1));
    $$c$2[6bv32] := FADD32(v427$2, FMUL32(v425$2, v426$2));
    v428$1 := $$a$1[0bv32];
    v428$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_139"} {:captureState "check_state_139"} {:sourceloc} {:sourceloc_num 597} true;
    v429$1 := $$sgemmNN.bs[1bv1][143bv32];
    v429$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][143bv32];
    v430$1 := $$c$1[7bv32];
    v430$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v430$1, FMUL32(v428$1, v429$1));
    $$c$2[7bv32] := FADD32(v430$2, FMUL32(v428$2, v429$2));
    v431$1 := $$a$1[0bv32];
    v431$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_140"} {:captureState "check_state_140"} {:sourceloc} {:sourceloc_num 601} true;
    v432$1 := $$sgemmNN.bs[1bv1][144bv32];
    v432$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][144bv32];
    v433$1 := $$c$1[8bv32];
    v433$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v433$1, FMUL32(v431$1, v432$1));
    $$c$2[8bv32] := FADD32(v433$2, FMUL32(v431$2, v432$2));
    v434$1 := $$a$1[0bv32];
    v434$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_141"} {:captureState "check_state_141"} {:sourceloc} {:sourceloc_num 605} true;
    v435$1 := $$sgemmNN.bs[1bv1][145bv32];
    v435$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][145bv32];
    v436$1 := $$c$1[9bv32];
    v436$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v436$1, FMUL32(v434$1, v435$1));
    $$c$2[9bv32] := FADD32(v436$2, FMUL32(v434$2, v435$2));
    v437$1 := $$a$1[0bv32];
    v437$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_142"} {:captureState "check_state_142"} {:sourceloc} {:sourceloc_num 609} true;
    v438$1 := $$sgemmNN.bs[1bv1][146bv32];
    v438$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][146bv32];
    v439$1 := $$c$1[10bv32];
    v439$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v439$1, FMUL32(v437$1, v438$1));
    $$c$2[10bv32] := FADD32(v439$2, FMUL32(v437$2, v438$2));
    v440$1 := $$a$1[0bv32];
    v440$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_143"} {:captureState "check_state_143"} {:sourceloc} {:sourceloc_num 613} true;
    v441$1 := $$sgemmNN.bs[1bv1][147bv32];
    v441$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][147bv32];
    v442$1 := $$c$1[11bv32];
    v442$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v442$1, FMUL32(v440$1, v441$1));
    $$c$2[11bv32] := FADD32(v442$2, FMUL32(v440$2, v441$2));
    v443$1 := $$a$1[0bv32];
    v443$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_144"} {:captureState "check_state_144"} {:sourceloc} {:sourceloc_num 617} true;
    v444$1 := $$sgemmNN.bs[1bv1][148bv32];
    v444$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][148bv32];
    v445$1 := $$c$1[12bv32];
    v445$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v445$1, FMUL32(v443$1, v444$1));
    $$c$2[12bv32] := FADD32(v445$2, FMUL32(v443$2, v444$2));
    v446$1 := $$a$1[0bv32];
    v446$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_145"} {:captureState "check_state_145"} {:sourceloc} {:sourceloc_num 621} true;
    v447$1 := $$sgemmNN.bs[1bv1][149bv32];
    v447$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][149bv32];
    v448$1 := $$c$1[13bv32];
    v448$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v448$1, FMUL32(v446$1, v447$1));
    $$c$2[13bv32] := FADD32(v448$2, FMUL32(v446$2, v447$2));
    v449$1 := $$a$1[0bv32];
    v449$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_146"} {:captureState "check_state_146"} {:sourceloc} {:sourceloc_num 625} true;
    v450$1 := $$sgemmNN.bs[1bv1][150bv32];
    v450$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][150bv32];
    v451$1 := $$c$1[14bv32];
    v451$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v451$1, FMUL32(v449$1, v450$1));
    $$c$2[14bv32] := FADD32(v451$2, FMUL32(v449$2, v450$2));
    v452$1 := $$a$1[0bv32];
    v452$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_147"} {:captureState "check_state_147"} {:sourceloc} {:sourceloc_num 629} true;
    v453$1 := $$sgemmNN.bs[1bv1][151bv32];
    v453$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][151bv32];
    v454$1 := $$c$1[15bv32];
    v454$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v454$1, FMUL32(v452$1, v453$1));
    $$c$2[15bv32] := FADD32(v454$2, FMUL32(v452$2, v453$2));
    havoc v455$1, v455$2;
    $$a$1[0bv32] := v455$1;
    $$a$2[0bv32] := v455$2;
    v456$1 := $$a$1[1bv32];
    v456$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_148"} {:captureState "check_state_148"} {:sourceloc} {:sourceloc_num 637} true;
    v457$1 := $$sgemmNN.bs[1bv1][153bv32];
    v457$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][153bv32];
    v458$1 := $$c$1[0bv32];
    v458$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v458$1, FMUL32(v456$1, v457$1));
    $$c$2[0bv32] := FADD32(v458$2, FMUL32(v456$2, v457$2));
    v459$1 := $$a$1[1bv32];
    v459$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_149"} {:captureState "check_state_149"} {:sourceloc} {:sourceloc_num 641} true;
    v460$1 := $$sgemmNN.bs[1bv1][154bv32];
    v460$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][154bv32];
    v461$1 := $$c$1[1bv32];
    v461$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v461$1, FMUL32(v459$1, v460$1));
    $$c$2[1bv32] := FADD32(v461$2, FMUL32(v459$2, v460$2));
    v462$1 := $$a$1[1bv32];
    v462$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_150"} {:captureState "check_state_150"} {:sourceloc} {:sourceloc_num 645} true;
    v463$1 := $$sgemmNN.bs[1bv1][155bv32];
    v463$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][155bv32];
    v464$1 := $$c$1[2bv32];
    v464$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v464$1, FMUL32(v462$1, v463$1));
    $$c$2[2bv32] := FADD32(v464$2, FMUL32(v462$2, v463$2));
    v465$1 := $$a$1[1bv32];
    v465$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_151"} {:captureState "check_state_151"} {:sourceloc} {:sourceloc_num 649} true;
    v466$1 := $$sgemmNN.bs[1bv1][156bv32];
    v466$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][156bv32];
    v467$1 := $$c$1[3bv32];
    v467$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v467$1, FMUL32(v465$1, v466$1));
    $$c$2[3bv32] := FADD32(v467$2, FMUL32(v465$2, v466$2));
    v468$1 := $$a$1[1bv32];
    v468$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_152"} {:captureState "check_state_152"} {:sourceloc} {:sourceloc_num 653} true;
    v469$1 := $$sgemmNN.bs[1bv1][157bv32];
    v469$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][157bv32];
    v470$1 := $$c$1[4bv32];
    v470$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v470$1, FMUL32(v468$1, v469$1));
    $$c$2[4bv32] := FADD32(v470$2, FMUL32(v468$2, v469$2));
    v471$1 := $$a$1[1bv32];
    v471$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_153"} {:captureState "check_state_153"} {:sourceloc} {:sourceloc_num 657} true;
    v472$1 := $$sgemmNN.bs[1bv1][158bv32];
    v472$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][158bv32];
    v473$1 := $$c$1[5bv32];
    v473$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v473$1, FMUL32(v471$1, v472$1));
    $$c$2[5bv32] := FADD32(v473$2, FMUL32(v471$2, v472$2));
    v474$1 := $$a$1[1bv32];
    v474$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_154"} {:captureState "check_state_154"} {:sourceloc} {:sourceloc_num 661} true;
    v475$1 := $$sgemmNN.bs[1bv1][159bv32];
    v475$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][159bv32];
    v476$1 := $$c$1[6bv32];
    v476$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v476$1, FMUL32(v474$1, v475$1));
    $$c$2[6bv32] := FADD32(v476$2, FMUL32(v474$2, v475$2));
    v477$1 := $$a$1[1bv32];
    v477$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_155"} {:captureState "check_state_155"} {:sourceloc} {:sourceloc_num 665} true;
    v478$1 := $$sgemmNN.bs[1bv1][160bv32];
    v478$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][160bv32];
    v479$1 := $$c$1[7bv32];
    v479$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v479$1, FMUL32(v477$1, v478$1));
    $$c$2[7bv32] := FADD32(v479$2, FMUL32(v477$2, v478$2));
    v480$1 := $$a$1[1bv32];
    v480$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_156"} {:captureState "check_state_156"} {:sourceloc} {:sourceloc_num 669} true;
    v481$1 := $$sgemmNN.bs[1bv1][161bv32];
    v481$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][161bv32];
    v482$1 := $$c$1[8bv32];
    v482$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v482$1, FMUL32(v480$1, v481$1));
    $$c$2[8bv32] := FADD32(v482$2, FMUL32(v480$2, v481$2));
    v483$1 := $$a$1[1bv32];
    v483$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_157"} {:captureState "check_state_157"} {:sourceloc} {:sourceloc_num 673} true;
    v484$1 := $$sgemmNN.bs[1bv1][162bv32];
    v484$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][162bv32];
    v485$1 := $$c$1[9bv32];
    v485$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v485$1, FMUL32(v483$1, v484$1));
    $$c$2[9bv32] := FADD32(v485$2, FMUL32(v483$2, v484$2));
    v486$1 := $$a$1[1bv32];
    v486$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_158"} {:captureState "check_state_158"} {:sourceloc} {:sourceloc_num 677} true;
    v487$1 := $$sgemmNN.bs[1bv1][163bv32];
    v487$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][163bv32];
    v488$1 := $$c$1[10bv32];
    v488$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v488$1, FMUL32(v486$1, v487$1));
    $$c$2[10bv32] := FADD32(v488$2, FMUL32(v486$2, v487$2));
    v489$1 := $$a$1[1bv32];
    v489$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_159"} {:captureState "check_state_159"} {:sourceloc} {:sourceloc_num 681} true;
    v490$1 := $$sgemmNN.bs[1bv1][164bv32];
    v490$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][164bv32];
    v491$1 := $$c$1[11bv32];
    v491$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v491$1, FMUL32(v489$1, v490$1));
    $$c$2[11bv32] := FADD32(v491$2, FMUL32(v489$2, v490$2));
    v492$1 := $$a$1[1bv32];
    v492$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_160"} {:captureState "check_state_160"} {:sourceloc} {:sourceloc_num 685} true;
    v493$1 := $$sgemmNN.bs[1bv1][165bv32];
    v493$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][165bv32];
    v494$1 := $$c$1[12bv32];
    v494$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v494$1, FMUL32(v492$1, v493$1));
    $$c$2[12bv32] := FADD32(v494$2, FMUL32(v492$2, v493$2));
    v495$1 := $$a$1[1bv32];
    v495$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_161"} {:captureState "check_state_161"} {:sourceloc} {:sourceloc_num 689} true;
    v496$1 := $$sgemmNN.bs[1bv1][166bv32];
    v496$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][166bv32];
    v497$1 := $$c$1[13bv32];
    v497$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v497$1, FMUL32(v495$1, v496$1));
    $$c$2[13bv32] := FADD32(v497$2, FMUL32(v495$2, v496$2));
    v498$1 := $$a$1[1bv32];
    v498$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_162"} {:captureState "check_state_162"} {:sourceloc} {:sourceloc_num 693} true;
    v499$1 := $$sgemmNN.bs[1bv1][167bv32];
    v499$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][167bv32];
    v500$1 := $$c$1[14bv32];
    v500$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v500$1, FMUL32(v498$1, v499$1));
    $$c$2[14bv32] := FADD32(v500$2, FMUL32(v498$2, v499$2));
    v501$1 := $$a$1[1bv32];
    v501$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_163"} {:captureState "check_state_163"} {:sourceloc} {:sourceloc_num 697} true;
    v502$1 := $$sgemmNN.bs[1bv1][168bv32];
    v502$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][168bv32];
    v503$1 := $$c$1[15bv32];
    v503$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v503$1, FMUL32(v501$1, v502$1));
    $$c$2[15bv32] := FADD32(v503$2, FMUL32(v501$2, v502$2));
    havoc v504$1, v504$2;
    $$a$1[1bv32] := v504$1;
    $$a$2[1bv32] := v504$2;
    v505$1 := $$a$1[2bv32];
    v505$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_164"} {:captureState "check_state_164"} {:sourceloc} {:sourceloc_num 705} true;
    v506$1 := $$sgemmNN.bs[1bv1][170bv32];
    v506$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][170bv32];
    v507$1 := $$c$1[0bv32];
    v507$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v507$1, FMUL32(v505$1, v506$1));
    $$c$2[0bv32] := FADD32(v507$2, FMUL32(v505$2, v506$2));
    v508$1 := $$a$1[2bv32];
    v508$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_165"} {:captureState "check_state_165"} {:sourceloc} {:sourceloc_num 709} true;
    v509$1 := $$sgemmNN.bs[1bv1][171bv32];
    v509$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][171bv32];
    v510$1 := $$c$1[1bv32];
    v510$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v510$1, FMUL32(v508$1, v509$1));
    $$c$2[1bv32] := FADD32(v510$2, FMUL32(v508$2, v509$2));
    v511$1 := $$a$1[2bv32];
    v511$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_166"} {:captureState "check_state_166"} {:sourceloc} {:sourceloc_num 713} true;
    v512$1 := $$sgemmNN.bs[1bv1][172bv32];
    v512$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][172bv32];
    v513$1 := $$c$1[2bv32];
    v513$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v513$1, FMUL32(v511$1, v512$1));
    $$c$2[2bv32] := FADD32(v513$2, FMUL32(v511$2, v512$2));
    v514$1 := $$a$1[2bv32];
    v514$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_167"} {:captureState "check_state_167"} {:sourceloc} {:sourceloc_num 717} true;
    v515$1 := $$sgemmNN.bs[1bv1][173bv32];
    v515$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][173bv32];
    v516$1 := $$c$1[3bv32];
    v516$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v516$1, FMUL32(v514$1, v515$1));
    $$c$2[3bv32] := FADD32(v516$2, FMUL32(v514$2, v515$2));
    v517$1 := $$a$1[2bv32];
    v517$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_168"} {:captureState "check_state_168"} {:sourceloc} {:sourceloc_num 721} true;
    v518$1 := $$sgemmNN.bs[1bv1][174bv32];
    v518$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][174bv32];
    v519$1 := $$c$1[4bv32];
    v519$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v519$1, FMUL32(v517$1, v518$1));
    $$c$2[4bv32] := FADD32(v519$2, FMUL32(v517$2, v518$2));
    v520$1 := $$a$1[2bv32];
    v520$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_169"} {:captureState "check_state_169"} {:sourceloc} {:sourceloc_num 725} true;
    v521$1 := $$sgemmNN.bs[1bv1][175bv32];
    v521$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][175bv32];
    v522$1 := $$c$1[5bv32];
    v522$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v522$1, FMUL32(v520$1, v521$1));
    $$c$2[5bv32] := FADD32(v522$2, FMUL32(v520$2, v521$2));
    v523$1 := $$a$1[2bv32];
    v523$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_170"} {:captureState "check_state_170"} {:sourceloc} {:sourceloc_num 729} true;
    v524$1 := $$sgemmNN.bs[1bv1][176bv32];
    v524$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][176bv32];
    v525$1 := $$c$1[6bv32];
    v525$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v525$1, FMUL32(v523$1, v524$1));
    $$c$2[6bv32] := FADD32(v525$2, FMUL32(v523$2, v524$2));
    v526$1 := $$a$1[2bv32];
    v526$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_171"} {:captureState "check_state_171"} {:sourceloc} {:sourceloc_num 733} true;
    v527$1 := $$sgemmNN.bs[1bv1][177bv32];
    v527$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][177bv32];
    v528$1 := $$c$1[7bv32];
    v528$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v528$1, FMUL32(v526$1, v527$1));
    $$c$2[7bv32] := FADD32(v528$2, FMUL32(v526$2, v527$2));
    v529$1 := $$a$1[2bv32];
    v529$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_172"} {:captureState "check_state_172"} {:sourceloc} {:sourceloc_num 737} true;
    v530$1 := $$sgemmNN.bs[1bv1][178bv32];
    v530$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][178bv32];
    v531$1 := $$c$1[8bv32];
    v531$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v531$1, FMUL32(v529$1, v530$1));
    $$c$2[8bv32] := FADD32(v531$2, FMUL32(v529$2, v530$2));
    v532$1 := $$a$1[2bv32];
    v532$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_173"} {:captureState "check_state_173"} {:sourceloc} {:sourceloc_num 741} true;
    v533$1 := $$sgemmNN.bs[1bv1][179bv32];
    v533$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][179bv32];
    v534$1 := $$c$1[9bv32];
    v534$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v534$1, FMUL32(v532$1, v533$1));
    $$c$2[9bv32] := FADD32(v534$2, FMUL32(v532$2, v533$2));
    v535$1 := $$a$1[2bv32];
    v535$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_174"} {:captureState "check_state_174"} {:sourceloc} {:sourceloc_num 745} true;
    v536$1 := $$sgemmNN.bs[1bv1][180bv32];
    v536$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][180bv32];
    v537$1 := $$c$1[10bv32];
    v537$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v537$1, FMUL32(v535$1, v536$1));
    $$c$2[10bv32] := FADD32(v537$2, FMUL32(v535$2, v536$2));
    v538$1 := $$a$1[2bv32];
    v538$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_175"} {:captureState "check_state_175"} {:sourceloc} {:sourceloc_num 749} true;
    v539$1 := $$sgemmNN.bs[1bv1][181bv32];
    v539$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][181bv32];
    v540$1 := $$c$1[11bv32];
    v540$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v540$1, FMUL32(v538$1, v539$1));
    $$c$2[11bv32] := FADD32(v540$2, FMUL32(v538$2, v539$2));
    v541$1 := $$a$1[2bv32];
    v541$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_176"} {:captureState "check_state_176"} {:sourceloc} {:sourceloc_num 753} true;
    v542$1 := $$sgemmNN.bs[1bv1][182bv32];
    v542$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][182bv32];
    v543$1 := $$c$1[12bv32];
    v543$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v543$1, FMUL32(v541$1, v542$1));
    $$c$2[12bv32] := FADD32(v543$2, FMUL32(v541$2, v542$2));
    v544$1 := $$a$1[2bv32];
    v544$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_177"} {:captureState "check_state_177"} {:sourceloc} {:sourceloc_num 757} true;
    v545$1 := $$sgemmNN.bs[1bv1][183bv32];
    v545$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][183bv32];
    v546$1 := $$c$1[13bv32];
    v546$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v546$1, FMUL32(v544$1, v545$1));
    $$c$2[13bv32] := FADD32(v546$2, FMUL32(v544$2, v545$2));
    v547$1 := $$a$1[2bv32];
    v547$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_178"} {:captureState "check_state_178"} {:sourceloc} {:sourceloc_num 761} true;
    v548$1 := $$sgemmNN.bs[1bv1][184bv32];
    v548$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][184bv32];
    v549$1 := $$c$1[14bv32];
    v549$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v549$1, FMUL32(v547$1, v548$1));
    $$c$2[14bv32] := FADD32(v549$2, FMUL32(v547$2, v548$2));
    v550$1 := $$a$1[2bv32];
    v550$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_179"} {:captureState "check_state_179"} {:sourceloc} {:sourceloc_num 765} true;
    v551$1 := $$sgemmNN.bs[1bv1][185bv32];
    v551$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][185bv32];
    v552$1 := $$c$1[15bv32];
    v552$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v552$1, FMUL32(v550$1, v551$1));
    $$c$2[15bv32] := FADD32(v552$2, FMUL32(v550$2, v551$2));
    havoc v553$1, v553$2;
    $$a$1[2bv32] := v553$1;
    $$a$2[2bv32] := v553$2;
    v554$1 := $$a$1[3bv32];
    v554$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_180"} {:captureState "check_state_180"} {:sourceloc} {:sourceloc_num 773} true;
    v555$1 := $$sgemmNN.bs[1bv1][187bv32];
    v555$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][187bv32];
    v556$1 := $$c$1[0bv32];
    v556$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v556$1, FMUL32(v554$1, v555$1));
    $$c$2[0bv32] := FADD32(v556$2, FMUL32(v554$2, v555$2));
    v557$1 := $$a$1[3bv32];
    v557$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_181"} {:captureState "check_state_181"} {:sourceloc} {:sourceloc_num 777} true;
    v558$1 := $$sgemmNN.bs[1bv1][188bv32];
    v558$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][188bv32];
    v559$1 := $$c$1[1bv32];
    v559$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v559$1, FMUL32(v557$1, v558$1));
    $$c$2[1bv32] := FADD32(v559$2, FMUL32(v557$2, v558$2));
    v560$1 := $$a$1[3bv32];
    v560$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_182"} {:captureState "check_state_182"} {:sourceloc} {:sourceloc_num 781} true;
    v561$1 := $$sgemmNN.bs[1bv1][189bv32];
    v561$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][189bv32];
    v562$1 := $$c$1[2bv32];
    v562$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v562$1, FMUL32(v560$1, v561$1));
    $$c$2[2bv32] := FADD32(v562$2, FMUL32(v560$2, v561$2));
    v563$1 := $$a$1[3bv32];
    v563$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_183"} {:captureState "check_state_183"} {:sourceloc} {:sourceloc_num 785} true;
    v564$1 := $$sgemmNN.bs[1bv1][190bv32];
    v564$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][190bv32];
    v565$1 := $$c$1[3bv32];
    v565$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v565$1, FMUL32(v563$1, v564$1));
    $$c$2[3bv32] := FADD32(v565$2, FMUL32(v563$2, v564$2));
    v566$1 := $$a$1[3bv32];
    v566$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_184"} {:captureState "check_state_184"} {:sourceloc} {:sourceloc_num 789} true;
    v567$1 := $$sgemmNN.bs[1bv1][191bv32];
    v567$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][191bv32];
    v568$1 := $$c$1[4bv32];
    v568$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v568$1, FMUL32(v566$1, v567$1));
    $$c$2[4bv32] := FADD32(v568$2, FMUL32(v566$2, v567$2));
    v569$1 := $$a$1[3bv32];
    v569$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_185"} {:captureState "check_state_185"} {:sourceloc} {:sourceloc_num 793} true;
    v570$1 := $$sgemmNN.bs[1bv1][192bv32];
    v570$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][192bv32];
    v571$1 := $$c$1[5bv32];
    v571$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v571$1, FMUL32(v569$1, v570$1));
    $$c$2[5bv32] := FADD32(v571$2, FMUL32(v569$2, v570$2));
    v572$1 := $$a$1[3bv32];
    v572$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_186"} {:captureState "check_state_186"} {:sourceloc} {:sourceloc_num 797} true;
    v573$1 := $$sgemmNN.bs[1bv1][193bv32];
    v573$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][193bv32];
    v574$1 := $$c$1[6bv32];
    v574$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v574$1, FMUL32(v572$1, v573$1));
    $$c$2[6bv32] := FADD32(v574$2, FMUL32(v572$2, v573$2));
    v575$1 := $$a$1[3bv32];
    v575$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_187"} {:captureState "check_state_187"} {:sourceloc} {:sourceloc_num 801} true;
    v576$1 := $$sgemmNN.bs[1bv1][194bv32];
    v576$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][194bv32];
    v577$1 := $$c$1[7bv32];
    v577$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v577$1, FMUL32(v575$1, v576$1));
    $$c$2[7bv32] := FADD32(v577$2, FMUL32(v575$2, v576$2));
    v578$1 := $$a$1[3bv32];
    v578$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_188"} {:captureState "check_state_188"} {:sourceloc} {:sourceloc_num 805} true;
    v579$1 := $$sgemmNN.bs[1bv1][195bv32];
    v579$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][195bv32];
    v580$1 := $$c$1[8bv32];
    v580$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v580$1, FMUL32(v578$1, v579$1));
    $$c$2[8bv32] := FADD32(v580$2, FMUL32(v578$2, v579$2));
    v581$1 := $$a$1[3bv32];
    v581$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_189"} {:captureState "check_state_189"} {:sourceloc} {:sourceloc_num 809} true;
    v582$1 := $$sgemmNN.bs[1bv1][196bv32];
    v582$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][196bv32];
    v583$1 := $$c$1[9bv32];
    v583$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v583$1, FMUL32(v581$1, v582$1));
    $$c$2[9bv32] := FADD32(v583$2, FMUL32(v581$2, v582$2));
    v584$1 := $$a$1[3bv32];
    v584$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_190"} {:captureState "check_state_190"} {:sourceloc} {:sourceloc_num 813} true;
    v585$1 := $$sgemmNN.bs[1bv1][197bv32];
    v585$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][197bv32];
    v586$1 := $$c$1[10bv32];
    v586$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v586$1, FMUL32(v584$1, v585$1));
    $$c$2[10bv32] := FADD32(v586$2, FMUL32(v584$2, v585$2));
    v587$1 := $$a$1[3bv32];
    v587$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_191"} {:captureState "check_state_191"} {:sourceloc} {:sourceloc_num 817} true;
    v588$1 := $$sgemmNN.bs[1bv1][198bv32];
    v588$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][198bv32];
    v589$1 := $$c$1[11bv32];
    v589$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v589$1, FMUL32(v587$1, v588$1));
    $$c$2[11bv32] := FADD32(v589$2, FMUL32(v587$2, v588$2));
    v590$1 := $$a$1[3bv32];
    v590$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_192"} {:captureState "check_state_192"} {:sourceloc} {:sourceloc_num 821} true;
    v591$1 := $$sgemmNN.bs[1bv1][199bv32];
    v591$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][199bv32];
    v592$1 := $$c$1[12bv32];
    v592$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v592$1, FMUL32(v590$1, v591$1));
    $$c$2[12bv32] := FADD32(v592$2, FMUL32(v590$2, v591$2));
    v593$1 := $$a$1[3bv32];
    v593$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_193"} {:captureState "check_state_193"} {:sourceloc} {:sourceloc_num 825} true;
    v594$1 := $$sgemmNN.bs[1bv1][200bv32];
    v594$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][200bv32];
    v595$1 := $$c$1[13bv32];
    v595$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v595$1, FMUL32(v593$1, v594$1));
    $$c$2[13bv32] := FADD32(v595$2, FMUL32(v593$2, v594$2));
    v596$1 := $$a$1[3bv32];
    v596$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_194"} {:captureState "check_state_194"} {:sourceloc} {:sourceloc_num 829} true;
    v597$1 := $$sgemmNN.bs[1bv1][201bv32];
    v597$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][201bv32];
    v598$1 := $$c$1[14bv32];
    v598$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v598$1, FMUL32(v596$1, v597$1));
    $$c$2[14bv32] := FADD32(v598$2, FMUL32(v596$2, v597$2));
    v599$1 := $$a$1[3bv32];
    v599$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_195"} {:captureState "check_state_195"} {:sourceloc} {:sourceloc_num 833} true;
    v600$1 := $$sgemmNN.bs[1bv1][202bv32];
    v600$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][202bv32];
    v601$1 := $$c$1[15bv32];
    v601$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v601$1, FMUL32(v599$1, v600$1));
    $$c$2[15bv32] := FADD32(v601$2, FMUL32(v599$2, v600$2));
    havoc v602$1, v602$2;
    $$a$1[3bv32] := v602$1;
    $$a$2[3bv32] := v602$2;
    v603$1 := $$a$1[0bv32];
    v603$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_196"} {:captureState "check_state_196"} {:sourceloc} {:sourceloc_num 841} true;
    v604$1 := $$sgemmNN.bs[1bv1][204bv32];
    v604$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][204bv32];
    v605$1 := $$c$1[0bv32];
    v605$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v605$1, FMUL32(v603$1, v604$1));
    $$c$2[0bv32] := FADD32(v605$2, FMUL32(v603$2, v604$2));
    v606$1 := $$a$1[0bv32];
    v606$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_197"} {:captureState "check_state_197"} {:sourceloc} {:sourceloc_num 845} true;
    v607$1 := $$sgemmNN.bs[1bv1][205bv32];
    v607$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][205bv32];
    v608$1 := $$c$1[1bv32];
    v608$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v608$1, FMUL32(v606$1, v607$1));
    $$c$2[1bv32] := FADD32(v608$2, FMUL32(v606$2, v607$2));
    v609$1 := $$a$1[0bv32];
    v609$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_198"} {:captureState "check_state_198"} {:sourceloc} {:sourceloc_num 849} true;
    v610$1 := $$sgemmNN.bs[1bv1][206bv32];
    v610$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][206bv32];
    v611$1 := $$c$1[2bv32];
    v611$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v611$1, FMUL32(v609$1, v610$1));
    $$c$2[2bv32] := FADD32(v611$2, FMUL32(v609$2, v610$2));
    v612$1 := $$a$1[0bv32];
    v612$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_199"} {:captureState "check_state_199"} {:sourceloc} {:sourceloc_num 853} true;
    v613$1 := $$sgemmNN.bs[1bv1][207bv32];
    v613$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][207bv32];
    v614$1 := $$c$1[3bv32];
    v614$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v614$1, FMUL32(v612$1, v613$1));
    $$c$2[3bv32] := FADD32(v614$2, FMUL32(v612$2, v613$2));
    v615$1 := $$a$1[0bv32];
    v615$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_200"} {:captureState "check_state_200"} {:sourceloc} {:sourceloc_num 857} true;
    v616$1 := $$sgemmNN.bs[1bv1][208bv32];
    v616$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][208bv32];
    v617$1 := $$c$1[4bv32];
    v617$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v617$1, FMUL32(v615$1, v616$1));
    $$c$2[4bv32] := FADD32(v617$2, FMUL32(v615$2, v616$2));
    v618$1 := $$a$1[0bv32];
    v618$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_201"} {:captureState "check_state_201"} {:sourceloc} {:sourceloc_num 861} true;
    v619$1 := $$sgemmNN.bs[1bv1][209bv32];
    v619$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][209bv32];
    v620$1 := $$c$1[5bv32];
    v620$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v620$1, FMUL32(v618$1, v619$1));
    $$c$2[5bv32] := FADD32(v620$2, FMUL32(v618$2, v619$2));
    v621$1 := $$a$1[0bv32];
    v621$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_202"} {:captureState "check_state_202"} {:sourceloc} {:sourceloc_num 865} true;
    v622$1 := $$sgemmNN.bs[1bv1][210bv32];
    v622$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][210bv32];
    v623$1 := $$c$1[6bv32];
    v623$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v623$1, FMUL32(v621$1, v622$1));
    $$c$2[6bv32] := FADD32(v623$2, FMUL32(v621$2, v622$2));
    v624$1 := $$a$1[0bv32];
    v624$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_203"} {:captureState "check_state_203"} {:sourceloc} {:sourceloc_num 869} true;
    v625$1 := $$sgemmNN.bs[1bv1][211bv32];
    v625$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][211bv32];
    v626$1 := $$c$1[7bv32];
    v626$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v626$1, FMUL32(v624$1, v625$1));
    $$c$2[7bv32] := FADD32(v626$2, FMUL32(v624$2, v625$2));
    v627$1 := $$a$1[0bv32];
    v627$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_204"} {:captureState "check_state_204"} {:sourceloc} {:sourceloc_num 873} true;
    v628$1 := $$sgemmNN.bs[1bv1][212bv32];
    v628$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][212bv32];
    v629$1 := $$c$1[8bv32];
    v629$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v629$1, FMUL32(v627$1, v628$1));
    $$c$2[8bv32] := FADD32(v629$2, FMUL32(v627$2, v628$2));
    v630$1 := $$a$1[0bv32];
    v630$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_205"} {:captureState "check_state_205"} {:sourceloc} {:sourceloc_num 877} true;
    v631$1 := $$sgemmNN.bs[1bv1][213bv32];
    v631$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][213bv32];
    v632$1 := $$c$1[9bv32];
    v632$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v632$1, FMUL32(v630$1, v631$1));
    $$c$2[9bv32] := FADD32(v632$2, FMUL32(v630$2, v631$2));
    v633$1 := $$a$1[0bv32];
    v633$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_206"} {:captureState "check_state_206"} {:sourceloc} {:sourceloc_num 881} true;
    v634$1 := $$sgemmNN.bs[1bv1][214bv32];
    v634$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][214bv32];
    v635$1 := $$c$1[10bv32];
    v635$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v635$1, FMUL32(v633$1, v634$1));
    $$c$2[10bv32] := FADD32(v635$2, FMUL32(v633$2, v634$2));
    v636$1 := $$a$1[0bv32];
    v636$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_207"} {:captureState "check_state_207"} {:sourceloc} {:sourceloc_num 885} true;
    v637$1 := $$sgemmNN.bs[1bv1][215bv32];
    v637$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][215bv32];
    v638$1 := $$c$1[11bv32];
    v638$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v638$1, FMUL32(v636$1, v637$1));
    $$c$2[11bv32] := FADD32(v638$2, FMUL32(v636$2, v637$2));
    v639$1 := $$a$1[0bv32];
    v639$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_208"} {:captureState "check_state_208"} {:sourceloc} {:sourceloc_num 889} true;
    v640$1 := $$sgemmNN.bs[1bv1][216bv32];
    v640$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][216bv32];
    v641$1 := $$c$1[12bv32];
    v641$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v641$1, FMUL32(v639$1, v640$1));
    $$c$2[12bv32] := FADD32(v641$2, FMUL32(v639$2, v640$2));
    v642$1 := $$a$1[0bv32];
    v642$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_209"} {:captureState "check_state_209"} {:sourceloc} {:sourceloc_num 893} true;
    v643$1 := $$sgemmNN.bs[1bv1][217bv32];
    v643$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][217bv32];
    v644$1 := $$c$1[13bv32];
    v644$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v644$1, FMUL32(v642$1, v643$1));
    $$c$2[13bv32] := FADD32(v644$2, FMUL32(v642$2, v643$2));
    v645$1 := $$a$1[0bv32];
    v645$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_210"} {:captureState "check_state_210"} {:sourceloc} {:sourceloc_num 897} true;
    v646$1 := $$sgemmNN.bs[1bv1][218bv32];
    v646$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][218bv32];
    v647$1 := $$c$1[14bv32];
    v647$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v647$1, FMUL32(v645$1, v646$1));
    $$c$2[14bv32] := FADD32(v647$2, FMUL32(v645$2, v646$2));
    v648$1 := $$a$1[0bv32];
    v648$2 := $$a$2[0bv32];
    assume {:do_not_predicate} {:check_id "check_state_211"} {:captureState "check_state_211"} {:sourceloc} {:sourceloc_num 901} true;
    v649$1 := $$sgemmNN.bs[1bv1][219bv32];
    v649$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][219bv32];
    v650$1 := $$c$1[15bv32];
    v650$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v650$1, FMUL32(v648$1, v649$1));
    $$c$2[15bv32] := FADD32(v650$2, FMUL32(v648$2, v649$2));
    v651$1 := $$a$1[1bv32];
    v651$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_212"} {:captureState "check_state_212"} {:sourceloc} {:sourceloc_num 907} true;
    v652$1 := $$sgemmNN.bs[1bv1][221bv32];
    v652$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][221bv32];
    v653$1 := $$c$1[0bv32];
    v653$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v653$1, FMUL32(v651$1, v652$1));
    $$c$2[0bv32] := FADD32(v653$2, FMUL32(v651$2, v652$2));
    v654$1 := $$a$1[1bv32];
    v654$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_213"} {:captureState "check_state_213"} {:sourceloc} {:sourceloc_num 911} true;
    v655$1 := $$sgemmNN.bs[1bv1][222bv32];
    v655$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][222bv32];
    v656$1 := $$c$1[1bv32];
    v656$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v656$1, FMUL32(v654$1, v655$1));
    $$c$2[1bv32] := FADD32(v656$2, FMUL32(v654$2, v655$2));
    v657$1 := $$a$1[1bv32];
    v657$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_214"} {:captureState "check_state_214"} {:sourceloc} {:sourceloc_num 915} true;
    v658$1 := $$sgemmNN.bs[1bv1][223bv32];
    v658$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][223bv32];
    v659$1 := $$c$1[2bv32];
    v659$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v659$1, FMUL32(v657$1, v658$1));
    $$c$2[2bv32] := FADD32(v659$2, FMUL32(v657$2, v658$2));
    v660$1 := $$a$1[1bv32];
    v660$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_215"} {:captureState "check_state_215"} {:sourceloc} {:sourceloc_num 919} true;
    v661$1 := $$sgemmNN.bs[1bv1][224bv32];
    v661$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][224bv32];
    v662$1 := $$c$1[3bv32];
    v662$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v662$1, FMUL32(v660$1, v661$1));
    $$c$2[3bv32] := FADD32(v662$2, FMUL32(v660$2, v661$2));
    v663$1 := $$a$1[1bv32];
    v663$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_216"} {:captureState "check_state_216"} {:sourceloc} {:sourceloc_num 923} true;
    v664$1 := $$sgemmNN.bs[1bv1][225bv32];
    v664$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][225bv32];
    v665$1 := $$c$1[4bv32];
    v665$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v665$1, FMUL32(v663$1, v664$1));
    $$c$2[4bv32] := FADD32(v665$2, FMUL32(v663$2, v664$2));
    v666$1 := $$a$1[1bv32];
    v666$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_217"} {:captureState "check_state_217"} {:sourceloc} {:sourceloc_num 927} true;
    v667$1 := $$sgemmNN.bs[1bv1][226bv32];
    v667$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][226bv32];
    v668$1 := $$c$1[5bv32];
    v668$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v668$1, FMUL32(v666$1, v667$1));
    $$c$2[5bv32] := FADD32(v668$2, FMUL32(v666$2, v667$2));
    v669$1 := $$a$1[1bv32];
    v669$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_218"} {:captureState "check_state_218"} {:sourceloc} {:sourceloc_num 931} true;
    v670$1 := $$sgemmNN.bs[1bv1][227bv32];
    v670$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][227bv32];
    v671$1 := $$c$1[6bv32];
    v671$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v671$1, FMUL32(v669$1, v670$1));
    $$c$2[6bv32] := FADD32(v671$2, FMUL32(v669$2, v670$2));
    v672$1 := $$a$1[1bv32];
    v672$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_219"} {:captureState "check_state_219"} {:sourceloc} {:sourceloc_num 935} true;
    v673$1 := $$sgemmNN.bs[1bv1][228bv32];
    v673$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][228bv32];
    v674$1 := $$c$1[7bv32];
    v674$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v674$1, FMUL32(v672$1, v673$1));
    $$c$2[7bv32] := FADD32(v674$2, FMUL32(v672$2, v673$2));
    v675$1 := $$a$1[1bv32];
    v675$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_220"} {:captureState "check_state_220"} {:sourceloc} {:sourceloc_num 939} true;
    v676$1 := $$sgemmNN.bs[1bv1][229bv32];
    v676$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][229bv32];
    v677$1 := $$c$1[8bv32];
    v677$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v677$1, FMUL32(v675$1, v676$1));
    $$c$2[8bv32] := FADD32(v677$2, FMUL32(v675$2, v676$2));
    v678$1 := $$a$1[1bv32];
    v678$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_221"} {:captureState "check_state_221"} {:sourceloc} {:sourceloc_num 943} true;
    v679$1 := $$sgemmNN.bs[1bv1][230bv32];
    v679$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][230bv32];
    v680$1 := $$c$1[9bv32];
    v680$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v680$1, FMUL32(v678$1, v679$1));
    $$c$2[9bv32] := FADD32(v680$2, FMUL32(v678$2, v679$2));
    v681$1 := $$a$1[1bv32];
    v681$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_222"} {:captureState "check_state_222"} {:sourceloc} {:sourceloc_num 947} true;
    v682$1 := $$sgemmNN.bs[1bv1][231bv32];
    v682$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][231bv32];
    v683$1 := $$c$1[10bv32];
    v683$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v683$1, FMUL32(v681$1, v682$1));
    $$c$2[10bv32] := FADD32(v683$2, FMUL32(v681$2, v682$2));
    v684$1 := $$a$1[1bv32];
    v684$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_223"} {:captureState "check_state_223"} {:sourceloc} {:sourceloc_num 951} true;
    v685$1 := $$sgemmNN.bs[1bv1][232bv32];
    v685$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][232bv32];
    v686$1 := $$c$1[11bv32];
    v686$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v686$1, FMUL32(v684$1, v685$1));
    $$c$2[11bv32] := FADD32(v686$2, FMUL32(v684$2, v685$2));
    v687$1 := $$a$1[1bv32];
    v687$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_224"} {:captureState "check_state_224"} {:sourceloc} {:sourceloc_num 955} true;
    v688$1 := $$sgemmNN.bs[1bv1][233bv32];
    v688$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][233bv32];
    v689$1 := $$c$1[12bv32];
    v689$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v689$1, FMUL32(v687$1, v688$1));
    $$c$2[12bv32] := FADD32(v689$2, FMUL32(v687$2, v688$2));
    v690$1 := $$a$1[1bv32];
    v690$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_225"} {:captureState "check_state_225"} {:sourceloc} {:sourceloc_num 959} true;
    v691$1 := $$sgemmNN.bs[1bv1][234bv32];
    v691$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][234bv32];
    v692$1 := $$c$1[13bv32];
    v692$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v692$1, FMUL32(v690$1, v691$1));
    $$c$2[13bv32] := FADD32(v692$2, FMUL32(v690$2, v691$2));
    v693$1 := $$a$1[1bv32];
    v693$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_226"} {:captureState "check_state_226"} {:sourceloc} {:sourceloc_num 963} true;
    v694$1 := $$sgemmNN.bs[1bv1][235bv32];
    v694$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][235bv32];
    v695$1 := $$c$1[14bv32];
    v695$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v695$1, FMUL32(v693$1, v694$1));
    $$c$2[14bv32] := FADD32(v695$2, FMUL32(v693$2, v694$2));
    v696$1 := $$a$1[1bv32];
    v696$2 := $$a$2[1bv32];
    assume {:do_not_predicate} {:check_id "check_state_227"} {:captureState "check_state_227"} {:sourceloc} {:sourceloc_num 967} true;
    v697$1 := $$sgemmNN.bs[1bv1][236bv32];
    v697$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][236bv32];
    v698$1 := $$c$1[15bv32];
    v698$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v698$1, FMUL32(v696$1, v697$1));
    $$c$2[15bv32] := FADD32(v698$2, FMUL32(v696$2, v697$2));
    v699$1 := $$a$1[2bv32];
    v699$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_228"} {:captureState "check_state_228"} {:sourceloc} {:sourceloc_num 973} true;
    v700$1 := $$sgemmNN.bs[1bv1][238bv32];
    v700$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][238bv32];
    v701$1 := $$c$1[0bv32];
    v701$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v701$1, FMUL32(v699$1, v700$1));
    $$c$2[0bv32] := FADD32(v701$2, FMUL32(v699$2, v700$2));
    v702$1 := $$a$1[2bv32];
    v702$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_229"} {:captureState "check_state_229"} {:sourceloc} {:sourceloc_num 977} true;
    v703$1 := $$sgemmNN.bs[1bv1][239bv32];
    v703$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][239bv32];
    v704$1 := $$c$1[1bv32];
    v704$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v704$1, FMUL32(v702$1, v703$1));
    $$c$2[1bv32] := FADD32(v704$2, FMUL32(v702$2, v703$2));
    v705$1 := $$a$1[2bv32];
    v705$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_230"} {:captureState "check_state_230"} {:sourceloc} {:sourceloc_num 981} true;
    v706$1 := $$sgemmNN.bs[1bv1][240bv32];
    v706$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][240bv32];
    v707$1 := $$c$1[2bv32];
    v707$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v707$1, FMUL32(v705$1, v706$1));
    $$c$2[2bv32] := FADD32(v707$2, FMUL32(v705$2, v706$2));
    v708$1 := $$a$1[2bv32];
    v708$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_231"} {:captureState "check_state_231"} {:sourceloc} {:sourceloc_num 985} true;
    v709$1 := $$sgemmNN.bs[1bv1][241bv32];
    v709$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][241bv32];
    v710$1 := $$c$1[3bv32];
    v710$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v710$1, FMUL32(v708$1, v709$1));
    $$c$2[3bv32] := FADD32(v710$2, FMUL32(v708$2, v709$2));
    v711$1 := $$a$1[2bv32];
    v711$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_232"} {:captureState "check_state_232"} {:sourceloc} {:sourceloc_num 989} true;
    v712$1 := $$sgemmNN.bs[1bv1][242bv32];
    v712$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][242bv32];
    v713$1 := $$c$1[4bv32];
    v713$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v713$1, FMUL32(v711$1, v712$1));
    $$c$2[4bv32] := FADD32(v713$2, FMUL32(v711$2, v712$2));
    v714$1 := $$a$1[2bv32];
    v714$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_233"} {:captureState "check_state_233"} {:sourceloc} {:sourceloc_num 993} true;
    v715$1 := $$sgemmNN.bs[1bv1][243bv32];
    v715$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][243bv32];
    v716$1 := $$c$1[5bv32];
    v716$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v716$1, FMUL32(v714$1, v715$1));
    $$c$2[5bv32] := FADD32(v716$2, FMUL32(v714$2, v715$2));
    v717$1 := $$a$1[2bv32];
    v717$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_234"} {:captureState "check_state_234"} {:sourceloc} {:sourceloc_num 997} true;
    v718$1 := $$sgemmNN.bs[1bv1][244bv32];
    v718$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][244bv32];
    v719$1 := $$c$1[6bv32];
    v719$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v719$1, FMUL32(v717$1, v718$1));
    $$c$2[6bv32] := FADD32(v719$2, FMUL32(v717$2, v718$2));
    v720$1 := $$a$1[2bv32];
    v720$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_235"} {:captureState "check_state_235"} {:sourceloc} {:sourceloc_num 1001} true;
    v721$1 := $$sgemmNN.bs[1bv1][245bv32];
    v721$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][245bv32];
    v722$1 := $$c$1[7bv32];
    v722$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v722$1, FMUL32(v720$1, v721$1));
    $$c$2[7bv32] := FADD32(v722$2, FMUL32(v720$2, v721$2));
    v723$1 := $$a$1[2bv32];
    v723$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_236"} {:captureState "check_state_236"} {:sourceloc} {:sourceloc_num 1005} true;
    v724$1 := $$sgemmNN.bs[1bv1][246bv32];
    v724$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][246bv32];
    v725$1 := $$c$1[8bv32];
    v725$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v725$1, FMUL32(v723$1, v724$1));
    $$c$2[8bv32] := FADD32(v725$2, FMUL32(v723$2, v724$2));
    v726$1 := $$a$1[2bv32];
    v726$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_237"} {:captureState "check_state_237"} {:sourceloc} {:sourceloc_num 1009} true;
    v727$1 := $$sgemmNN.bs[1bv1][247bv32];
    v727$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][247bv32];
    v728$1 := $$c$1[9bv32];
    v728$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v728$1, FMUL32(v726$1, v727$1));
    $$c$2[9bv32] := FADD32(v728$2, FMUL32(v726$2, v727$2));
    v729$1 := $$a$1[2bv32];
    v729$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_238"} {:captureState "check_state_238"} {:sourceloc} {:sourceloc_num 1013} true;
    v730$1 := $$sgemmNN.bs[1bv1][248bv32];
    v730$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][248bv32];
    v731$1 := $$c$1[10bv32];
    v731$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v731$1, FMUL32(v729$1, v730$1));
    $$c$2[10bv32] := FADD32(v731$2, FMUL32(v729$2, v730$2));
    v732$1 := $$a$1[2bv32];
    v732$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_239"} {:captureState "check_state_239"} {:sourceloc} {:sourceloc_num 1017} true;
    v733$1 := $$sgemmNN.bs[1bv1][249bv32];
    v733$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][249bv32];
    v734$1 := $$c$1[11bv32];
    v734$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v734$1, FMUL32(v732$1, v733$1));
    $$c$2[11bv32] := FADD32(v734$2, FMUL32(v732$2, v733$2));
    v735$1 := $$a$1[2bv32];
    v735$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_240"} {:captureState "check_state_240"} {:sourceloc} {:sourceloc_num 1021} true;
    v736$1 := $$sgemmNN.bs[1bv1][250bv32];
    v736$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][250bv32];
    v737$1 := $$c$1[12bv32];
    v737$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v737$1, FMUL32(v735$1, v736$1));
    $$c$2[12bv32] := FADD32(v737$2, FMUL32(v735$2, v736$2));
    v738$1 := $$a$1[2bv32];
    v738$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_241"} {:captureState "check_state_241"} {:sourceloc} {:sourceloc_num 1025} true;
    v739$1 := $$sgemmNN.bs[1bv1][251bv32];
    v739$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][251bv32];
    v740$1 := $$c$1[13bv32];
    v740$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v740$1, FMUL32(v738$1, v739$1));
    $$c$2[13bv32] := FADD32(v740$2, FMUL32(v738$2, v739$2));
    v741$1 := $$a$1[2bv32];
    v741$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_242"} {:captureState "check_state_242"} {:sourceloc} {:sourceloc_num 1029} true;
    v742$1 := $$sgemmNN.bs[1bv1][252bv32];
    v742$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][252bv32];
    v743$1 := $$c$1[14bv32];
    v743$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v743$1, FMUL32(v741$1, v742$1));
    $$c$2[14bv32] := FADD32(v743$2, FMUL32(v741$2, v742$2));
    v744$1 := $$a$1[2bv32];
    v744$2 := $$a$2[2bv32];
    assume {:do_not_predicate} {:check_id "check_state_243"} {:captureState "check_state_243"} {:sourceloc} {:sourceloc_num 1033} true;
    v745$1 := $$sgemmNN.bs[1bv1][253bv32];
    v745$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][253bv32];
    v746$1 := $$c$1[15bv32];
    v746$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v746$1, FMUL32(v744$1, v745$1));
    $$c$2[15bv32] := FADD32(v746$2, FMUL32(v744$2, v745$2));
    v747$1 := $$a$1[3bv32];
    v747$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_244"} {:captureState "check_state_244"} {:sourceloc} {:sourceloc_num 1039} true;
    v748$1 := $$sgemmNN.bs[1bv1][255bv32];
    v748$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][255bv32];
    v749$1 := $$c$1[0bv32];
    v749$2 := $$c$2[0bv32];
    $$c$1[0bv32] := FADD32(v749$1, FMUL32(v747$1, v748$1));
    $$c$2[0bv32] := FADD32(v749$2, FMUL32(v747$2, v748$2));
    v750$1 := $$a$1[3bv32];
    v750$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_245"} {:captureState "check_state_245"} {:sourceloc} {:sourceloc_num 1043} true;
    v751$1 := $$sgemmNN.bs[1bv1][256bv32];
    v751$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][256bv32];
    v752$1 := $$c$1[1bv32];
    v752$2 := $$c$2[1bv32];
    $$c$1[1bv32] := FADD32(v752$1, FMUL32(v750$1, v751$1));
    $$c$2[1bv32] := FADD32(v752$2, FMUL32(v750$2, v751$2));
    v753$1 := $$a$1[3bv32];
    v753$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_246"} {:captureState "check_state_246"} {:sourceloc} {:sourceloc_num 1047} true;
    v754$1 := $$sgemmNN.bs[1bv1][257bv32];
    v754$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][257bv32];
    v755$1 := $$c$1[2bv32];
    v755$2 := $$c$2[2bv32];
    $$c$1[2bv32] := FADD32(v755$1, FMUL32(v753$1, v754$1));
    $$c$2[2bv32] := FADD32(v755$2, FMUL32(v753$2, v754$2));
    v756$1 := $$a$1[3bv32];
    v756$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_247"} {:captureState "check_state_247"} {:sourceloc} {:sourceloc_num 1051} true;
    v757$1 := $$sgemmNN.bs[1bv1][258bv32];
    v757$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][258bv32];
    v758$1 := $$c$1[3bv32];
    v758$2 := $$c$2[3bv32];
    $$c$1[3bv32] := FADD32(v758$1, FMUL32(v756$1, v757$1));
    $$c$2[3bv32] := FADD32(v758$2, FMUL32(v756$2, v757$2));
    v759$1 := $$a$1[3bv32];
    v759$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_248"} {:captureState "check_state_248"} {:sourceloc} {:sourceloc_num 1055} true;
    v760$1 := $$sgemmNN.bs[1bv1][259bv32];
    v760$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][259bv32];
    v761$1 := $$c$1[4bv32];
    v761$2 := $$c$2[4bv32];
    $$c$1[4bv32] := FADD32(v761$1, FMUL32(v759$1, v760$1));
    $$c$2[4bv32] := FADD32(v761$2, FMUL32(v759$2, v760$2));
    v762$1 := $$a$1[3bv32];
    v762$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_249"} {:captureState "check_state_249"} {:sourceloc} {:sourceloc_num 1059} true;
    v763$1 := $$sgemmNN.bs[1bv1][260bv32];
    v763$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][260bv32];
    v764$1 := $$c$1[5bv32];
    v764$2 := $$c$2[5bv32];
    $$c$1[5bv32] := FADD32(v764$1, FMUL32(v762$1, v763$1));
    $$c$2[5bv32] := FADD32(v764$2, FMUL32(v762$2, v763$2));
    v765$1 := $$a$1[3bv32];
    v765$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_250"} {:captureState "check_state_250"} {:sourceloc} {:sourceloc_num 1063} true;
    v766$1 := $$sgemmNN.bs[1bv1][261bv32];
    v766$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][261bv32];
    v767$1 := $$c$1[6bv32];
    v767$2 := $$c$2[6bv32];
    $$c$1[6bv32] := FADD32(v767$1, FMUL32(v765$1, v766$1));
    $$c$2[6bv32] := FADD32(v767$2, FMUL32(v765$2, v766$2));
    v768$1 := $$a$1[3bv32];
    v768$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_251"} {:captureState "check_state_251"} {:sourceloc} {:sourceloc_num 1067} true;
    v769$1 := $$sgemmNN.bs[1bv1][262bv32];
    v769$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][262bv32];
    v770$1 := $$c$1[7bv32];
    v770$2 := $$c$2[7bv32];
    $$c$1[7bv32] := FADD32(v770$1, FMUL32(v768$1, v769$1));
    $$c$2[7bv32] := FADD32(v770$2, FMUL32(v768$2, v769$2));
    v771$1 := $$a$1[3bv32];
    v771$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_252"} {:captureState "check_state_252"} {:sourceloc} {:sourceloc_num 1071} true;
    v772$1 := $$sgemmNN.bs[1bv1][263bv32];
    v772$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][263bv32];
    v773$1 := $$c$1[8bv32];
    v773$2 := $$c$2[8bv32];
    $$c$1[8bv32] := FADD32(v773$1, FMUL32(v771$1, v772$1));
    $$c$2[8bv32] := FADD32(v773$2, FMUL32(v771$2, v772$2));
    v774$1 := $$a$1[3bv32];
    v774$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_253"} {:captureState "check_state_253"} {:sourceloc} {:sourceloc_num 1075} true;
    v775$1 := $$sgemmNN.bs[1bv1][264bv32];
    v775$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][264bv32];
    v776$1 := $$c$1[9bv32];
    v776$2 := $$c$2[9bv32];
    $$c$1[9bv32] := FADD32(v776$1, FMUL32(v774$1, v775$1));
    $$c$2[9bv32] := FADD32(v776$2, FMUL32(v774$2, v775$2));
    v777$1 := $$a$1[3bv32];
    v777$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_254"} {:captureState "check_state_254"} {:sourceloc} {:sourceloc_num 1079} true;
    v778$1 := $$sgemmNN.bs[1bv1][265bv32];
    v778$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][265bv32];
    v779$1 := $$c$1[10bv32];
    v779$2 := $$c$2[10bv32];
    $$c$1[10bv32] := FADD32(v779$1, FMUL32(v777$1, v778$1));
    $$c$2[10bv32] := FADD32(v779$2, FMUL32(v777$2, v778$2));
    v780$1 := $$a$1[3bv32];
    v780$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_255"} {:captureState "check_state_255"} {:sourceloc} {:sourceloc_num 1083} true;
    v781$1 := $$sgemmNN.bs[1bv1][266bv32];
    v781$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][266bv32];
    v782$1 := $$c$1[11bv32];
    v782$2 := $$c$2[11bv32];
    $$c$1[11bv32] := FADD32(v782$1, FMUL32(v780$1, v781$1));
    $$c$2[11bv32] := FADD32(v782$2, FMUL32(v780$2, v781$2));
    v783$1 := $$a$1[3bv32];
    v783$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_256"} {:captureState "check_state_256"} {:sourceloc} {:sourceloc_num 1087} true;
    v784$1 := $$sgemmNN.bs[1bv1][267bv32];
    v784$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][267bv32];
    v785$1 := $$c$1[12bv32];
    v785$2 := $$c$2[12bv32];
    $$c$1[12bv32] := FADD32(v785$1, FMUL32(v783$1, v784$1));
    $$c$2[12bv32] := FADD32(v785$2, FMUL32(v783$2, v784$2));
    v786$1 := $$a$1[3bv32];
    v786$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_257"} {:captureState "check_state_257"} {:sourceloc} {:sourceloc_num 1091} true;
    v787$1 := $$sgemmNN.bs[1bv1][268bv32];
    v787$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][268bv32];
    v788$1 := $$c$1[13bv32];
    v788$2 := $$c$2[13bv32];
    $$c$1[13bv32] := FADD32(v788$1, FMUL32(v786$1, v787$1));
    $$c$2[13bv32] := FADD32(v788$2, FMUL32(v786$2, v787$2));
    v789$1 := $$a$1[3bv32];
    v789$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_258"} {:captureState "check_state_258"} {:sourceloc} {:sourceloc_num 1095} true;
    v790$1 := $$sgemmNN.bs[1bv1][269bv32];
    v790$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][269bv32];
    v791$1 := $$c$1[14bv32];
    v791$2 := $$c$2[14bv32];
    $$c$1[14bv32] := FADD32(v791$1, FMUL32(v789$1, v790$1));
    $$c$2[14bv32] := FADD32(v791$2, FMUL32(v789$2, v790$2));
    v792$1 := $$a$1[3bv32];
    v792$2 := $$a$2[3bv32];
    assume {:do_not_predicate} {:check_id "check_state_259"} {:captureState "check_state_259"} {:sourceloc} {:sourceloc_num 1099} true;
    v793$1 := $$sgemmNN.bs[1bv1][270bv32];
    v793$2 := $$sgemmNN.bs[(if group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 then 1bv1 else 0bv1)][270bv32];
    v794$1 := $$c$1[15bv32];
    v794$2 := $$c$2[15bv32];
    $$c$1[15bv32] := FADD32(v794$1, FMUL32(v792$1, v793$1));
    $$c$2[15bv32] := FADD32(v794$2, FMUL32(v792$2, v793$2));
    v795 := BV32_ADD($counter.0, 16bv32);
    goto __partitioned_block_$falsebb0_2;

  __partitioned_block_$falsebb0_2:
    call {:sourceloc_num 1103} $bugle_barrier_duplicated_1(1bv1, 0bv1);
    v796 := BV32_SLT(v795, $k);
    goto $truebb1, $falsebb1;

  $falsebb1:
    assume {:partition} !v796 && !v796;
    $.02$1, $i1.0 := BV32_ADD(BV32_ADD(v2$1, v4$1), BV32_MUL(v3$1, $ldc)), 0bv32;
    $.02$2 := BV32_ADD(BV32_ADD(v2$2, v4$2), BV32_MUL(v3$2, $ldc));
    assume {:captureState "loop_entry_state_0_0"} true;
    goto $44;

  $44:
    assume {:captureState "loop_head_state_0"} true;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _WRITE_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:tag "groupSharedArraysDisjointAcrossGroups"} _READ_HAS_OCCURRED_$$sgemmNN.bs ==> group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2;
    assert {:block_sourceloc} {:sourceloc_num 1106} true;
    v797 := BV32_SLT($i1.0, 16bv32);
    goto $truebb2, $falsebb2;

  $falsebb2:
    assume {:partition} !v797 && !v797;
    return;

  $truebb2:
    assume {:partition} v797 && v797;
    v798$1 := $$c$1[$i1.0];
    v798$2 := $$c$2[$i1.0];
    call {:sourceloc} {:sourceloc_num 1109} _LOG_READ_$$C(true, $.02$1, $$C[$.02$1]);
    assume {:do_not_predicate} {:check_id "check_state_260"} {:captureState "check_state_260"} {:sourceloc} {:sourceloc_num 1109} true;
    call {:check_id "check_state_260"} {:sourceloc} {:sourceloc_num 1109} _CHECK_READ_$$C(true, $.02$2, $$C[$.02$2]);
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_READ_$$C"} true;
    v799$1 := $$C[$.02$1];
    v799$2 := $$C[$.02$2];
    call {:sourceloc} {:sourceloc_num 1110} _LOG_WRITE_$$C(true, $.02$1, FADD32(FMUL32($alpha, v798$1), FMUL32($beta, v799$1)), $$C[$.02$1]);
    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$C(true, $.02$2);
    assume {:do_not_predicate} {:check_id "check_state_261"} {:captureState "check_state_261"} {:sourceloc} {:sourceloc_num 1110} true;
    call {:check_id "check_state_261"} {:sourceloc} {:sourceloc_num 1110} _CHECK_WRITE_$$C(true, $.02$2, FADD32(FMUL32($alpha, v798$2), FMUL32($beta, v799$2)));
    assume {:captureState "call_return_state_0"} {:procedureName "_CHECK_WRITE_$$C"} true;
    $$C[$.02$1] := FADD32(FMUL32($alpha, v798$1), FMUL32($beta, v799$1));
    $$C[$.02$2] := FADD32(FMUL32($alpha, v798$2), FMUL32($beta, v799$2));
    $.02$1, $i1.0 := BV32_ADD($.02$1, $ldc), BV32_ADD($i1.0, 1bv32);
    $.02$2 := BV32_ADD($.02$2, $ldc);
    assume {:captureState "loop_back_edge_state_0_0"} true;
    goto $44;

  $truebb1:
    assume {:partition} v796 && v796;
    $counter.0, $.01$1, $.0$1 := v795, BV32_ADD($.01$1, 16bv32), BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD($.0$1, v12), v209), v406), BV32_MUL(4bv32, $lda));
    $.01$2, $.0$2 := BV32_ADD($.01$2, 16bv32), BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD($.0$2, v12), v209), v406), BV32_MUL(4bv32, $lda));
    assume {:captureState "loop_back_edge_state_1_0"} true;
    goto $5;

  $truebb0:
    assume {:partition} v6 && v6;
    havoc v7$1, v7$2;
    $$a$1[$ii.0] := v7$1;
    $$a$2[$ii.0] := v7$2;
    $ii.0 := BV32_ADD($ii.0, 1bv32);
    assume {:captureState "loop_back_edge_state_2_0"} true;
    goto $6;

  $truebb:
    assume {:partition} v5 && v5;
    $$c$1[$i.0] := 0bv32;
    $$c$2[$i.0] := 0bv32;
    $i.0 := BV32_ADD($i.0, 1bv32);
    assume {:captureState "loop_back_edge_state_3_0"} true;
    goto $1;
}



axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if group_size_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_x == 4bv32 then 1bv1 else 0bv1) != 0bv1;

axiom (if num_groups_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;

const {:local_id_z} local_id_z$1: bv32;

const {:local_id_z} local_id_z$2: bv32;

const {:group_id_z} group_id_z$1: bv32;

const {:group_id_z} group_id_z$2: bv32;

procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_0($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 0bv1;
  modifies $$sgemmNN.bs, $$C, _TRACKING;



procedure {:inline 1} {:safe_barrier} {:source_name "bugle_barrier"} {:barrier} $bugle_barrier_duplicated_1($0: bv1, $1: bv1);
  requires $0 == 1bv1;
  requires $1 == 0bv1;
  modifies $$sgemmNN.bs, $$C, _TRACKING;



const _WATCHED_VALUE_$$A: bv32;

procedure {:inline 1} _LOG_READ_$$A(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$A;



implementation {:inline 1} _LOG_READ_$$A(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$A := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$A == _value then true else _READ_HAS_OCCURRED_$$A);
    return;
}



procedure _CHECK_READ_$$A(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "A"} {:array "$$A"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$A);
  requires {:source_name "A"} {:array "$$A"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$A: bool;

procedure {:inline 1} _LOG_WRITE_$$A(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$A, _WRITE_READ_BENIGN_FLAG_$$A;



implementation {:inline 1} _LOG_WRITE_$$A(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$A := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$A == _value then true else _WRITE_HAS_OCCURRED_$$A);
    _WRITE_READ_BENIGN_FLAG_$$A := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$A == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$A);
    return;
}



procedure _CHECK_WRITE_$$A(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "A"} {:array "$$A"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$A != _value);
  requires {:source_name "A"} {:array "$$A"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$A != _value);
  requires {:source_name "A"} {:array "$$A"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$A(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$A;



implementation {:inline 1} _LOG_ATOMIC_$$A(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$A := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$A);
    return;
}



procedure _CHECK_ATOMIC_$$A(_P: bool, _offset: bv32);
  requires {:source_name "A"} {:array "$$A"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset);
  requires {:source_name "A"} {:array "$$A"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$A(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$A;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$A(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$A := (if _P && _WRITE_HAS_OCCURRED_$$A && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$A);
    return;
}



const _WATCHED_VALUE_$$B: bv32;

procedure {:inline 1} _LOG_READ_$$B(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$B;



implementation {:inline 1} _LOG_READ_$$B(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$B := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$B == _value then true else _READ_HAS_OCCURRED_$$B);
    return;
}



procedure _CHECK_READ_$$B(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "B"} {:array "$$B"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$B);
  requires {:source_name "B"} {:array "$$B"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$B: bool;

procedure {:inline 1} _LOG_WRITE_$$B(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$B, _WRITE_READ_BENIGN_FLAG_$$B;



implementation {:inline 1} _LOG_WRITE_$$B(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$B := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$B == _value then true else _WRITE_HAS_OCCURRED_$$B);
    _WRITE_READ_BENIGN_FLAG_$$B := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$B == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$B);
    return;
}



procedure _CHECK_WRITE_$$B(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "B"} {:array "$$B"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$B != _value);
  requires {:source_name "B"} {:array "$$B"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$B != _value);
  requires {:source_name "B"} {:array "$$B"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$B(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$B;



implementation {:inline 1} _LOG_ATOMIC_$$B(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$B := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$B);
    return;
}



procedure _CHECK_ATOMIC_$$B(_P: bool, _offset: bv32);
  requires {:source_name "B"} {:array "$$B"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset);
  requires {:source_name "B"} {:array "$$B"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$B(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$B;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$B(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$B := (if _P && _WRITE_HAS_OCCURRED_$$B && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$B);
    return;
}



const _WATCHED_VALUE_$$C: bv32;

procedure {:inline 1} _LOG_READ_$$C(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$C;



implementation {:inline 1} _LOG_READ_$$C(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$C := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$C == _value then true else _READ_HAS_OCCURRED_$$C);
    return;
}



procedure _CHECK_READ_$$C(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "C"} {:array "$$C"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$C);
  requires {:source_name "C"} {:array "$$C"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset);



var _WRITE_READ_BENIGN_FLAG_$$C: bool;

procedure {:inline 1} _LOG_WRITE_$$C(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$C, _WRITE_READ_BENIGN_FLAG_$$C;



implementation {:inline 1} _LOG_WRITE_$$C(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$C := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$C == _value then true else _WRITE_HAS_OCCURRED_$$C);
    _WRITE_READ_BENIGN_FLAG_$$C := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$C == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$C);
    return;
}



procedure _CHECK_WRITE_$$C(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "C"} {:array "$$C"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$C != _value);
  requires {:source_name "C"} {:array "$$C"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$C != _value);
  requires {:source_name "C"} {:array "$$C"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _LOG_ATOMIC_$$C(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$C;



implementation {:inline 1} _LOG_ATOMIC_$$C(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$C := (if _P && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$C);
    return;
}



procedure _CHECK_ATOMIC_$$C(_P: bool, _offset: bv32);
  requires {:source_name "C"} {:array "$$C"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset);
  requires {:source_name "C"} {:array "$$C"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$C(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$C;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$C(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$C := (if _P && _WRITE_HAS_OCCURRED_$$C && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$C);
    return;
}



const _WATCHED_VALUE_$$sgemmNN.bs: bv32;

procedure {:inline 1} _LOG_READ_$$sgemmNN.bs(_P: bool, _offset: bv32, _value: bv32);
  modifies _READ_HAS_OCCURRED_$$sgemmNN.bs;



implementation {:inline 1} _LOG_READ_$$sgemmNN.bs(_P: bool, _offset: bv32, _value: bv32)
{

  log_access_entry:
    _READ_HAS_OCCURRED_$$sgemmNN.bs := (if _P && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$sgemmNN.bs == _value then true else _READ_HAS_OCCURRED_$$sgemmNN.bs);
    return;
}



procedure _CHECK_READ_$$sgemmNN.bs(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "bs"} {:array "$$sgemmNN.bs"} {:race} {:write_read} !(_P && _WRITE_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset && _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2);
  requires {:source_name "bs"} {:array "$$sgemmNN.bs"} {:race} {:atomic_read} !(_P && _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2);



var _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs: bool;

procedure {:inline 1} _LOG_WRITE_$$sgemmNN.bs(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32);
  modifies _WRITE_HAS_OCCURRED_$$sgemmNN.bs, _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs;



implementation {:inline 1} _LOG_WRITE_$$sgemmNN.bs(_P: bool, _offset: bv32, _value: bv32, _value_old: bv32)
{

  log_access_entry:
    _WRITE_HAS_OCCURRED_$$sgemmNN.bs := (if _P && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$sgemmNN.bs == _value then true else _WRITE_HAS_OCCURRED_$$sgemmNN.bs);
    _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs := (if _P && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$sgemmNN.bs == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs);
    return;
}



procedure _CHECK_WRITE_$$sgemmNN.bs(_P: bool, _offset: bv32, _value: bv32);
  requires {:source_name "bs"} {:array "$$sgemmNN.bs"} {:race} {:write_write} !(_P && _WRITE_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$sgemmNN.bs != _value && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2);
  requires {:source_name "bs"} {:array "$$sgemmNN.bs"} {:race} {:read_write} !(_P && _READ_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$sgemmNN.bs != _value && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2);
  requires {:source_name "bs"} {:array "$$sgemmNN.bs"} {:race} {:atomic_write} !(_P && _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _LOG_ATOMIC_$$sgemmNN.bs(_P: bool, _offset: bv32);
  modifies _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs;



implementation {:inline 1} _LOG_ATOMIC_$$sgemmNN.bs(_P: bool, _offset: bv32)
{

  log_access_entry:
    _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs := (if _P && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && _TRACKING && _WATCHED_OFFSET == _offset then true else _ATOMIC_HAS_OCCURRED_$$sgemmNN.bs);
    return;
}



procedure _CHECK_ATOMIC_$$sgemmNN.bs(_P: bool, _offset: bv32);
  requires {:source_name "bs"} {:array "$$sgemmNN.bs"} {:race} {:write_atomic} !(_P && _WRITE_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2);
  requires {:source_name "bs"} {:array "$$sgemmNN.bs"} {:race} {:read_atomic} !(_P && _READ_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset && group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2);



procedure {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs(_P: bool, _offset: bv32);
  modifies _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs;



implementation {:inline 1} _UPDATE_WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs(_P: bool, _offset: bv32)
{

  _UPDATE_BENIGN_FLAG:
    _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs := (if _P && _WRITE_HAS_OCCURRED_$$sgemmNN.bs && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$sgemmNN.bs);
    return;
}



var _TRACKING: bool;

implementation {:inline 1} $bugle_barrier_duplicated_0($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$sgemmNN.bs;
    assume $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$sgemmNN.bs;
    assume $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$sgemmNN.bs;
    goto anon1;

  anon1:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !($0 != 0bv1 || $0 != 0bv1);
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$C;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$C;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$C;
    goto anon4;

  anon4:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$C;
    goto anon6;

  anon8_Then:
    assume {:partition} $0 != 0bv1 || $0 != 0bv1;
    havoc $$sgemmNN.bs;
    goto anon3;

  anon7_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



implementation {:inline 1} $bugle_barrier_duplicated_1($0: bv1, $1: bv1)
{

  __BarrierImpl:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} true;
    goto anon0;

  anon0:
    assume $0 != 0bv1 ==> !_READ_HAS_OCCURRED_$$sgemmNN.bs;
    assume $0 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$sgemmNN.bs;
    assume $0 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$sgemmNN.bs;
    goto anon1;

  anon1:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} !($0 != 0bv1 || $0 != 0bv1);
    goto anon3;

  anon3:
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_READ_HAS_OCCURRED_$$C;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_WRITE_HAS_OCCURRED_$$C;
    assume group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> $1 != 0bv1 ==> !_ATOMIC_HAS_OCCURRED_$$C;
    goto anon4;

  anon4:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} !(group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1));
    goto anon6;

  anon6:
    havoc _TRACKING;
    return;

  anon9_Then:
    assume {:partition} group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 && ($1 != 0bv1 || $1 != 0bv1);
    havoc $$C;
    goto anon6;

  anon8_Then:
    assume {:partition} $0 != 0bv1 || $0 != 0bv1;
    havoc $$sgemmNN.bs;
    goto anon3;

  anon7_Then:
    assume {:partition} false;
    goto __Disabled;

  __Disabled:
    return;
}



function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;

function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
